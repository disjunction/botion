
/*
---

name: Core

description: The core of MooTools, contains all the base functions and the Native and Hash implementations. Required by all the other scripts.

license: MIT-style license.

copyright: Copyright (c) 2006-2008 [Valerio Proietti](http://mad4milk.net/).

authors: The MooTools production team (http://mootools.net/developers/)

inspiration:
  - Class implementation inspired by [Base.js](http://dean.edwards.name/weblog/2006/03/base/) Copyright (c) 2006 Dean Edwards, [GNU Lesser General Public License](http://opensource.org/licenses/lgpl-license.php)
  - Some functionality inspired by [Prototype.js](http://prototypejs.org) Copyright (c) 2005-2007 Sam Stephenson, [MIT License](http://opensource.org/licenses/mit-license.php)

provides: [MooTools, Native, Hash.base, Array.each, $util]

...
*/

var MooTools = {
	'version': '1.2.5',
	'build': '008d8f0f2fcc2044e54fdd3635341aaab274e757'
};

var Native = function(options){
	options = options || {};
	var name = options.name;
	var legacy = options.legacy;
	var protect = options.protect;
	var methods = options.implement;
	var generics = options.generics;
	var initialize = options.initialize;
	var afterImplement = options.afterImplement || function(){};
	var object = initialize || legacy;
	generics = generics !== false;

	object.constructor = Native;
	object.$family = {name: 'native'};
	if (legacy && initialize) object.prototype = legacy.prototype;
	object.prototype.constructor = object;

	if (name){
		var family = name.toLowerCase();
		object.prototype.$family = {name: family};
		Native.typize(object, family);
	}

	var add = function(obj, name, method, force){
		if (!protect || force || !obj.prototype[name]) obj.prototype[name] = method;
		if (generics) Native.genericize(obj, name, protect);
		afterImplement.call(obj, name, method);
		return obj;
	};

	object.alias = function(a1, a2, a3){
		if (typeof a1 == 'string'){
			var pa1 = this.prototype[a1];
			if ((a1 = pa1)) return add(this, a2, a1, a3);
		}
		for (var a in a1) this.alias(a, a1[a], a2);
		return this;
	};

	object.implement = function(a1, a2, a3){
		if (typeof a1 == 'string') return add(this, a1, a2, a3);
		for (var p in a1) add(this, p, a1[p], a2);
		return this;
	};

	if (methods) object.implement(methods);

	return object;
};

Native.genericize = function(object, property, check){
	if ((!check || !object[property]) && typeof object.prototype[property] == 'function') object[property] = function(){
		var args = Array.prototype.slice.call(arguments);
		return object.prototype[property].apply(args.shift(), args);
	};
};

Native.implement = function(objects, properties){
	for (var i = 0, l = objects.length; i < l; i++) objects[i].implement(properties);
};

Native.typize = function(object, family){
	if (!object.type) object.type = function(item){
		return ($type(item) === family);
	};
};

(function(){
	var natives = {'Array': Array, 'Date': Date, 'Function': Function, 'Number': Number, 'RegExp': RegExp, 'String': String};
	for (var n in natives) new Native({name: n, initialize: natives[n], protect: true});

	var types = {'boolean': Boolean, 'native': Native, 'object': Object};
	for (var t in types) Native.typize(types[t], t);

	var generics = {
		'Array': ["concat", "indexOf", "join", "lastIndexOf", "pop", "push", "reverse", "shift", "slice", "sort", "splice", "toString", "unshift", "valueOf"],
		'String': ["charAt", "charCodeAt", "concat", "indexOf", "lastIndexOf", "match", "replace", "search", "slice", "split", "substr", "substring", "toLowerCase", "toUpperCase", "valueOf"]
	};
	for (var g in generics){
		for (var i = generics[g].length; i--;) Native.genericize(natives[g], generics[g][i], true);
	}
})();

var Hash = new Native({

	name: 'Hash',

	initialize: function(object){
		if ($type(object) == 'hash') object = $unlink(object.getClean());
		for (var key in object) this[key] = object[key];
		return this;
	}

});

Hash.implement({

	forEach: function(fn, bind){
		for (var key in this){
			if (this.hasOwnProperty(key)) fn.call(bind, this[key], key, this);
		}
	},

	getClean: function(){
		var clean = {};
		for (var key in this){
			if (this.hasOwnProperty(key)) clean[key] = this[key];
		}
		return clean;
	},

	getLength: function(){
		var length = 0;
		for (var key in this){
			if (this.hasOwnProperty(key)) length++;
		}
		return length;
	}

});

Hash.alias('forEach', 'each');

Array.implement({

	forEach: function(fn, bind){
		for (var i = 0, l = this.length; i < l; i++) fn.call(bind, this[i], i, this);
	}

});

Array.alias('forEach', 'each');

function $A(iterable){
	if (iterable.item){
		var l = iterable.length, array = new Array(l);
		while (l--) array[l] = iterable[l];
		return array;
	}
	return Array.prototype.slice.call(iterable);
};

function $arguments(i){
	return function(){
		return arguments[i];
	};
};

function $chk(obj){
	return !!(obj || obj === 0);
};

function $clear(timer){
	clearTimeout(timer);
	clearInterval(timer);
	return null;
};

function $defined(obj){
	return (obj != undefined);
};

function $each(iterable, fn, bind){
	var type = $type(iterable);
	((type == 'arguments' || type == 'collection' || type == 'array') ? Array : Hash).each(iterable, fn, bind);
};

function $empty(){};

function $extend(original, extended){
	for (var key in (extended || {})) original[key] = extended[key];
	return original;
};

function $H(object){
	return new Hash(object);
};

function $lambda(value){
	return ($type(value) == 'function') ? value : function(){
		return value;
	};
};

function $merge(){
	var args = Array.slice(arguments);
	args.unshift({});
	return $mixin.apply(null, args);
};

function $mixin(mix){
	for (var i = 1, l = arguments.length; i < l; i++){
		var object = arguments[i];
		if ($type(object) != 'object') continue;
		for (var key in object){
			var op = object[key], mp = mix[key];
			mix[key] = (mp && $type(op) == 'object' && $type(mp) == 'object') ? $mixin(mp, op) : $unlink(op);
		}
	}
	return mix;
};

function $pick(){
	for (var i = 0, l = arguments.length; i < l; i++){
		if (arguments[i] != undefined) return arguments[i];
	}
	return null;
};

function $random(min, max){
	return Math.floor(Math.random() * (max - min + 1) + min);
};

function $splat(obj){
	var type = $type(obj);
	return (type) ? ((type != 'array' && type != 'arguments') ? [obj] : obj) : [];
};

var $time = Date.now || function(){
	return +new Date;
};

function $try(){
	for (var i = 0, l = arguments.length; i < l; i++){
		try {
			return arguments[i]();
		} catch(e){}
	}
	return null;
};

function $type(obj){
	if (obj == undefined) return false;
	if (obj.$family) return (obj.$family.name == 'number' && !isFinite(obj)) ? false : obj.$family.name;
	if (obj.nodeName){
		switch (obj.nodeType){
			case 1: return 'element';
			case 3: return (/\S/).test(obj.nodeValue) ? 'textnode' : 'whitespace';
		}
	} else if (typeof obj.length == 'number'){
		if (obj.callee) return 'arguments';
		else if (obj.item) return 'collection';
	}
	return typeof obj;
};

function $unlink(object){
	var unlinked;
	switch ($type(object)){
		case 'object':
			unlinked = {};
			for (var p in object) unlinked[p] = $unlink(object[p]);
		break;
		case 'hash':
			unlinked = new Hash(object);
		break;
		case 'array':
			unlinked = [];
			for (var i = 0, l = object.length; i < l; i++) unlinked[i] = $unlink(object[i]);
		break;
		default: return object;
	}
	return unlinked;
};


/*
---

name: Array

description: Contains Array Prototypes like each, contains, and erase.

license: MIT-style license.

requires: [$util, Array.each]

provides: Array

...
*/

Array.implement({

	every: function(fn, bind){
		for (var i = 0, l = this.length; i < l; i++){
			if (!fn.call(bind, this[i], i, this)) return false;
		}
		return true;
	},

	filter: function(fn, bind){
		var results = [];
		for (var i = 0, l = this.length; i < l; i++){
			if (fn.call(bind, this[i], i, this)) results.push(this[i]);
		}
		return results;
	},

	clean: function(){
		return this.filter($defined);
	},

	indexOf: function(item, from){
		var len = this.length;
		for (var i = (from < 0) ? Math.max(0, len + from) : from || 0; i < len; i++){
			if (this[i] === item) return i;
		}
		return -1;
	},

	map: function(fn, bind){
		var results = [];
		for (var i = 0, l = this.length; i < l; i++) results[i] = fn.call(bind, this[i], i, this);
		return results;
	},

	some: function(fn, bind){
		for (var i = 0, l = this.length; i < l; i++){
			if (fn.call(bind, this[i], i, this)) return true;
		}
		return false;
	},

	associate: function(keys){
		var obj = {}, length = Math.min(this.length, keys.length);
		for (var i = 0; i < length; i++) obj[keys[i]] = this[i];
		return obj;
	},

	link: function(object){
		var result = {};
		for (var i = 0, l = this.length; i < l; i++){
			for (var key in object){
				if (object[key](this[i])){
					result[key] = this[i];
					delete object[key];
					break;
				}
			}
		}
		return result;
	},

	contains: function(item, from){
		return this.indexOf(item, from) != -1;
	},

	extend: function(array){
		for (var i = 0, j = array.length; i < j; i++) this.push(array[i]);
		return this;
	},
	
	getLast: function(){
		return (this.length) ? this[this.length - 1] : null;
	},

	getRandom: function(){
		return (this.length) ? this[$random(0, this.length - 1)] : null;
	},

	include: function(item){
		if (!this.contains(item)) this.push(item);
		return this;
	},

	combine: function(array){
		for (var i = 0, l = array.length; i < l; i++) this.include(array[i]);
		return this;
	},

	erase: function(item){
		for (var i = this.length; i--; i){
			if (this[i] === item) this.splice(i, 1);
		}
		return this;
	},

	empty: function(){
		this.length = 0;
		return this;
	},

	flatten: function(){
		var array = [];
		for (var i = 0, l = this.length; i < l; i++){
			var type = $type(this[i]);
			if (!type) continue;
			array = array.concat((type == 'array' || type == 'collection' || type == 'arguments') ? Array.flatten(this[i]) : this[i]);
		}
		return array;
	},

	hexToRgb: function(array){
		if (this.length != 3) return null;
		var rgb = this.map(function(value){
			if (value.length == 1) value += value;
			return value.toInt(16);
		});
		return (array) ? rgb : 'rgb(' + rgb + ')';
	},

	rgbToHex: function(array){
		if (this.length < 3) return null;
		if (this.length == 4 && this[3] == 0 && !array) return 'transparent';
		var hex = [];
		for (var i = 0; i < 3; i++){
			var bit = (this[i] - 0).toString(16);
			hex.push((bit.length == 1) ? '0' + bit : bit);
		}
		return (array) ? hex : '#' + hex.join('');
	}

});


/*
---

name: String

description: Contains String Prototypes like camelCase, capitalize, test, and toInt.

license: MIT-style license.

requires: Native

provides: String

...
*/

String.implement({

	test: function(regex, params){
		return ((typeof regex == 'string') ? new RegExp(regex, params) : regex).test(this);
	},

	contains: function(string, separator){
		return (separator) ? (separator + this + separator).indexOf(separator + string + separator) > -1 : this.indexOf(string) > -1;
	},

	trim: function(){
		return this.replace(/^\s+|\s+$/g, '');
	},

	clean: function(){
		return this.replace(/\s+/g, ' ').trim();
	},

	camelCase: function(){
		return this.replace(/-\D/g, function(match){
			return match.charAt(1).toUpperCase();
		});
	},

	hyphenate: function(){
		return this.replace(/[A-Z]/g, function(match){
			return ('-' + match.charAt(0).toLowerCase());
		});
	},

	capitalize: function(){
		return this.replace(/\b[a-z]/g, function(match){
			return match.toUpperCase();
		});
	},

	escapeRegExp: function(){
		return this.replace(/([-.*+?^${}()|[\]\/\\])/g, '\\$1');
	},

	toInt: function(base){
		return parseInt(this, base || 10);
	},

	toFloat: function(){
		return parseFloat(this);
	},

	hexToRgb: function(array){
		var hex = this.match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);
		return (hex) ? hex.slice(1).hexToRgb(array) : null;
	},

	rgbToHex: function(array){
		var rgb = this.match(/\d{1,3}/g);
		return (rgb) ? rgb.rgbToHex(array) : null;
	},

	stripScripts: function(option){
		var scripts = '';
		var text = this.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function(){
			scripts += arguments[1] + '\n';
			return '';
		});
		if (option === true) $exec(scripts);
		else if ($type(option) == 'function') option(scripts, text);
		return text;
	},

	substitute: function(object, regexp){
		return this.replace(regexp || (/\\?\{([^{}]+)\}/g), function(match, name){
			if (match.charAt(0) == '\\') return match.slice(1);
			return (object[name] != undefined) ? object[name] : '';
		});
	}

});


/*
---

name: Function

description: Contains Function Prototypes like create, bind, pass, and delay.

license: MIT-style license.

requires: [Native, $util]

provides: Function

...
*/

try {
	delete Function.prototype.bind;
} catch(e){}

Function.implement({

	extend: function(properties){
		for (var property in properties) this[property] = properties[property];
		return this;
	},

	create: function(options){
		var self = this;
		options = options || {};
		return function(event){
			var args = options.arguments;
			args = (args != undefined) ? $splat(args) : Array.slice(arguments, (options.event) ? 1 : 0);
			if (options.event) args = [event || window.event].extend(args);
			var returns = function(){
				return self.apply(options.bind || null, args);
			};
			if (options.delay) return setTimeout(returns, options.delay);
			if (options.periodical) return setInterval(returns, options.periodical);
			if (options.attempt) return $try(returns);
			return returns();
		};
	},

	run: function(args, bind){
		return this.apply(bind, $splat(args));
	},

	pass: function(args, bind){
		return this.create({bind: bind, arguments: args});
	},

	bind: function(bind, args){
		return this.create({bind: bind, arguments: args});
	},
	
	bindNew: function(bind){
		var self = this,
			args = (arguments.length > 1) ? Array.slice(arguments, 1) : null;
		
		return function(){
			if (!args && !arguments.length) return self.call(bind);
			if (args && arguments.length) return self.apply(bind, args.concat(Array.from(arguments)));
			return self.apply(bind, args || arguments);
		};
	},

	bindWithEvent: function(bind, args){
		return this.create({bind: bind, arguments: args, event: true});
	},

	attempt: function(args, bind){
		return this.create({bind: bind, arguments: args, attempt: true})();
	},

	delay: function(delay, bind, args){
		return this.create({bind: bind, arguments: args, delay: delay})();
	},

	periodical: function(periodical, bind, args){
		return this.create({bind: bind, arguments: args, periodical: periodical})();
	}

});


/*
---

name: Number

description: Contains Number Prototypes like limit, round, times, and ceil.

license: MIT-style license.

requires: [Native, $util]

provides: Number

...
*/

Number.implement({

	limit: function(min, max){
		return Math.min(max, Math.max(min, this));
	},

	round: function(precision){
		precision = Math.pow(10, precision || 0);
		return Math.round(this * precision) / precision;
	},

	times: function(fn, bind){
		for (var i = 0; i < this; i++) fn.call(bind, i, this);
	},

	toFloat: function(){
		return parseFloat(this);
	},

	toInt: function(base){
		return parseInt(this, base || 10);
	}

});

Number.alias('times', 'each');

(function(math){
	var methods = {};
	math.each(function(name){
		if (!Number[name]) methods[name] = function(){
			return Math[name].apply(null, [this].concat($A(arguments)));
		};
	});
	Number.implement(methods);
})(['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'max', 'min', 'pow', 'sin', 'sqrt', 'tan']);


/*
---

name: Hash

description: Contains Hash Prototypes. Provides a means for overcoming the JavaScript practical impossibility of extending native Objects.

license: MIT-style license.

requires: Hash.base

provides: Hash

...
*/

Hash.implement({

	has: Object.prototype.hasOwnProperty,

	keyOf: function(value){
		for (var key in this){
			if (this.hasOwnProperty(key) && this[key] === value) return key;
		}
		return null;
	},

	hasValue: function(value){
		return (Hash.keyOf(this, value) !== null);
	},

	extend: function(properties){
		Hash.each(properties || {}, function(value, key){
			Hash.set(this, key, value);
		}, this);
		return this;
	},

	combine: function(properties){
		Hash.each(properties || {}, function(value, key){
			Hash.include(this, key, value);
		}, this);
		return this;
	},

	erase: function(key){
		if (this.hasOwnProperty(key)) delete this[key];
		return this;
	},

	get: function(key){
		return (this.hasOwnProperty(key)) ? this[key] : null;
	},

	set: function(key, value){
		if (!this[key] || this.hasOwnProperty(key)) this[key] = value;
		return this;
	},

	empty: function(){
		Hash.each(this, function(value, key){
			delete this[key];
		}, this);
		return this;
	},

	include: function(key, value){
		if (this[key] == undefined) this[key] = value;
		return this;
	},

	map: function(fn, bind){
		var results = new Hash;
		Hash.each(this, function(value, key){
			results.set(key, fn.call(bind, value, key, this));
		}, this);
		return results;
	},

	filter: function(fn, bind){
		var results = new Hash;
		Hash.each(this, function(value, key){
			if (fn.call(bind, value, key, this)) results.set(key, value);
		}, this);
		return results;
	},

	every: function(fn, bind){
		for (var key in this){
			if (this.hasOwnProperty(key) && !fn.call(bind, this[key], key)) return false;
		}
		return true;
	},

	some: function(fn, bind){
		for (var key in this){
			if (this.hasOwnProperty(key) && fn.call(bind, this[key], key)) return true;
		}
		return false;
	},

	getKeys: function(){
		var keys = [];
		Hash.each(this, function(value, key){
			keys.push(key);
		});
		return keys;
	},

	getValues: function(){
		var values = [];
		Hash.each(this, function(value){
			values.push(value);
		});
		return values;
	},

	toQueryString: function(base){
		var queryString = [];
		Hash.each(this, function(value, key){
			if (base) key = base + '[' + key + ']';
			var result;
			switch ($type(value)){
				case 'object': result = Hash.toQueryString(value, key); break;
				case 'array':
					var qs = {};
					value.each(function(val, i){
						qs[i] = val;
					});
					result = Hash.toQueryString(qs, key);
				break;
				default: result = key + '=' + encodeURIComponent(value);
			}
			if (value != undefined) queryString.push(result);
		});

		return queryString.join('&');
	}

});

Hash.alias({keyOf: 'indexOf', hasValue: 'contains'});


/*
---

name: Class

description: Contains the Class Function for easily creating, extending, and implementing reusable Classes.

license: MIT-style license.

requires: [$util, Native, Array, String, Function, Number, Hash]

provides: Class

...
*/

function Class(params){
	
	if (params instanceof Function) params = {initialize: params};
	
	var newClass = function(){
		Object.reset(this);
		if (newClass._prototyping) return this;
		this._current = $empty;
		var value = (this.initialize) ? this.initialize.apply(this, arguments) : this;
		delete this._current; delete this.caller;
		return value;
	}.extend(this);
	
	newClass.implement(params);
	
	newClass.constructor = Class;
	newClass.prototype.constructor = newClass;

	return newClass;

};

Function.prototype.protect = function(){
	this._protected = true;
	return this;
};

Object.reset = function(object, key){
		
	if (key == null){
		for (var p in object) Object.reset(object, p);
		return object;
	}
	
	delete object[key];
	
	switch ($type(object[key])){
		case 'object':
			var F = function(){};
			F.prototype = object[key];
			var i = new F;
			object[key] = Object.reset(i);
		break;
		case 'array': object[key] = $unlink(object[key]); break;
	}
	
	return object;
	
};

new Native({name: 'Class', initialize: Class}).extend({

	instantiate: function(F){
		F._prototyping = true;
		var proto = new F;
		delete F._prototyping;
		return proto;
	},
	
	wrap: function(self, key, method){
		if (method._origin) method = method._origin;
		
		return function(){
			if (method._protected && this._current == null) throw new Error('The method "' + key + '" cannot be called.');
			var caller = this.caller, current = this._current;
			this.caller = current; this._current = arguments.callee;
			var result = method.apply(this, arguments);
			this._current = current; this.caller = caller;
			return result;
		}.extend({_owner: self, _origin: method, _name: key});

	}
	
});

Class.implement({
	
	implement: function(key, value){
		
		if ($type(key) == 'object'){
			for (var p in key) this.implement(p, key[p]);
			return this;
		}
		
		var mutator = Class.Mutators[key];
		
		if (mutator){
			value = mutator.call(this, value);
			if (value == null) return this;
		}
		
		var proto = this.prototype;

		switch ($type(value)){
			
			case 'function':
				if (value._hidden) return this;
				proto[key] = Class.wrap(this, key, value);
			break;
			
			case 'object':
				var previous = proto[key];
				if ($type(previous) == 'object') $mixin(previous, value);
				else proto[key] = $unlink(value);
			break;
			
			case 'array':
				proto[key] = $unlink(value);
			break;
			
			default: proto[key] = value;

		}
		
		return this;

	}
	
});

Class.Mutators = {
	
	Extends: function(parent){

		this.parent = parent;
		this.prototype = Class.instantiate(parent);

		this.implement('parent', function(){
			var name = this.caller._name, previous = this.caller._owner.parent.prototype[name];
			if (!previous) throw new Error('The method "' + name + '" has no parent.');
			return previous.apply(this, arguments);
		}.protect());

	},

	Implements: function(items){
		$splat(items).each(function(item){
			if (item instanceof Function) item = Class.instantiate(item);
			this.implement(item);
		}, this);

	}
	
};


/*
---

name: Class.Extras

description: Contains Utility Classes that can be implemented into your own Classes to ease the execution of many common tasks.

license: MIT-style license.

requires: Class

provides: [Chain, Events, Options, Class.Extras]

...
*/

var Chain = new Class({

	$chain: [],

	chain: function(){
		this.$chain.extend(Array.flatten(arguments));
		return this;
	},

	callChain: function(){
		return (this.$chain.length) ? this.$chain.shift().apply(this, arguments) : false;
	},

	clearChain: function(){
		this.$chain.empty();
		return this;
	}

});

var Events = new Class({

	$events: {},

	addEvent: function(type, fn, internal){
		type = Events.removeOn(type);
		if (fn != $empty){
			this.$events[type] = this.$events[type] || [];
			this.$events[type].include(fn);
			if (internal) fn.internal = true;
		}
		return this;
	},

	addEvents: function(events){
		for (var type in events) this.addEvent(type, events[type]);
		return this;
	},

	fireEvent: function(type, args, delay){
		type = Events.removeOn(type);
		if (!this.$events || !this.$events[type]) return this;
		this.$events[type].each(function(fn){
			fn.create({'bind': this, 'delay': delay, 'arguments': args})();
		}, this);
		return this;
	},

	removeEvent: function(type, fn){
		type = Events.removeOn(type);
		if (!this.$events[type]) return this;
		if (!fn.internal) this.$events[type].erase(fn);
		return this;
	},

	removeEvents: function(events){
		var type;
		if ($type(events) == 'object'){
			for (type in events) this.removeEvent(type, events[type]);
			return this;
		}
		if (events) events = Events.removeOn(events);
		for (type in this.$events){
			if (events && events != type) continue;
			var fns = this.$events[type];
			for (var i = fns.length; i--; i) this.removeEvent(type, fns[i]);
		}
		return this;
	}

});

Events.removeOn = function(string){
	return string.replace(/^on([A-Z])/, function(full, first){
		return first.toLowerCase();
	});
};

var Options = new Class({

	setOptions: function(){
		this.options = $merge.run([this.options].extend(arguments));
		if (!this.addEvent) return this;
		for (var option in this.options){
			if ($type(this.options[option]) != 'function' || !(/^on[A-Z]/).test(option)) continue;
			this.addEvent(option, this.options[option]);
			delete this.options[option];
		}
		return this;
	}

});


/*
---

name: Browser

description: The Browser Core. Contains Browser initialization, Window and Document, and the Browser Hash.

license: MIT-style license.

requires: [Native, $util]

provides: [Browser, Window, Document, $exec]

...
*/

var Browser = $merge({

	Engine: {name: 'unknown', version: 0},

	Platform: {name: (window.orientation != undefined) ? 'ipod' : (navigator.platform.match(/mac|win|linux/i) || ['other'])[0].toLowerCase()},

	Features: {xpath: !!(document.evaluate), air: !!(window.runtime), query: !!(document.querySelector)},

	Plugins: {},

	Engines: {

		presto: function(){
			return (!window.opera) ? false : ((arguments.callee.caller) ? 960 : ((document.getElementsByClassName) ? 950 : 925));
		},

		trident: function(){
			return (!window.ActiveXObject) ? false : ((window.XMLHttpRequest) ? ((document.querySelectorAll) ? 6 : 5) : 4);
		},

		gecko: function(){
			return (!document.getBoxObjectFor && window.mozInnerScreenX == null) ? false : ((document.getElementsByClassName) ? 19 : 18);
		},
		
		webkit: function(){
			return (navigator.taintEnabled) ? false : ((Browser.Features.xpath) ? ((Browser.Features.query) ? 525 : 420) : 419);
		}
	}

}, Browser || {});

Browser.Platform[Browser.Platform.name] = true;

Browser.detect = function(){

	for (var engine in this.Engines){
		var version = this.Engines[engine]();
		if (version){
			this.Engine = {name: engine, version: version};
			this.Engine[engine] = this.Engine[engine + version] = true;
			break;
		}
	}

	return {name: engine, version: version};

};

Browser.detect();

Browser.Request = function(){
	return $try(function(){
		return new XMLHttpRequest();
	}, function(){
		return new ActiveXObject('MSXML2.XMLHTTP');
	}, function(){
		return new ActiveXObject('Microsoft.XMLHTTP');
	});
};

Browser.Features.xhr = !!(Browser.Request());

Browser.Plugins.Flash = (function(){
	var version = ($try(function(){
		return navigator.plugins['Shockwave Flash'].description;
	}, function(){
		return new ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version');
	}) || '0 r0').match(/\d+/g);
	return {version: parseInt(version[0] || 0 + '.' + version[1], 10) || 0, build: parseInt(version[2], 10) || 0};
})();

function $exec(text){
	if (!text) return text;
	if (window.execScript){
		window.execScript(text);
	} else {
		var script = document.createElement('script');
		script.setAttribute('type', 'text/javascript');
		script[(Browser.Engine.webkit && Browser.Engine.version < 420) ? 'innerText' : 'text'] = text;
		document.head.appendChild(script);
		document.head.removeChild(script);
	}
	return text;
};

Native.UID = 1;

var $uid = (Browser.Engine.trident) ? function(item){
	return (item.uid || (item.uid = [Native.UID++]))[0];
} : function(item){
	return item.uid || (item.uid = Native.UID++);
};

var Window = new Native({

	name: 'Window',

	legacy: (Browser.Engine.trident) ? null: window.Window,

	initialize: function(win){
		$uid(win);
		if (!win.Element){
			win.Element = $empty;
			if (Browser.Engine.webkit) win.document.createElement("iframe"); //fixes safari 2
			win.Element.prototype = (Browser.Engine.webkit) ? window["[[DOMElement.prototype]]"] : {};
		}
		win.document.window = win;
		return $extend(win, Window.Prototype);
	},

	afterImplement: function(property, value){
		window[property] = Window.Prototype[property] = value;
	}

});

Window.Prototype = {$family: {name: 'window'}};

new Window(window);

var Document = new Native({

	name: 'Document',

	legacy: (Browser.Engine.trident) ? null: window.Document,

	initialize: function(doc){
		$uid(doc);
		doc.head = doc.getElementsByTagName('head')[0];
		doc.html = doc.getElementsByTagName('html')[0];
		if (Browser.Engine.trident && Browser.Engine.version <= 4) $try(function(){
			doc.execCommand("BackgroundImageCache", false, true);
		});
		if (Browser.Engine.trident) doc.window.attachEvent('onunload', function(){
			doc.window.detachEvent('onunload', arguments.callee);
			doc.head = doc.html = doc.window = null;
		});
		return $extend(doc, Document.Prototype);
	},

	afterImplement: function(property, value){
		document[property] = Document.Prototype[property] = value;
	}

});

Document.Prototype = {$family: {name: 'document'}};

new Document(document);


/*
---

name: Element

description: One of the most important items in MooTools. Contains the dollar function, the dollars function, and an handful of cross-browser, time-saver methods to let you easily work with HTML Elements.

license: MIT-style license.

requires: [Window, Document, Array, String, Function, Number, Hash]

provides: [Element, Elements, $, $$, Iframe]

...
*/

var Element = new Native({

	name: 'Element',

	legacy: window.Element,

	initialize: function(tag, props){
		var konstructor = Element.Constructors.get(tag);
		if (konstructor) return konstructor(props);
		if (typeof tag == 'string') return document.newElement(tag, props);
		return document.id(tag).set(props);
	},

	afterImplement: function(key, value){
		Element.Prototype[key] = value;
		if (Array[key]) return;
		Elements.implement(key, function(){
			var items = [], elements = true;
			for (var i = 0, j = this.length; i < j; i++){
				var returns = this[i][key].apply(this[i], arguments);
				items.push(returns);
				if (elements) elements = ($type(returns) == 'element');
			}
			return (elements) ? new Elements(items) : items;
		});
	}

});

Element.Prototype = {$family: {name: 'element'}};

Element.Constructors = new Hash;

var IFrame = new Native({

	name: 'IFrame',

	generics: false,

	initialize: function(){
		var params = Array.link(arguments, {properties: Object.type, iframe: $defined});
		var props = params.properties || {};
		var iframe = document.id(params.iframe);
		var onload = props.onload || $empty;
		delete props.onload;
		props.id = props.name = $pick(props.id, props.name, iframe ? (iframe.id || iframe.name) : 'IFrame_' + $time());
		iframe = new Element(iframe || 'iframe', props);
		var onFrameLoad = function(){
			var host = $try(function(){
				return iframe.contentWindow.location.host;
			});
			if (!host || host == window.location.host){
				var win = new Window(iframe.contentWindow);
				new Document(iframe.contentWindow.document);
				$extend(win.Element.prototype, Element.Prototype);
			}
			onload.call(iframe.contentWindow, iframe.contentWindow.document);
		};
		var contentWindow = $try(function(){
			return iframe.contentWindow;
		});
		((contentWindow && contentWindow.document.body) || window.frames[props.id]) ? onFrameLoad() : iframe.addListener('load', onFrameLoad);
		return iframe;
	}

});

var Elements = new Native({

	initialize: function(elements, options){
		options = $extend({ddup: true, cash: true}, options);
		elements = elements || [];
		if (options.ddup || options.cash){
			var uniques = {}, returned = [];
			for (var i = 0, l = elements.length; i < l; i++){
				var el = document.id(elements[i], !options.cash);
				if (options.ddup){
					if (uniques[el.uid]) continue;
					uniques[el.uid] = true;
				}
				if (el) returned.push(el);
			}
			elements = returned;
		}
		return (options.cash) ? $extend(elements, this) : elements;
	}

});

Elements.implement({

	filter: function(filter, bind){
		if (!filter) return this;
		return new Elements(Array.filter(this, (typeof filter == 'string') ? function(item){
			return item.match(filter);
		} : filter, bind));
	}

});

(function(){

/*<ltIE8>*/
var createElementAcceptsHTML;
try {
	var x = document.createElement('<input name=x>');
	createElementAcceptsHTML = (x.name == 'x');
} catch(e){}

var escapeQuotes = function(html){
	return ('' + html).replace(/&/g,'&amp;').replace(/"/g,'&quot;');
};
/*</ltIE8>*/

Document.implement({

	newElement: function(tag, props){
		if (props && props.checked != null) props.defaultChecked = props.checked;
		/*<ltIE8>*/// Fix for readonly name and type properties in IE < 8
		if (createElementAcceptsHTML && props){
			tag = '<' + tag;
			if (props.name) tag += ' name="' + escapeQuotes(props.name) + '"';
			if (props.type) tag += ' type="' + escapeQuotes(props.type) + '"';
			tag += '>';
			delete props.name;
			delete props.type;
		}
		/*</ltIE8>*/
		return this.id(this.createElement(tag)).set(props);
	},

	newTextNode: function(text){
		return this.createTextNode(text);
	},

	getDocument: function(){
		return this;
	},

	getWindow: function(){
		return this.window;
	},
	
	id: (function(){
		
		var types = {

			string: function(id, nocash, doc){
				id = doc.getElementById(id);
				return (id) ? types.element(id, nocash) : null;
			},
			
			element: function(el, nocash){
				$uid(el);
				if (!nocash && !el.$family && !(/^object|embed$/i).test(el.tagName)){
					var proto = Element.Prototype;
					for (var p in proto) el[p] = proto[p];
				};
				return el;
			},
			
			object: function(obj, nocash, doc){
				if (obj.toElement) return types.element(obj.toElement(doc), nocash);
				return null;
			}
			
		};

		types.textnode = types.whitespace = types.window = types.document = $arguments(0);
		
		return function(el, nocash, doc){
			if (el && el.$family && el.uid) return el;
			var type = $type(el);
			return (types[type]) ? types[type](el, nocash, doc || document) : null;
		};

	})()

});

})();

if (window.$ == null) Window.implement({
	$: function(el, nc){
		return document.id(el, nc, this.document);
	}
});

Window.implement({

	$$: function(selector){
		if (arguments.length == 1 && typeof selector == 'string') return this.document.getElements(selector);
		var elements = [];
		var args = Array.flatten(arguments);
		for (var i = 0, l = args.length; i < l; i++){
			var item = args[i];
			switch ($type(item)){
				case 'element': elements.push(item); break;
				case 'string': elements.extend(this.document.getElements(item, true));
			}
		}
		return new Elements(elements);
	},

	getDocument: function(){
		return this.document;
	},

	getWindow: function(){
		return this;
	}

});

Native.implement([Element, Document], {

	getElement: function(selector, nocash){
		return document.id(this.getElements(selector, true)[0] || null, nocash);
	},

	getElements: function(tags, nocash){
		tags = tags.split(',');
		var elements = [];
		var ddup = (tags.length > 1);
		tags.each(function(tag){
			var partial = this.getElementsByTagName(tag.trim());
			(ddup) ? elements.extend(partial) : elements = partial;
		}, this);
		return new Elements(elements, {ddup: ddup, cash: !nocash});
	}

});

(function(){

var collected = {}, storage = {};
var props = {input: 'checked', option: 'selected', textarea: (Browser.Engine.webkit && Browser.Engine.version < 420) ? 'innerHTML' : 'value'};

var get = function(uid){
	return (storage[uid] || (storage[uid] = {}));
};

var clean = function(item, retain){
	if (!item) return;
	var uid = item.uid;
	if (retain !== true) retain = false;
	if (Browser.Engine.trident){
		if (item.clearAttributes){
			var clone = retain && item.cloneNode(false);
			item.clearAttributes();
			if (clone) item.mergeAttributes(clone);
		} else if (item.removeEvents){
			item.removeEvents();
		}
		if ((/object/i).test(item.tagName)){
			for (var p in item){
				if (typeof item[p] == 'function') item[p] = $empty;
			}
			Element.dispose(item);
		}
	}	
	if (!uid) return;
	collected[uid] = storage[uid] = null;
};

var purge = function(){
	Hash.each(collected, clean);
	if (Browser.Engine.trident) $A(document.getElementsByTagName('object')).each(clean);
	if (window.CollectGarbage) CollectGarbage();
	collected = storage = null;
};

var walk = function(element, walk, start, match, all, nocash){
	var el = element[start || walk];
	var elements = [];
	while (el){
		if (el.nodeType == 1 && (!match || Element.match(el, match))){
			if (!all) return document.id(el, nocash);
			elements.push(el);
		}
		el = el[walk];
	}
	return (all) ? new Elements(elements, {ddup: false, cash: !nocash}) : null;
};

var attributes = {
	'html': 'innerHTML',
	'class': 'className',
	'for': 'htmlFor',
	'defaultValue': 'defaultValue',
	'text': (Browser.Engine.trident || (Browser.Engine.webkit && Browser.Engine.version < 420)) ? 'innerText' : 'textContent'
};
var bools = ['compact', 'nowrap', 'ismap', 'declare', 'noshade', 'checked', 'disabled', 'readonly', 'multiple', 'selected', 'noresize', 'defer'];
var camels = ['value', 'type', 'defaultValue', 'accessKey', 'cellPadding', 'cellSpacing', 'colSpan', 'frameBorder', 'maxLength', 'readOnly', 'rowSpan', 'tabIndex', 'useMap'];

bools = bools.associate(bools);

Hash.extend(attributes, bools);
Hash.extend(attributes, camels.associate(camels.map(String.toLowerCase)));

var inserters = {

	before: function(context, element){
		if (element.parentNode) element.parentNode.insertBefore(context, element);
	},

	after: function(context, element){
		if (!element.parentNode) return;
		var next = element.nextSibling;
		(next) ? element.parentNode.insertBefore(context, next) : element.parentNode.appendChild(context);
	},

	bottom: function(context, element){
		element.appendChild(context);
	},

	top: function(context, element){
		var first = element.firstChild;
		(first) ? element.insertBefore(context, first) : element.appendChild(context);
	}

};

inserters.inside = inserters.bottom;

Hash.each(inserters, function(inserter, where){

	where = where.capitalize();

	Element.implement('inject' + where, function(el){
		inserter(this, document.id(el, true));
		return this;
	});

	Element.implement('grab' + where, function(el){
		inserter(document.id(el, true), this);
		return this;
	});

});

Element.implement({

	set: function(prop, value){
		switch ($type(prop)){
			case 'object':
				for (var p in prop) this.set(p, prop[p]);
				break;
			case 'string':
				var property = Element.Properties.get(prop);
				(property && property.set) ? property.set.apply(this, Array.slice(arguments, 1)) : this.setProperty(prop, value);
		}
		return this;
	},

	get: function(prop){
		var property = Element.Properties.get(prop);
		return (property && property.get) ? property.get.apply(this, Array.slice(arguments, 1)) : this.getProperty(prop);
	},

	erase: function(prop){
		var property = Element.Properties.get(prop);
		(property && property.erase) ? property.erase.apply(this) : this.removeProperty(prop);
		return this;
	},

	setProperty: function(attribute, value){
		var key = attributes[attribute];
		if (value == undefined) return this.removeProperty(attribute);
		if (key && bools[attribute]) value = !!value;
		(key) ? this[key] = value : this.setAttribute(attribute, '' + value);
		return this;
	},

	setProperties: function(attributes){
		for (var attribute in attributes) this.setProperty(attribute, attributes[attribute]);
		return this;
	},

	getProperty: function(attribute){
		var key = attributes[attribute];
		var value = (key) ? this[key] : this.getAttribute(attribute, 2);
		return (bools[attribute]) ? !!value : (key) ? value : value || null;
	},

	getProperties: function(){
		var args = $A(arguments);
		return args.map(this.getProperty, this).associate(args);
	},

	removeProperty: function(attribute){
		var key = attributes[attribute];
		(key) ? this[key] = (key && bools[attribute]) ? false : '' : this.removeAttribute(attribute);
		return this;
	},

	removeProperties: function(){
		Array.each(arguments, this.removeProperty, this);
		return this;
	},

	hasClass: function(className){
		return this.className.contains(className, ' ');
	},

	addClass: function(className){
		if (!this.hasClass(className)) this.className = (this.className + ' ' + className).clean();
		return this;
	},

	removeClass: function(className){
		this.className = this.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)'), '$1');
		return this;
	},

	toggleClass: function(className){
		return this.hasClass(className) ? this.removeClass(className) : this.addClass(className);
	},

	adopt: function(){
		Array.flatten(arguments).each(function(element){
			element = document.id(element, true);
			if (element) this.appendChild(element);
		}, this);
		return this;
	},

	appendText: function(text, where){
		return this.grab(this.getDocument().newTextNode(text), where);
	},

	grab: function(el, where){
		inserters[where || 'bottom'](document.id(el, true), this);
		return this;
	},

	inject: function(el, where){
		inserters[where || 'bottom'](this, document.id(el, true));
		return this;
	},

	replaces: function(el){
		el = document.id(el, true);
		el.parentNode.replaceChild(this, el);
		return this;
	},

	wraps: function(el, where){
		el = document.id(el, true);
		return this.replaces(el).grab(el, where);
	},

	getPrevious: function(match, nocash){
		return walk(this, 'previousSibling', null, match, false, nocash);
	},

	getAllPrevious: function(match, nocash){
		return walk(this, 'previousSibling', null, match, true, nocash);
	},

	getNext: function(match, nocash){
		return walk(this, 'nextSibling', null, match, false, nocash);
	},

	getAllNext: function(match, nocash){
		return walk(this, 'nextSibling', null, match, true, nocash);
	},

	getFirst: function(match, nocash){
		return walk(this, 'nextSibling', 'firstChild', match, false, nocash);
	},

	getLast: function(match, nocash){
		return walk(this, 'previousSibling', 'lastChild', match, false, nocash);
	},

	getParent: function(match, nocash){
		return walk(this, 'parentNode', null, match, false, nocash);
	},

	getParents: function(match, nocash){
		return walk(this, 'parentNode', null, match, true, nocash);
	},
	
	getSiblings: function(match, nocash){
		return this.getParent().getChildren(match, nocash).erase(this);
	},

	getChildren: function(match, nocash){
		return walk(this, 'nextSibling', 'firstChild', match, true, nocash);
	},

	getWindow: function(){
		return this.ownerDocument.window;
	},

	getDocument: function(){
		return this.ownerDocument;
	},

	getElementById: function(id, nocash){
		var el = this.ownerDocument.getElementById(id);
		if (!el) return null;
		for (var parent = el.parentNode; parent != this; parent = parent.parentNode){
			if (!parent) return null;
		}
		return document.id(el, nocash);
	},

	getSelected: function(){
		return new Elements($A(this.options).filter(function(option){
			return option.selected;
		}));
	},

	getComputedStyle: function(property){
		if (this.currentStyle) return this.currentStyle[property.camelCase()];
		var computed = this.getDocument().defaultView.getComputedStyle(this, null);
		return (computed) ? computed.getPropertyValue([property.hyphenate()]) : null;
	},

	toQueryString: function(){
		var queryString = [];
		this.getElements('input, select, textarea', true).each(function(el){
			if (!el.name || el.disabled || el.type == 'submit' || el.type == 'reset' || el.type == 'file') return;
			var value = (el.tagName.toLowerCase() == 'select') ? Element.getSelected(el).map(function(opt){
				return opt.value;
			}) : ((el.type == 'radio' || el.type == 'checkbox') && !el.checked) ? null : el.value;
			$splat(value).each(function(val){
				if (typeof val != 'undefined') queryString.push(el.name + '=' + encodeURIComponent(val));
			});
		});
		return queryString.join('&');
	},

	clone: function(contents, keepid){
		contents = contents !== false;
		var clone = this.cloneNode(contents);
		var clean = function(node, element){
			if (!keepid) node.removeAttribute('id');
			if (Browser.Engine.trident){
				node.clearAttributes();
				node.mergeAttributes(element);
				node.removeAttribute('uid');
				if (node.options){
					var no = node.options, eo = element.options;
					for (var j = no.length; j--;) no[j].selected = eo[j].selected;
				}
			}
			var prop = props[element.tagName.toLowerCase()];
			if (prop && element[prop]) node[prop] = element[prop];
		};

		if (contents){
			var ce = clone.getElementsByTagName('*'), te = this.getElementsByTagName('*');
			for (var i = ce.length; i--;) clean(ce[i], te[i]);
		}

		clean(clone, this);
		return document.id(clone);
	},

	destroy: function(){
		Element.empty(this);
		Element.dispose(this);
		clean(this, true);
		return null;
	},

	empty: function(){
		$A(this.childNodes).each(function(node){
			Element.destroy(node);
		});
		return this;
	},

	dispose: function(){
		return (this.parentNode) ? this.parentNode.removeChild(this) : this;
	},

	hasChild: function(el){
		el = document.id(el, true);
		if (!el) return false;
		if (Browser.Engine.webkit && Browser.Engine.version < 420) return $A(this.getElementsByTagName(el.tagName)).contains(el);
		return (this.contains) ? (this != el && this.contains(el)) : !!(this.compareDocumentPosition(el) & 16);
	},

	match: function(tag){
		return (!tag || (tag == this) || (Element.get(this, 'tag') == tag));
	}

});

Native.implement([Element, Window, Document], {

	addListener: function(type, fn){
		if (type == 'unload'){
			var old = fn, self = this;
			fn = function(){
				self.removeListener('unload', fn);
				old();
			};
		} else {
			collected[this.uid] = this;
		}
		if (this.addEventListener) this.addEventListener(type, fn, false);
		else this.attachEvent('on' + type, fn);
		return this;
	},

	removeListener: function(type, fn){
		if (this.removeEventListener) this.removeEventListener(type, fn, false);
		else this.detachEvent('on' + type, fn);
		return this;
	},

	retrieve: function(property, dflt){
		var storage = get(this.uid), prop = storage[property];
		if (dflt != undefined && prop == undefined) prop = storage[property] = dflt;
		return $pick(prop);
	},

	store: function(property, value){
		var storage = get(this.uid);
		storage[property] = value;
		return this;
	},

	eliminate: function(property){
		var storage = get(this.uid);
		delete storage[property];
		return this;
	}

});

window.addListener('unload', purge);

})();

Element.Properties = new Hash;

Element.Properties.style = {

	set: function(style){
		this.style.cssText = style;
	},

	get: function(){
		return this.style.cssText;
	},

	erase: function(){
		this.style.cssText = '';
	}

};

Element.Properties.tag = {

	get: function(){
		return this.tagName.toLowerCase();
	}

};

Element.Properties.html = (function(){
	var wrapper = document.createElement('div');

	var translations = {
		table: [1, '<table>', '</table>'],
		select: [1, '<select>', '</select>'],
		tbody: [2, '<table><tbody>', '</tbody></table>'],
		tr: [3, '<table><tbody><tr>', '</tr></tbody></table>']
	};
	translations.thead = translations.tfoot = translations.tbody;

	var html = {
		set: function(){
			var html = Array.flatten(arguments).join('');
			var wrap = Browser.Engine.trident && translations[this.get('tag')];
			if (wrap){
				var first = wrapper;
				first.innerHTML = wrap[1] + html + wrap[2];
				for (var i = wrap[0]; i--;) first = first.firstChild;
				this.empty().adopt(first.childNodes);
			} else {
				this.innerHTML = html;
			}
		}
	};

	html.erase = html.set;

	return html;
})();

if (Browser.Engine.webkit && Browser.Engine.version < 420) Element.Properties.text = {
	get: function(){
		if (this.innerText) return this.innerText;
		var temp = this.ownerDocument.newElement('div', {html: this.innerHTML}).inject(this.ownerDocument.body);
		var text = temp.innerText;
		temp.destroy();
		return text;
	}
};


/*
---

name: Element.Dimensions

description: Contains methods to work with size, scroll, or positioning of Elements and the window object.

license: MIT-style license.

credits:
  - Element positioning based on the [qooxdoo](http://qooxdoo.org/) code and smart browser fixes, [LGPL License](http://www.gnu.org/licenses/lgpl.html).
  - Viewport dimensions based on [YUI](http://developer.yahoo.com/yui/) code, [BSD License](http://developer.yahoo.com/yui/license.html).

requires: Element

provides: Element.Dimensions

...
*/

(function(){

Element.implement({

	scrollTo: function(x, y){
		if (isBody(this)){
			this.getWindow().scrollTo(x, y);
		} else {
			this.scrollLeft = x;
			this.scrollTop = y;
		}
		return this;
	},

	getSize: function(){
		if (isBody(this)) return this.getWindow().getSize();
		return {x: this.offsetWidth, y: this.offsetHeight};
	},

	getScrollSize: function(){
		if (isBody(this)) return this.getWindow().getScrollSize();
		return {x: this.scrollWidth, y: this.scrollHeight};
	},

	getScroll: function(){
		if (isBody(this)) return this.getWindow().getScroll();
		return {x: this.scrollLeft, y: this.scrollTop};
	},

	getScrolls: function(){
		var element = this, position = {x: 0, y: 0};
		while (element && !isBody(element)){
			position.x += element.scrollLeft;
			position.y += element.scrollTop;
			element = element.parentNode;
		}
		return position;
	},

	getOffsetParent: function(){
		var element = this;
		if (isBody(element)) return null;
		if (!Browser.Engine.trident) return element.offsetParent;
		while ((element = element.parentNode) && !isBody(element)){
			if (styleString(element, 'position') != 'static') return element;
		}
		return null;
	},

	getOffsets: function(){
		if (this.getBoundingClientRect){
			var bound = this.getBoundingClientRect(),
				html = document.id(this.getDocument().documentElement),
				htmlScroll = html.getScroll(),
				elemScrolls = this.getScrolls(),
				elemScroll = this.getScroll(),
				isFixed = (styleString(this, 'position') == 'fixed');

			return {
				x: bound.left.toInt() + elemScrolls.x - elemScroll.x + ((isFixed) ? 0 : htmlScroll.x) - html.clientLeft,
				y: bound.top.toInt()  + elemScrolls.y - elemScroll.y + ((isFixed) ? 0 : htmlScroll.y) - html.clientTop
			};
		}

		var element = this, position = {x: 0, y: 0};
		if (isBody(this)) return position;

		while (element && !isBody(element)){
			position.x += element.offsetLeft;
			position.y += element.offsetTop;

			if (Browser.Engine.gecko){
				if (!borderBox(element)){
					position.x += leftBorder(element);
					position.y += topBorder(element);
				}
				var parent = element.parentNode;
				if (parent && styleString(parent, 'overflow') != 'visible'){
					position.x += leftBorder(parent);
					position.y += topBorder(parent);
				}
			} else if (element != this && Browser.Engine.webkit){
				position.x += leftBorder(element);
				position.y += topBorder(element);
			}

			element = element.offsetParent;
		}
		if (Browser.Engine.gecko && !borderBox(this)){
			position.x -= leftBorder(this);
			position.y -= topBorder(this);
		}
		return position;
	},

	getPosition: function(relative){
		if (isBody(this)) return {x: 0, y: 0};
		var offset = this.getOffsets(),
				scroll = this.getScrolls();
		var position = {
			x: offset.x - scroll.x,
			y: offset.y - scroll.y
		};
		var relativePosition = (relative && (relative = document.id(relative))) ? relative.getPosition() : {x: 0, y: 0};
		return {x: position.x - relativePosition.x, y: position.y - relativePosition.y};
	},

	getCoordinates: function(element){
		if (isBody(this)) return this.getWindow().getCoordinates();
		var position = this.getPosition(element),
				size = this.getSize();
		var obj = {
			left: position.x,
			top: position.y,
			width: size.x,
			height: size.y
		};
		obj.right = obj.left + obj.width;
		obj.bottom = obj.top + obj.height;
		return obj;
	},

	computePosition: function(obj){
		return {
			left: obj.x - styleNumber(this, 'margin-left'),
			top: obj.y - styleNumber(this, 'margin-top')
		};
	},

	setPosition: function(obj){
		return this.setStyles(this.computePosition(obj));
	}

});


Native.implement([Document, Window], {

	getSize: function(){
		if (Browser.Engine.presto || Browser.Engine.webkit){
			var win = this.getWindow();
			return {x: win.innerWidth, y: win.innerHeight};
		}
		var doc = getCompatElement(this);
		return {x: doc.clientWidth, y: doc.clientHeight};
	},

	getScroll: function(){
		var win = this.getWindow(), doc = getCompatElement(this);
		return {x: win.pageXOffset || doc.scrollLeft, y: win.pageYOffset || doc.scrollTop};
	},

	getScrollSize: function(){
		var doc = getCompatElement(this), min = this.getSize();
		return {x: Math.max(doc.scrollWidth, min.x), y: Math.max(doc.scrollHeight, min.y)};
	},

	getPosition: function(){
		return {x: 0, y: 0};
	},

	getCoordinates: function(){
		var size = this.getSize();
		return {top: 0, left: 0, bottom: size.y, right: size.x, height: size.y, width: size.x};
	}

});

// private methods

var styleString = Element.getComputedStyle;

function styleNumber(element, style){
	return styleString(element, style).toInt() || 0;
};

function borderBox(element){
	return styleString(element, '-moz-box-sizing') == 'border-box';
};

function topBorder(element){
	return styleNumber(element, 'border-top-width');
};

function leftBorder(element){
	return styleNumber(element, 'border-left-width');
};

function isBody(element){
	return (/^(?:body|html)$/i).test(element.tagName);
};

function getCompatElement(element){
	var doc = element.getDocument();
	return (!doc.compatMode || doc.compatMode == 'CSS1Compat') ? doc.html : doc.body;
};

})();

//aliases
Element.alias('setPosition', 'position'); //compatability

Native.implement([Window, Document, Element], {

	getHeight: function(){
		return this.getSize().y;
	},

	getWidth: function(){
		return this.getSize().x;
	},

	getScrollTop: function(){
		return this.getScroll().y;
	},

	getScrollLeft: function(){
		return this.getScroll().x;
	},

	getScrollHeight: function(){
		return this.getScrollSize().y;
	},

	getScrollWidth: function(){
		return this.getScrollSize().x;
	},

	getTop: function(){
		return this.getPosition().y;
	},

	getLeft: function(){
		return this.getPosition().x;
	}

});


/*
---

name: Event

description: Contains the Event Class, to make the event object cross-browser.

license: MIT-style license.

requires: [Window, Document, Hash, Array, Function, String]

provides: Event

...
*/

var Event = new Native({

	name: 'Event',

	initialize: function(event, win){
		win = win || window;
		var doc = win.document;
		event = event || win.event;
		if (event.$extended) return event;
		this.$extended = true;
		var type = event.type;
		var target = event.target || event.srcElement;
		while (target && target.nodeType == 3) target = target.parentNode;

		if (type.test(/key/)){
			var code = event.which || event.keyCode;
			var key = Event.Keys.keyOf(code);
			if (type == 'keydown'){
				var fKey = code - 111;
				if (fKey > 0 && fKey < 13) key = 'f' + fKey;
			}
			key = key || String.fromCharCode(code).toLowerCase();
		} else if (type.match(/(click|mouse|menu)/i)){
			doc = (!doc.compatMode || doc.compatMode == 'CSS1Compat') ? doc.html : doc.body;
			var page = {
				x: event.pageX || event.clientX + doc.scrollLeft,
				y: event.pageY || event.clientY + doc.scrollTop
			};
			var client = {
				x: (event.pageX) ? event.pageX - win.pageXOffset : event.clientX,
				y: (event.pageY) ? event.pageY - win.pageYOffset : event.clientY
			};
			if (type.match(/DOMMouseScroll|mousewheel/)){
				var wheel = (event.wheelDelta) ? event.wheelDelta / 120 : -(event.detail || 0) / 3;
			}
			var rightClick = (event.which == 3) || (event.button == 2);
			var related = null;
			if (type.match(/over|out/)){
				switch (type){
					case 'mouseover': related = event.relatedTarget || event.fromElement; break;
					case 'mouseout': related = event.relatedTarget || event.toElement;
				}
				if (!(function(){
					while (related && related.nodeType == 3) related = related.parentNode;
					return true;
				}).create({attempt: Browser.Engine.gecko})()) related = false;
			}
		}

		return $extend(this, {
			event: event,
			type: type,

			page: page,
			client: client,
			rightClick: rightClick,

			wheel: wheel,

			relatedTarget: related,
			target: target,

			code: code,
			key: key,

			shift: event.shiftKey,
			control: event.ctrlKey,
			alt: event.altKey,
			meta: event.metaKey
		});
	}

});

Event.Keys = new Hash({
	'enter': 13,
	'up': 38,
	'down': 40,
	'left': 37,
	'right': 39,
	'esc': 27,
	'space': 32,
	'backspace': 8,
	'tab': 9,
	'delete': 46
});

Event.implement({

	stop: function(){
		return this.stopPropagation().preventDefault();
	},

	stopPropagation: function(){
		if (this.event.stopPropagation) this.event.stopPropagation();
		else this.event.cancelBubble = true;
		return this;
	},

	preventDefault: function(){
		if (this.event.preventDefault) this.event.preventDefault();
		else this.event.returnValue = false;
		return this;
	}

});


/*
---

name: Element.Event

description: Contains Element methods for dealing with events. This file also includes mouseenter and mouseleave custom Element Events.

license: MIT-style license.

requires: [Element, Event]

provides: Element.Event

...
*/

Element.Properties.events = {set: function(events){
	this.addEvents(events);
}};

Native.implement([Element, Window, Document], {

	addEvent: function(type, fn){
		var events = this.retrieve('events', {});
		events[type] = events[type] || {'keys': [], 'values': []};
		if (events[type].keys.contains(fn)) return this;
		events[type].keys.push(fn);
		var realType = type, custom = Element.Events.get(type), condition = fn, self = this;
		if (custom){
			if (custom.onAdd) custom.onAdd.call(this, fn);
			if (custom.condition){
				condition = function(event){
					if (custom.condition.call(this, event)) return fn.call(this, event);
					return true;
				};
			}
			realType = custom.base || realType;
		}
		var defn = function(){
			return fn.call(self);
		};
		var nativeEvent = Element.NativeEvents[realType];
		if (nativeEvent){
			if (nativeEvent == 2){
				defn = function(event){
					event = new Event(event, self.getWindow());
					if (condition.call(self, event) === false) event.stop();
				};
			}
			this.addListener(realType, defn);
		}
		events[type].values.push(defn);
		return this;
	},

	removeEvent: function(type, fn){
		var events = this.retrieve('events');
		if (!events || !events[type]) return this;
		var pos = events[type].keys.indexOf(fn);
		if (pos == -1) return this;
		events[type].keys.splice(pos, 1);
		var value = events[type].values.splice(pos, 1)[0];
		var custom = Element.Events.get(type);
		if (custom){
			if (custom.onRemove) custom.onRemove.call(this, fn);
			type = custom.base || type;
		}
		return (Element.NativeEvents[type]) ? this.removeListener(type, value) : this;
	},

	addEvents: function(events){
		for (var event in events) this.addEvent(event, events[event]);
		return this;
	},

	removeEvents: function(events){
		var type;
		if ($type(events) == 'object'){
			for (type in events) this.removeEvent(type, events[type]);
			return this;
		}
		var attached = this.retrieve('events');
		if (!attached) return this;
		if (!events){
			for (type in attached) this.removeEvents(type);
			this.eliminate('events');
		} else if (attached[events]){
			while (attached[events].keys[0]) this.removeEvent(events, attached[events].keys[0]);
			attached[events] = null;
		}
		return this;
	},

	fireEvent: function(type, args, delay){
		var events = this.retrieve('events');
		if (!events || !events[type]) return this;
		events[type].keys.each(function(fn){
			fn.create({'bind': this, 'delay': delay, 'arguments': args})();
		}, this);
		return this;
	},

	cloneEvents: function(from, type){
		from = document.id(from);
		var fevents = from.retrieve('events');
		if (!fevents) return this;
		if (!type){
			for (var evType in fevents) this.cloneEvents(from, evType);
		} else if (fevents[type]){
			fevents[type].keys.each(function(fn){
				this.addEvent(type, fn);
			}, this);
		}
		return this;
	}

});

// IE9
try {
	if (typeof HTMLElement != 'undefined')
		HTMLElement.prototype.fireEvent = Element.prototype.fireEvent;
} catch(e){}

Element.NativeEvents = {
	click: 2, dblclick: 2, mouseup: 2, mousedown: 2, contextmenu: 2, //mouse buttons
	mousewheel: 2, DOMMouseScroll: 2, //mouse wheel
	mouseover: 2, mouseout: 2, mousemove: 2, selectstart: 2, selectend: 2, //mouse movement
	keydown: 2, keypress: 2, keyup: 2, //keyboard
	focus: 2, blur: 2, change: 2, reset: 2, select: 2, submit: 2, //form elements
	load: 1, unload: 1, beforeunload: 2, resize: 1, move: 1, DOMContentLoaded: 1, readystatechange: 1, //window
	error: 1, abort: 1, scroll: 1 //misc
};

(function(){

var $check = function(event){
	var related = event.relatedTarget;
	if (related == undefined) return true;
	if (related === false) return false;
	return ($type(this) != 'document' && related != this && related.prefix != 'xul' && !this.hasChild(related));
};

Element.Events = new Hash({

	mouseenter: {
		base: 'mouseover',
		condition: $check
	},

	mouseleave: {
		base: 'mouseout',
		condition: $check
	},

	mousewheel: {
		base: (Browser.Engine.gecko) ? 'DOMMouseScroll' : 'mousewheel'
	}

});

})();


/*
---

name: Element.Style

description: Contains methods for interacting with the styles of Elements in a fashionable way.

license: MIT-style license.

requires: Element

provides: Element.Style

...
*/

Element.Properties.styles = {set: function(styles){
	this.setStyles(styles);
}};

Element.Properties.opacity = {

	set: function(opacity, novisibility){
		if (!novisibility){
			if (opacity == 0){
				if (this.style.visibility != 'hidden') this.style.visibility = 'hidden';
			} else {
				if (this.style.visibility != 'visible') this.style.visibility = 'visible';
			}
		}
		if (!this.currentStyle || !this.currentStyle.hasLayout) this.style.zoom = 1;
		if (Browser.Engine.trident) this.style.filter = (opacity == 1) ? '' : 'alpha(opacity=' + opacity * 100 + ')';
		this.style.opacity = opacity;
		this.store('opacity', opacity);
	},

	get: function(){
		return this.retrieve('opacity', 1);
	}

};

Element.implement({

	setOpacity: function(value){
		return this.set('opacity', value, true);
	},

	getOpacity: function(){
		return this.get('opacity');
	},

	setStyle: function(property, value){
		switch (property){
			case 'opacity': return this.set('opacity', parseFloat(value));
			case 'float': property = (Browser.Engine.trident) ? 'styleFloat' : 'cssFloat';
		}
		property = property.camelCase();
		if ($type(value) != 'string'){
			var map = (Element.Styles.get(property) || '@').split(' ');
			value = $splat(value).map(function(val, i){
				if (!map[i]) return '';
				return ($type(val) == 'number') ? map[i].replace('@', Math.round(val)) : val;
			}).join(' ');
		} else if (value == String(Number(value))){
			value = Math.round(value);
		}
		this.style[property] = value;
		return this;
	},

	getStyle: function(property){
		switch (property){
			case 'opacity': return this.get('opacity');
			case 'float': property = (Browser.Engine.trident) ? 'styleFloat' : 'cssFloat';
		}
		property = property.camelCase();
		var result = this.style[property];
		if (!$chk(result)){
			result = [];
			for (var style in Element.ShortStyles){
				if (property != style) continue;
				for (var s in Element.ShortStyles[style]) result.push(this.getStyle(s));
				return result.join(' ');
			}
			result = this.getComputedStyle(property);
		}
		if (result){
			result = String(result);
			var color = result.match(/rgba?\([\d\s,]+\)/);
			if (color) result = result.replace(color[0], color[0].rgbToHex());
		}
		if (Browser.Engine.presto || (Browser.Engine.trident && !$chk(parseInt(result, 10)))){
			if (property.test(/^(height|width)$/)){
				var values = (property == 'width') ? ['left', 'right'] : ['top', 'bottom'], size = 0;
				values.each(function(value){
					size += this.getStyle('border-' + value + '-width').toInt() + this.getStyle('padding-' + value).toInt();
				}, this);
				return this['offset' + property.capitalize()] - size + 'px';
			}
			if ((Browser.Engine.presto) && String(result).test('px')) return result;
			if (property.test(/(border(.+)Width|margin|padding)/)) return '0px';
		}
		return result;
	},

	setStyles: function(styles){
		for (var style in styles) this.setStyle(style, styles[style]);
		return this;
	},

	getStyles: function(){
		var result = {};
		Array.flatten(arguments).each(function(key){
			result[key] = this.getStyle(key);
		}, this);
		return result;
	}

});

Element.Styles = new Hash({
	left: '@px', top: '@px', bottom: '@px', right: '@px',
	width: '@px', height: '@px', maxWidth: '@px', maxHeight: '@px', minWidth: '@px', minHeight: '@px',
	backgroundColor: 'rgb(@, @, @)', backgroundPosition: '@px @px', color: 'rgb(@, @, @)',
	fontSize: '@px', letterSpacing: '@px', lineHeight: '@px', clip: 'rect(@px @px @px @px)',
	margin: '@px @px @px @px', padding: '@px @px @px @px', border: '@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)',
	borderWidth: '@px @px @px @px', borderStyle: '@ @ @ @', borderColor: 'rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)',
	zIndex: '@', 'zoom': '@', fontWeight: '@', textIndent: '@px', opacity: '@'
});

Element.ShortStyles = {margin: {}, padding: {}, border: {}, borderWidth: {}, borderStyle: {}, borderColor: {}};

['Top', 'Right', 'Bottom', 'Left'].each(function(direction){
	var Short = Element.ShortStyles;
	var All = Element.Styles;
	['margin', 'padding'].each(function(style){
		var sd = style + direction;
		Short[style][sd] = All[sd] = '@px';
	});
	var bd = 'border' + direction;
	Short.border[bd] = All[bd] = '@px @ rgb(@, @, @)';
	var bdw = bd + 'Width', bds = bd + 'Style', bdc = bd + 'Color';
	Short[bd] = {};
	Short.borderWidth[bdw] = Short[bd][bdw] = All[bdw] = '@px';
	Short.borderStyle[bds] = Short[bd][bds] = All[bds] = '@';
	Short.borderColor[bdc] = Short[bd][bdc] = All[bdc] = 'rgb(@, @, @)';
});


/*
---

name: Fx

description: Contains the basic animation logic to be extended by all other Fx Classes.

license: MIT-style license.

requires: [Chain, Events, Options]

provides: Fx

...
*/

var Fx = new Class({

	Implements: [Chain, Events, Options],

	options: {
		/*
		onStart: $empty,
		onCancel: $empty,
		onComplete: $empty,
		*/
		fps: 50,
		unit: false,
		duration: 500,
		link: 'ignore'
	},

	initialize: function(options){
		this.subject = this.subject || this;
		this.setOptions(options);
		this.options.duration = Fx.Durations[this.options.duration] || this.options.duration.toInt();
		var wait = this.options.wait;
		if (wait === false) this.options.link = 'cancel';
	},

	getTransition: function(){
		return function(p){
			return -(Math.cos(Math.PI * p) - 1) / 2;
		};
	},

	step: function(){
		var time = $time();
		if (time < this.time + this.options.duration){
			var delta = this.transition((time - this.time) / this.options.duration);
			this.set(this.compute(this.from, this.to, delta));
		} else {
			this.set(this.compute(this.from, this.to, 1));
			this.complete();
		}
	},

	set: function(now){
		return now;
	},

	compute: function(from, to, delta){
		return Fx.compute(from, to, delta);
	},

	check: function(){
		if (!this.timer) return true;
		switch (this.options.link){
			case 'cancel': this.cancel(); return true;
			case 'chain': this.chain(this.caller.bind(this, arguments)); return false;
		}
		return false;
	},

	start: function(from, to){
		if (!this.check(from, to)) return this;
		this.from = from;
		this.to = to;
		this.time = 0;
		this.transition = this.getTransition();
		this.startTimer();
		this.onStart();
		return this;
	},

	complete: function(){
		if (this.stopTimer()) this.onComplete();
		return this;
	},

	cancel: function(){
		if (this.stopTimer()) this.onCancel();
		return this;
	},

	onStart: function(){
		this.fireEvent('start', this.subject);
	},

	onComplete: function(){
		this.fireEvent('complete', this.subject);
		if (!this.callChain()) this.fireEvent('chainComplete', this.subject);
	},

	onCancel: function(){
		this.fireEvent('cancel', this.subject).clearChain();
	},

	pause: function(){
		this.stopTimer();
		return this;
	},

	resume: function(){
		this.startTimer();
		return this;
	},

	stopTimer: function(){
		if (!this.timer) return false;
		this.time = $time() - this.time;
		this.timer = $clear(this.timer);
		return true;
	},

	startTimer: function(){
		if (this.timer) return false;
		this.time = $time() - this.time;
		this.timer = this.step.periodical(Math.round(1000 / this.options.fps), this);
		return true;
	}

});

Fx.compute = function(from, to, delta){
	return (to - from) * delta + from;
};

Fx.Durations = {'short': 250, 'normal': 500, 'long': 1000};


/*
---

name: Fx.CSS

description: Contains the CSS animation logic. Used by Fx.Tween, Fx.Morph, Fx.Elements.

license: MIT-style license.

requires: [Fx, Element.Style]

provides: Fx.CSS

...
*/

Fx.CSS = new Class({

	Extends: Fx,

	//prepares the base from/to object

	prepare: function(element, property, values){
		values = $splat(values);
		var values1 = values[1];
		if (!$chk(values1)){
			values[1] = values[0];
			values[0] = element.getStyle(property);
		}
		var parsed = values.map(this.parse);
		return {from: parsed[0], to: parsed[1]};
	},

	//parses a value into an array

	parse: function(value){
		value = $lambda(value)();
		value = (typeof value == 'string') ? value.split(' ') : $splat(value);
		return value.map(function(val){
			val = String(val);
			var found = false;
			Fx.CSS.Parsers.each(function(parser, key){
				if (found) return;
				var parsed = parser.parse(val);
				if ($chk(parsed)) found = {value: parsed, parser: parser};
			});
			found = found || {value: val, parser: Fx.CSS.Parsers.String};
			return found;
		});
	},

	//computes by a from and to prepared objects, using their parsers.

	compute: function(from, to, delta){
		var computed = [];
		(Math.min(from.length, to.length)).times(function(i){
			computed.push({value: from[i].parser.compute(from[i].value, to[i].value, delta), parser: from[i].parser});
		});
		computed.$family = {name: 'fx:css:value'};
		return computed;
	},

	//serves the value as settable

	serve: function(value, unit){
		if ($type(value) != 'fx:css:value') value = this.parse(value);
		var returned = [];
		value.each(function(bit){
			returned = returned.concat(bit.parser.serve(bit.value, unit));
		});
		return returned;
	},

	//renders the change to an element

	render: function(element, property, value, unit){
		element.setStyle(property, this.serve(value, unit));
	},

	//searches inside the page css to find the values for a selector

	search: function(selector){
		if (Fx.CSS.Cache[selector]) return Fx.CSS.Cache[selector];
		var to = {};
		Array.each(document.styleSheets, function(sheet, j){
			var href = sheet.href;
			if (href && href.contains('://') && !href.contains(document.domain)) return;
			var rules = sheet.rules || sheet.cssRules;
			Array.each(rules, function(rule, i){
				if (!rule.style) return;
				var selectorText = (rule.selectorText) ? rule.selectorText.replace(/^\w+/, function(m){
					return m.toLowerCase();
				}) : null;
				if (!selectorText || !selectorText.test('^' + selector + '$')) return;
				Element.Styles.each(function(value, style){
					if (!rule.style[style] || Element.ShortStyles[style]) return;
					value = String(rule.style[style]);
					to[style] = (value.test(/^rgb/)) ? value.rgbToHex() : value;
				});
			});
		});
		return Fx.CSS.Cache[selector] = to;
	}

});

Fx.CSS.Cache = {};

Fx.CSS.Parsers = new Hash({

	Color: {
		parse: function(value){
			if (value.match(/^#[0-9a-f]{3,6}$/i)) return value.hexToRgb(true);
			return ((value = value.match(/(\d+),\s*(\d+),\s*(\d+)/))) ? [value[1], value[2], value[3]] : false;
		},
		compute: function(from, to, delta){
			return from.map(function(value, i){
				return Math.round(Fx.compute(from[i], to[i], delta));
			});
		},
		serve: function(value){
			return value.map(Number);
		}
	},

	Number: {
		parse: parseFloat,
		compute: Fx.compute,
		serve: function(value, unit){
			return (unit) ? value + unit : value;
		}
	},

	String: {
		parse: $lambda(false),
		compute: $arguments(1),
		serve: $arguments(0)
	}

});


/*
---

name: Fx.Morph

description: Formerly Fx.Styles, effect to transition any number of CSS properties for an element using an object of rules, or CSS based selector rules.

license: MIT-style license.

requires: Fx.CSS

provides: Fx.Morph

...
*/

Fx.Morph = new Class({

	Extends: Fx.CSS,

	initialize: function(element, options){
		this.element = this.subject = document.id(element);
		this.parent(options);
	},

	set: function(now){
		if (typeof now == 'string') now = this.search(now);
		for (var p in now) this.render(this.element, p, now[p], this.options.unit);
		return this;
	},

	compute: function(from, to, delta){
		var now = {};
		for (var p in from) now[p] = this.parent(from[p], to[p], delta);
		return now;
	},

	start: function(properties){
		if (!this.check(properties)) return this;
		if (typeof properties == 'string') properties = this.search(properties);
		var from = {}, to = {};
		for (var p in properties){
			var parsed = this.prepare(this.element, p, properties[p]);
			from[p] = parsed.from;
			to[p] = parsed.to;
		}
		return this.parent(from, to);
	}

});

Element.Properties.morph = {

	set: function(options){
		var morph = this.retrieve('morph');
		if (morph) morph.cancel();
		return this.eliminate('morph').store('morph:options', $extend({link: 'cancel'}, options));
	},

	get: function(options){
		if (options || !this.retrieve('morph')){
			if (options || !this.retrieve('morph:options')) this.set('morph', options);
			this.store('morph', new Fx.Morph(this, this.retrieve('morph:options')));
		}
		return this.retrieve('morph');
	}

};

Element.implement({

	morph: function(props){
		this.get('morph').start(props);
		return this;
	}

});


/*
---

name: Fx.Transitions

description: Contains a set of advanced transitions to be used with any of the Fx Classes.

license: MIT-style license.

credits: Easing Equations by Robert Penner, <http://www.robertpenner.com/easing/>, modified and optimized to be used with MooTools.

requires: Fx

provides: Fx.Transitions

...
*/

Fx.implement({

	getTransition: function(){
		var trans = this.options.transition || Fx.Transitions.Sine.easeInOut;
		if (typeof trans == 'string'){
			var data = trans.split(':');
			trans = Fx.Transitions;
			trans = trans[data[0]] || trans[data[0].capitalize()];
			if (data[1]) trans = trans['ease' + data[1].capitalize() + (data[2] ? data[2].capitalize() : '')];
		}
		return trans;
	}

});

Fx.Transition = function(transition, params){
	params = $splat(params);
	return $extend(transition, {
		easeIn: function(pos){
			return transition(pos, params);
		},
		easeOut: function(pos){
			return 1 - transition(1 - pos, params);
		},
		easeInOut: function(pos){
			return (pos <= 0.5) ? transition(2 * pos, params) / 2 : (2 - transition(2 * (1 - pos), params)) / 2;
		}
	});
};

Fx.Transitions = new Hash({

	linear: $arguments(0)

});

Fx.Transitions.extend = function(transitions){
	for (var transition in transitions) Fx.Transitions[transition] = new Fx.Transition(transitions[transition]);
};

Fx.Transitions.extend({

	Pow: function(p, x){
		return Math.pow(p, x[0] || 6);
	},

	Expo: function(p){
		return Math.pow(2, 8 * (p - 1));
	},

	Circ: function(p){
		return 1 - Math.sin(Math.acos(p));
	},

	Sine: function(p){
		return 1 - Math.sin((1 - p) * Math.PI / 2);
	},

	Back: function(p, x){
		x = x[0] || 1.618;
		return Math.pow(p, 2) * ((x + 1) * p - x);
	},

	Bounce: function(p){
		var value;
		for (var a = 0, b = 1; 1; a += b, b /= 2){
			if (p >= (7 - 4 * a) / 11){
				value = b * b - Math.pow((11 - 6 * a - 11 * p) / 4, 2);
				break;
			}
		}
		return value;
	},

	Elastic: function(p, x){
		return Math.pow(2, 10 * --p) * Math.cos(20 * p * Math.PI * (x[0] || 1) / 3);
	}

});

['Quad', 'Cubic', 'Quart', 'Quint'].each(function(transition, i){
	Fx.Transitions[transition] = new Fx.Transition(function(p){
		return Math.pow(p, [i + 2]);
	});
});


/*
---

name: Fx.Tween

description: Formerly Fx.Style, effect to transition any CSS property for an element.

license: MIT-style license.

requires: Fx.CSS

provides: [Fx.Tween, Element.fade, Element.highlight]

...
*/

Fx.Tween = new Class({

	Extends: Fx.CSS,

	initialize: function(element, options){
		this.element = this.subject = document.id(element);
		this.parent(options);
	},

	set: function(property, now){
		if (arguments.length == 1){
			now = property;
			property = this.property || this.options.property;
		}
		this.render(this.element, property, now, this.options.unit);
		return this;
	},

	start: function(property, from, to){
		if (!this.check(property, from, to)) return this;
		var args = Array.flatten(arguments);
		this.property = this.options.property || args.shift();
		var parsed = this.prepare(this.element, this.property, args);
		return this.parent(parsed.from, parsed.to);
	}

});

Element.Properties.tween = {

	set: function(options){
		var tween = this.retrieve('tween');
		if (tween) tween.cancel();
		return this.eliminate('tween').store('tween:options', $extend({link: 'cancel'}, options));
	},

	get: function(options){
		if (options || !this.retrieve('tween')){
			if (options || !this.retrieve('tween:options')) this.set('tween', options);
			this.store('tween', new Fx.Tween(this, this.retrieve('tween:options')));
		}
		return this.retrieve('tween');
	}

};

Element.implement({

	tween: function(property, from, to){
		this.get('tween').start(arguments);
		return this;
	},

	fade: function(how){
		var fade = this.get('tween'), o = 'opacity', toggle;
		how = $pick(how, 'toggle');
		switch (how){
			case 'in': fade.start(o, 1); break;
			case 'out': fade.start(o, 0); break;
			case 'show': fade.set(o, 1); break;
			case 'hide': fade.set(o, 0); break;
			case 'toggle':
				var flag = this.retrieve('fade:flag', this.get('opacity') == 1);
				fade.start(o, (flag) ? 0 : 1);
				this.store('fade:flag', !flag);
				toggle = true;
			break;
			default: fade.start(o, arguments);
		}
		if (!toggle) this.eliminate('fade:flag');
		return this;
	},

	highlight: function(start, end){
		if (!end){
			end = this.retrieve('highlight:original', this.getStyle('background-color'));
			end = (end == 'transparent') ? '#fff' : end;
		}
		var tween = this.get('tween');
		tween.start('background-color', start || '#ffff88', end).chain(function(){
			this.setStyle('background-color', this.retrieve('highlight:original'));
			tween.callChain();
		}.bind(this));
		return this;
	}

});


/*
---

name: Request

description: Powerful all purpose Request Class. Uses XMLHTTPRequest.

license: MIT-style license.

requires: [Element, Chain, Events, Options, Browser]

provides: Request

...
*/

var Request = new Class({

	Implements: [Chain, Events, Options],

	options: {/*
		onRequest: $empty,
		onComplete: $empty,
		onCancel: $empty,
		onSuccess: $empty,
		onFailure: $empty,
		onException: $empty,*/
		url: '',
		data: '',
		headers: {
			'X-Requested-With': 'XMLHttpRequest',
			'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
		},
		async: true,
		format: false,
		method: 'post',
		link: 'ignore',
		isSuccess: null,
		emulation: true,
		urlEncoded: true,
		encoding: 'utf-8',
		evalScripts: false,
		evalResponse: false,
		noCache: false
	},

	initialize: function(options){
		this.xhr = new Browser.Request();
		this.setOptions(options);
		this.options.isSuccess = this.options.isSuccess || this.isSuccess;
		this.headers = new Hash(this.options.headers);
	},

	onStateChange: function(){
		if (this.xhr.readyState != 4 || !this.running) return;
		this.running = false;
		this.status = 0;
		$try(function(){
			this.status = this.xhr.status;
		}.bind(this));
		this.xhr.onreadystatechange = $empty;
		if (this.options.isSuccess.call(this, this.status)){
			this.response = {text: this.xhr.responseText, xml: this.xhr.responseXML};
			this.success(this.response.text, this.response.xml);
		} else {
			this.response = {text: null, xml: null};
			this.failure();
		}
	},

	isSuccess: function(){
		return ((this.status >= 200) && (this.status < 300));
	},

	processScripts: function(text){
		if (this.options.evalResponse || (/(ecma|java)script/).test(this.getHeader('Content-type'))) return $exec(text);
		return text.stripScripts(this.options.evalScripts);
	},

	success: function(text, xml){
		this.onSuccess(this.processScripts(text), xml);
	},

	onSuccess: function(){
		this.fireEvent('complete', arguments).fireEvent('success', arguments).callChain();
	},

	failure: function(){
		this.onFailure();
	},

	onFailure: function(){
		this.fireEvent('complete').fireEvent('failure', this.xhr);
	},

	setHeader: function(name, value){
		this.headers.set(name, value);
		return this;
	},

	getHeader: function(name){
		return $try(function(){
			return this.xhr.getResponseHeader(name);
		}.bind(this));
	},

	check: function(){
		if (!this.running) return true;
		switch (this.options.link){
			case 'cancel': this.cancel(); return true;
			case 'chain': this.chain(this.caller.bind(this, arguments)); return false;
		}
		return false;
	},

	send: function(options){
		if (!this.check(options)) return this;
		this.running = true;

		var type = $type(options);
		if (type == 'string' || type == 'element') options = {data: options};

		var old = this.options;
		options = $extend({data: old.data, url: old.url, method: old.method}, options);
		var data = options.data, url = String(options.url), method = options.method.toLowerCase();

		switch ($type(data)){
			case 'element': data = document.id(data).toQueryString(); break;
			case 'object': case 'hash': data = Hash.toQueryString(data);
		}

		if (this.options.format){
			var format = 'format=' + this.options.format;
			data = (data) ? format + '&' + data : format;
		}

		if (this.options.emulation && !['get', 'post'].contains(method)){
			var _method = '_method=' + method;
			data = (data) ? _method + '&' + data : _method;
			method = 'post';
		}

		if (this.options.urlEncoded && method == 'post'){
			var encoding = (this.options.encoding) ? '; charset=' + this.options.encoding : '';
			this.headers.set('Content-type', 'application/x-www-form-urlencoded' + encoding);
		}

		if (this.options.noCache){
			var noCache = 'noCache=' + new Date().getTime();
			data = (data) ? noCache + '&' + data : noCache;
		}

		var trimPosition = url.lastIndexOf('/');
		if (trimPosition > -1 && (trimPosition = url.indexOf('#')) > -1) url = url.substr(0, trimPosition);

		if (data && method == 'get'){
			url = url + (url.contains('?') ? '&' : '?') + data;
			data = null;
		}

		this.xhr.open(method.toUpperCase(), url, this.options.async);

		this.xhr.onreadystatechange = this.onStateChange.bind(this);

		this.headers.each(function(value, key){
			try {
				this.xhr.setRequestHeader(key, value);
			} catch (e){
				this.fireEvent('exception', [key, value]);
			}
		}, this);

		this.fireEvent('request');
		this.xhr.send(data);
		if (!this.options.async) this.onStateChange();
		return this;
	},

	cancel: function(){
		if (!this.running) return this;
		this.running = false;
		this.xhr.abort();
		this.xhr.onreadystatechange = $empty;
		this.xhr = new Browser.Request();
		this.fireEvent('cancel');
		return this;
	}

});

(function(){

var methods = {};
['get', 'post', 'put', 'delete', 'GET', 'POST', 'PUT', 'DELETE'].each(function(method){
	methods[method] = function(){
		var params = Array.link(arguments, {url: String.type, data: $defined});
		return this.send($extend(params, {method: method}));
	};
});

Request.implement(methods);

})();

Element.Properties.send = {

	set: function(options){
		var send = this.retrieve('send');
		if (send) send.cancel();
		return this.eliminate('send').store('send:options', $extend({
			data: this, link: 'cancel', method: this.get('method') || 'post', url: this.get('action')
		}, options));
	},

	get: function(options){
		if (options || !this.retrieve('send')){
			if (options || !this.retrieve('send:options')) this.set('send', options);
			this.store('send', new Request(this.retrieve('send:options')));
		}
		return this.retrieve('send');
	}

};

Element.implement({

	send: function(url){
		var sender = this.get('send');
		sender.send({data: this, url: url || sender.options.url});
		return this;
	}

});


/*
---

name: Request.HTML

description: Extends the basic Request Class with additional methods for interacting with HTML responses.

license: MIT-style license.

requires: [Request, Element]

provides: Request.HTML

...
*/

Request.HTML = new Class({

	Extends: Request,

	options: {
		update: false,
		append: false,
		evalScripts: true,
		filter: false
	},

	processHTML: function(text){
		var match = text.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
		text = (match) ? match[1] : text;

		var container = new Element('div');

		return $try(function(){
			var root = '<root>' + text + '</root>', doc;
			if (Browser.Engine.trident){
				doc = new ActiveXObject('Microsoft.XMLDOM');
				doc.async = false;
				doc.loadXML(root);
			} else {
				doc = new DOMParser().parseFromString(root, 'text/xml');
			}
			root = doc.getElementsByTagName('root')[0];
			if (!root) return null;
			for (var i = 0, k = root.childNodes.length; i < k; i++){
				var child = Element.clone(root.childNodes[i], true, true);
				if (child) container.grab(child);
			}
			return container;
		}) || container.set('html', text);
	},

	success: function(text){
		var options = this.options, response = this.response;

		response.html = text.stripScripts(function(script){
			response.javascript = script;
		});

		var temp = this.processHTML(response.html);

		response.tree = temp.childNodes;
		response.elements = temp.getElements('*');

		if (options.filter) response.tree = response.elements.filter(options.filter);
		if (options.update) document.id(options.update).empty().set('html', response.html);
		else if (options.append) document.id(options.append).adopt(temp.getChildren());
		if (options.evalScripts) $exec(response.javascript);

		this.onSuccess(response.tree, response.elements, response.html, response.javascript);
	}

});

Element.Properties.load = {

	set: function(options){
		var load = this.retrieve('load');
		if (load) load.cancel();
		return this.eliminate('load').store('load:options', $extend({data: this, link: 'cancel', update: this, method: 'get'}, options));
	},

	get: function(options){
		if (options || ! this.retrieve('load')){
			if (options || !this.retrieve('load:options')) this.set('load', options);
			this.store('load', new Request.HTML(this.retrieve('load:options')));
		}
		return this.retrieve('load');
	}

};

Element.implement({

	load: function(){
		this.get('load').send(Array.link(arguments, {data: Object.type, url: String.type}));
		return this;
	}

});


/*
---

name: JSON

description: JSON encoder and decoder.

license: MIT-style license.

see: <http://www.json.org/>

requires: [Array, String, Number, Function, Hash]

provides: JSON

...
*/

var JSON = new Hash(this.JSON && {
	stringify: JSON.stringify,
	parse: JSON.parse
}).extend({
	
	$specialChars: {'\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"' : '\\"', '\\': '\\\\'},

	$replaceChars: function(chr){
		return JSON.$specialChars[chr] || '\\u00' + Math.floor(chr.charCodeAt() / 16).toString(16) + (chr.charCodeAt() % 16).toString(16);
	},

	encode: function(obj){
		switch ($type(obj)){
			case 'string':
				return '"' + obj.replace(/[\x00-\x1f\\"]/g, JSON.$replaceChars) + '"';
			case 'array':
				return '[' + String(obj.map(JSON.encode).clean()) + ']';
			case 'object': case 'hash':
				var string = [];
				Hash.each(obj, function(value, key){
					var json = JSON.encode(value);
					if (json) string.push(JSON.encode(key) + ':' + json);
				});
				return '{' + string + '}';
			case 'number': case 'boolean': return String(obj);
			case false: return 'null';
		}
		return null;
	},

	decode: function(string, secure){
		if ($type(string) != 'string' || !string.length) return null;
		if (secure && !(/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(string.replace(/\\./g, '@').replace(/"[^"\\\n\r]*"/g, ''))) return null;
		return eval('(' + string + ')');
	}

});


/*
---

name: Request.JSON

description: Extends the basic Request Class with additional methods for sending and receiving JSON data.

license: MIT-style license.

requires: [Request, JSON]

provides: [Request.JSON]

...
*/

Request.JSON = new Class({

	Extends: Request,

	options: {
		secure: true
	},

	initialize: function(options){
		this.parent(options);
		this.headers.extend({'Accept': 'application/json', 'X-Request': 'JSON'});
	},

	success: function(text){
		this.response.json = JSON.decode(text, this.options.secure);
		this.onSuccess(this.response.json, text);
	}

});


/*
---

name: Cookie

description: Class for creating, reading, and deleting browser Cookies.

license: MIT-style license.

credits: Based on the functions by Peter-Paul Koch (http://quirksmode.org).

requires: Options

provides: Cookie

...
*/

var Cookie = new Class({

	Implements: Options,

	options: {
		path: false,
		domain: false,
		duration: false,
		secure: false,
		document: document
	},

	initialize: function(key, options){
		this.key = key;
		this.setOptions(options);
	},

	write: function(value){
		value = encodeURIComponent(value);
		if (this.options.domain) value += '; domain=' + this.options.domain;
		if (this.options.path) value += '; path=' + this.options.path;
		if (this.options.duration){
			var date = new Date();
			date.setTime(date.getTime() + this.options.duration * 24 * 60 * 60 * 1000);
			value += '; expires=' + date.toGMTString();
		}
		if (this.options.secure) value += '; secure';
		this.options.document.cookie = this.key + '=' + value;
		return this;
	},

	read: function(){
		var value = this.options.document.cookie.match('(?:^|;)\\s*' + this.key.escapeRegExp() + '=([^;]*)');
		return (value) ? decodeURIComponent(value[1]) : null;
	},

	dispose: function(){
		new Cookie(this.key, $merge(this.options, {duration: -1})).write('');
		return this;
	}

});

Cookie.write = function(key, value, options){
	return new Cookie(key, options).write(value);
};

Cookie.read = function(key){
	return new Cookie(key).read();
};

Cookie.dispose = function(key, options){
	return new Cookie(key, options).dispose();
};


/*
---

name: DomReady

description: Contains the custom event domready.

license: MIT-style license.

requires: Element.Event

provides: DomReady

...
*/

Element.Events.domready = {

	onAdd: function(fn){
		if (Browser.loaded) fn.call(this);
	}

};

(function(){

	var domready = function(){
		if (Browser.loaded) return;
		Browser.loaded = true;
		window.fireEvent('domready');
		document.fireEvent('domready');
	};
	
	window.addEvent('load', domready);

	if (Browser.Engine.trident){
		var temp = document.createElement('div');
		(function(){
			($try(function(){
				temp.doScroll(); // Technique by Diego Perini
				return document.id(temp).inject(document.body).set('html', 'temp').dispose();
			})) ? domready() : arguments.callee.delay(50);
		})();
	} else if (Browser.Engine.webkit && Browser.Engine.version < 525){
		(function(){
			(['loaded', 'complete'].contains(document.readyState)) ? domready() : arguments.callee.delay(50);
		})();
	} else {
		document.addEvent('DOMContentLoaded', domready);
	}

})();


/*
---

name: Selectors

description: Adds advanced CSS-style querying capabilities for targeting HTML Elements. Includes pseudo selectors.

license: MIT-style license.

requires: Element

provides: Selectors

...
*/

Native.implement([Document, Element], {

	getElements: function(expression, nocash){
		expression = expression.split(',');
		var items, local = {};
		for (var i = 0, l = expression.length; i < l; i++){
			var selector = expression[i], elements = Selectors.Utils.search(this, selector, local);
			if (i != 0 && elements.item) elements = $A(elements);
			items = (i == 0) ? elements : (items.item) ? $A(items).concat(elements) : items.concat(elements);
		}
		return new Elements(items, {ddup: (expression.length > 1), cash: !nocash});
	}

});

Element.implement({

	match: function(selector){
		if (!selector || (selector == this)) return true;
		var tagid = Selectors.Utils.parseTagAndID(selector);
		var tag = tagid[0], id = tagid[1];
		if (!Selectors.Filters.byID(this, id) || !Selectors.Filters.byTag(this, tag)) return false;
		var parsed = Selectors.Utils.parseSelector(selector);
		return (parsed) ? Selectors.Utils.filter(this, parsed, {}) : true;
	}

});

var Selectors = {Cache: {nth: {}, parsed: {}}};

Selectors.RegExps = {
	id: (/#([\w-]+)/),
	tag: (/^(\w+|\*)/),
	quick: (/^(\w+|\*)$/),
	splitter: (/\s*([+>~\s])\s*([a-zA-Z#.*:\[])/g),
	combined: (/\.([\w-]+)|\[(\w+)(?:([!*^$~|]?=)(["']?)([^\4]*?)\4)?\]|:([\w-]+)(?:\(["']?(.*?)?["']?\)|$)/g)
};

Selectors.Utils = {

	chk: function(item, uniques){
		if (!uniques) return true;
		var uid = $uid(item);
		if (!uniques[uid]) return uniques[uid] = true;
		return false;
	},

	parseNthArgument: function(argument){
		if (Selectors.Cache.nth[argument]) return Selectors.Cache.nth[argument];
		var parsed = argument.match(/^([+-]?\d*)?([a-z]+)?([+-]?\d*)?$/);
		if (!parsed) return false;
		var inta = parseInt(parsed[1], 10);
		var a = (inta || inta === 0) ? inta : 1;
		var special = parsed[2] || false;
		var b = parseInt(parsed[3], 10) || 0;
		if (a != 0){
			b--;
			while (b < 1) b += a;
			while (b >= a) b -= a;
		} else {
			a = b;
			special = 'index';
		}
		switch (special){
			case 'n': parsed = {a: a, b: b, special: 'n'}; break;
			case 'odd': parsed = {a: 2, b: 0, special: 'n'}; break;
			case 'even': parsed = {a: 2, b: 1, special: 'n'}; break;
			case 'first': parsed = {a: 0, special: 'index'}; break;
			case 'last': parsed = {special: 'last-child'}; break;
			case 'only': parsed = {special: 'only-child'}; break;
			default: parsed = {a: (a - 1), special: 'index'};
		}

		return Selectors.Cache.nth[argument] = parsed;
	},

	parseSelector: function(selector){
		if (Selectors.Cache.parsed[selector]) return Selectors.Cache.parsed[selector];
		var m, parsed = {classes: [], pseudos: [], attributes: []};
		while ((m = Selectors.RegExps.combined.exec(selector))){
			var cn = m[1], an = m[2], ao = m[3], av = m[5], pn = m[6], pa = m[7];
			if (cn){
				parsed.classes.push(cn);
			} else if (pn){
				var parser = Selectors.Pseudo.get(pn);
				if (parser) parsed.pseudos.push({parser: parser, argument: pa});
				else parsed.attributes.push({name: pn, operator: '=', value: pa});
			} else if (an){
				parsed.attributes.push({name: an, operator: ao, value: av});
			}
		}
		if (!parsed.classes.length) delete parsed.classes;
		if (!parsed.attributes.length) delete parsed.attributes;
		if (!parsed.pseudos.length) delete parsed.pseudos;
		if (!parsed.classes && !parsed.attributes && !parsed.pseudos) parsed = null;
		return Selectors.Cache.parsed[selector] = parsed;
	},

	parseTagAndID: function(selector){
		var tag = selector.match(Selectors.RegExps.tag);
		var id = selector.match(Selectors.RegExps.id);
		return [(tag) ? tag[1] : '*', (id) ? id[1] : false];
	},

	filter: function(item, parsed, local){
		var i;
		if (parsed.classes){
			for (i = parsed.classes.length; i--; i){
				var cn = parsed.classes[i];
				if (!Selectors.Filters.byClass(item, cn)) return false;
			}
		}
		if (parsed.attributes){
			for (i = parsed.attributes.length; i--; i){
				var att = parsed.attributes[i];
				if (!Selectors.Filters.byAttribute(item, att.name, att.operator, att.value)) return false;
			}
		}
		if (parsed.pseudos){
			for (i = parsed.pseudos.length; i--; i){
				var psd = parsed.pseudos[i];
				if (!Selectors.Filters.byPseudo(item, psd.parser, psd.argument, local)) return false;
			}
		}
		return true;
	},

	getByTagAndID: function(ctx, tag, id){
		if (id){
			var item = (ctx.getElementById) ? ctx.getElementById(id, true) : Element.getElementById(ctx, id, true);
			return (item && Selectors.Filters.byTag(item, tag)) ? [item] : [];
		} else {
			return ctx.getElementsByTagName(tag);
		}
	},

	search: function(self, expression, local){
		var splitters = [];

		var selectors = expression.trim().replace(Selectors.RegExps.splitter, function(m0, m1, m2){
			splitters.push(m1);
			return ':)' + m2;
		}).split(':)');

		var items, filtered, item;

		for (var i = 0, l = selectors.length; i < l; i++){

			var selector = selectors[i];

			if (i == 0 && Selectors.RegExps.quick.test(selector)){
				items = self.getElementsByTagName(selector);
				continue;
			}

			var splitter = splitters[i - 1];

			var tagid = Selectors.Utils.parseTagAndID(selector);
			var tag = tagid[0], id = tagid[1];

			if (i == 0){
				items = Selectors.Utils.getByTagAndID(self, tag, id);
			} else {
				var uniques = {}, found = [];
				for (var j = 0, k = items.length; j < k; j++) found = Selectors.Getters[splitter](found, items[j], tag, id, uniques);
				items = found;
			}

			var parsed = Selectors.Utils.parseSelector(selector);

			if (parsed){
				filtered = [];
				for (var m = 0, n = items.length; m < n; m++){
					item = items[m];
					if (Selectors.Utils.filter(item, parsed, local)) filtered.push(item);
				}
				items = filtered;
			}

		}

		return items;

	}

};

Selectors.Getters = {

	' ': function(found, self, tag, id, uniques){
		var items = Selectors.Utils.getByTagAndID(self, tag, id);
		for (var i = 0, l = items.length; i < l; i++){
			var item = items[i];
			if (Selectors.Utils.chk(item, uniques)) found.push(item);
		}
		return found;
	},

	'>': function(found, self, tag, id, uniques){
		var children = Selectors.Utils.getByTagAndID(self, tag, id);
		for (var i = 0, l = children.length; i < l; i++){
			var child = children[i];
			if (child.parentNode == self && Selectors.Utils.chk(child, uniques)) found.push(child);
		}
		return found;
	},

	'+': function(found, self, tag, id, uniques){
		while ((self = self.nextSibling)){
			if (self.nodeType == 1){
				if (Selectors.Utils.chk(self, uniques) && Selectors.Filters.byTag(self, tag) && Selectors.Filters.byID(self, id)) found.push(self);
				break;
			}
		}
		return found;
	},

	'~': function(found, self, tag, id, uniques){
		while ((self = self.nextSibling)){
			if (self.nodeType == 1){
				if (!Selectors.Utils.chk(self, uniques)) break;
				if (Selectors.Filters.byTag(self, tag) && Selectors.Filters.byID(self, id)) found.push(self);
			}
		}
		return found;
	}

};

Selectors.Filters = {

	byTag: function(self, tag){
		return (tag == '*' || (self.tagName && self.tagName.toLowerCase() == tag));
	},

	byID: function(self, id){
		return (!id || (self.id && self.id == id));
	},

	byClass: function(self, klass){
		return (self.className && self.className.contains && self.className.contains(klass, ' '));
	},

	byPseudo: function(self, parser, argument, local){
		return parser.call(self, argument, local);
	},

	byAttribute: function(self, name, operator, value){
		var result = Element.prototype.getProperty.call(self, name);
		if (!result) return (operator == '!=');
		if (!operator || value == undefined) return true;
		switch (operator){
			case '=': return (result == value);
			case '*=': return (result.contains(value));
			case '^=': return (result.substr(0, value.length) == value);
			case '$=': return (result.substr(result.length - value.length) == value);
			case '!=': return (result != value);
			case '~=': return result.contains(value, ' ');
			case '|=': return result.contains(value, '-');
		}
		return false;
	}

};

Selectors.Pseudo = new Hash({

	// w3c pseudo selectors

	checked: function(){
		return this.checked;
	},
	
	empty: function(){
		return !(this.innerText || this.textContent || '').length;
	},

	not: function(selector){
		return !Element.match(this, selector);
	},

	contains: function(text){
		return (this.innerText || this.textContent || '').contains(text);
	},

	'first-child': function(){
		return Selectors.Pseudo.index.call(this, 0);
	},

	'last-child': function(){
		var element = this;
		while ((element = element.nextSibling)){
			if (element.nodeType == 1) return false;
		}
		return true;
	},

	'only-child': function(){
		var prev = this;
		while ((prev = prev.previousSibling)){
			if (prev.nodeType == 1) return false;
		}
		var next = this;
		while ((next = next.nextSibling)){
			if (next.nodeType == 1) return false;
		}
		return true;
	},

	'nth-child': function(argument, local){
		argument = (argument == undefined) ? 'n' : argument;
		var parsed = Selectors.Utils.parseNthArgument(argument);
		if (parsed.special != 'n') return Selectors.Pseudo[parsed.special].call(this, parsed.a, local);
		var count = 0;
		local.positions = local.positions || {};
		var uid = $uid(this);
		if (!local.positions[uid]){
			var self = this;
			while ((self = self.previousSibling)){
				if (self.nodeType != 1) continue;
				count ++;
				var position = local.positions[$uid(self)];
				if (position != undefined){
					count = position + count;
					break;
				}
			}
			local.positions[uid] = count;
		}
		return (local.positions[uid] % parsed.a == parsed.b);
	},

	// custom pseudo selectors

	index: function(index){
		var element = this, count = 0;
		while ((element = element.previousSibling)){
			if (element.nodeType == 1 && ++count > index) return false;
		}
		return (count == index);
	},

	even: function(argument, local){
		return Selectors.Pseudo['nth-child'].call(this, '2n+1', local);
	},

	odd: function(argument, local){
		return Selectors.Pseudo['nth-child'].call(this, '2n', local);
	},
	
	selected: function(){
		return this.selected;
	},
	
	enabled: function(){
		return (this.disabled === false);
	}

});


/*
---

name: Swiff

description: Wrapper for embedding SWF movies. Supports External Interface Communication.

license: MIT-style license.

credits: Flash detection & Internet Explorer + Flash Player 9 fix inspired by SWFObject.

requires: [Options, $util]

provides: Swiff

...
*/

var Swiff = new Class({

	Implements: [Options],

	options: {
		id: null,
		height: 1,
		width: 1,
		container: null,
		properties: {},
		params: {
			quality: 'high',
			allowScriptAccess: 'always',
			wMode: 'transparent',
			swLiveConnect: true
		},
		callBacks: {},
		vars: {}
	},

	toElement: function(){
		return this.object;
	},

	initialize: function(path, options){
		this.instance = 'Swiff_' + $time();

		this.setOptions(options);
		options = this.options;
		var id = this.id = options.id || this.instance;
		var container = document.id(options.container);

		Swiff.CallBacks[this.instance] = {};

		var params = options.params, vars = options.vars, callBacks = options.callBacks;
		var properties = $extend({height: options.height, width: options.width}, options.properties);

		var self = this;

		for (var callBack in callBacks){
			Swiff.CallBacks[this.instance][callBack] = (function(option){
				return function(){
					return option.apply(self.object, arguments);
				};
			})(callBacks[callBack]);
			vars[callBack] = 'Swiff.CallBacks.' + this.instance + '.' + callBack;
		}

		params.flashVars = Hash.toQueryString(vars);
		if (Browser.Engine.trident){
			properties.classid = 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000';
			params.movie = path;
		} else {
			properties.type = 'application/x-shockwave-flash';
			properties.data = path;
		}
		var build = '<object id="' + id + '"';
		for (var property in properties) build += ' ' + property + '="' + properties[property] + '"';
		build += '>';
		for (var param in params){
			if (params[param]) build += '<param name="' + param + '" value="' + params[param] + '" />';
		}
		build += '</object>';
		this.object = ((container) ? container.empty() : new Element('div')).set('html', build).firstChild;
	},

	replaces: function(element){
		element = document.id(element, true);
		element.parentNode.replaceChild(this.toElement(), element);
		return this;
	},

	inject: function(element){
		document.id(element, true).appendChild(this.toElement());
		return this;
	},

	remote: function(){
		return Swiff.remote.apply(Swiff, [this.toElement()].extend(arguments));
	}

});

Swiff.CallBacks = {};

Swiff.remote = function(obj, fn){
	var rs = obj.CallFunction('<invoke name="' + fn + '" returntype="javascript">' + __flash__argumentsToXML(arguments, 2) + '</invoke>');
	return eval(rs);
};


//MooTools More, <http://mootools.net/more>. Copyright (c) 2006-2009 Aaron Newton <http://clientcide.com/>, Valerio Proietti <http://mad4milk.net> & the MooTools team <http://mootools.net/developers>, MIT Style License.

/*
---

script: More.js

description: MooTools More

license: MIT-style license

authors:
- Guillermo Rauch
- Thomas Aylott
- Scott Kyle

requires:
- core:1.2.4/MooTools

provides: [MooTools.More]

...
*/

MooTools.More = {
	'version': '1.2.4.4',
	'build': '6f6057dc645fdb7547689183b2311063bd653ddf'
};

/*
---

script: MooTools.Lang.js

description: Provides methods for localization.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Events
- /MooTools.More

provides: [MooTools.Lang]

...
*/

(function(){

	var data = {
		language: 'en-US',
		languages: {
			'en-US': {}
		},
		cascades: ['en-US']
	};
	
	var cascaded;

	MooTools.lang = new Events();

	$extend(MooTools.lang, {

		setLanguage: function(lang){
			if (!data.languages[lang]) return this;
			data.language = lang;
			this.load();
			this.fireEvent('langChange', lang);
			return this;
		},

		load: function() {
			var langs = this.cascade(this.getCurrentLanguage());
			cascaded = {};
			$each(langs, function(set, setName){
				cascaded[setName] = this.lambda(set);
			}, this);
		},

		getCurrentLanguage: function(){
			return data.language;
		},

		addLanguage: function(lang){
			data.languages[lang] = data.languages[lang] || {};
			return this;
		},

		cascade: function(lang){
			var cascades = (data.languages[lang] || {}).cascades || [];
			cascades.combine(data.cascades);
			cascades.erase(lang).push(lang);
			var langs = cascades.map(function(lng){
				return data.languages[lng];
			}, this);
			return $merge.apply(this, langs);
		},

		lambda: function(set) {
			(set || {}).get = function(key, args){
				return $lambda(set[key]).apply(this, $splat(args));
			};
			return set;
		},

		get: function(set, key, args){
			if (cascaded && cascaded[set]) return (key ? cascaded[set].get(key, args) : cascaded[set]);
		},

		set: function(lang, set, members){
			this.addLanguage(lang);
			langData = data.languages[lang];
			if (!langData[set]) langData[set] = {};
			$extend(langData[set], members);
			if (lang == this.getCurrentLanguage()){
				this.load();
				this.fireEvent('langChange', lang);
			}
			return this;
		},

		list: function(){
			return Hash.getKeys(data.languages);
		}

	});

})();

/*
---

script: Log.js

description: Provides basic logging functionality for plugins to implement.

license: MIT-style license

authors:
- Guillermo Rauch
- Thomas Aylott
- Scott Kyle

requires:
- core:1.2.4/Class
- /MooTools.More

provides: [Log]

...
*/

(function(){

var global = this;

var log = function(){
	if (global.console && console.log){
		try {
			console.log.apply(console, arguments);
		} catch(e) {
			console.log(Array.slice(arguments));
		}
	} else {
		Log.logged.push(arguments);
	}
	return this;
};

var disabled = function(){
	this.logged.push(arguments);
	return this;
};

this.Log = new Class({
	
	logged: [],
	
	log: disabled,
	
	resetLog: function(){
		this.logged.empty();
		return this;
	},

	enableLog: function(){
		this.log = log;
		this.logged.each(function(args){
			this.log.apply(this, args);
		}, this);
		return this.resetLog();
	},

	disableLog: function(){
		this.log = disabled;
		return this;
	}
	
});

Log.extend(new Log).enableLog();

// legacy
Log.logger = function(){
	return this.log.apply(this, arguments);
};

})();

/*
---

script: Depender.js

description: A stand alone dependency loader for the MooTools library.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Events
- core:1.2.4/Request.JSON
- /MooTools.More
- /Log

provides: Depender

...
*/

var Depender = {

	options: {
		/* 
		onRequire: $empty(options),
		onRequirementLoaded: $empty([scripts, options]),
		onScriptLoaded: $empty({
			script: script, 
			totalLoaded: percentOfTotalLoaded, 
			loaded: scriptsState
		}),
		serial: false,
		target: null,
		noCache: false,
		log: false,*/
		loadedSources: [],
		loadedScripts: ['Core', 'Browser', 'Array', 'String', 'Function', 'Number', 'Hash', 'Element', 'Event', 'Element.Event', 'Class', 'DomReady', 'Class.Extras', 'Request', 'JSON', 'Request.JSON', 'More', 'Depender', 'Log'],
		useScriptInjection: true
	},

	loaded: [],

	sources: {},

	libs: {},

	include: function(libs){
		this.log('include: ', libs);
		this.mapLoaded = false;
		var loader = function(data){
			this.libs = $merge(this.libs, data);
			$each(this.libs, function(data, lib){
				if (data.scripts) this.loadSource(lib, data.scripts);
			}, this);
		}.bind(this);
		if ($type(libs) == 'string'){
			this.log('fetching libs ', libs);
			this.request(libs, loader);
		} else {
			loader(libs);
		}
		return this;
	},

	required: [],

	require: function(options){
		var loaded = function(){
			var scripts = this.calculateDependencies(options.scripts);
			if (options.sources){
				options.sources.each(function(source){
					scripts.combine(this.libs[source].files);
				}, this);
			}
			if (options.serial) scripts.combine(this.getLoadedScripts());
			options.scripts = scripts;
			this.required.push(options);
			this.fireEvent('require', options);
			this.loadScripts(options.scripts);
		};
		if (this.mapLoaded) loaded.call(this);
		else this.addEvent('mapLoaded', loaded.bind(this));
		return this;
	},

	cleanDoubleSlash: function(str){
		if (!str) return str;
		var prefix = '';
		if (str.test(/^http:\/\//)){
			prefix = 'http://';
			str = str.substring(7, str.length);
		}
		str = str.replace(/\/\//g, '/');
		return prefix + str;
	},

	request: function(url, callback){
		new Request.JSON({
			url: url,
			secure: false,
			onSuccess: callback
		}).send();
	},

	loadSource: function(lib, source){
		if (this.libs[lib].files){
			this.dataLoaded();
			return;
		}
		this.log('loading source: ', source);
		this.request(this.cleanDoubleSlash(source + '/scripts.json'), function(result){
			this.log('loaded source: ', source);
			this.libs[lib].files = result;
			this.dataLoaded();
		}.bind(this));
	},

	dataLoaded: function(){
		var loaded = true;
		$each(this.libs, function(v, k){
			if (!this.libs[k].files) loaded = false;
		}, this);
		if (loaded){
			this.mapTree();
			this.mapLoaded = true;
			this.calculateLoaded();
			this.lastLoaded = this.getLoadedScripts().getLength();
			this.fireEvent('mapLoaded');
			this.removeEvents('mapLoaded');
		}
	},

	calculateLoaded: function(){
		var set = function(script){
			this.scriptsState[script] = true;
		}.bind(this);
		if (this.options.loadedScripts) this.options.loadedScripts.each(set);
		if (this.options.loadedSources){
			this.options.loadedSources.each(function(lib){
				$each(this.libs[lib].files, function(dir){
					$each(dir, function(data, file){
						set(file);
					}, this);
				}, this);
			}, this);
		}
	},

	deps: {},

	pathMap: {},

	mapTree: function(){
		$each(this.libs, function(data, source){
			$each(data.files, function(scripts, folder){
				$each(scripts, function(details, script){
					var path = source + ':' + folder + ':' + script;
					if (this.deps[path]) return;
					this.deps[path] = details.deps;
					this.pathMap[script] = path;
				}, this);
			}, this);
		}, this);
	},

	getDepsForScript: function(script){
		return this.deps[this.pathMap[script]] || [];
	},

	calculateDependencies: function(scripts){
		var reqs = [];
		$splat(scripts).each(function(script){
			if (script == 'None' || !script) return;
			var deps = this.getDepsForScript(script);
			if (!deps){
				if (window.console && console.warn) console.warn('dependencies not mapped: script: %o, map: %o, :deps: %o', script, this.pathMap, this.deps);
			} else {
				deps.each(function(scr){
					if (scr == script || scr == 'None' || !scr) return;
					if (!reqs.contains(scr)) reqs.combine(this.calculateDependencies(scr));
					reqs.include(scr);
				}, this);
			}
			reqs.include(script);
		}, this);
		return reqs;
	},

	getPath: function(script){
		try {
			var chunks = this.pathMap[script].split(':');
			var lib = this.libs[chunks[0]];
			var dir = (lib.path || lib.scripts) + '/';
			chunks.shift();
			return this.cleanDoubleSlash(dir + chunks.join('/') + '.js');
		} catch(e){
			return script;
		}
	},

	loadScripts: function(scripts){
		scripts = scripts.filter(function(s){
			if (!this.scriptsState[s] && s != 'None'){
				this.scriptsState[s] = false;
				return true;
			}
		}, this);
		if (scripts.length){
			scripts.each(function(scr){
				this.loadScript(scr);
			}, this);
		} else {
			this.check();
		}
	},

	toLoad: [],

	loadScript: function(script){
		if (this.scriptsState[script] && this.toLoad.length){
			this.loadScript(this.toLoad.shift());
			return;
		} else if (this.loading){
			this.toLoad.push(script);
			return;
		}
		var finish = function(){
			this.loading = false;
			this.scriptLoaded(script);
			if (this.toLoad.length) this.loadScript(this.toLoad.shift());
		}.bind(this);
		var error = function(){
			this.log('could not load: ', scriptPath);
		}.bind(this);
		this.loading = true;
		var scriptPath = this.getPath(script);
		if (this.options.useScriptInjection){
			this.log('injecting script: ', scriptPath);
			var loaded = function(){
				this.log('loaded script: ', scriptPath);
				finish();
			}.bind(this);
			new Element('script', {
				src: scriptPath + (this.options.noCache ? '?noCache=' + new Date().getTime() : ''),
				events: {
					load: loaded,
					readystatechange: function(){
						if (['loaded', 'complete'].contains(this.readyState)) loaded();
					},
					error: error
				}
			}).inject(this.options.target || document.head);
		} else {
			this.log('requesting script: ', scriptPath);
			new Request({
				url: scriptPath,
				noCache: this.options.noCache,
				onComplete: function(js){
					this.log('loaded script: ', scriptPath);
					$exec(js);
					finish();
				}.bind(this),
				onFailure: error,
				onException: error
			}).send();
		}
	},

	scriptsState: $H(),
	
	getLoadedScripts: function(){
		return this.scriptsState.filter(function(state){
			return state;
		});
	},

	scriptLoaded: function(script){
		this.log('loaded script: ', script);
		this.scriptsState[script] = true;
		this.check();
		var loaded = this.getLoadedScripts();
		var loadedLength = loaded.getLength();
		var toLoad = this.scriptsState.getLength();
		this.fireEvent('scriptLoaded', {
			script: script,
			totalLoaded: (loadedLength / toLoad * 100).round(),
			currentLoaded: ((loadedLength - this.lastLoaded) / (toLoad - this.lastLoaded) * 100).round(),
			loaded: loaded
		});
		if (loadedLength == toLoad) this.lastLoaded = loadedLength;
	},

	lastLoaded: 0,

	check: function(){
		var incomplete = [];
		this.required.each(function(required){
			var loaded = [];
			required.scripts.each(function(script){
				if (this.scriptsState[script]) loaded.push(script);
			}, this);
			if (required.onStep){
				required.onStep({
					percent: loaded.length / required.scripts.length * 100,
					scripts: loaded
				});
			};
			if (required.scripts.length != loaded.length) return;
			required.callback();
			this.required.erase(required);
			this.fireEvent('requirementLoaded', [loaded, required]);
		}, this);
	}

};

$extend(Depender, new Events);
$extend(Depender, new Options);
$extend(Depender, new Log);

Depender._setOptions = Depender.setOptions;
Depender.setOptions = function(){
	Depender._setOptions.apply(Depender, arguments);
	if (this.options.log) Depender.enableLog();
	return this;
};


/*
---

script: Class.Refactor.js

description: Extends a class onto itself with new property, preserving any items attached to the class's namespace.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Class
- /MooTools.More

provides: [Class.refactor]

...
*/

Class.refactor = function(original, refactors){

	$each(refactors, function(item, name){
		var origin = original.prototype[name];
		if (origin && (origin = origin._origin) && typeof item == 'function') original.implement(name, function(){
			var old = this.previous;
			this.previous = origin;
			var value = item.apply(this, arguments);
			this.previous = old;
			return value;
		}); else original.implement(name, item);
	});

	return original;

};

/*
---

script: Class.Binds.js

description: Automagically binds specified methods in a class to the instance of the class.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Class
- /MooTools.More

provides: [Class.Binds]

...
*/

Class.Mutators.Binds = function(binds){
    return binds;
};

Class.Mutators.initialize = function(initialize){
	return function(){
		$splat(this.Binds).each(function(name){
			var original = this[name];
			if (original) this[name] = original.bind(this);
		}, this);
		return initialize.apply(this, arguments);
	};
};


/*
---

script: Class.Occlude.js

description: Prevents a class from being applied to a DOM element twice.

license: MIT-style license.

authors:
- Aaron Newton

requires: 
- core/1.2.4/Class
- core:1.2.4/Element
- /MooTools.More

provides: [Class.Occlude]

...
*/

Class.Occlude = new Class({

	occlude: function(property, element){
		element = document.id(element || this.element);
		var instance = element.retrieve(property || this.property);
		if (instance && !$defined(this.occluded))
			return this.occluded = instance;

		this.occluded = false;
		element.store(property || this.property, this);
		return this.occluded;
	}

});

/*
---

script: Chain.Wait.js

description: value, Adds a method to inject pauses between chained events.

license: MIT-style license.

authors:
- Aaron Newton

requires: 
- core:1.2.4/Chain 
- core:1.2.4/Element
- core:1.2.4/Fx
- /MooTools.More

provides: [Chain.Wait]

...
*/

(function(){

	var wait = {
		wait: function(duration){
			return this.chain(function(){
				this.callChain.delay($pick(duration, 500), this);
			}.bind(this));
		}
	};

	Chain.implement(wait);

	if (window.Fx){
		Fx.implement(wait);
		['Css', 'Tween', 'Elements'].each(function(cls){
			if (Fx[cls]) Fx[cls].implement(wait);
		});
	}

	Element.implement({
		chains: function(effects){
			$splat($pick(effects, ['tween', 'morph', 'reveal'])).each(function(effect){
				effect = this.get(effect);
				if (!effect) return;
				effect.setOptions({
					link:'chain'
				});
			}, this);
			return this;
		},
		pauseFx: function(duration, effect){
			this.chains(effect).get($pick(effect, 'tween')).wait(duration);
			return this;
		}
	});

})();

/*
---

script: Array.Extras.js

description: Extends the Array native object to include useful methods to work with arrays.

license: MIT-style license

authors:
- Christoph Pojer

requires:
- core:1.2.4/Array

provides: [Array.Extras]

...
*/
Array.implement({

	min: function(){
		return Math.min.apply(null, this);
	},

	max: function(){
		return Math.max.apply(null, this);
	},

	average: function(){
		return this.length ? this.sum() / this.length : 0;
	},

	sum: function(){
		var result = 0, l = this.length;
		if (l){
			do {
				result += this[--l];
			} while (l);
		}
		return result;
	},

	unique: function(){
		return [].combine(this);
	},

	shuffle: function(){
		for (var i = this.length; i && --i;){
			var temp = this[i], r = Math.floor(Math.random() * ( i + 1 ));
			this[i] = this[r];
			this[r] = temp;
		}
		return this;
	}

});

/*
---

script: Date.js

description: Extends the Date native object to include methods useful in managing dates.

license: MIT-style license

authors:
- Aaron Newton
- Nicholas Barthelemy - https://svn.nbarthelemy.com/date-js/
- Harald Kirshner - mail [at] digitarald.de; http://digitarald.de
- Scott Kyle - scott [at] appden.com; http://appden.com

requires:
- core:1.2.4/Array
- core:1.2.4/String
- core:1.2.4/Number
- core:1.2.4/Lang
- core:1.2.4/Date.English.US
- /MooTools.More

provides: [Date]

...
*/

(function(){

var Date = this.Date;

if (!Date.now) Date.now = $time;

Date.Methods = {
	ms: 'Milliseconds',
	year: 'FullYear',
	min: 'Minutes',
	mo: 'Month',
	sec: 'Seconds',
	hr: 'Hours'
};

['Date', 'Day', 'FullYear', 'Hours', 'Milliseconds', 'Minutes', 'Month', 'Seconds', 'Time', 'TimezoneOffset',
	'Week', 'Timezone', 'GMTOffset', 'DayOfYear', 'LastMonth', 'LastDayOfMonth', 'UTCDate', 'UTCDay', 'UTCFullYear',
	'AMPM', 'Ordinal', 'UTCHours', 'UTCMilliseconds', 'UTCMinutes', 'UTCMonth', 'UTCSeconds'].each(function(method){
	Date.Methods[method.toLowerCase()] = method;
});

var pad = function(what, length){
	return new Array(length - String(what).length + 1).join('0') + what;
};

Date.implement({

	set: function(prop, value){
		switch ($type(prop)){
			case 'object':
				for (var p in prop) this.set(p, prop[p]);
				break;
			case 'string':
				prop = prop.toLowerCase();
				var m = Date.Methods;
				if (m[prop]) this['set' + m[prop]](value);
		}
		return this;
	},

	get: function(prop){
		prop = prop.toLowerCase();
		var m = Date.Methods;
		if (m[prop]) return this['get' + m[prop]]();
		return null;
	},

	clone: function(){
		return new Date(this.get('time'));
	},

	increment: function(interval, times){
		interval = interval || 'day';
		times = $pick(times, 1);

		switch (interval){
			case 'year':
				return this.increment('month', times * 12);
			case 'month':
				var d = this.get('date');
				this.set('date', 1).set('mo', this.get('mo') + times);
				return this.set('date', d.min(this.get('lastdayofmonth')));
			case 'week':
				return this.increment('day', times * 7);
			case 'day':
				return this.set('date', this.get('date') + times);
		}

		if (!Date.units[interval]) throw new Error(interval + ' is not a supported interval');

		return this.set('time', this.get('time') + times * Date.units[interval]());
	},

	decrement: function(interval, times){
		return this.increment(interval, -1 * $pick(times, 1));
	},

	isLeapYear: function(){
		return Date.isLeapYear(this.get('year'));
	},

	clearTime: function(){
		return this.set({hr: 0, min: 0, sec: 0, ms: 0});
	},

	diff: function(date, resolution){
		if ($type(date) == 'string') date = Date.parse(date);
		
		return ((date - this) / Date.units[resolution || 'day'](3, 3)).toInt(); // non-leap year, 30-day month
	},

	getLastDayOfMonth: function(){
		return Date.daysInMonth(this.get('mo'), this.get('year'));
	},

	getDayOfYear: function(){
		return (Date.UTC(this.get('year'), this.get('mo'), this.get('date') + 1) 
			- Date.UTC(this.get('year'), 0, 1)) / Date.units.day();
	},

	getWeek: function(){
		return (this.get('dayofyear') / 7).ceil();
	},
	
	getOrdinal: function(day){
		return Date.getMsg('ordinal', day || this.get('date'));
	},

	getTimezone: function(){
		return this.toString()
			.replace(/^.*? ([A-Z]{3}).[0-9]{4}.*$/, '$1')
			.replace(/^.*?\(([A-Z])[a-z]+ ([A-Z])[a-z]+ ([A-Z])[a-z]+\)$/, '$1$2$3');
	},

	getGMTOffset: function(){
		var off = this.get('timezoneOffset');
		return ((off > 0) ? '-' : '+') + pad((off.abs() / 60).floor(), 2) + pad(off % 60, 2);
	},

	setAMPM: function(ampm){
		ampm = ampm.toUpperCase();
		var hr = this.get('hr');
		if (hr > 11 && ampm == 'AM') return this.decrement('hour', 12);
		else if (hr < 12 && ampm == 'PM') return this.increment('hour', 12);
		return this;
	},

	getAMPM: function(){
		return (this.get('hr') < 12) ? 'AM' : 'PM';
	},

	parse: function(str){
		this.set('time', Date.parse(str));
		return this;
	},

	isValid: function(date) {
		return !!(date || this).valueOf();
	},

	format: function(f){
		if (!this.isValid()) return 'invalid date';
		f = f || '%x %X';
		f = formats[f.toLowerCase()] || f; // replace short-hand with actual format
		var d = this;
		return f.replace(/%([a-z%])/gi,
			function($0, $1){
				switch ($1){
					case 'a': return Date.getMsg('days')[d.get('day')].substr(0, 3);
					case 'A': return Date.getMsg('days')[d.get('day')];
					case 'b': return Date.getMsg('months')[d.get('month')].substr(0, 3);
					case 'B': return Date.getMsg('months')[d.get('month')];
					case 'c': return d.toString();
					case 'd': return pad(d.get('date'), 2);
					case 'H': return pad(d.get('hr'), 2);
					case 'I': return ((d.get('hr') % 12) || 12);
					case 'j': return pad(d.get('dayofyear'), 3);
					case 'm': return pad((d.get('mo') + 1), 2);
					case 'M': return pad(d.get('min'), 2);
					case 'o': return d.get('ordinal');
					case 'p': return Date.getMsg(d.get('ampm'));
					case 'S': return pad(d.get('seconds'), 2);
					case 'U': return pad(d.get('week'), 2);
					case 'w': return d.get('day');
					case 'x': return d.format(Date.getMsg('shortDate'));
					case 'X': return d.format(Date.getMsg('shortTime'));
					case 'y': return d.get('year').toString().substr(2);
					case 'Y': return d.get('year');
					case 'T': return d.get('GMTOffset');
					case 'Z': return d.get('Timezone');
				}
				return $1;
			}
		);
	},

	toISOString: function(){
		return this.format('iso8601');
	}

});

Date.alias('toISOString', 'toJSON');
Date.alias('diff', 'compare');
Date.alias('format', 'strftime');

var formats = {
	db: '%Y-%m-%d %H:%M:%S',
	compact: '%Y%m%dT%H%M%S',
	iso8601: '%Y-%m-%dT%H:%M:%S%T',
	rfc822: '%a, %d %b %Y %H:%M:%S %Z',
	'short': '%d %b %H:%M',
	'long': '%B %d, %Y %H:%M'
};

var parsePatterns = [];
var nativeParse = Date.parse;

var parseWord = function(type, word, num){
	var ret = -1;
	var translated = Date.getMsg(type + 's');

	switch ($type(word)){
		case 'object':
			ret = translated[word.get(type)];
			break;
		case 'number':
			ret = translated[month - 1];
			if (!ret) throw new Error('Invalid ' + type + ' index: ' + index);
			break;
		case 'string':
			var match = translated.filter(function(name){
				return this.test(name);
			}, new RegExp('^' + word, 'i'));
			if (!match.length)    throw new Error('Invalid ' + type + ' string');
			if (match.length > 1) throw new Error('Ambiguous ' + type);
			ret = match[0];
	}

	return (num) ? translated.indexOf(ret) : ret;
};

Date.extend({

	getMsg: function(key, args) {
		return MooTools.lang.get('Date', key, args);
	},

	units: {
		ms: $lambda(1),
		second: $lambda(1000),
		minute: $lambda(60000),
		hour: $lambda(3600000),
		day: $lambda(86400000),
		week: $lambda(608400000),
		month: function(month, year){
			var d = new Date;
			return Date.daysInMonth($pick(month, d.get('mo')), $pick(year, d.get('year'))) * 86400000;
		},
		year: function(year){
			year = year || new Date().get('year');
			return Date.isLeapYear(year) ? 31622400000 : 31536000000;
		}
	},

	daysInMonth: function(month, year){
		return [31, Date.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	},

	isLeapYear: function(year){
		return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
	},

	parse: function(from){
		var t = $type(from);
		if (t == 'number') return new Date(from);
		if (t != 'string') return from;
		from = from.clean();
		if (!from.length) return null;

		var parsed;
		parsePatterns.some(function(pattern){
			var bits = pattern.re.exec(from);
			return (bits) ? (parsed = pattern.handler(bits)) : false;
		});

		return parsed || new Date(nativeParse(from));
	},

	parseDay: function(day, num){
		return parseWord('day', day, num);
	},

	parseMonth: function(month, num){
		return parseWord('month', month, num);
	},

	parseUTC: function(value){
		var localDate = new Date(value);
		var utcSeconds = Date.UTC(
			localDate.get('year'),
			localDate.get('mo'),
			localDate.get('date'),
			localDate.get('hr'),
			localDate.get('min'),
			localDate.get('sec')
		);
		return new Date(utcSeconds);
	},

	orderIndex: function(unit){
		return Date.getMsg('dateOrder').indexOf(unit) + 1;
	},

	defineFormat: function(name, format){
		formats[name] = format;
	},

	defineFormats: function(formats){
		for (var name in formats) Date.defineFormat(name, formats[name]);
	},

	parsePatterns: parsePatterns, // this is deprecated
	
	defineParser: function(pattern){
		parsePatterns.push((pattern.re && pattern.handler) ? pattern : build(pattern));
	},
	
	defineParsers: function(){
		Array.flatten(arguments).each(Date.defineParser);
	},
	
	define2DigitYearStart: function(year){
		startYear = year % 100;
		startCentury = year - startYear;
	}

});

var startCentury = 1900;
var startYear = 70;

var regexOf = function(type){
	return new RegExp('(?:' + Date.getMsg(type).map(function(name){
		return name.substr(0, 3);
	}).join('|') + ')[a-z]*');
};

var replacers = function(key){
	switch(key){
		case 'x': // iso8601 covers yyyy-mm-dd, so just check if month is first
			return ((Date.orderIndex('month') == 1) ? '%m[.-/]%d' : '%d[.-/]%m') + '([.-/]%y)?';
		case 'X':
			return '%H([.:]%M)?([.:]%S([.:]%s)?)? ?%p? ?%T?';
	}
	return null;
};

var keys = {
	d: /[0-2]?[0-9]|3[01]/,
	H: /[01]?[0-9]|2[0-3]/,
	I: /0?[1-9]|1[0-2]/,
	M: /[0-5]?\d/,
	s: /\d+/,
	o: /[a-z]*/,
	p: /[ap]\.?m\.?/,
	y: /\d{2}|\d{4}/,
	Y: /\d{4}/,
	T: /Z|[+-]\d{2}(?::?\d{2})?/
};

keys.m = keys.I;
keys.S = keys.M;

var currentLanguage;

var recompile = function(language){
	currentLanguage = language;
	
	keys.a = keys.A = regexOf('days');
	keys.b = keys.B = regexOf('months');
	
	parsePatterns.each(function(pattern, i){
		if (pattern.format) parsePatterns[i] = build(pattern.format);
	});
};

var build = function(format){
	if (!currentLanguage) return {format: format};
	
	var parsed = [];
	var re = (format.source || format) // allow format to be regex
	 .replace(/%([a-z])/gi,
		function($0, $1){
			return replacers($1) || $0;
		}
	).replace(/\((?!\?)/g, '(?:') // make all groups non-capturing
	 .replace(/ (?!\?|\*)/g, ',? ') // be forgiving with spaces and commas
	 .replace(/%([a-z%])/gi,
		function($0, $1){
			var p = keys[$1];
			if (!p) return $1;
			parsed.push($1);
			return '(' + p.source + ')';
		}
	).replace(/\[a-z\]/gi, '[a-z\\u00c0-\\uffff]'); // handle unicode words

	return {
		format: format,
		re: new RegExp('^' + re + '$', 'i'),
		handler: function(bits){
			bits = bits.slice(1).associate(parsed);
			var date = new Date().clearTime();
			if ('d' in bits) handle.call(date, 'd', 1);
			if ('m' in bits || 'b' in bits || 'B' in bits) handle.call(date, 'm', 1);
			for (var key in bits) handle.call(date, key, bits[key]);
			return date;
		}
	};
};

var handle = function(key, value){
	if (!value) return this;

	switch(key){
		case 'a': case 'A': return this.set('day', Date.parseDay(value, true));
		case 'b': case 'B': return this.set('mo', Date.parseMonth(value, true));
		case 'd': return this.set('date', value);
		case 'H': case 'I': return this.set('hr', value);
		case 'm': return this.set('mo', value - 1);
		case 'M': return this.set('min', value);
		case 'p': return this.set('ampm', value.replace(/\./g, ''));
		case 'S': return this.set('sec', value);
		case 's': return this.set('ms', ('0.' + value) * 1000);
		case 'w': return this.set('day', value);
		case 'Y': return this.set('year', value);
		case 'y':
			value = +value;
			if (value < 100) value += startCentury + (value < startYear ? 100 : 0);
			return this.set('year', value);
		case 'T':
			if (value == 'Z') value = '+00';
			var offset = value.match(/([+-])(\d{2}):?(\d{2})?/);
			offset = (offset[1] + '1') * (offset[2] * 60 + (+offset[3] || 0)) + this.getTimezoneOffset();
			return this.set('time', this - offset * 60000);
	}

	return this;
};

Date.defineParsers(
	'%Y([-./]%m([-./]%d((T| )%X)?)?)?', // "1999-12-31", "1999-12-31 11:59pm", "1999-12-31 23:59:59", ISO8601
	'%Y%m%d(T%H(%M%S?)?)?', // "19991231", "19991231T1159", compact
	'%x( %X)?', // "12/31", "12.31.99", "12-31-1999", "12/31/2008 11:59 PM"
	'%d%o( %b( %Y)?)?( %X)?', // "31st", "31st December", "31 Dec 1999", "31 Dec 1999 11:59pm"
	'%b( %d%o)?( %Y)?( %X)?', // Same as above with month and day switched
	'%Y %b( %d%o( %X)?)?', // Same as above with year coming first
	'%o %b %d %X %T %Y' // "Thu Oct 22 08:11:23 +0000 2009"
);

MooTools.lang.addEvent('langChange', function(language){
	if (MooTools.lang.get('Date')) recompile(language);
}).fireEvent('langChange', MooTools.lang.getCurrentLanguage());

})();

/*
---

script: Date.Extras.js

description: Extends the Date native object to include extra methods (on top of those in Date.js).

license: MIT-style license

authors:
- Aaron Newton
- Scott Kyle

requires:
- /Date

provides: [Date.Extras]

...
*/

Date.implement({

	timeDiffInWords: function(relative_to){
		return Date.distanceOfTimeInWords(this, relative_to || new Date);
	},

	timeDiff: function(to, joiner){
		if (to == null) to = new Date;
		var delta = ((to - this) / 1000).toInt();
		if (!delta) return '0s';
		
		var durations = {s: 60, m: 60, h: 24, d: 365, y: 0};
		var duration, vals = [];
		
		for (var step in durations){
			if (!delta) break;
			if ((duration = durations[step])){
				vals.unshift((delta % duration) + step);
				delta = (delta / duration).toInt();
			} else {
				vals.unshift(delta + step);
			}
		}
		
		return vals.join(joiner || ':');
	}

});

Date.alias('timeDiffInWords', 'timeAgoInWords');

Date.extend({

	distanceOfTimeInWords: function(from, to){
		return Date.getTimePhrase(((to - from) / 1000).toInt());
	},

	getTimePhrase: function(delta){
		var suffix = (delta < 0) ? 'Until' : 'Ago';
		if (delta < 0) delta *= -1;
		
		var units = {
			minute: 60,
			hour: 60,
			day: 24,
			week: 7,
			month: 52 / 12,
			year: 12,
			eon: Infinity
		};
		
		var msg = 'lessThanMinute';
		
		for (var unit in units){
			var interval = units[unit];
			if (delta < 1.5 * interval){
				if (delta > 0.75 * interval) msg = unit;
				break;
			}
			delta /= interval;
			msg = unit + 's';
		}
		
		return Date.getMsg(msg + suffix).substitute({delta: delta.round()});
	}

});


Date.defineParsers(

	{
		// "today", "tomorrow", "yesterday"
		re: /^(?:tod|tom|yes)/i,
		handler: function(bits){
			var d = new Date().clearTime();
			switch(bits[0]){
				case 'tom': return d.increment();
				case 'yes': return d.decrement();
				default: 	return d;
			}
		}
	},

	{
		// "next Wednesday", "last Thursday"
		re: /^(next|last) ([a-z]+)$/i,
		handler: function(bits){
			var d = new Date().clearTime();
			var day = d.getDay();
			var newDay = Date.parseDay(bits[2], true);
			var addDays = newDay - day;
			if (newDay <= day) addDays += 7;
			if (bits[1] == 'last') addDays -= 7;
			return d.set('date', d.getDate() + addDays);
		}
	}

);


/*
---

script: Hash.Extras.js

description: Extends the Hash native object to include getFromPath which allows a path notation to child elements.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Hash.base
- /MooTools.More

provides: [Hash.Extras]

...
*/

Hash.implement({

	getFromPath: function(notation){
		var source = this.getClean();
		notation.replace(/\[([^\]]+)\]|\.([^.[]+)|[^[.]+/g, function(match){
			if (!source) return null;
			var prop = arguments[2] || arguments[1] || arguments[0];
			source = (prop in source) ? source[prop] : null;
			return match;
		});
		return source;
	},

	cleanValues: function(method){
		method = method || $defined;
		this.each(function(v, k){
			if (!method(v)) this.erase(k);
		}, this);
		return this;
	},

	run: function(){
		var args = arguments;
		this.each(function(v, k){
			if ($type(v) == 'function') v.run(args);
		});
	}

});

/*
---

script: String.Extras.js

description: Extends the String native object to include methods useful in managing various kinds of strings (query strings, urls, html, etc).

license: MIT-style license

authors:
- Aaron Newton
- Guillermo Rauch

requires:
- core:1.2.4/String
- core:1.2.4/$util
- core:1.2.4/Array

provides: [String.Extras]

...
*/

(function(){
  
var special = ['Ã€','Ã ','Ã�','Ã¡','Ã‚','Ã¢','Ãƒ','Ã£','Ã„','Ã¤','Ã…','Ã¥','Ä‚','Äƒ','Ä„','Ä…','Ä†','Ä‡','ÄŒ','Ä�','Ã‡','Ã§', 'ÄŽ','Ä�','Ä�','Ä‘', 'Ãˆ','Ã¨','Ã‰','Ã©','ÃŠ','Ãª','Ã‹','Ã«','Äš','Ä›','Ä˜','Ä™', 'Äž','ÄŸ','ÃŒ','Ã¬','Ã�','Ã­','ÃŽ','Ã®','Ã�','Ã¯', 'Ä¹','Äº','Ä½','Ä¾','Å�','Å‚', 'Ã‘','Ã±','Å‡','Åˆ','Åƒ','Å„','Ã’','Ã²','Ã“','Ã³','Ã”','Ã´','Ã•','Ãµ','Ã–','Ã¶','Ã˜','Ã¸','Å‘','Å˜','Å™','Å”','Å•','Å ','Å¡','Åž','ÅŸ','Åš','Å›', 'Å¤','Å¥','Å¤','Å¥','Å¢','Å£','Ã™','Ã¹','Ãš','Ãº','Ã›','Ã»','Ãœ','Ã¼','Å®','Å¯', 'Å¸','Ã¿','Ã½','Ã�','Å½','Å¾','Å¹','Åº','Å»','Å¼', 'Ãž','Ã¾','Ã�','Ã°','ÃŸ','Å’','Å“','Ã†','Ã¦','Âµ'];

var standard = ['A','a','A','a','A','a','A','a','Ae','ae','A','a','A','a','A','a','C','c','C','c','C','c','D','d','D','d', 'E','e','E','e','E','e','E','e','E','e','E','e','G','g','I','i','I','i','I','i','I','i','L','l','L','l','L','l', 'N','n','N','n','N','n', 'O','o','O','o','O','o','O','o','Oe','oe','O','o','o', 'R','r','R','r', 'S','s','S','s','S','s','T','t','T','t','T','t', 'U','u','U','u','U','u','Ue','ue','U','u','Y','y','Y','y','Z','z','Z','z','Z','z','TH','th','DH','dh','ss','OE','oe','AE','ae','u'];

var tidymap = {
	"[\xa0\u2002\u2003\u2009]": " ",
	"\xb7": "*",
	"[\u2018\u2019]": "'",
	"[\u201c\u201d]": '"',
	"\u2026": "...",
	"\u2013": "-",
	"\u2014": "--",
	"\uFFFD": "&raquo;"
};

var getRegForTag = function(tag, contents) {
	tag = tag || '';
	var regstr = contents ? "<" + tag + "[^>]*>([\\s\\S]*?)<\/" + tag + ">" : "<\/?" + tag + "([^>]+)?>";
	reg = new RegExp(regstr, "gi");
	return reg;
};

String.implement({

	standardize: function(){
		var text = this;
		special.each(function(ch, i){
			text = text.replace(new RegExp(ch, 'g'), standard[i]);
		});
		return text;
	},

	repeat: function(times){
		return new Array(times + 1).join(this);
	},

	pad: function(length, str, dir){
		if (this.length >= length) return this;
		var pad = (str == null ? ' ' : '' + str).repeat(length - this.length).substr(0, length - this.length);
		if (!dir || dir == 'right') return this + pad;
		if (dir == 'left') return pad + this;
		return pad.substr(0, (pad.length / 2).floor()) + this + pad.substr(0, (pad.length / 2).ceil());
	},

	getTags: function(tag, contents){
		return this.match(getRegForTag(tag, contents)) || [];
	},

	stripTags: function(tag, contents){
		return this.replace(getRegForTag(tag, contents), '');
	},

	tidy: function(){
		var txt = this.toString();
		$each(tidymap, function(value, key){
			txt = txt.replace(new RegExp(key, 'g'), value);
		});
		return txt;
	}

});

})();

/*
---

script: String.QueryString.js

description: Methods for dealing with URI query strings.

license: MIT-style license

authors:
- Sebastian MarkbÃ¥ge, Aaron Newton, Lennart Pilon, Valerio Proietti

requires:
- core:1.2.4/Array
- core:1.2.4/String
- /MooTools.More

provides: [String.QueryString]

...
*/

String.implement({

	parseQueryString: function(){
		var vars = this.split(/[&;]/), res = {};
		if (vars.length) vars.each(function(val){
			var index = val.indexOf('='),
				keys = index < 0 ? [''] : val.substr(0, index).match(/[^\]\[]+/g),
				value = decodeURIComponent(val.substr(index + 1)),
				obj = res;
			keys.each(function(key, i){
				var current = obj[key];
				if(i < keys.length - 1)
					obj = obj[key] = current || {};
				else if($type(current) == 'array')
					current.push(value);
				else
					obj[key] = $defined(current) ? [current, value] : value;
			});
		});
		return res;
	},

	cleanQueryString: function(method){
		return this.split('&').filter(function(val){
			var index = val.indexOf('='),
			key = index < 0 ? '' : val.substr(0, index),
			value = val.substr(index + 1);
			return method ? method.run([key, value]) : $chk(value);
		}).join('&');
	}

});

/*
---

script: URI.js

description: Provides methods useful in managing the window location and uris.

license: MIT-style license

authors:
- Sebastian Markbåge
- Aaron Newton

requires:
- core:1.2.4/Selectors
- /String.QueryString

provides: URI

...
*/

var URI = new Class({

	Implements: Options,

	options: {
		/*base: false*/
	},

	regex: /^(?:(\w+):)?(?:\/\/(?:(?:([^:@\/]*):?([^:@\/]*))?@)?([^:\/?#]*)(?::(\d*))?)?(\.\.?$|(?:[^?#\/]*\/)*)([^?#]*)(?:\?([^#]*))?(?:#(.*))?/,
	parts: ['scheme', 'user', 'password', 'host', 'port', 'directory', 'file', 'query', 'fragment'],
	schemes: {http: 80, https: 443, ftp: 21, rtsp: 554, mms: 1755, file: 0},

	initialize: function(uri, options){
		this.setOptions(options);
		var base = this.options.base || URI.base;
		if(!uri) uri = base;
		
		if (uri && uri.parsed) this.parsed = $unlink(uri.parsed);
		else this.set('value', uri.href || uri.toString(), base ? new URI(base) : false);
	},

	parse: function(value, base){
		var bits = value.match(this.regex);
		if (!bits) return false;
		bits.shift();
		return this.merge(bits.associate(this.parts), base);
	},

	merge: function(bits, base){
		if ((!bits || !bits.scheme) && (!base || !base.scheme)) return false;
		if (base){
			this.parts.every(function(part){
				if (bits[part]) return false;
				bits[part] = base[part] || '';
				return true;
			});
		}
		bits.port = bits.port || this.schemes[bits.scheme.toLowerCase()];
		bits.directory = bits.directory ? this.parseDirectory(bits.directory, base ? base.directory : '') : '/';
		return bits;
	},

	parseDirectory: function(directory, baseDirectory) {
		directory = (directory.substr(0, 1) == '/' ? '' : (baseDirectory || '/')) + directory;
		if (!directory.test(URI.regs.directoryDot)) return directory;
		var result = [];
		directory.replace(URI.regs.endSlash, '').split('/').each(function(dir){
			if (dir == '..' && result.length > 0) result.pop();
			else if (dir != '.') result.push(dir);
		});
		return result.join('/') + '/';
	},

	combine: function(bits){
		return bits.value || bits.scheme + '://' +
			(bits.user ? bits.user + (bits.password ? ':' + bits.password : '') + '@' : '') +
			(bits.host || '') + (bits.port && bits.port != this.schemes[bits.scheme] ? ':' + bits.port : '') +
			(bits.directory || '/') + (bits.file || '') +
			(bits.query ? '?' + bits.query : '') +
			(bits.fragment ? '#' + bits.fragment : '');
	},

	set: function(part, value, base){
		if (part == 'value'){
			var scheme = value.match(URI.regs.scheme);
			if (scheme) scheme = scheme[1];
			if (scheme && !$defined(this.schemes[scheme.toLowerCase()])) this.parsed = { scheme: scheme, value: value };
			else this.parsed = this.parse(value, (base || this).parsed) || (scheme ? { scheme: scheme, value: value } : { value: value });
		} else if (part == 'data') {
			this.setData(value);
		} else {
			this.parsed[part] = value;
		}
		return this;
	},

	get: function(part, base){
		switch(part){
			case 'value': return this.combine(this.parsed, base ? base.parsed : false);
			case 'data' : return this.getData();
		}
		return this.parsed[part] || '';
	},

	go: function(){
		document.location.href = this.toString();
	},

	toURI: function(){
		return this;
	},

	getData: function(key, part){
		var qs = this.get(part || 'query');
		if (!$chk(qs)) return key ? null : {};
		var obj = qs.parseQueryString();
		return key ? obj[key] : obj;
	},

	setData: function(values, merge, part){
		if (typeof values == 'string'){
			data = this.getData();
			data[arguments[0]] = arguments[1];
			values = data;
		} else if (merge) {
			values = $merge(this.getData(), values);
		}
		return this.set(part || 'query', Hash.toQueryString(values));
	},

	clearData: function(part){
		return this.set(part || 'query', '');
	}

});

URI.prototype.toString = URI.prototype.valueOf = function(){
	return this.get('value');
};

URI.regs = {
	endSlash: /\/$/,
	scheme: /^(\w+):/,
	directoryDot: /\.\/|\.$/
};

URI.base = new URI(document.getElements('base[href]', true).getLast(), {base: document.location});

String.implement({

	toURI: function(options){
		return new URI(this, options);
	}

});

/*
---

script: URI.Relative.js

description: Extends the URI class to add methods for computing relative and absolute urls.

license: MIT-style license

authors:
- Sebastian MarkbÃ¥ge


requires:
- /Class.refactor
- /URI

provides: [URI.Relative]

...
*/

URI = Class.refactor(URI, {

	combine: function(bits, base){
		if (!base || bits.scheme != base.scheme || bits.host != base.host || bits.port != base.port)
			return this.previous.apply(this, arguments);
		var end = bits.file + (bits.query ? '?' + bits.query : '') + (bits.fragment ? '#' + bits.fragment : '');

		if (!base.directory) return (bits.directory || (bits.file ? '' : './')) + end;

		var baseDir = base.directory.split('/'),
			relDir = bits.directory.split('/'),
			path = '',
			offset;

		var i = 0;
		for(offset = 0; offset < baseDir.length && offset < relDir.length && baseDir[offset] == relDir[offset]; offset++);
		for(i = 0; i < baseDir.length - offset - 1; i++) path += '../';
		for(i = offset; i < relDir.length - 1; i++) path += relDir[i] + '/';

		return (path || (bits.file ? '' : './')) + end;
	},

	toAbsolute: function(base){
		base = new URI(base);
		if (base) base.set('directory', '').set('file', '');
		return this.toRelative(base);
	},

	toRelative: function(base){
		return this.get('value', new URI(base));
	}

});

/*
---

script: Element.Forms.js

description: Extends the Element native object to include methods useful in managing inputs.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element
- /MooTools.More

provides: [Element.Forms]

...
*/

Element.implement({

	tidy: function(){
		this.set('value', this.get('value').tidy());
	},

	getTextInRange: function(start, end){
		return this.get('value').substring(start, end);
	},

	getSelectedText: function(){
		if (this.setSelectionRange) return this.getTextInRange(this.getSelectionStart(), this.getSelectionEnd());
		return document.selection.createRange().text;
	},

	getSelectedRange: function() {
		if ($defined(this.selectionStart)) return {start: this.selectionStart, end: this.selectionEnd};
		var pos = {start: 0, end: 0};
		var range = this.getDocument().selection.createRange();
		if (!range || range.parentElement() != this) return pos;
		var dup = range.duplicate();
		if (this.type == 'text') {
			pos.start = 0 - dup.moveStart('character', -100000);
			pos.end = pos.start + range.text.length;
		} else {
			var value = this.get('value');
			var offset = value.length;
			dup.moveToElementText(this);
			dup.setEndPoint('StartToEnd', range);
			if(dup.text.length) offset -= value.match(/[\n\r]*$/)[0].length;
			pos.end = offset - dup.text.length;
			dup.setEndPoint('StartToStart', range);
			pos.start = offset - dup.text.length;
		}
		return pos;
	},

	getSelectionStart: function(){
		return this.getSelectedRange().start;
	},

	getSelectionEnd: function(){
		return this.getSelectedRange().end;
	},

	setCaretPosition: function(pos){
		if (pos == 'end') pos = this.get('value').length;
		this.selectRange(pos, pos);
		return this;
	},

	getCaretPosition: function(){
		return this.getSelectedRange().start;
	},

	selectRange: function(start, end){
		if (this.setSelectionRange) {
			this.focus();
			this.setSelectionRange(start, end);
		} else {
			var value = this.get('value');
			var diff = value.substr(start, end - start).replace(/\r/g, '').length;
			start = value.substr(0, start).replace(/\r/g, '').length;
			var range = this.createTextRange();
			range.collapse(true);
			range.moveEnd('character', start + diff);
			range.moveStart('character', start);
			range.select();
		}
		return this;
	},

	insertAtCursor: function(value, select){
		var pos = this.getSelectedRange();
		var text = this.get('value');
		this.set('value', text.substring(0, pos.start) + value + text.substring(pos.end, text.length));
		if ($pick(select, true)) this.selectRange(pos.start, pos.start + value.length);
		else this.setCaretPosition(pos.start + value.length);
		return this;
	},

	insertAroundCursor: function(options, select){
		options = $extend({
			before: '',
			defaultMiddle: '',
			after: ''
		}, options);
		var value = this.getSelectedText() || options.defaultMiddle;
		var pos = this.getSelectedRange();
		var text = this.get('value');
		if (pos.start == pos.end){
			this.set('value', text.substring(0, pos.start) + options.before + value + options.after + text.substring(pos.end, text.length));
			this.selectRange(pos.start + options.before.length, pos.end + options.before.length + value.length);
		} else {
			var current = text.substring(pos.start, pos.end);
			this.set('value', text.substring(0, pos.start) + options.before + current + options.after + text.substring(pos.end, text.length));
			var selStart = pos.start + options.before.length;
			if ($pick(select, true)) this.selectRange(selStart, selStart + current.length);
			else this.setCaretPosition(selStart + text.length);
		}
		return this;
	}

});

/*
---

script: Elements.From.js

description: Returns a collection of elements from a string of html.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element
- /MooTools.More

provides: [Elements.from]

...
*/

Elements.from = function(text, excludeScripts){
	if ($pick(excludeScripts, true)) text = text.stripScripts();

	var container, match = text.match(/^\s*<(t[dhr]|tbody|tfoot|thead)/i);

	if (match){
		container = new Element('table');
		var tag = match[1].toLowerCase();
		if (['td', 'th', 'tr'].contains(tag)){
			container = new Element('tbody').inject(container);
			if (tag != 'tr') container = new Element('tr').inject(container);
		}
	}

	return (container || new Element('div')).set('html', text).getChildren();
};

/*
---

script: Element.Delegation.js

description: Extends the Element native object to include the delegate method for more efficient event management.

credits:
- "Event checking based on the work of Daniel Steigerwald. License: MIT-style license.	Copyright: Copyright (c) 2008 Daniel Steigerwald, daniel.steigerwald.cz"

license: MIT-style license

authors:
- Aaron Newton
- Daniel Steigerwald

requires:
- core:1.2.4/Element.Event
- core:1.2.4/Selectors
- /MooTools.More

provides: [Element.Delegation]

...
*/

(function(addEvent, removeEvent){
	
	var match = /(.*?):relay\(([^)]+)\)$/,
		combinators = /[+>~\s]/,
		splitType = function(type){
			var bits = type.match(match);
			return !bits ? {event: type} : {
				event: bits[1],
				selector: bits[2]
			};
		},
		check = function(e, selector){
			var t = e.target;
			if (combinators.test(selector = selector.trim())){
				var els = this.getElements(selector);
				for (var i = els.length; i--; ){
					var el = els[i];
					if (t == el || el.hasChild(t)) return el;
				}
			} else {
				for ( ; t && t != this; t = t.parentNode){
					if (Element.match(t, selector)) return document.id(t);
				}
			}
			return null;
		};

	Element.implement({

		addEvent: function(type, fn){
			var splitted = splitType(type);
			if (splitted.selector){
				var monitors = this.retrieve('$moo:delegateMonitors', {});
				if (!monitors[type]){
					var monitor = function(e){
						var el = check.call(this, e, splitted.selector);
						if (el) this.fireEvent(type, [e, el], 0, el);
					}.bind(this);
					monitors[type] = monitor;
					addEvent.call(this, splitted.event, monitor);
				}
			}
			return addEvent.apply(this, arguments);
		},

		removeEvent: function(type, fn){
			var splitted = splitType(type);
			if (splitted.selector){
				var events = this.retrieve('events');
				if (!events || !events[type] || (fn && !events[type].keys.contains(fn))) return this;

				if (fn) removeEvent.apply(this, [type, fn]);
				else removeEvent.apply(this, type);

				events = this.retrieve('events');
				if (events && events[type] && events[type].keys.length == 0){
					var monitors = this.retrieve('$moo:delegateMonitors', {});
					removeEvent.apply(this, [splitted.event, monitors[type]]);
					delete monitors[type];
				}
				return this;
			}
			return removeEvent.apply(this, arguments);
		},

		fireEvent: function(type, args, delay, bind){
			var events = this.retrieve('events');
			if (!events || !events[type]) return this;
			events[type].keys.each(function(fn){
				fn.create({bind: bind || this, delay: delay, arguments: args})();
			}, this);
			return this;
		}

	});

})(Element.prototype.addEvent, Element.prototype.removeEvent);

/*
---

script: Element.Measure.js

description: Extends the Element native object to include methods useful in measuring dimensions.

credits: "Element.measure / .expose methods by Daniel Steigerwald License: MIT-style license. Copyright: Copyright (c) 2008 Daniel Steigerwald, daniel.steigerwald.cz"

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Style
- core:1.2.4/Element.Dimensions
- /MooTools.More

provides: [Element.Measure]

...
*/

Element.implement({

	measure: function(fn){
		var vis = function(el) {
			return !!(!el || el.offsetHeight || el.offsetWidth);
		};
		if (vis(this)) return fn.apply(this);
		var parent = this.getParent(),
			restorers = [],
			toMeasure = []; 
		while (!vis(parent) && parent != document.body) {
			toMeasure.push(parent.expose());
			parent = parent.getParent();
		}
		var restore = this.expose();
		var result = fn.apply(this);
		restore();
		toMeasure.each(function(restore){
			restore();
		});
		return result;
	},

	expose: function(){
		if (this.getStyle('display') != 'none') return $empty;
		var before = this.style.cssText;
		this.setStyles({
			display: 'block',
			position: 'absolute',
			visibility: 'hidden'
		});
		return function(){
			this.style.cssText = before;
		}.bind(this);
	},

	getDimensions: function(options){
		options = $merge({computeSize: false},options);
		var dim = {};
		var getSize = function(el, options){
			return (options.computeSize)?el.getComputedSize(options):el.getSize();
		};
		var parent = this.getParent('body');
		if (parent && this.getStyle('display') == 'none'){
			dim = this.measure(function(){
				return getSize(this, options);
			});
		} else if (parent){
			try { //safari sometimes crashes here, so catch it
				dim = getSize(this, options);
			}catch(e){}
		} else {
			dim = {x: 0, y: 0};
		}
		return $chk(dim.x) ? $extend(dim, {width: dim.x, height: dim.y}) : $extend(dim, {x: dim.width, y: dim.height});
	},

	getComputedSize: function(options){
		options = $merge({
			styles: ['padding','border'],
			plains: {
				height: ['top','bottom'],
				width: ['left','right']
			},
			mode: 'both'
		}, options);
		var size = {width: 0,height: 0};
		switch (options.mode){
			case 'vertical':
				delete size.width;
				delete options.plains.width;
				break;
			case 'horizontal':
				delete size.height;
				delete options.plains.height;
				break;
		}
		var getStyles = [];
		//this function might be useful in other places; perhaps it should be outside this function?
		$each(options.plains, function(plain, key){
			plain.each(function(edge){
				options.styles.each(function(style){
					getStyles.push((style == 'border') ? style + '-' + edge + '-' + 'width' : style + '-' + edge);
				});
			});
		});
		var styles = {};
		getStyles.each(function(style){ styles[style] = this.getComputedStyle(style); }, this);
		var subtracted = [];
		$each(options.plains, function(plain, key){ //keys: width, height, plains: ['left', 'right'], ['top','bottom']
			var capitalized = key.capitalize();
			size['total' + capitalized] = size['computed' + capitalized] = 0;
			plain.each(function(edge){ //top, left, right, bottom
				size['computed' + edge.capitalize()] = 0;
				getStyles.each(function(style, i){ //padding, border, etc.
					//'padding-left'.test('left') size['totalWidth'] = size['width'] + [padding-left]
					if (style.test(edge)){
						styles[style] = styles[style].toInt() || 0; //styles['padding-left'] = 5;
						size['total' + capitalized] = size['total' + capitalized] + styles[style];
						size['computed' + edge.capitalize()] = size['computed' + edge.capitalize()] + styles[style];
					}
					//if width != width (so, padding-left, for instance), then subtract that from the total
					if (style.test(edge) && key != style &&
						(style.test('border') || style.test('padding')) && !subtracted.contains(style)){
						subtracted.push(style);
						size['computed' + capitalized] = size['computed' + capitalized]-styles[style];
					}
				});
			});
		});

		['Width', 'Height'].each(function(value){
			var lower = value.toLowerCase();
			if(!$chk(size[lower])) return;

			size[lower] = size[lower] + this['offset' + value] + size['computed' + value];
			size['total' + value] = size[lower] + size['total' + value];
			delete size['computed' + value];
		}, this);

		return $extend(styles, size);
	}

});

/*
---

script: Element.Pin.js

description: Extends the Element native object to include the pin method useful for fixed positioning for elements.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Event
- core:1.2.4/Element.Dimensions
- core:1.2.4/Element.Style
- /MooTools.More

provides: [Element.Pin]

...
*/

(function(){
	var supportsPositionFixed = false;
	window.addEvent('domready', function(){
		var test = new Element('div').setStyles({
			position: 'fixed',
			top: 0,
			right: 0
		}).inject(document.body);
		supportsPositionFixed = (test.offsetTop === 0);
		test.dispose();
	});

	Element.implement({

		pin: function(enable){
			if (this.getStyle('display') == 'none') return null;
			
			var p,
					scroll = window.getScroll();
			if (enable !== false){
				p = this.getPosition();
				if (!this.retrieve('pinned')){
					var pos = {
						top: p.y - scroll.y,
						left: p.x - scroll.x
					};
					if (supportsPositionFixed){
						this.setStyle('position', 'fixed').setStyles(pos);
					} else {
						this.store('pinnedByJS', true);
						this.setStyles({
							position: 'absolute',
							top: p.y,
							left: p.x
						}).addClass('isPinned');
						this.store('scrollFixer', (function(){
							if (this.retrieve('pinned'))
								var scroll = window.getScroll();
								this.setStyles({
									top: pos.top.toInt() + scroll.y,
									left: pos.left.toInt() + scroll.x
								});
						}).bind(this));
						window.addEvent('scroll', this.retrieve('scrollFixer'));
					}
					this.store('pinned', true);
				}
			} else {
				var op;
				if (!Browser.Engine.trident){
					var parent = this.getParent();
					op = (parent.getComputedStyle('position') != 'static' ? parent : parent.getOffsetParent());
				}
				p = this.getPosition(op);
				this.store('pinned', false);
				var reposition;
				if (supportsPositionFixed && !this.retrieve('pinnedByJS')){
					reposition = {
						top: p.y + scroll.y,
						left: p.x + scroll.x
					};
				} else {
					this.store('pinnedByJS', false);
					window.removeEvent('scroll', this.retrieve('scrollFixer'));
					reposition = {
						top: p.y,
						left: p.x
					};
				}
				this.setStyles($merge(reposition, {position: 'absolute'})).removeClass('isPinned');
			}
			return this;
		},

		unpin: function(){
			return this.pin(false);
		},

		togglepin: function(){
			this.pin(!this.retrieve('pinned'));
		}

	});

})();

/*
---

script: Element.Position.js

description: Extends the Element native object to include methods useful positioning elements relative to others.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Dimensions
- /Element.Measure

provides: [Elements.Position]

...
*/

(function(){

var original = Element.prototype.position;

Element.implement({

	position: function(options){
		//call original position if the options are x/y values
		if (options && ($defined(options.x) || $defined(options.y))) return original ? original.apply(this, arguments) : this;
		$each(options||{}, function(v, k){ if (!$defined(v)) delete options[k]; });
		options = $merge({
			// minimum: { x: 0, y: 0 },
			// maximum: { x: 0, y: 0},
			relativeTo: document.body,
			position: {
				x: 'center', //left, center, right
				y: 'center' //top, center, bottom
			},
			edge: false,
			offset: {x: 0, y: 0},
			returnPos: false,
			relFixedPosition: false,
			ignoreMargins: false,
			ignoreScroll: false,
			allowNegative: false
		}, options);
		//compute the offset of the parent positioned element if this element is in one
		var parentOffset = {x: 0, y: 0}, 
				parentPositioned = false;
		/* dollar around getOffsetParent should not be necessary, but as it does not return
		 * a mootools extended element in IE, an error occurs on the call to expose. See:
		 * http://mootools.lighthouseapp.com/projects/2706/tickets/333-element-getoffsetparent-inconsistency-between-ie-and-other-browsers */
		var offsetParent = this.measure(function(){
			return document.id(this.getOffsetParent());
		});
		if (offsetParent && offsetParent != this.getDocument().body){
			parentOffset = offsetParent.measure(function(){
				return this.getPosition();
			});
			parentPositioned = offsetParent != document.id(options.relativeTo);
			options.offset.x = options.offset.x - parentOffset.x;
			options.offset.y = options.offset.y - parentOffset.y;
		}
		//upperRight, bottomRight, centerRight, upperLeft, bottomLeft, centerLeft
		//topRight, topLeft, centerTop, centerBottom, center
		var fixValue = function(option){
			if ($type(option) != 'string') return option;
			option = option.toLowerCase();
			var val = {};
			if (option.test('left')) val.x = 'left';
			else if (option.test('right')) val.x = 'right';
			else val.x = 'center';
			if (option.test('upper') || option.test('top')) val.y = 'top';
			else if (option.test('bottom')) val.y = 'bottom';
			else val.y = 'center';
			return val;
		};
		options.edge = fixValue(options.edge);
		options.position = fixValue(options.position);
		if (!options.edge){
			if (options.position.x == 'center' && options.position.y == 'center') options.edge = {x:'center', y:'center'};
			else options.edge = {x:'left', y:'top'};
		}

		this.setStyle('position', 'absolute');
		var rel = document.id(options.relativeTo) || document.body,
				calc = rel == document.body ? window.getScroll() : rel.getPosition(),
				top = calc.y, left = calc.x;

		var dim = this.getDimensions({computeSize: true, styles:['padding', 'border','margin']});
		var pos = {},
				prefY = options.offset.y,
				prefX = options.offset.x,
				winSize = window.getSize();
		switch(options.position.x){
			case 'left':
				pos.x = left + prefX;
				break;
			case 'right':
				pos.x = left + prefX + rel.offsetWidth;
				break;
			default: //center
				pos.x = left + ((rel == document.body ? winSize.x : rel.offsetWidth)/2) + prefX;
				break;
		}
		switch(options.position.y){
			case 'top':
				pos.y = top + prefY;
				break;
			case 'bottom':
				pos.y = top + prefY + rel.offsetHeight;
				break;
			default: //center
				pos.y = top + ((rel == document.body ? winSize.y : rel.offsetHeight)/2) + prefY;
				break;
		}
		if (options.edge){
			var edgeOffset = {};

			switch(options.edge.x){
				case 'left':
					edgeOffset.x = 0;
					break;
				case 'right':
					edgeOffset.x = -dim.x-dim.computedRight-dim.computedLeft;
					break;
				default: //center
					edgeOffset.x = -(dim.totalWidth/2);
					break;
			}
			switch(options.edge.y){
				case 'top':
					edgeOffset.y = 0;
					break;
				case 'bottom':
					edgeOffset.y = -dim.y-dim.computedTop-dim.computedBottom;
					break;
				default: //center
					edgeOffset.y = -(dim.totalHeight/2);
					break;
			}
			pos.x += edgeOffset.x;
			pos.y += edgeOffset.y;
		}
		pos = {
			left: ((pos.x >= 0 || parentPositioned || options.allowNegative) ? pos.x : 0).toInt(),
			top: ((pos.y >= 0 || parentPositioned || options.allowNegative) ? pos.y : 0).toInt()
		};
		var xy = {left: 'x', top: 'y'};
		['minimum', 'maximum'].each(function(minmax) {
			['left', 'top'].each(function(lr) {
				var val = options[minmax] ? options[minmax][xy[lr]] : null;
				if (val != null && pos[lr] < val) pos[lr] = val;
			});
		});
		if (rel.getStyle('position') == 'fixed' || options.relFixedPosition){
			var winScroll = window.getScroll();
			pos.top+= winScroll.y;
			pos.left+= winScroll.x;
		}
		if (options.ignoreScroll) {
			var relScroll = rel.getScroll();
			pos.top-= relScroll.y;
			pos.left-= relScroll.x;
		}
		if (options.ignoreMargins) {
			pos.left += (
				options.edge.x == 'right' ? dim['margin-right'] : 
				options.edge.x == 'center' ? -dim['margin-left'] + ((dim['margin-right'] + dim['margin-left'])/2) : 
					- dim['margin-left']
			);
			pos.top += (
				options.edge.y == 'bottom' ? dim['margin-bottom'] : 
				options.edge.y == 'center' ? -dim['margin-top'] + ((dim['margin-bottom'] + dim['margin-top'])/2) : 
					- dim['margin-top']
			);
		}
		pos.left = Math.ceil(pos.left);
		pos.top = Math.ceil(pos.top);
		if (options.returnPos) return pos;
		else this.setStyles(pos);
		return this;
	}

});

})();

/*
---

script: Element.Shortcuts.js

description: Extends the Element native object to include some shortcut methods.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Style
- /MooTools.More

provides: [Element.Shortcuts]

...
*/

Element.implement({

	isDisplayed: function(){
		return this.getStyle('display') != 'none';
	},

	isVisible: function(){
		var w = this.offsetWidth,
			h = this.offsetHeight;
		return (w == 0 && h == 0) ? false : (w > 0 && h > 0) ? true : this.isDisplayed();
	},

	toggle: function(){
		return this[this.isDisplayed() ? 'hide' : 'show']();
	},

	hide: function(){
		var d;
		try {
			//IE fails here if the element is not in the dom
			d = this.getStyle('display');
		} catch(e){}
		return this.store('originalDisplay', d || '').setStyle('display', 'none');
	},

	show: function(display){
		display = display || this.retrieve('originalDisplay') || 'block';
		return this.setStyle('display', (display == 'none') ? 'block' : display);
	},

	swapClass: function(remove, add){
		return this.removeClass(remove).addClass(add);
	}

});


/*
---

script: Form.Request.js

description: Handles the basic functionality of submitting a form and updating a dom element with the result.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Event
- core:1.2.4/Request.HTML
- /Class.Binds
- /Class.Occlude
- /Spinner
- /String.QueryString

provides: [Form.Request]

...
*/

if (!window.Form) window.Form = {};

(function(){

	Form.Request = new Class({

		Binds: ['onSubmit', 'onFormValidate'],

		Implements: [Options, Events, Class.Occlude],

		options: {
			//onFailure: $empty,
			//onSuccess: #empty, //aliased to onComplete,
			//onSend: $empty
			requestOptions: {
				evalScripts: true,
				useSpinner: true,
				emulation: false,
				link: 'ignore'
			},
			extraData: {},
			resetForm: true
		},

		property: 'form.request',

		initialize: function(form, update, options) {
			this.element = document.id(form);
			if (this.occlude()) return this.occluded;
			this.update = document.id(update);
			this.setOptions(options);
			this.makeRequest();
			if (this.options.resetForm) {
				this.request.addEvent('success', function(){
					$try(function(){ this.element.reset(); }.bind(this));
					if (window.OverText) OverText.update();
				}.bind(this));
			}
			this.attach();
		},

		toElement: function() {
			return this.element;
		},

		makeRequest: function(){
			this.request = new Request.HTML($merge({
					update: this.update,
					emulation: false,
					spinnerTarget: this.element,
					method: this.element.get('method') || 'post'
			}, this.options.requestOptions)).addEvents({
				success: function(text, xml){
					['complete', 'success'].each(function(evt){
						this.fireEvent(evt, [this.update, text, xml]);
					}, this);
				}.bind(this),
				failure: function(xhr){
					this.fireEvent('complete').fireEvent('failure', xhr);
				}.bind(this),
				exception: function(){
					this.fireEvent('failure', xhr);
				}.bind(this)
			});
		},

		attach: function(attach){
			attach = $pick(attach, true);
			method = attach ? 'addEvent' : 'removeEvent';
			
			var fv = this.element.retrieve('validator');
			if (fv) fv[method]('onFormValidate', this.onFormValidate);
			if (!fv || !attach) this.element[method]('submit', this.onSubmit);
		},

		detach: function(){
			this.attach(false);
		},

		//public method
		enable: function(){
			this.attach();
		},

		//public method
		disable: function(){
			this.detach();
		},

		onFormValidate: function(valid, form, e) {
			var fv = this.element.retrieve('validator');
			if (valid || (fv && !fv.options.stopOnFailure)) {
				if (e && e.stop) e.stop();
				this.send();
			}
		},

		onSubmit: function(e){
			if (this.element.retrieve('validator')) {
				//form validator was created after Form.Request
				this.detach();
				return;
			}
			e.stop();
			this.send();
		},

		send: function(){
			var str = this.element.toQueryString().trim();
			var data = $H(this.options.extraData).toQueryString();
			if (str) str += "&" + data;
			else str = data;
			this.fireEvent('send', [this.element, str.parseQueryString()]);
			this.request.send({data: str, url: this.element.get("action")});
			return this;
		}

	});

	Element.Properties.formRequest = {

		set: function(){
			var opt = Array.link(arguments, {options: Object.type, update: Element.type, updateId: String.type});
			var update = opt.update || opt.updateId;
			var updater = this.retrieve('form.request');
			if (update) {
				if (updater) updater.update = document.id(update);
				this.store('form.request:update', update);
			}
			if (opt.options) {
				if (updater) updater.setOptions(opt.options);
				this.store('form.request:options', opt.options);
			}
			return this;
		},

		get: function(){
			var opt = Array.link(arguments, {options: Object.type, update: Element.type, updateId: String.type});
			var update = opt.update || opt.updateId;
			if (opt.options || update || !this.retrieve('form.request')){
				if (opt.options || !this.retrieve('form.request:options')) this.set('form.request', opt.options);
				if (update) this.set('form.request', update);
				this.store('form.request', new Form.Request(this, this.retrieve('form.request:update'), this.retrieve('form.request:options')));
			}
			return this.retrieve('form.request');
		}

	};

	Element.implement({

		formUpdate: function(update, options){
			this.get('form.request', update, options).send();
			return this;
		}

	});

})();

/*
---

script: Form.Request.Append.js

description: Handles the basic functionality of submitting a form and updating a dom element with the result. The result is appended to the DOM element instead of replacing its contents.

license: MIT-style license

authors:
- Aaron Newton

requires:
- /Form.Request
- /Fx.Reveal
- /Elements.from

provides: [Form.Request.Append]

...
*/

Form.Request.Append = new Class({

	Extends: Form.Request,

	options: {
		//onBeforeEffect: $empty,
		useReveal: true,
		revealOptions: {},
		inject: 'bottom'
	},

	makeRequest: function(){
		this.request = new Request.HTML($merge({
				url: this.element.get('action'),
				method: this.element.get('method') || 'post',
				spinnerTarget: this.element
			}, this.options.requestOptions, {
				evalScripts: false
			})
		).addEvents({
			success: function(tree, elements, html, javascript){
				var container;
				var kids = Elements.from(html);
				if (kids.length == 1) {
					container = kids[0];
				} else {
					 container = new Element('div', {
						styles: {
							display: 'none'
						}
					}).adopt(kids);
				}
				container.inject(this.update, this.options.inject);
				if (this.options.requestOptions.evalScripts) $exec(javascript);
				this.fireEvent('beforeEffect', container);
				var finish = function(){
					this.fireEvent('success', [container, this.update, tree, elements, html, javascript]);
				}.bind(this);
				if (this.options.useReveal) {
					container.get('reveal', this.options.revealOptions).chain(finish);
					container.reveal();
				} else {
					finish();
				}
			}.bind(this),
			failure: function(xhr){
				this.fireEvent('failure', xhr);
			}.bind(this)
		});
	}

});

/*
---

script: Form.Validator.js

description: A css-class based form validation system.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Options
- core:1.2.4/Events
- core:1.2.4/Selectors
- core:1.2.4/Element.Event
- core:1.2.4/Element.Style
- core:1.2.4/JSON
- /Lang- /Class.Binds
- /Date Element.Forms
- /Form.Validator.English
- /Element.Shortcuts

provides: [Form.Validator, InputValidator, FormValidator.BaseValidators]

...
*/
if (!window.Form) window.Form = {};

var InputValidator = new Class({

	Implements: [Options],

	options: {
		errorMsg: 'Validation failed.',
		test: function(field){return true;}
	},

	initialize: function(className, options){
		this.setOptions(options);
		this.className = className;
	},

	test: function(field, props){
		if (document.id(field)) return this.options.test(document.id(field), props||this.getProps(field));
		else return false;
	},

	getError: function(field, props){
		var err = this.options.errorMsg;
		if ($type(err) == 'function') err = err(document.id(field), props||this.getProps(field));
		return err;
	},

	getProps: function(field){
		if (!document.id(field)) return {};
		return field.get('validatorProps');
	}

});

Element.Properties.validatorProps = {

	set: function(props){
		return this.eliminate('validatorProps').store('validatorProps', props);
	},

	get: function(props){
		if (props) this.set(props);
		if (this.retrieve('validatorProps')) return this.retrieve('validatorProps');
		if (this.getProperty('validatorProps')){
			try {
				this.store('validatorProps', JSON.decode(this.getProperty('validatorProps')));
			}catch(e){
				return {};
			}
		} else {
			var vals = this.get('class').split(' ').filter(function(cls){
				return cls.test(':');
			});
			if (!vals.length){
				this.store('validatorProps', {});
			} else {
				props = {};
				vals.each(function(cls){
					var split = cls.split(':');
					if (split[1]) {
						try {
							props[split[0]] = JSON.decode(split[1]);
						} catch(e) {}
					}
				});
				this.store('validatorProps', props);
			}
		}
		return this.retrieve('validatorProps');
	}

};

Form.Validator = new Class({

	Implements:[Options, Events],

	Binds: ['onSubmit'],

	options: {/*
		onFormValidate: $empty(isValid, form, event),
		onElementValidate: $empty(isValid, field, className, warn),
		onElementPass: $empty(field),
		onElementFail: $empty(field, validatorsFailed) */
		fieldSelectors: 'input, select, textarea',
		ignoreHidden: true,
		ignoreDisabled: true,
		useTitles: false,
		evaluateOnSubmit: true,
		evaluateFieldsOnBlur: true,
		evaluateFieldsOnChange: true,
		serial: true,
		stopOnFailure: true,
		warningPrefix: function(){
			return Form.Validator.getMsg('warningPrefix') || 'Warning: ';
		},
		errorPrefix: function(){
			return Form.Validator.getMsg('errorPrefix') || 'Error: ';
		}
	},

	initialize: function(form, options){
		this.setOptions(options);
		this.element = document.id(form);
		this.element.store('validator', this);
		this.warningPrefix = $lambda(this.options.warningPrefix)();
		this.errorPrefix = $lambda(this.options.errorPrefix)();
		if (this.options.evaluateOnSubmit) this.element.addEvent('submit', this.onSubmit);
		if (this.options.evaluateFieldsOnBlur || this.options.evaluateFieldsOnChange) this.watchFields(this.getFields());
	},

	toElement: function(){
		return this.element;
	},

	getFields: function(){
		return (this.fields = this.element.getElements(this.options.fieldSelectors));
	},

	watchFields: function(fields){
		fields.each(function(el){
			if (this.options.evaluateFieldsOnBlur)
				el.addEvent('blur', this.validationMonitor.pass([el, false], this));
			if (this.options.evaluateFieldsOnChange)
				el.addEvent('change', this.validationMonitor.pass([el, true], this));
		}, this);
	},

	validationMonitor: function(){
		$clear(this.timer);
		this.timer = this.validateField.delay(50, this, arguments);
	},

	onSubmit: function(event){
		if (!this.validate(event) && event) event.preventDefault();
		else this.reset();
	},

	reset: function(){
		this.getFields().each(this.resetField, this);
		return this;
	},

	validate: function(event){
		var result = this.getFields().map(function(field){
			return this.validateField(field, true);
		}, this).every(function(v){ return v;});
		this.fireEvent('formValidate', [result, this.element, event]);
		if (this.options.stopOnFailure && !result && event) event.preventDefault();
		return result;
	},

	validateField: function(field, force){
		if (this.paused) return true;
		field = document.id(field);
		var passed = !field.hasClass('validation-failed');
		var failed, warned;
		if (this.options.serial && !force){
			failed = this.element.getElement('.validation-failed');
			warned = this.element.getElement('.warning');
		}
		if (field && (!failed || force || field.hasClass('validation-failed') || (failed && !this.options.serial))){
			var validators = field.className.split(' ').some(function(cn){
				return this.getValidator(cn);
			}, this);
			var validatorsFailed = [];
			field.className.split(' ').each(function(className){
				if (className && !this.test(className, field)) validatorsFailed.include(className);
			}, this);
			passed = validatorsFailed.length === 0;
			if (validators && !field.hasClass('warnOnly')){
				if (passed){
					field.addClass('validation-passed').removeClass('validation-failed');
					this.fireEvent('elementPass', field);
				} else {
					field.addClass('validation-failed').removeClass('validation-passed');
					this.fireEvent('elementFail', [field, validatorsFailed]);
				}
			}
			if (!warned){
				var warnings = field.className.split(' ').some(function(cn){
					if (cn.test('^warn-') || field.hasClass('warnOnly'))
						return this.getValidator(cn.replace(/^warn-/,''));
					else return null;
				}, this);
				field.removeClass('warning');
				var warnResult = field.className.split(' ').map(function(cn){
					if (cn.test('^warn-') || field.hasClass('warnOnly'))
						return this.test(cn.replace(/^warn-/,''), field, true);
					else return null;
				}, this);
			}
		}
		return passed;
	},

	test: function(className, field, warn){
		field = document.id(field);
		if((this.options.ignoreHidden && !field.isVisible()) || (this.options.ignoreDisabled && field.get('disabled'))) return true;
		var validator = this.getValidator(className);
		if (field.hasClass('ignoreValidation')) return true;
		warn = $pick(warn, false);
		if (field.hasClass('warnOnly')) warn = true;
		var isValid = validator ? validator.test(field) : true;
		if (validator && field.isVisible()) this.fireEvent('elementValidate', [isValid, field, className, warn]);
		if (warn) return true;
		return isValid;
	},

	resetField: function(field){
		field = document.id(field);
		if (field){
			field.className.split(' ').each(function(className){
				if (className.test('^warn-')) className = className.replace(/^warn-/, '');
				field.removeClass('validation-failed');
				field.removeClass('warning');
				field.removeClass('validation-passed');
			}, this);
		}
		return this;
	},

	stop: function(){
		this.paused = true;
		return this;
	},

	start: function(){
		this.paused = false;
		return this;
	},

	ignoreField: function(field, warn){
		field = document.id(field);
		if (field){
			this.enforceField(field);
			if (warn) field.addClass('warnOnly');
			else field.addClass('ignoreValidation');
		}
		return this;
	},

	enforceField: function(field){
		field = document.id(field);
		if (field) field.removeClass('warnOnly').removeClass('ignoreValidation');
		return this;
	}

});

Form.Validator.getMsg = function(key){
	return MooTools.lang.get('Form.Validator', key);
};

Form.Validator.adders = {

	validators:{},

	add : function(className, options){
		this.validators[className] = new InputValidator(className, options);
		//if this is a class (this method is used by instances of Form.Validator and the Form.Validator namespace)
		//extend these validators into it
		//this allows validators to be global and/or per instance
		if (!this.initialize){
			this.implement({
				validators: this.validators
			});
		}
	},

	addAllThese : function(validators){
		$A(validators).each(function(validator){
			this.add(validator[0], validator[1]);
		}, this);
	},

	getValidator: function(className){
		return this.validators[className.split(':')[0]];
	}

};

$extend(Form.Validator, Form.Validator.adders);

Form.Validator.implement(Form.Validator.adders);

Form.Validator.add('IsEmpty', {

	errorMsg: false,
	test: function(element){
		if (element.type == 'select-one' || element.type == 'select')
			return !(element.selectedIndex >= 0 && element.options[element.selectedIndex].value != '');
		else
			return ((element.get('value') == null) || (element.get('value').length == 0));
	}

});

Form.Validator.addAllThese([

	['required', {
		errorMsg: function(){
			return Form.Validator.getMsg('required');
		},
		test: function(element){
			return !Form.Validator.getValidator('IsEmpty').test(element);
		}
	}],

	['minLength', {
		errorMsg: function(element, props){
			if ($type(props.minLength))
				return Form.Validator.getMsg('minLength').substitute({minLength:props.minLength,length:element.get('value').length });
			else return '';
		},
		test: function(element, props){
			if ($type(props.minLength)) return (element.get('value').length >= $pick(props.minLength, 0));
			else return true;
		}
	}],

	['maxLength', {
		errorMsg: function(element, props){
			//props is {maxLength:10}
			if ($type(props.maxLength))
				return Form.Validator.getMsg('maxLength').substitute({maxLength:props.maxLength,length:element.get('value').length });
			else return '';
		},
		test: function(element, props){
			//if the value is <= than the maxLength value, element passes test
			return (element.get('value').length <= $pick(props.maxLength, 10000));
		}
	}],

	['validate-integer', {
		errorMsg: Form.Validator.getMsg.pass('integer'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) || (/^(-?[1-9]\d*|0)$/).test(element.get('value'));
		}
	}],

	['validate-numeric', {
		errorMsg: Form.Validator.getMsg.pass('numeric'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) ||
				(/^-?(?:0$0(?=\d*\.)|[1-9]|0)\d*(\.\d+)?$/).test(element.get('value'));
		}
	}],

	['validate-digits', {
		errorMsg: Form.Validator.getMsg.pass('digits'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) || (/^[\d() .:\-\+#]+$/.test(element.get('value')));
		}
	}],

	['validate-alpha', {
		errorMsg: Form.Validator.getMsg.pass('alpha'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) ||  (/^[a-zA-Z]+$/).test(element.get('value'));
		}
	}],

	['validate-alphanum', {
		errorMsg: Form.Validator.getMsg.pass('alphanum'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) || !(/\W/).test(element.get('value'));
		}
	}],

	['validate-date', {
		errorMsg: function(element, props){
			if (Date.parse){
				var format = props.dateFormat || '%x';
				return Form.Validator.getMsg('dateSuchAs').substitute({date: new Date().format(format)});
			} else {
				return Form.Validator.getMsg('dateInFormatMDY');
			}
		},
		test: function(element, props){
			if (Form.Validator.getValidator('IsEmpty').test(element)) return true;
			var d;
			if (Date.parse){
				var format = props.dateFormat || '%x';
				d = Date.parse(element.get('value'));
				var formatted = d.format(format);
				if (formatted != 'invalid date') element.set('value', formatted);
				return !isNaN(d);
			} else {
				var regex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
				if (!regex.test(element.get('value'))) return false;
				d = new Date(element.get('value').replace(regex, '$1/$2/$3'));
				return (parseInt(RegExp.$1, 10) == (1 + d.getMonth())) &&
					(parseInt(RegExp.$2, 10) == d.getDate()) &&
					(parseInt(RegExp.$3, 10) == d.getFullYear());
			}
		}
	}],

	['validate-email', {
		errorMsg: Form.Validator.getMsg.pass('email'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) || (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i).test(element.get('value'));
		}
	}],

	['validate-url', {
		errorMsg: Form.Validator.getMsg.pass('url'),
		test: function(element){
			return Form.Validator.getValidator('IsEmpty').test(element) || (/^(https?|ftp|rmtp|mms):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+)(:(\d+))?\/?/i).test(element.get('value'));
		}
	}],

	['validate-currency-dollar', {
		errorMsg: Form.Validator.getMsg.pass('currencyDollar'),
		test: function(element){
			// [$]1[##][,###]+[.##]
			// [$]1###+[.##]
			// [$]0.##
			// [$].##
			return Form.Validator.getValidator('IsEmpty').test(element) ||  (/^\$?\-?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}\d*(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$/).test(element.get('value'));
		}
	}],

	['validate-one-required', {
		errorMsg: Form.Validator.getMsg.pass('oneRequired'),
		test: function(element, props){
			var p = document.id(props['validate-one-required']) || element.getParent();
			return p.getElements('input').some(function(el){
				if (['checkbox', 'radio'].contains(el.get('type'))) return el.get('checked');
				return el.get('value');
			});
		}
	}]

]);

Element.Properties.validator = {

	set: function(options){
		var validator = this.retrieve('validator');
		if (validator) validator.setOptions(options);
		return this.store('validator:options');
	},

	get: function(options){
		if (options || !this.retrieve('validator')){
			if (options || !this.retrieve('validator:options')) this.set('validator', options);
			this.store('validator', new Form.Validator(this, this.retrieve('validator:options')));
		}
		return this.retrieve('validator');
	}

};

Element.implement({

	validate: function(options){
		this.set('validator', options);
		return this.get('validator', options).validate();
	}

});
//legacy
var FormValidator = Form.Validator;

/*
---

script: Form.Validator.Inline.js

description: Extends Form.Validator to add inline messages.

license: MIT-style license

authors:
- Aaron Newton

requires:
- /Form.Validator

provides: [Form.Validator.Inline]

...
*/

Form.Validator.Inline = new Class({

	Extends: Form.Validator,

	options: {
		scrollToErrorsOnSubmit: true,
		scrollFxOptions: {
			transition: 'quad:out',
			offset: {
				y: -20
			}
		}
	},

	initialize: function(form, options){
		this.parent(form, options);
		this.addEvent('onElementValidate', function(isValid, field, className, warn){
			var validator = this.getValidator(className);
			if (!isValid && validator.getError(field)){
				if (warn) field.addClass('warning');
				var advice = this.makeAdvice(className, field, validator.getError(field), warn);
				this.insertAdvice(advice, field);
				this.showAdvice(className, field);
			} else {
				this.hideAdvice(className, field);
			}
		});
	},

	makeAdvice: function(className, field, error, warn){
		var errorMsg = (warn)?this.warningPrefix:this.errorPrefix;
			errorMsg += (this.options.useTitles) ? field.title || error:error;
		var cssClass = (warn) ? 'warning-advice' : 'validation-advice';
		var advice = this.getAdvice(className, field);
		if(advice) {
			advice = advice.set('html', errorMsg);
		} else {
			advice = new Element('div', {
				html: errorMsg,
				styles: { display: 'none' },
				id: 'advice-' + className + '-' + this.getFieldId(field)
			}).addClass(cssClass);
		}
		field.store('advice-' + className, advice);
		return advice;
	},

	getFieldId : function(field){
		return field.id ? field.id : field.id = 'input_' + field.name;
	},

	showAdvice: function(className, field){
		var advice = this.getAdvice(className, field);
		if (advice && !field.retrieve(this.getPropName(className))
				&& (advice.getStyle('display') == 'none'
				|| advice.getStyle('visiblity') == 'hidden'
				|| advice.getStyle('opacity') == 0)){
			field.store(this.getPropName(className), true);
			if (advice.reveal) advice.reveal();
			else advice.setStyle('display', 'block');
		}
	},

	hideAdvice: function(className, field){
		var advice = this.getAdvice(className, field);
		if (advice && field.retrieve(this.getPropName(className))){
			field.store(this.getPropName(className), false);
			//if Fx.Reveal.js is present, transition the advice out
			if (advice.dissolve) advice.dissolve();
			else advice.setStyle('display', 'none');
		}
	},

	getPropName: function(className){
		return 'advice' + className;
	},

	resetField: function(field){
		field = document.id(field);
		if (!field) return this;
		this.parent(field);
		field.className.split(' ').each(function(className){
			this.hideAdvice(className, field);
		}, this);
		return this;
	},

	getAllAdviceMessages: function(field, force){
		var advice = [];
		if (field.hasClass('ignoreValidation') && !force) return advice;
		var validators = field.className.split(' ').some(function(cn){
			var warner = cn.test('^warn-') || field.hasClass('warnOnly');
			if (warner) cn = cn.replace(/^warn-/, '');
			var validator = this.getValidator(cn);
			if (!validator) return;
			advice.push({
				message: validator.getError(field),
				warnOnly: warner,
				passed: validator.test(),
				validator: validator
			});
		}, this);
		return advice;
	},

	getAdvice: function(className, field){
		return field.retrieve('advice-' + className);
	},

	insertAdvice: function(advice, field){
		//Check for error position prop
		var props = field.get('validatorProps');
		//Build advice
		if (!props.msgPos || !document.id(props.msgPos)){
			if(field.type.toLowerCase() == 'radio') field.getParent().adopt(advice);
			else advice.inject(document.id(field), 'after');
		} else {
			document.id(props.msgPos).grab(advice);
		}
	},

	validateField: function(field, force){
		var result = this.parent(field, force);
		if (this.options.scrollToErrorsOnSubmit && !result){
			var failed = document.id(this).getElement('.validation-failed');
			var par = document.id(this).getParent();
			while (par != document.body && par.getScrollSize().y == par.getSize().y){
				par = par.getParent();
			}
			var fx = par.retrieve('fvScroller');
			if (!fx && window.Fx && Fx.Scroll){
				fx = new Fx.Scroll(par, this.options.scrollFxOptions);
				par.store('fvScroller', fx);
			}
			if (failed){
				if (fx) fx.toElement(failed);
				else par.scrollTo(par.getScroll().x, failed.getPosition(par).y - 20);
			}
		}
		return result;
	}

});


/*
---

script: Form.Validator.Extras.js

description: Additional validators for the Form.Validator class.

license: MIT-style license

authors:
- Aaron Newton

requires:
- /Form.Validator

provides: [Form.Validator.Extras]

...
*/
Form.Validator.addAllThese([

	['validate-enforce-oncheck', {
		test: function(element, props){
			if (element.checked){
				var fv = element.getParent('form').retrieve('validator');
				if (!fv) return true;
				(props.toEnforce || document.id(props.enforceChildrenOf).getElements('input, select, textarea')).map(function(item){
					fv.enforceField(item);
				});
			}
			return true;
		}
	}],

	['validate-ignore-oncheck', {
		test: function(element, props){
			if (element.checked){
				var fv = element.getParent('form').retrieve('validator');
				if (!fv) return true;
				(props.toIgnore || document.id(props.ignoreChildrenOf).getElements('input, select, textarea')).each(function(item){
					fv.ignoreField(item);
					fv.resetField(item);
				});
			}
			return true;
		}
	}],

	['validate-nospace', {
		errorMsg: function(){
			return Form.Validator.getMsg('noSpace');
		},
		test: function(element, props){
			return !element.get('value').test(/\s/);
		}
	}],

	['validate-toggle-oncheck', {
		test: function(element, props){
			var fv = element.getParent('form').retrieve('validator');
			if (!fv) return true;
			var eleArr = props.toToggle || document.id(props.toToggleChildrenOf).getElements('input, select, textarea');
			if (!element.checked){
				eleArr.each(function(item){
					fv.ignoreField(item);
					fv.resetField(item);
				});
			} else {
				eleArr.each(function(item){
					fv.enforceField(item);
				});
			}
			return true;
		}
	}],

	['validate-reqchk-bynode', {
		errorMsg: function(){
			return Form.Validator.getMsg('reqChkByNode');
		},
		test: function(element, props){
			return (document.id(props.nodeId).getElements(props.selector || 'input[type=checkbox], input[type=radio]')).some(function(item){
				return item.checked;
			});
		}
	}],

	['validate-required-check', {
		errorMsg: function(element, props){
			return props.useTitle ? element.get('title') : Form.Validator.getMsg('requiredChk');
		},
		test: function(element, props){
			return !!element.checked;
		}
	}],

	['validate-reqchk-byname', {
		errorMsg: function(element, props){
			return Form.Validator.getMsg('reqChkByName').substitute({label: props.label || element.get('type')});
		},
		test: function(element, props){
			var grpName = props.groupName || element.get('name');
			var oneCheckedItem = $$(document.getElementsByName(grpName)).some(function(item, index){
				return item.checked;
			});
			var fv = element.getParent('form').retrieve('validator');
			if (oneCheckedItem && fv) fv.resetField(element);
			return oneCheckedItem;
		}
	}],

	['validate-match', {
		errorMsg: function(element, props){
			return Form.Validator.getMsg('match').substitute({matchName: props.matchName || document.id(props.matchInput).get('name')});
		},
		test: function(element, props){
			var eleVal = element.get('value');
			var matchVal = document.id(props.matchInput) && document.id(props.matchInput).get('value');
			return eleVal && matchVal ? eleVal == matchVal : true;
		}
	}],

	['validate-after-date', {
		errorMsg: function(element, props){
			return Form.Validator.getMsg('afterDate').substitute({
				label: props.afterLabel || (props.afterElement ? Form.Validator.getMsg('startDate') : Form.Validator.getMsg('currentDate'))
			});
		},
		test: function(element, props){
			var start = document.id(props.afterElement) ? Date.parse(document.id(props.afterElement).get('value')) : new Date();
			var end = Date.parse(element.get('value'));
			return end && start ? end >= start : true;
		}
	}],

	['validate-before-date', {
		errorMsg: function(element, props){
			return Form.Validator.getMsg('beforeDate').substitute({
				label: props.beforeLabel || (props.beforeElement ? Form.Validator.getMsg('endDate') : Form.Validator.getMsg('currentDate'))
			});
		},
		test: function(element, props){
			var start = Date.parse(element.get('value'));
			var end = document.id(props.beforeElement) ? Date.parse(document.id(props.beforeElement).get('value')) : new Date();
			return end && start ? end >= start : true;
		}
	}],

	['validate-custom-required', {
		errorMsg: function(){
			return Form.Validator.getMsg('required');
		},
		test: function(element, props){
			return element.get('value') != props.emptyValue;
		}
	}],

	['validate-same-month', {
		errorMsg: function(element, props){
			var startMo = document.id(props.sameMonthAs) && document.id(props.sameMonthAs).get('value');
			var eleVal = element.get('value');
			if (eleVal != '') return Form.Validator.getMsg(startMo ? 'sameMonth' : 'startMonth');
		},
		test: function(element, props){
			var d1 = Date.parse(element.get('value'));
			var d2 = Date.parse(document.id(props.sameMonthAs) && document.id(props.sameMonthAs).get('value'));
			return d1 && d2 ? d1.format('%B') == d2.format('%B') : true;
		}
	}],


	['validate-cc-num', {
		errorMsg: function(element){
			var ccNum = element.get('value').replace(/[^0-9]/g, '');
			return Form.Validator.getMsg('creditcard').substitute({length: ccNum.length});
		},
		test: function(element){
			// required is a different test
			if (Form.Validator.getValidator('IsEmpty').test(element)) { return true; }

			// Clean number value
			var ccNum = element.get('value');
			ccNum = ccNum.replace(/[^0-9]/g, '');

			var valid_type = false;

			if (ccNum.test(/^4[0-9]{12}([0-9]{3})?$/)) valid_type = 'Visa';
			else if (ccNum.test(/^5[1-5]([0-9]{14})$/)) valid_type = 'Master Card';
			else if (ccNum.test(/^3[47][0-9]{13}$/)) valid_type = 'American Express';
			else if (ccNum.test(/^6011[0-9]{12}$/)) valid_type = 'Discover';

			if (valid_type) {
				var sum = 0;
				var cur = 0;

				for(var i=ccNum.length-1; i>=0; --i) {
					cur = ccNum.charAt(i).toInt();
					if (cur == 0) { continue; }

					if ((ccNum.length-i) % 2 == 0) { cur += cur; }
					if (cur > 9) { cur = cur.toString().charAt(0).toInt() + cur.toString().charAt(1).toInt(); }

					sum += cur;
				}
				if ((sum % 10) == 0) { return true; }
			}

			var chunks = '';
			while (ccNum != '') {
				chunks += ' ' + ccNum.substr(0,4);
				ccNum = ccNum.substr(4);
			}

			element.getParent('form').retrieve('validator').ignoreField(element);
			element.set('value', chunks.clean());
			element.getParent('form').retrieve('validator').enforceField(element);
			return false;
		}
	}]


]);

/*
---

script: OverText.js

description: Shows text over an input that disappears when the user clicks into it. The text remains hidden if the user adds a value.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Options
- core:1.2.4/Events
- core:1.2.4/Element.Event
- /Class.Binds
- /Class.Occlude
- /Element.Position
- /Element.Shortcuts

provides: [OverText]

...
*/

var OverText = new Class({

	Implements: [Options, Events, Class.Occlude],

	Binds: ['reposition', 'assert', 'focus', 'hide'],

	options: {/*
		textOverride: null,
		onFocus: $empty()
		onTextHide: $empty(textEl, inputEl),
		onTextShow: $empty(textEl, inputEl), */
		element: 'label',
		positionOptions: {
			position: 'upperLeft',
			edge: 'upperLeft',
			offset: {
				x: 4,
				y: 2
			}
		},
		poll: false,
		pollInterval: 250,
		wrap: false
	},

	property: 'OverText',

	initialize: function(element, options){
		this.element = document.id(element);
		if (this.occlude()) return this.occluded;
		this.setOptions(options);
		this.attach(this.element);
		OverText.instances.push(this);
		if (this.options.poll) this.poll();
		return this;
	},

	toElement: function(){
		return this.element;
	},

	attach: function(){
		var val = this.options.textOverride || this.element.get('alt') || this.element.get('title');
		if (!val) return;
		this.text = new Element(this.options.element, {
			'class': 'overTxtLabel',
			styles: {
				lineHeight: 'normal',
				position: 'absolute',
				cursor: 'text'
			},
			html: val,
			events: {
				click: this.hide.pass(this.options.element == 'label', this)
			}
		}).inject(this.element, 'after');
		if (this.options.element == 'label') {
			if (!this.element.get('id')) this.element.set('id', 'input_' + new Date().getTime());
			this.text.set('for', this.element.get('id'));
		}

		if (this.options.wrap) {
			this.textHolder = new Element('div', {
				styles: {
					lineHeight: 'normal',
					position: 'relative'
				},
				'class':'overTxtWrapper'
			}).adopt(this.text).inject(this.element, 'before');
		}

		this.element.addEvents({
			focus: this.focus,
			blur: this.assert,
			change: this.assert
		}).store('OverTextDiv', this.text);
		window.addEvent('resize', this.reposition.bind(this));
		this.assert(true);
		this.reposition();
	},

	wrap: function(){
		if (this.options.element == 'label') {
			if (!this.element.get('id')) this.element.set('id', 'input_' + new Date().getTime());
			this.text.set('for', this.element.get('id'));
		}
	},

	startPolling: function(){
		this.pollingPaused = false;
		return this.poll();
	},

	poll: function(stop){
		//start immediately
		//pause on focus
		//resumeon blur
		if (this.poller && !stop) return this;
		var test = function(){
			if (!this.pollingPaused) this.assert(true);
		}.bind(this);
		if (stop) $clear(this.poller);
		else this.poller = test.periodical(this.options.pollInterval, this);
		return this;
	},

	stopPolling: function(){
		this.pollingPaused = true;
		return this.poll(true);
	},

	focus: function(){
		if (this.text && (!this.text.isDisplayed() || this.element.get('disabled'))) return;
		this.hide();
	},

	hide: function(suppressFocus, force){
		if (this.text && (this.text.isDisplayed() && (!this.element.get('disabled') || force))){
			this.text.hide();
			this.fireEvent('textHide', [this.text, this.element]);
			this.pollingPaused = true;
			if (!suppressFocus){
				try {
					this.element.fireEvent('focus');
					this.element.focus();
				} catch(e){} //IE barfs if you call focus on hidden elements
			}
		}
		return this;
	},

	show: function(){
		if (this.text && !this.text.isDisplayed()){
			this.text.show();
			this.reposition();
			this.fireEvent('textShow', [this.text, this.element]);
			this.pollingPaused = false;
		}
		return this;
	},

	assert: function(suppressFocus){
		this[this.test() ? 'show' : 'hide'](suppressFocus);
	},

	test: function(){
		var v = this.element.get('value');
		return !v;
	},

	reposition: function(){
		this.assert(true);
		if (!this.element.isVisible()) return this.stopPolling().hide();
		if (this.text && this.test()) this.text.position($merge(this.options.positionOptions, {relativeTo: this.element}));
		return this;
	}

});

OverText.instances = [];

$extend(OverText, {

	each: function(fn) {
		return OverText.instances.map(function(ot, i){
			if (ot.element && ot.text) return fn.apply(OverText, [ot, i]);
			return null; //the input or the text was destroyed
		});
	},
	
	update: function(){

		return OverText.each(function(ot){
			return ot.reposition();
		});

	},

	hideAll: function(){

		return OverText.each(function(ot){
			return ot.hide(true, true);
		});

	},

	showAll: function(){
		return OverText.each(function(ot) {
			return ot.show();
		});
	}

});

if (window.Fx && Fx.Reveal) {
	Fx.Reveal.implement({
		hideInputs: Browser.Engine.trident ? 'select, input, textarea, object, embed, .overTxtLabel' : false
	});
}

/*
---

script: Fx.Elements.js

description: Effect to change any number of CSS properties of any number of Elements.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Fx.CSS
- /MooTools.More

provides: [Fx.Elements]

...
*/

Fx.Elements = new Class({

	Extends: Fx.CSS,

	initialize: function(elements, options){
		this.elements = this.subject = $$(elements);
		this.parent(options);
	},

	compute: function(from, to, delta){
		var now = {};
		for (var i in from){
			var iFrom = from[i], iTo = to[i], iNow = now[i] = {};
			for (var p in iFrom) iNow[p] = this.parent(iFrom[p], iTo[p], delta);
		}
		return now;
	},

	set: function(now){
		for (var i in now){
			var iNow = now[i];
			for (var p in iNow) this.render(this.elements[i], p, iNow[p], this.options.unit);
		}
		return this;
	},

	start: function(obj){
		if (!this.check(obj)) return this;
		var from = {}, to = {};
		for (var i in obj){
			var iProps = obj[i], iFrom = from[i] = {}, iTo = to[i] = {};
			for (var p in iProps){
				var parsed = this.prepare(this.elements[i], p, iProps[p]);
				iFrom[p] = parsed.from;
				iTo[p] = parsed.to;
			}
		}
		return this.parent(from, to);
	}

});

/*
---

script: Fx.Accordion.js

description: An Fx.Elements extension which allows you to easily create accordion type controls.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Element.Event
- /Fx.Elements

provides: [Fx.Accordion]

...
*/

Fx.Accordion = new Class({

	Extends: Fx.Elements,

	options: {/*
		onActive: $empty(toggler, section),
		onBackground: $empty(toggler, section),
		fixedHeight: false,
		fixedWidth: false,
		*/
		display: 0,
		show: false,
		height: true,
		width: false,
		opacity: true,
		alwaysHide: false,
		trigger: 'click',
		initialDisplayFx: true,
		returnHeightToAuto: true
	},

	initialize: function(){
		var params = Array.link(arguments, {
			'container': Element.type, //deprecated
			'options': Object.type,
			'togglers': $defined,
			'elements': $defined
		});
		this.parent(params.elements, params.options);
		this.togglers = $$(params.togglers);
		this.previous = -1;
		this.internalChain = new Chain();
		if (this.options.alwaysHide) this.options.wait = true;
		if ($chk(this.options.show)){
			this.options.display = false;
			this.previous = this.options.show;
		}
		if (this.options.start){
			this.options.display = false;
			this.options.show = false;
		}
		this.effects = {};
		if (this.options.opacity) this.effects.opacity = 'fullOpacity';
		if (this.options.width) this.effects.width = this.options.fixedWidth ? 'fullWidth' : 'offsetWidth';
		if (this.options.height) this.effects.height = this.options.fixedHeight ? 'fullHeight' : 'scrollHeight';
		for (var i = 0, l = this.togglers.length; i < l; i++) this.addSection(this.togglers[i], this.elements[i]);
		this.elements.each(function(el, i){
			if (this.options.show === i){
				this.fireEvent('active', [this.togglers[i], el]);
			} else {
				for (var fx in this.effects) el.setStyle(fx, 0);
			}
		}, this);
		if ($chk(this.options.display) || this.options.initialDisplayFx === false) this.display(this.options.display, this.options.initialDisplayFx);
		if (this.options.fixedHeight !== false) this.options.returnHeightToAuto = false;
		this.addEvent('complete', this.internalChain.callChain.bind(this.internalChain));
	},

	addSection: function(toggler, element){
		toggler = document.id(toggler);
		element = document.id(element);
		var test = this.togglers.contains(toggler);
		this.togglers.include(toggler);
		this.elements.include(element);
		var idx = this.togglers.indexOf(toggler);
		var displayer = this.display.bind(this, idx);
		toggler.store('accordion:display', displayer);
		toggler.addEvent(this.options.trigger, displayer);
		if (this.options.height) element.setStyles({'padding-top': 0, 'border-top': 'none', 'padding-bottom': 0, 'border-bottom': 'none'});
		if (this.options.width) element.setStyles({'padding-left': 0, 'border-left': 'none', 'padding-right': 0, 'border-right': 'none'});
		element.fullOpacity = 1;
		if (this.options.fixedWidth) element.fullWidth = this.options.fixedWidth;
		if (this.options.fixedHeight) element.fullHeight = this.options.fixedHeight;
		element.setStyle('overflow', 'hidden');
		if (!test){
			for (var fx in this.effects) element.setStyle(fx, 0);
		}
		return this;
	},

	detach: function(){
		this.togglers.each(function(toggler) {
			toggler.removeEvent(this.options.trigger, toggler.retrieve('accordion:display'));
		}, this);
	},

	display: function(index, useFx){
		if (!this.check(index, useFx)) return this;
		useFx = $pick(useFx, true);
		if (this.options.returnHeightToAuto){
			var prev = this.elements[this.previous];
			if (prev && !this.selfHidden){
				for (var fx in this.effects){
					prev.setStyle(fx, prev[this.effects[fx]]);
				}
			}
		}
		index = ($type(index) == 'element') ? this.elements.indexOf(index) : index;
		if ((this.timer && this.options.wait) || (index === this.previous && !this.options.alwaysHide)) return this;
		this.previous = index;
		var obj = {};
		this.elements.each(function(el, i){
			obj[i] = {};
			var hide;
			if (i != index){
				hide = true;
			} else if (this.options.alwaysHide && ((el.offsetHeight > 0 && this.options.height) || el.offsetWidth > 0 && this.options.width)){
				hide = true;
				this.selfHidden = true;
			}
			this.fireEvent(hide ? 'background' : 'active', [this.togglers[i], el]);
			for (var fx in this.effects) obj[i][fx] = hide ? 0 : el[this.effects[fx]];
		}, this);
		this.internalChain.chain(function(){
			if (this.options.returnHeightToAuto && !this.selfHidden){
				var el = this.elements[index];
				if (el) el.setStyle('height', 'auto');
			};
		}.bind(this));
		return useFx ? this.start(obj) : this.set(obj);
	}

});

/*
	Compatibility with 1.2.0
*/
var Accordion = new Class({

	Extends: Fx.Accordion,

	initialize: function(){
		this.parent.apply(this, arguments);
		var params = Array.link(arguments, {'container': Element.type});
		this.container = params.container;
	},

	addSection: function(toggler, element, pos){
		toggler = document.id(toggler);
		element = document.id(element);
		var test = this.togglers.contains(toggler);
		var len = this.togglers.length;
		if (len && (!test || pos)){
			pos = $pick(pos, len - 1);
			toggler.inject(this.togglers[pos], 'before');
			element.inject(toggler, 'after');
		} else if (this.container && !test){
			toggler.inject(this.container);
			element.inject(this.container);
		}
		return this.parent.apply(this, arguments);
	}

});

/*
---

script: Fx.Move.js

description: Defines Fx.Move, a class that works with Element.Position.js to transition an element from one location to another.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Fx.Morph
- /Element.Position

provides: [Fx.Move]

...
*/

Fx.Move = new Class({

	Extends: Fx.Morph,

	options: {
		relativeTo: document.body,
		position: 'center',
		edge: false,
		offset: {x: 0, y: 0}
	},

	start: function(destination){
		return this.parent(this.element.position($merge(this.options, destination, {returnPos: true})));
	}

});

Element.Properties.move = {

	set: function(options){
		var morph = this.retrieve('move');
		if (morph) morph.cancel();
		return this.eliminate('move').store('move:options', $extend({link: 'cancel'}, options));
	},

	get: function(options){
		if (options || !this.retrieve('move')){
			if (options || !this.retrieve('move:options')) this.set('move', options);
			this.store('move', new Fx.Move(this, this.retrieve('move:options')));
		}
		return this.retrieve('move');
	}

};

Element.implement({

	move: function(options){
		this.get('move').start(options);
		return this;
	}

});


/*
---

script: Fx.Reveal.js

description: Defines Fx.Reveal, a class that shows and hides elements with a transition.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Fx.Morph
- /Element.Shortcuts
- /Element.Measure

provides: [Fx.Reveal]

...
*/

Fx.Reveal = new Class({

	Extends: Fx.Morph,

	options: {/*	  
		onShow: $empty(thisElement),
		onHide: $empty(thisElement),
		onComplete: $empty(thisElement),
		heightOverride: null,
		widthOverride: null, */
		link: 'cancel',
		styles: ['padding', 'border', 'margin'],
		transitionOpacity: !Browser.Engine.trident4,
		mode: 'vertical',
		display: 'block',
		hideInputs: Browser.Engine.trident ? 'select, input, textarea, object, embed' : false
	},

	dissolve: function(){
		try {
			if (!this.hiding && !this.showing){
				if (this.element.getStyle('display') != 'none'){
					this.hiding = true;
					this.showing = false;
					this.hidden = true;
					this.cssText = this.element.style.cssText;
					var startStyles = this.element.getComputedSize({
						styles: this.options.styles,
						mode: this.options.mode
					});
					this.element.setStyle('display', this.options.display);
					if (this.options.transitionOpacity) startStyles.opacity = 1;
					var zero = {};
					$each(startStyles, function(style, name){
						zero[name] = [style, 0];
					}, this);
					this.element.setStyle('overflow', 'hidden');
					var hideThese = this.options.hideInputs ? this.element.getElements(this.options.hideInputs) : null;
					this.$chain.unshift(function(){
						if (this.hidden){
							this.hiding = false;
							$each(startStyles, function(style, name){
								startStyles[name] = style;
							}, this);
							this.element.style.cssText = this.cssText;
							this.element.setStyle('display', 'none');
							if (hideThese) hideThese.setStyle('visibility', 'visible');
						}
						this.fireEvent('hide', this.element);
						this.callChain();
					}.bind(this));
					if (hideThese) hideThese.setStyle('visibility', 'hidden');
					this.start(zero);
				} else {
					this.callChain.delay(10, this);
					this.fireEvent('complete', this.element);
					this.fireEvent('hide', this.element);
				}
			} else if (this.options.link == 'chain'){
				this.chain(this.dissolve.bind(this));
			} else if (this.options.link == 'cancel' && !this.hiding){
				this.cancel();
				this.dissolve();
			}
		} catch(e){
			this.hiding = false;
			this.element.setStyle('display', 'none');
			this.callChain.delay(10, this);
			this.fireEvent('complete', this.element);
			this.fireEvent('hide', this.element);
		}
		return this;
	},

	reveal: function(){
		try {
			if (!this.showing && !this.hiding){
				if (this.element.getStyle('display') == 'none' ||
					 this.element.getStyle('visiblity') == 'hidden' ||
					 this.element.getStyle('opacity') == 0){
					this.showing = true;
					this.hiding = this.hidden =  false;
					var startStyles;
					this.cssText = this.element.style.cssText;
					//toggle display, but hide it
					this.element.measure(function(){
						//create the styles for the opened/visible state
						startStyles = this.element.getComputedSize({
							styles: this.options.styles,
							mode: this.options.mode
						});
					}.bind(this));
					$each(startStyles, function(style, name){
						startStyles[name] = style;
					});
					//if we're overridding height/width
					if ($chk(this.options.heightOverride)) startStyles.height = this.options.heightOverride.toInt();
					if ($chk(this.options.widthOverride)) startStyles.width = this.options.widthOverride.toInt();
					if (this.options.transitionOpacity) {
						this.element.setStyle('opacity', 0);
						startStyles.opacity = 1;
					}
					//create the zero state for the beginning of the transition
					var zero = {
						height: 0,
						display: this.options.display
					};
					$each(startStyles, function(style, name){ zero[name] = 0; });
					//set to zero
					this.element.setStyles($merge(zero, {overflow: 'hidden'}));
					//hide inputs
					var hideThese = this.options.hideInputs ? this.element.getElements(this.options.hideInputs) : null;
					if (hideThese) hideThese.setStyle('visibility', 'hidden');
					//start the effect
					this.start(startStyles);
					this.$chain.unshift(function(){
						this.element.style.cssText = this.cssText;
						this.element.setStyle('display', this.options.display);
						if (!this.hidden) this.showing = false;
						if (hideThese) hideThese.setStyle('visibility', 'visible');
						this.callChain();
						this.fireEvent('show', this.element);
					}.bind(this));
				} else {
					this.callChain();
					this.fireEvent('complete', this.element);
					this.fireEvent('show', this.element);
				}
			} else if (this.options.link == 'chain'){
				this.chain(this.reveal.bind(this));
			} else if (this.options.link == 'cancel' && !this.showing){
				this.cancel();
				this.reveal();
			}
		} catch(e){
			this.element.setStyles({
				display: this.options.display,
				visiblity: 'visible',
				opacity: 1
			});
			this.showing = false;
			this.callChain.delay(10, this);
			this.fireEvent('complete', this.element);
			this.fireEvent('show', this.element);
		}
		return this;
	},

	toggle: function(){
		if (this.element.getStyle('display') == 'none' ||
			 this.element.getStyle('visiblity') == 'hidden' ||
			 this.element.getStyle('opacity') == 0){
			this.reveal();
		} else {
			this.dissolve();
		}
		return this;
	},

	cancel: function(){
		this.parent.apply(this, arguments);
		this.element.style.cssText = this.cssText;
		this.hidding = false;
		this.showing = false;
	}

});

Element.Properties.reveal = {

	set: function(options){
		var reveal = this.retrieve('reveal');
		if (reveal) reveal.cancel();
		return this.eliminate('reveal').store('reveal:options', options);
	},

	get: function(options){
		if (options || !this.retrieve('reveal')){
			if (options || !this.retrieve('reveal:options')) this.set('reveal', options);
			this.store('reveal', new Fx.Reveal(this, this.retrieve('reveal:options')));
		}
		return this.retrieve('reveal');
	}

};

Element.Properties.dissolve = Element.Properties.reveal;

Element.implement({

	reveal: function(options){
		this.get('reveal', options).reveal();
		return this;
	},

	dissolve: function(options){
		this.get('reveal', options).dissolve();
		return this;
	},

	nix: function(){
		var params = Array.link(arguments, {destroy: Boolean.type, options: Object.type});
		this.get('reveal', params.options).dissolve().chain(function(){
			this[params.destroy ? 'destroy' : 'dispose']();
		}.bind(this));
		return this;
	},

	wink: function(){
		var params = Array.link(arguments, {duration: Number.type, options: Object.type});
		var reveal = this.get('reveal', params.options);
		reveal.reveal().chain(function(){
			(function(){
				reveal.dissolve();
			}).delay(params.duration || 2000);
		});
	}


});

/*
---

script: Fx.Scroll.js

description: Effect to smoothly scroll any element, including the window.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Fx
- core:1.2.4/Element.Event
- core:1.2.4/Element.Dimensions
- /MooTools.More

provides: [Fx.Scroll]

...
*/

Fx.Scroll = new Class({

	Extends: Fx,

	options: {
		offset: {x: 0, y: 0},
		wheelStops: true
	},

	initialize: function(element, options){
		this.element = this.subject = document.id(element);
		this.parent(options);
		var cancel = this.cancel.bind(this, false);

		if ($type(this.element) != 'element') this.element = document.id(this.element.getDocument().body);

		var stopper = this.element;

		if (this.options.wheelStops){
			this.addEvent('start', function(){
				stopper.addEvent('mousewheel', cancel);
			}, true);
			this.addEvent('complete', function(){
				stopper.removeEvent('mousewheel', cancel);
			}, true);
		}
	},

	set: function(){
		var now = Array.flatten(arguments);
		if (Browser.Engine.gecko) now = [Math.round(now[0]), Math.round(now[1])];
		this.element.scrollTo(now[0], now[1]);
	},

	compute: function(from, to, delta){
		return [0, 1].map(function(i){
			return Fx.compute(from[i], to[i], delta);
		});
	},

	start: function(x, y){
		if (!this.check(x, y)) return this;
		var scrollSize = this.element.getScrollSize(),
			scroll = this.element.getScroll(), 
			values = {x: x, y: y};
		for (var z in values){
			var max = scrollSize[z];
			if ($chk(values[z])) values[z] = ($type(values[z]) == 'number') ? values[z] : max;
			else values[z] = scroll[z];
			values[z] += this.options.offset[z];
		}
		return this.parent([scroll.x, scroll.y], [values.x, values.y]);
	},

	toTop: function(){
		return this.start(false, 0);
	},

	toLeft: function(){
		return this.start(0, false);
	},

	toRight: function(){
		return this.start('right', false);
	},

	toBottom: function(){
		return this.start(false, 'bottom');
	},

	toElement: function(el){
		var position = document.id(el).getPosition(this.element);
		return this.start(position.x, position.y);
	},

	scrollIntoView: function(el, axes, offset){
		axes = axes ? $splat(axes) : ['x','y'];
		var to = {};
		el = document.id(el);
		var pos = el.getPosition(this.element);
		var size = el.getSize();
		var scroll = this.element.getScroll();
		var containerSize = this.element.getSize();
		var edge = {
			x: pos.x + size.x,
			y: pos.y + size.y
		};
		['x','y'].each(function(axis) {
			if (axes.contains(axis)) {
				if (edge[axis] > scroll[axis] + containerSize[axis]) to[axis] = edge[axis] - containerSize[axis];
				if (pos[axis] < scroll[axis]) to[axis] = pos[axis];
			}
			if (to[axis] == null) to[axis] = scroll[axis];
			if (offset && offset[axis]) to[axis] = to[axis] + offset[axis];
		}, this);
		if (to.x != scroll.x || to.y != scroll.y) this.start(to.x, to.y);
		return this;
	},

	scrollToCenter: function(el, axes, offset){
		axes = axes ? $splat(axes) : ['x', 'y'];
		el = $(el);
		var to = {},
			pos = el.getPosition(this.element),
			size = el.getSize(),
			scroll = this.element.getScroll(),
			containerSize = this.element.getSize(),
			edge = {
				x: pos.x + size.x,
				y: pos.y + size.y
			};

		['x','y'].each(function(axis){
			if(axes.contains(axis)){
				to[axis] = pos[axis] - (containerSize[axis] - size[axis])/2;
			}
			if(to[axis] == null) to[axis] = scroll[axis];
			if(offset && offset[axis]) to[axis] = to[axis] + offset[axis];
		}, this);
		if (to.x != scroll.x || to.y != scroll.y) this.start(to.x, to.y);
		return this;
	}

});


/*
---

script: Fx.Slide.js

description: Effect to slide an element in and out of view.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Fx Element.Style
- /MooTools.More

provides: [Fx.Slide]

...
*/

Fx.Slide = new Class({

	Extends: Fx,

	options: {
		mode: 'vertical',
		wrapper: false,
		hideOverflow: true
	},

	initialize: function(element, options){
		this.addEvent('complete', function(){
			this.open = (this.wrapper['offset' + this.layout.capitalize()] != 0);
			if (this.open) this.wrapper.setStyle('height', '');
			if (this.open && Browser.Engine.webkit419) this.element.dispose().inject(this.wrapper);
		}, true);
		this.element = this.subject = document.id(element);
		this.parent(options);
		var wrapper = this.element.retrieve('wrapper');
		var styles = this.element.getStyles('margin', 'position', 'overflow');
		if (this.options.hideOverflow) styles = $extend(styles, {overflow: 'hidden'});
		if (this.options.wrapper) wrapper = document.id(this.options.wrapper).setStyles(styles);
		this.wrapper = wrapper || new Element('div', {
			styles: styles
		}).wraps(this.element);
		this.element.store('wrapper', this.wrapper).setStyle('margin', 0);
		this.now = [];
		this.open = true;
	},

	vertical: function(){
		this.margin = 'margin-top';
		this.layout = 'height';
		this.offset = this.element.offsetHeight;
	},

	horizontal: function(){
		this.margin = 'margin-left';
		this.layout = 'width';
		this.offset = this.element.offsetWidth;
	},

	set: function(now){
		this.element.setStyle(this.margin, now[0]);
		this.wrapper.setStyle(this.layout, now[1]);
		return this;
	},

	compute: function(from, to, delta){
		return [0, 1].map(function(i){
			return Fx.compute(from[i], to[i], delta);
		});
	},

	start: function(how, mode){
		if (!this.check(how, mode)) return this;
		this[mode || this.options.mode]();
		var margin = this.element.getStyle(this.margin).toInt();
		var layout = this.wrapper.getStyle(this.layout).toInt();
		var caseIn = [[margin, layout], [0, this.offset]];
		var caseOut = [[margin, layout], [-this.offset, 0]];
		var start;
		switch (how){
			case 'in': start = caseIn; break;
			case 'out': start = caseOut; break;
			case 'toggle': start = (layout == 0) ? caseIn : caseOut;
		}
		return this.parent(start[0], start[1]);
	},

	slideIn: function(mode){
		return this.start('in', mode);
	},

	slideOut: function(mode){
		return this.start('out', mode);
	},

	hide: function(mode){
		this[mode || this.options.mode]();
		this.open = false;
		return this.set([-this.offset, 0]);
	},

	show: function(mode){
		this[mode || this.options.mode]();
		this.open = true;
		return this.set([0, this.offset]);
	},

	toggle: function(mode){
		return this.start('toggle', mode);
	}

});

Element.Properties.slide = {

	set: function(options){
		var slide = this.retrieve('slide');
		if (slide) slide.cancel();
		return this.eliminate('slide').store('slide:options', $extend({link: 'cancel'}, options));
	},

	get: function(options){
		if (options || !this.retrieve('slide')){
			if (options || !this.retrieve('slide:options')) this.set('slide', options);
			this.store('slide', new Fx.Slide(this, this.retrieve('slide:options')));
		}
		return this.retrieve('slide');
	}

};

Element.implement({

	slide: function(how, mode){
		how = how || 'toggle';
		var slide = this.get('slide'), toggle;
		switch (how){
			case 'hide': slide.hide(mode); break;
			case 'show': slide.show(mode); break;
			case 'toggle':
				var flag = this.retrieve('slide:flag', slide.open);
				slide[flag ? 'slideOut' : 'slideIn'](mode);
				this.store('slide:flag', !flag);
				toggle = true;
			break;
			default: slide.start(how, mode);
		}
		if (!toggle) this.eliminate('slide:flag');
		return this;
	}

});


/*
---

script: Fx.SmoothScroll.js

description: Class for creating a smooth scrolling effect to all internal links on the page.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Selectors
- /Fx.Scroll

provides: [Fx.SmoothScroll]

...
*/

var SmoothScroll = Fx.SmoothScroll = new Class({

	Extends: Fx.Scroll,

	initialize: function(options, context){
		context = context || document;
		this.doc = context.getDocument();
		var win = context.getWindow();
		this.parent(this.doc, options);
		this.links = $$(this.options.links || this.doc.links);
		var location = win.location.href.match(/^[^#]*/)[0] + '#';
		this.links.each(function(link){
			if (link.href.indexOf(location) != 0) {return;}
			var anchor = link.href.substr(location.length);
			if (anchor) this.useLink(link, anchor);
		}, this);
		if (!Browser.Engine.webkit419) {
			this.addEvent('complete', function(){
				win.location.hash = this.anchor;
			}, true);
		}
	},

	useLink: function(link, anchor){
		var el;
		link.addEvent('click', function(event){
			if (el !== false && !el) el = document.id(anchor) || this.doc.getElement('a[name=' + anchor + ']');
			if (el) {
				event.preventDefault();
				this.anchor = anchor;
				this.toElement(el).chain(function(){
					this.fireEvent('scrolledTo', [link, el]);
				}.bind(this));
				link.blur();
			}
		}.bind(this));
	}
});

/*
---

script: Fx.Sort.js

description: Defines Fx.Sort, a class that reorders lists with a transition.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Dimensions
- /Fx.Elements
- /Element.Measure

provides: [Fx.Sort]

...
*/

Fx.Sort = new Class({

	Extends: Fx.Elements,

	options: {
		mode: 'vertical'
	},

	initialize: function(elements, options){
		this.parent(elements, options);
		this.elements.each(function(el){
			if (el.getStyle('position') == 'static') el.setStyle('position', 'relative');
		});
		this.setDefaultOrder();
	},

	setDefaultOrder: function(){
		this.currentOrder = this.elements.map(function(el, index){
			return index;
		});
	},

	sort: function(newOrder){
		if ($type(newOrder) != 'array') return false;
		var top = 0,
			left = 0,
			next = {},
			zero = {},
			vert = this.options.mode == 'vertical';
		var current = this.elements.map(function(el, index){
			var size = el.getComputedSize({styles: ['border', 'padding', 'margin']});
			var val;
			if (vert){
				val = {
					top: top,
					margin: size['margin-top'],
					height: size.totalHeight
				};
				top += val.height - size['margin-top'];
			} else {
				val = {
					left: left,
					margin: size['margin-left'],
					width: size.totalWidth
				};
				left += val.width;
			}
			var plain = vert ? 'top' : 'left';
			zero[index] = {};
			var start = el.getStyle(plain).toInt();
			zero[index][plain] = start || 0;
			return val;
		}, this);
		this.set(zero);
		newOrder = newOrder.map(function(i){ return i.toInt(); });
		if (newOrder.length != this.elements.length){
			this.currentOrder.each(function(index){
				if (!newOrder.contains(index)) newOrder.push(index);
			});
			if (newOrder.length > this.elements.length)
				newOrder.splice(this.elements.length-1, newOrder.length - this.elements.length);
		}
		var margin = top = left = 0;
		newOrder.each(function(item, index){
			var newPos = {};
			if (vert){
				newPos.top = top - current[item].top - margin;
				top += current[item].height;
			} else {
				newPos.left = left - current[item].left;
				left += current[item].width;
			}
			margin = margin + current[item].margin;
			next[item]=newPos;
		}, this);
		var mapped = {};
		$A(newOrder).sort().each(function(index){
			mapped[index] = next[index];
		});
		this.start(mapped);
		this.currentOrder = newOrder;
		return this;
	},

	rearrangeDOM: function(newOrder){
		newOrder = newOrder || this.currentOrder;
		var parent = this.elements[0].getParent();
		var rearranged = [];
		this.elements.setStyle('opacity', 0);
		//move each element and store the new default order
		newOrder.each(function(index){
			rearranged.push(this.elements[index].inject(parent).setStyles({
				top: 0,
				left: 0
			}));
		}, this);
		this.elements.setStyle('opacity', 1);
		this.elements = $$(rearranged);
		this.setDefaultOrder();
		return this;
	},

	getDefaultOrder: function(){
		return this.elements.map(function(el, index){
			return index;
		});
	},

	forward: function(){
		return this.sort(this.getDefaultOrder());
	},

	backward: function(){
		return this.sort(this.getDefaultOrder().reverse());
	},

	reverse: function(){
		return this.sort(this.currentOrder.reverse());
	},

	sortByElements: function(elements){
		return this.sort(elements.map(function(el){
			return this.elements.indexOf(el);
		}, this));
	},

	swap: function(one, two){
		if ($type(one) == 'element') one = this.elements.indexOf(one);
		if ($type(two) == 'element') two = this.elements.indexOf(two);
		
		var newOrder = $A(this.currentOrder);
		newOrder[this.currentOrder.indexOf(one)] = two;
		newOrder[this.currentOrder.indexOf(two)] = one;
		return this.sort(newOrder);
	}

});

/*
---

script: Drag.js

description: The base Drag Class. Can be used to drag and resize Elements using mouse events.

license: MIT-style license

authors:
- Valerio Proietti
- Tom Occhinno
- Jan Kassens

requires:
- core:1.2.4/Events
- core:1.2.4/Options
- core:1.2.4/Element.Event
- core:1.2.4/Element.Style
- /MooTools.More

provides: [Drag]

*/

var Drag = new Class({

	Implements: [Events, Options],

	options: {/*
		onBeforeStart: $empty(thisElement),
		onStart: $empty(thisElement, event),
		onSnap: $empty(thisElement)
		onDrag: $empty(thisElement, event),
		onCancel: $empty(thisElement),
		onComplete: $empty(thisElement, event),*/
		snap: 6,
		unit: 'px',
		grid: false,
		style: true,
		limit: false,
		handle: false,
		invert: false,
		preventDefault: false,
		stopPropagation: false,
		modifiers: {x: 'left', y: 'top'}
	},

	initialize: function(){
		var params = Array.link(arguments, {'options': Object.type, 'element': $defined});
		this.element = document.id(params.element);
		this.document = this.element.getDocument();
		this.setOptions(params.options || {});
		var htype = $type(this.options.handle);
		this.handles = ((htype == 'array' || htype == 'collection') ? $$(this.options.handle) : document.id(this.options.handle)) || this.element;
		this.mouse = {'now': {}, 'pos': {}};
		this.value = {'start': {}, 'now': {}};

		this.selection = (Browser.Engine.trident) ? 'selectstart' : 'mousedown';

		this.bound = {
			start: this.start.bind(this),
			check: this.check.bind(this),
			drag: this.drag.bind(this),
			stop: this.stop.bind(this),
			cancel: this.cancel.bind(this),
			eventStop: $lambda(false)
		};
		this.attach();
	},

	attach: function(){
		this.handles.addEvent('mousedown', this.bound.start);
		return this;
	},

	detach: function(){
		this.handles.removeEvent('mousedown', this.bound.start);
		return this;
	},

	start: function(event){
		if (event.rightClick) return;
		if (this.options.preventDefault) event.preventDefault();
		if (this.options.stopPropagation) event.stopPropagation();
		this.mouse.start = event.page;
		this.fireEvent('beforeStart', this.element);
		var limit = this.options.limit;
		this.limit = {x: [], y: []};
		for (var z in this.options.modifiers){
			if (!this.options.modifiers[z]) continue;
			if (this.options.style) this.value.now[z] = this.element.getStyle(this.options.modifiers[z]).toInt();
			else this.value.now[z] = this.element[this.options.modifiers[z]];
			if (this.options.invert) this.value.now[z] *= -1;
			this.mouse.pos[z] = event.page[z] - this.value.now[z];
			if (limit && limit[z]){
				for (var i = 2; i--; i){
					if ($chk(limit[z][i])) this.limit[z][i] = $lambda(limit[z][i])();
				}
			}
		}
		if ($type(this.options.grid) == 'number') this.options.grid = {x: this.options.grid, y: this.options.grid};
		this.document.addEvents({mousemove: this.bound.check, mouseup: this.bound.cancel});
		this.document.addEvent(this.selection, this.bound.eventStop);
	},

	check: function(event){
		if (this.options.preventDefault) event.preventDefault();
		var distance = Math.round(Math.sqrt(Math.pow(event.page.x - this.mouse.start.x, 2) + Math.pow(event.page.y - this.mouse.start.y, 2)));
		if (distance > this.options.snap){
			this.cancel();
			this.document.addEvents({
				mousemove: this.bound.drag,
				mouseup: this.bound.stop
			});
			this.fireEvent('start', [this.element, event]).fireEvent('snap', this.element);
		}
	},

	drag: function(event){
		if (this.options.preventDefault) event.preventDefault();
		this.mouse.now = event.page;
		for (var z in this.options.modifiers){
			if (!this.options.modifiers[z]) continue;
			this.value.now[z] = this.mouse.now[z] - this.mouse.pos[z];
			if (this.options.invert) this.value.now[z] *= -1;
			if (this.options.limit && this.limit[z]){
				if ($chk(this.limit[z][1]) && (this.value.now[z] > this.limit[z][1])){
					this.value.now[z] = this.limit[z][1];
				} else if ($chk(this.limit[z][0]) && (this.value.now[z] < this.limit[z][0])){
					this.value.now[z] = this.limit[z][0];
				}
			}
			if (this.options.grid[z]) this.value.now[z] -= ((this.value.now[z] - (this.limit[z][0]||0)) % this.options.grid[z]);
			if (this.options.style) {
				this.element.setStyle(this.options.modifiers[z], this.value.now[z] + this.options.unit);
			} else {
				this.element[this.options.modifiers[z]] = this.value.now[z];
			}
		}
		this.fireEvent('drag', [this.element, event]);
	},

	cancel: function(event){
		this.document.removeEvent('mousemove', this.bound.check);
		this.document.removeEvent('mouseup', this.bound.cancel);
		if (event){
			this.document.removeEvent(this.selection, this.bound.eventStop);
			this.fireEvent('cancel', this.element);
		}
	},

	stop: function(event){
		this.document.removeEvent(this.selection, this.bound.eventStop);
		this.document.removeEvent('mousemove', this.bound.drag);
		this.document.removeEvent('mouseup', this.bound.stop);
		if (event) this.fireEvent('complete', [this.element, event]);
	}

});

Element.implement({

	makeResizable: function(options){
		var drag = new Drag(this, $merge({modifiers: {x: 'width', y: 'height'}}, options));
		this.store('resizer', drag);
		return drag.addEvent('drag', function(){
			this.fireEvent('resize', drag);
		}.bind(this));
	}

});


/*
---

script: Drag.Move.js

description: A Drag extension that provides support for the constraining of draggables to containers and droppables.

license: MIT-style license

authors:
- Valerio Proietti
- Tom Occhinno
- Jan Kassens
- Aaron Newton
- Scott Kyle

requires:
- core:1.2.4/Element.Dimensions
- /Drag

provides: [Drag.Move]

...
*/

Drag.Move = new Class({

	Extends: Drag,

	options: {/*
		onEnter: $empty(thisElement, overed),
		onLeave: $empty(thisElement, overed),
		onDrop: $empty(thisElement, overed, event),*/
		droppables: [],
		container: false,
		precalculate: false,
		includeMargins: true,
		checkDroppables: true
	},

	initialize: function(element, options) {
		this.parent(element, options);
		element = this.element;
		
		this.droppables = $$(this.options.droppables);
		this.container = document.id(this.options.container);
		
		if (this.container && $type(this.container) != 'element')
			this.container = document.id(this.container.getDocument().body);
		
		var styles = element.getStyles('left', 'top', 'position');
		if (styles.left == 'auto' || styles.top == 'auto')
			element.setPosition(element.getPosition(element.getOffsetParent()));
		
		if (styles.position == 'static')
			element.setStyle('position', 'absolute');

		this.addEvent('start', this.checkDroppables, true);

		this.overed = null;
	},

	start: function(event){
		if (this.container) this.options.limit = this.calculateLimit();
		
		if (this.options.precalculate){
			this.positions = this.droppables.map(function(el){
				return el.getCoordinates();
			});
		}
		
		this.parent(event);
	},
	
	calculateLimit: function(){
		var offsetParent = this.element.getOffsetParent(),
			containerCoordinates = this.container.getCoordinates(offsetParent),
			containerBorder = {},
			elementMargin = {},
			elementBorder = {},
			containerMargin = {},
			offsetParentPadding = {};

		['top', 'right', 'bottom', 'left'].each(function(pad){
			containerBorder[pad] = this.container.getStyle('border-' + pad).toInt();
			elementBorder[pad] = this.element.getStyle('border-' + pad).toInt();
			elementMargin[pad] = this.element.getStyle('margin-' + pad).toInt();
			containerMargin[pad] = this.container.getStyle('margin-' + pad).toInt();
			offsetParentPadding[pad] = offsetParent.getStyle('padding-' + pad).toInt();
		}, this);

		var width = this.element.offsetWidth + elementMargin.left + elementMargin.right,
			height = this.element.offsetHeight + elementMargin.top + elementMargin.bottom,
			left = 0,
			top = 0,
			right = containerCoordinates.right - containerBorder.right - width,
			bottom = containerCoordinates.bottom - containerBorder.bottom - height;

		if (this.options.includeMargins){
			left += elementMargin.left;
			top += elementMargin.top;
		} else {
			right += elementMargin.right;
			bottom += elementMargin.bottom;
		}
		
		if (this.element.getStyle('position') == 'relative'){
			var coords = this.element.getCoordinates(offsetParent);
			coords.left -= this.element.getStyle('left').toInt();
			coords.top -= this.element.getStyle('top').toInt();
			
			left += containerBorder.left - coords.left;
			top += containerBorder.top - coords.top;
			right += elementMargin.left - coords.left;
			bottom += elementMargin.top - coords.top;
			
			if (this.container != offsetParent){
				left += containerMargin.left + offsetParentPadding.left;
				top += (Browser.Engine.trident4 ? 0 : containerMargin.top) + offsetParentPadding.top;
			}
		} else {
			left -= elementMargin.left;
			top -= elementMargin.top;
			
			if (this.container == offsetParent){
				right -= containerBorder.left;
				bottom -= containerBorder.top;
			} else {
				left += containerCoordinates.left + containerBorder.left;
				top += containerCoordinates.top + containerBorder.top;
			}
		}
		
		return {
			x: [left, right],
			y: [top, bottom]
		};
	},

	checkAgainst: function(el, i){
		el = (this.positions) ? this.positions[i] : el.getCoordinates();
		var now = this.mouse.now;
		return (now.x > el.left && now.x < el.right && now.y < el.bottom && now.y > el.top);
	},

	checkDroppables: function(){
		var overed = this.droppables.filter(this.checkAgainst, this).getLast();
		if (this.overed != overed){
			if (this.overed) this.fireEvent('leave', [this.element, this.overed]);
			if (overed) this.fireEvent('enter', [this.element, overed]);
			this.overed = overed;
		}
	},

	drag: function(event){
		this.parent(event);
		if (this.options.checkDroppables && this.droppables.length) this.checkDroppables();
	},

	stop: function(event){
		this.checkDroppables();
		this.fireEvent('drop', [this.element, this.overed, event]);
		this.overed = null;
		return this.parent(event);
	}

});

Element.implement({

	makeDraggable: function(options){
		var drag = new Drag.Move(this, options);
		this.store('dragger', drag);
		return drag;
	}

});


/*
---

script: Slider.js

description: Class for creating horizontal and vertical slider controls.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Element.Dimensions
- /Class.Binds
- /Drag
- /Element.Dimensions
- /Element.Measure

provides: [Slider]

...
*/

var Slider = new Class({

	Implements: [Events, Options],

	Binds: ['clickedElement', 'draggedKnob', 'scrolledElement'],

	options: {/*
		onTick: $empty(intPosition),
		onChange: $empty(intStep),
		onComplete: $empty(strStep),*/
		onTick: function(position){
			if (this.options.snap) position = this.toPosition(this.step);
			this.knob.setStyle(this.property, position);
		},
		initialStep: 0,
		snap: false,
		offset: 0,
		range: false,
		wheel: false,
		steps: 100,
		mode: 'horizontal'
	},

	initialize: function(element, knob, options){
		this.setOptions(options);
		this.element = document.id(element);
		this.knob = document.id(knob);
		this.previousChange = this.previousEnd = this.step = -1;
		var offset, limit = {}, modifiers = {'x': false, 'y': false};
		switch (this.options.mode){
			case 'vertical':
				this.axis = 'y';
				this.property = 'top';
				offset = 'offsetHeight';
				break;
			case 'horizontal':
				this.axis = 'x';
				this.property = 'left';
				offset = 'offsetWidth';
		}
		
		this.full = this.element.measure(function(){ 
			this.half = this.knob[offset] / 2; 
			return this.element[offset] - this.knob[offset] + (this.options.offset * 2); 
		}.bind(this));
		
		this.min = $chk(this.options.range[0]) ? this.options.range[0] : 0;
		this.max = $chk(this.options.range[1]) ? this.options.range[1] : this.options.steps;
		this.range = this.max - this.min;
		this.steps = this.options.steps || this.full;
		this.stepSize = Math.abs(this.range) / this.steps;
		this.stepWidth = this.stepSize * this.full / Math.abs(this.range) ;

		this.knob.setStyle('position', 'relative').setStyle(this.property, this.options.initialStep ? this.toPosition(this.options.initialStep) : - this.options.offset);
		modifiers[this.axis] = this.property;
		limit[this.axis] = [- this.options.offset, this.full - this.options.offset];

		var dragOptions = {
			snap: 0,
			limit: limit,
			modifiers: modifiers,
			onDrag: this.draggedKnob,
			onStart: this.draggedKnob,
			onBeforeStart: (function(){
				this.isDragging = true;
			}).bind(this),
			onCancel: function() {
				this.isDragging = false;
			}.bind(this),
			onComplete: function(){
				this.isDragging = false;
				this.draggedKnob();
				this.end();
			}.bind(this)
		};
		if (this.options.snap){
			dragOptions.grid = Math.ceil(this.stepWidth);
			dragOptions.limit[this.axis][1] = this.full;
		}

		this.drag = new Drag(this.knob, dragOptions);
		this.attach();
	},

	attach: function(){
		this.element.addEvent('mousedown', this.clickedElement);
		if (this.options.wheel) this.element.addEvent('mousewheel', this.scrolledElement);
		this.drag.attach();
		return this;
	},

	detach: function(){
		this.element.removeEvent('mousedown', this.clickedElement);
		this.element.removeEvent('mousewheel', this.scrolledElement);
		this.drag.detach();
		return this;
	},

	set: function(step){
		if (!((this.range > 0) ^ (step < this.min))) step = this.min;
		if (!((this.range > 0) ^ (step > this.max))) step = this.max;

		this.step = Math.round(step);
		this.checkStep();
		this.fireEvent('tick', this.toPosition(this.step));
		this.end();
		return this;
	},

	clickedElement: function(event){
		if (this.isDragging || event.target == this.knob) return;

		var dir = this.range < 0 ? -1 : 1;
		var position = event.page[this.axis] - this.element.getPosition()[this.axis] - this.half;
		position = position.limit(-this.options.offset, this.full -this.options.offset);

		this.step = Math.round(this.min + dir * this.toStep(position));
		this.checkStep();
		this.fireEvent('tick', position);
		this.end();
	},

	scrolledElement: function(event){
		var mode = (this.options.mode == 'horizontal') ? (event.wheel < 0) : (event.wheel > 0);
		this.set(mode ? this.step - this.stepSize : this.step + this.stepSize);
		event.stop();
	},

	draggedKnob: function(){
		var dir = this.range < 0 ? -1 : 1;
		var position = this.drag.value.now[this.axis];
		position = position.limit(-this.options.offset, this.full -this.options.offset);
		this.step = Math.round(this.min + dir * this.toStep(position));
		this.checkStep();
	},

	checkStep: function(){
		if (this.previousChange != this.step){
			this.previousChange = this.step;
			this.fireEvent('change', this.step);
		}
	},

	end: function(){
		if (this.previousEnd !== this.step){
			this.previousEnd = this.step;
			this.fireEvent('complete', this.step + '');
		}
	},

	toStep: function(position){
		var step = (position + this.options.offset) * this.stepSize / this.full * this.steps;
		return this.options.steps ? Math.round(step -= step % this.stepSize) : step;
	},

	toPosition: function(step){
		return (this.full * Math.abs(this.min - step)) / (this.steps * this.stepSize) - this.options.offset;
	}

});

/*
---

script: Sortables.js

description: Class for creating a drag and drop sorting interface for lists of items.

license: MIT-style license

authors:
- Tom Occhino

requires:
- /Drag.Move

provides: [Slider]

...
*/

var Sortables = new Class({

	Implements: [Events, Options],

	options: {/*
		onSort: $empty(element, clone),
		onStart: $empty(element, clone),
		onComplete: $empty(element),*/
		snap: 4,
		opacity: 1,
		clone: false,
		revert: false,
		handle: false,
		constrain: false
	},

	initialize: function(lists, options){
		this.setOptions(options);
		this.elements = [];
		this.lists = [];
		this.idle = true;

		this.addLists($$(document.id(lists) || lists));
		if (!this.options.clone) this.options.revert = false;
		if (this.options.revert) this.effect = new Fx.Morph(null, $merge({duration: 250, link: 'cancel'}, this.options.revert));
	},

	attach: function(){
		this.addLists(this.lists);
		return this;
	},

	detach: function(){
		this.lists = this.removeLists(this.lists);
		return this;
	},

	addItems: function(){
		Array.flatten(arguments).each(function(element){
			this.elements.push(element);
			var start = element.retrieve('sortables:start', this.start.bindWithEvent(this, element));
			(this.options.handle ? element.getElement(this.options.handle) || element : element).addEvent('mousedown', start);
		}, this);
		return this;
	},

	addLists: function(){
		Array.flatten(arguments).each(function(list){
			this.lists.push(list);
			this.addItems(list.getChildren());
		}, this);
		return this;
	},

	removeItems: function(){
		return $$(Array.flatten(arguments).map(function(element){
			this.elements.erase(element);
			var start = element.retrieve('sortables:start');
			(this.options.handle ? element.getElement(this.options.handle) || element : element).removeEvent('mousedown', start);
			
			return element;
		}, this));
	},

	removeLists: function(){
		return $$(Array.flatten(arguments).map(function(list){
			this.lists.erase(list);
			this.removeItems(list.getChildren());
			
			return list;
		}, this));
	},

	getClone: function(event, element){
		if (!this.options.clone) return new Element('div').inject(document.body);
		if ($type(this.options.clone) == 'function') return this.options.clone.call(this, event, element, this.list);
		var clone = element.clone(true).setStyles({
			margin: '0px',
			position: 'absolute',
			visibility: 'hidden',
			'width': element.getStyle('width')
		});
		//prevent the duplicated radio inputs from unchecking the real one
		if (clone.get('html').test('radio')) {
			clone.getElements('input[type=radio]').each(function(input, i) {
				input.set('name', 'clone_' + i);
			});
		}
		
		return clone.inject(this.list).setPosition(element.getPosition(element.getOffsetParent()));
	},

	getDroppables: function(){
		var droppables = this.list.getChildren();
		if (!this.options.constrain) droppables = this.lists.concat(droppables).erase(this.list);
		return droppables.erase(this.clone).erase(this.element);
	},

	insert: function(dragging, element){
		var where = 'inside';
		if (this.lists.contains(element)){
			this.list = element;
			this.drag.droppables = this.getDroppables();
		} else {
			where = this.element.getAllPrevious().contains(element) ? 'before' : 'after';
		}
		this.element.inject(element, where);
		this.fireEvent('sort', [this.element, this.clone]);
	},

	start: function(event, element){
		if (!this.idle) return;
		this.idle = false;
		this.element = element;
		this.opacity = element.get('opacity');
		this.list = element.getParent();
		this.clone = this.getClone(event, element);

		this.drag = new Drag.Move(this.clone, {
			snap: this.options.snap,
			container: this.options.constrain && this.element.getParent(),
			droppables: this.getDroppables(),
			onSnap: function(){
				event.stop();
				this.clone.setStyle('visibility', 'visible');
				this.element.set('opacity', this.options.opacity || 0);
				this.fireEvent('start', [this.element, this.clone]);
			}.bind(this),
			onEnter: this.insert.bind(this),
			onCancel: this.reset.bind(this),
			onComplete: this.end.bind(this)
		});

		this.clone.inject(this.element, 'before');
		this.drag.start(event);
	},

	end: function(){
		this.drag.detach();
		this.element.set('opacity', this.opacity);
		if (this.effect){
			var dim = this.element.getStyles('width', 'height');
			var pos = this.clone.computePosition(this.element.getPosition(this.clone.offsetParent));
			this.effect.element = this.clone;
			this.effect.start({
				top: pos.top,
				left: pos.left,
				width: dim.width,
				height: dim.height,
				opacity: 0.25
			}).chain(this.reset.bind(this));
		} else {
			this.reset();
		}
	},

	reset: function(){
		this.idle = true;
		this.clone.destroy();
		this.fireEvent('complete', this.element);
	},

	serialize: function(){
		var params = Array.link(arguments, {modifier: Function.type, index: $defined});
		var serial = this.lists.map(function(list){
			return list.getChildren().map(params.modifier || function(element){
				return element.get('id');
			}, this);
		}, this);

		var index = params.index;
		if (this.lists.length == 1) index = 0;
		return $chk(index) && index >= 0 && index < this.lists.length ? serial[index] : serial;
	}

});


/*
---

script: Request.JSONP.js

description: Defines Request.JSONP, a class for cross domain javascript via script injection.

license: MIT-style license

authors:
- Aaron Newton
- Guillermo Rauch

requires:
- core:1.2.4/Element
- core:1.2.4/Request
- /Log

provides: [Request.JSONP]

...
*/

Request.JSONP = new Class({

	Implements: [Chain, Events, Options, Log],

	options: {/*
		onRetry: $empty(intRetries),
		onRequest: $empty(scriptElement),
		onComplete: $empty(data),
		onSuccess: $empty(data),
		onCancel: $empty(),
		log: false,
		*/
		url: '',
		data: {},
		retries: 0,
		timeout: 0,
		link: 'ignore',
		callbackKey: 'callback',
		injectScript: document.head
	},

	initialize: function(options){
		this.setOptions(options);
		if (this.options.log) this.enableLog();
		this.running = false;
		this.requests = 0;
		this.triesRemaining = [];
	},

	check: function(){
		if (!this.running) return true;
		switch (this.options.link){
			case 'cancel': this.cancel(); return true;
			case 'chain': this.chain(this.caller.bind(this, arguments)); return false;
		}
		return false;
	},

	send: function(options){
		if (!$chk(arguments[1]) && !this.check(options)) return this;

		var type = $type(options), 
				old = this.options, 
				index = $chk(arguments[1]) ? arguments[1] : this.requests++;
		if (type == 'string' || type == 'element') options = {data: options};

		options = $extend({data: old.data, url: old.url}, options);

		if (!$chk(this.triesRemaining[index])) this.triesRemaining[index] = this.options.retries;
		var remaining = this.triesRemaining[index];

		(function(){
			var script = this.getScript(options);
			this.log('JSONP retrieving script with url: ' + script.get('src'));
			this.fireEvent('request', script);
			this.running = true;

			(function(){
				if (remaining){
					this.triesRemaining[index] = remaining - 1;
					if (script){
						script.destroy();
						this.send(options, index).fireEvent('retry', this.triesRemaining[index]);
					}
				} else if(script && this.options.timeout){
					script.destroy();
					this.cancel().fireEvent('failure');
				}
			}).delay(this.options.timeout, this);
		}).delay(Browser.Engine.trident ? 50 : 0, this);
		return this;
	},

	cancel: function(){
		if (!this.running) return this;
		this.running = false;
		this.fireEvent('cancel');
		return this;
	},

	getScript: function(options){
		var index = Request.JSONP.counter,
				data;
		Request.JSONP.counter++;

		switch ($type(options.data)){
			case 'element': data = document.id(options.data).toQueryString(); break;
			case 'object': case 'hash': data = Hash.toQueryString(options.data);
		}

		var src = options.url + 
			 (options.url.test('\\?') ? '&' :'?') + 
			 (options.callbackKey || this.options.callbackKey) + 
			 '=Request.JSONP.request_map.request_'+ index + 
			 (data ? '&' + data : '');
		if (src.length > 2083) this.log('JSONP '+ src +' will fail in Internet Explorer, which enforces a 2083 bytes length limit on URIs');

		var script = new Element('script', {type: 'text/javascript', src: src});
		Request.JSONP.request_map['request_' + index] = function(){ this.success(arguments, script); }.bind(this);
		return script.inject(this.options.injectScript);
	},

	success: function(args, script){
		if (script) script.destroy();
		this.running = false;
		this.log('JSONP successfully retrieved: ', args);
		this.fireEvent('complete', args).fireEvent('success', args).callChain();
	}

});

Request.JSONP.counter = 0;
Request.JSONP.request_map = {};

/*
---

script: Request.Queue.js

description: Controls several instances of Request and its variants to run only one request at a time.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element
- core:1.2.4/Request
- /Log

provides: [Request.Queue]

...
*/

Request.Queue = new Class({

	Implements: [Options, Events],

	Binds: ['attach', 'request', 'complete', 'cancel', 'success', 'failure', 'exception'],

	options: {/*
		onRequest: $empty(argsPassedToOnRequest),
		onSuccess: $empty(argsPassedToOnSuccess),
		onComplete: $empty(argsPassedToOnComplete),
		onCancel: $empty(argsPassedToOnCancel),
		onException: $empty(argsPassedToOnException),
		onFailure: $empty(argsPassedToOnFailure),
		onEnd: $empty,
		*/
		stopOnFailure: true,
		autoAdvance: true,
		concurrent: 1,
		requests: {}
	},

	initialize: function(options){
		if(options){
			var requests = options.requests;
			delete options.requests;	
		}
		this.setOptions(options);
		this.requests = new Hash;
		this.queue = [];
		this.reqBinders = {};
		
		if(requests) this.addRequests(requests);
	},

	addRequest: function(name, request){
		this.requests.set(name, request);
		this.attach(name, request);
		return this;
	},

	addRequests: function(obj){
		$each(obj, function(req, name){
			this.addRequest(name, req);
		}, this);
		return this;
	},

	getName: function(req){
		return this.requests.keyOf(req);
	},

	attach: function(name, req){
		if (req._groupSend) return this;
		['request', 'complete', 'cancel', 'success', 'failure', 'exception'].each(function(evt){
			if(!this.reqBinders[name]) this.reqBinders[name] = {};
			this.reqBinders[name][evt] = function(){
				this['on' + evt.capitalize()].apply(this, [name, req].extend(arguments));
			}.bind(this);
			req.addEvent(evt, this.reqBinders[name][evt]);
		}, this);
		req._groupSend = req.send;
		req.send = function(options){
			this.send(name, options);
			return req;
		}.bind(this);
		return this;
	},

	removeRequest: function(req){
		var name = $type(req) == 'object' ? this.getName(req) : req;
		if (!name && $type(name) != 'string') return this;
		req = this.requests.get(name);
		if (!req) return this;
		['request', 'complete', 'cancel', 'success', 'failure', 'exception'].each(function(evt){
			req.removeEvent(evt, this.reqBinders[name][evt]);
		}, this);
		req.send = req._groupSend;
		delete req._groupSend;
		return this;
	},

	getRunning: function(){
		return this.requests.filter(function(r){
			return r.running;
		});
	},

	isRunning: function(){
		return !!(this.getRunning().getKeys().length);
	},

	send: function(name, options){
		var q = function(){
			this.requests.get(name)._groupSend(options);
			this.queue.erase(q);
		}.bind(this);
		q.name = name;
		if (this.getRunning().getKeys().length >= this.options.concurrent || (this.error && this.options.stopOnFailure)) this.queue.push(q);
		else q();
		return this;
	},

	hasNext: function(name){
		return (!name) ? !!this.queue.length : !!this.queue.filter(function(q){ return q.name == name; }).length;
	},

	resume: function(){
		this.error = false;
		(this.options.concurrent - this.getRunning().getKeys().length).times(this.runNext, this);
		return this;
	},

	runNext: function(name){
		if (!this.queue.length) return this;
		if (!name){
			this.queue[0]();
		} else {
			var found;
			this.queue.each(function(q){
				if (!found && q.name == name){
					found = true;
					q();
				}
			});
		}
		return this;
	},

	runAll: function() {
		this.queue.each(function(q) {
			q();
		});
		return this;
	},

	clear: function(name){
		if (!name){
			this.queue.empty();
		} else {
			this.queue = this.queue.map(function(q){
				if (q.name != name) return q;
				else return false;
			}).filter(function(q){ return q; });
		}
		return this;
	},

	cancel: function(name){
		this.requests.get(name).cancel();
		return this;
	},

	onRequest: function(){
		this.fireEvent('request', arguments);
	},

	onComplete: function(){
		this.fireEvent('complete', arguments);
		if (!this.queue.length) this.fireEvent('end');
	},

	onCancel: function(){
		if (this.options.autoAdvance && !this.error) this.runNext();
		this.fireEvent('cancel', arguments);
	},

	onSuccess: function(){
		if (this.options.autoAdvance && !this.error) this.runNext();
		this.fireEvent('success', arguments);
	},

	onFailure: function(){
		this.error = true;
		if (!this.options.stopOnFailure && this.options.autoAdvance) this.runNext();
		this.fireEvent('failure', arguments);
	},

	onException: function(){
		this.error = true;
		if (!this.options.stopOnFailure && this.options.autoAdvance) this.runNext();
		this.fireEvent('exception', arguments);
	}

});


/*
---

script: Request.Periodical.js

description: Requests the same URL to pull data from a server but increases the intervals if no data is returned to reduce the load

license: MIT-style license

authors:
- Christoph Pojer

requires:
- core:1.2.4/Request
- /MooTools.More

provides: [Request.Periodical]

...
*/

Request.implement({

	options: {
		initialDelay: 5000,
		delay: 5000,
		limit: 60000
	},

	startTimer: function(data){
		var fn = function(){
			if (!this.running) this.send({data: data});
		};
		this.timer = fn.delay(this.options.initialDelay, this);
		this.lastDelay = this.options.initialDelay;
		this.completeCheck = function(response){
			$clear(this.timer);
			this.lastDelay = (response) ? this.options.delay : (this.lastDelay + this.options.delay).min(this.options.limit);
			this.timer = fn.delay(this.lastDelay, this);
		};
		return this.addEvent('complete', this.completeCheck);
	},

	stopTimer: function(){
		$clear(this.timer);
		return this.removeEvent('complete', this.completeCheck);
	}

});

/*
---

script: Assets.js

description: Provides methods to dynamically load JavaScript, CSS, and Image files into the document.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Element.Event
- /MooTools.More

provides: [Assets]

...
*/

var Asset = {

	javascript: function(source, properties){
		properties = $extend({
			onload: $empty,
			document: document,
			check: $lambda(true)
		}, properties);
		
		if (properties.onLoad) properties.onload = properties.onLoad;
		
		var script = new Element('script', {src: source, type: 'text/javascript'});

		var load = properties.onload.bind(script), 
			check = properties.check, 
			doc = properties.document;
		delete properties.onload;
		delete properties.check;
		delete properties.document;

		script.addEvents({
			load: load,
			readystatechange: function(){
				if (['loaded', 'complete'].contains(this.readyState)) load();
			}
		}).set(properties);

		if (Browser.Engine.webkit419) var checker = (function(){
			if (!$try(check)) return;
			$clear(checker);
			load();
		}).periodical(50);

		return script.inject(doc.head);
	},

	css: function(source, properties){
		return new Element('link', $merge({
			rel: 'stylesheet',
			media: 'screen',
			type: 'text/css',
			href: source
		}, properties)).inject(document.head);
	},

	image: function(source, properties){
		properties = $merge({
			onload: $empty,
			onabort: $empty,
			onerror: $empty
		}, properties);
		var image = new Image();
		var element = document.id(image) || new Element('img');
		['load', 'abort', 'error'].each(function(name){
			var type = 'on' + name;
			var cap = name.capitalize();
			if (properties['on' + cap]) properties[type] = properties['on' + cap];
			var event = properties[type];
			delete properties[type];
			image[type] = function(){
				if (!image) return;
				if (!element.parentNode){
					element.width = image.width;
					element.height = image.height;
				}
				image = image.onload = image.onabort = image.onerror = null;
				event.delay(1, element, element);
				element.fireEvent(name, element, 1);
			};
		});
		image.src = element.src = source;
		if (image && image.complete) image.onload.delay(1);
		return element.set(properties);
	},

	images: function(sources, options){
		options = $merge({
			onComplete: $empty,
			onProgress: $empty,
			onError: $empty,
			properties: {}
		}, options);
		sources = $splat(sources);
		var images = [];
		var counter = 0;
		return new Elements(sources.map(function(source){
			return Asset.image(source, $extend(options.properties, {
				onload: function(){
					options.onProgress.call(this, counter, sources.indexOf(source));
					counter++;
					if (counter == sources.length) options.onComplete();
				},
				onerror: function(){
					options.onError.call(this, counter, sources.indexOf(source));
					counter++;
					if (counter == sources.length) options.onComplete();
				}
			}));
		}));
	}

};

/*
---

script: Color.js

description: Class for creating and manipulating colors in JavaScript. Supports HSB -> RGB Conversions and vice versa.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Array
- core:1.2.4/String
- core:1.2.4/Number
- core:1.2.4/Hash
- core:1.2.4/Function
- core:1.2.4/$util

provides: [Color]

...
*/

var Color = new Native({

	initialize: function(color, type){
		if (arguments.length >= 3){
			type = 'rgb'; color = Array.slice(arguments, 0, 3);
		} else if (typeof color == 'string'){
			if (color.match(/rgb/)) color = color.rgbToHex().hexToRgb(true);
			else if (color.match(/hsb/)) color = color.hsbToRgb();
			else color = color.hexToRgb(true);
		}
		type = type || 'rgb';
		switch (type){
			case 'hsb':
				var old = color;
				color = color.hsbToRgb();
				color.hsb = old;
			break;
			case 'hex': color = color.hexToRgb(true); break;
		}
		color.rgb = color.slice(0, 3);
		color.hsb = color.hsb || color.rgbToHsb();
		color.hex = color.rgbToHex();
		return $extend(color, this);
	}

});

Color.implement({

	mix: function(){
		var colors = Array.slice(arguments);
		var alpha = ($type(colors.getLast()) == 'number') ? colors.pop() : 50;
		var rgb = this.slice();
		colors.each(function(color){
			color = new Color(color);
			for (var i = 0; i < 3; i++) rgb[i] = Math.round((rgb[i] / 100 * (100 - alpha)) + (color[i] / 100 * alpha));
		});
		return new Color(rgb, 'rgb');
	},

	invert: function(){
		return new Color(this.map(function(value){
			return 255 - value;
		}));
	},

	setHue: function(value){
		return new Color([value, this.hsb[1], this.hsb[2]], 'hsb');
	},

	setSaturation: function(percent){
		return new Color([this.hsb[0], percent, this.hsb[2]], 'hsb');
	},

	setBrightness: function(percent){
		return new Color([this.hsb[0], this.hsb[1], percent], 'hsb');
	}

});

var $RGB = function(r, g, b){
	return new Color([r, g, b], 'rgb');
};

var $HSB = function(h, s, b){
	return new Color([h, s, b], 'hsb');
};

var $HEX = function(hex){
	return new Color(hex, 'hex');
};

Array.implement({

	rgbToHsb: function(){
		var red = this[0],
				green = this[1],
				blue = this[2],
				hue = 0;
		var max = Math.max(red, green, blue),
				min = Math.min(red, green, blue);
		var delta = max - min;
		var brightness = max / 255,
				saturation = (max != 0) ? delta / max : 0;
		if(saturation != 0) {
			var rr = (max - red) / delta;
			var gr = (max - green) / delta;
			var br = (max - blue) / delta;
			if (red == max) hue = br - gr;
			else if (green == max) hue = 2 + rr - br;
			else hue = 4 + gr - rr;
			hue /= 6;
			if (hue < 0) hue++;
		}
		return [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100)];
	},

	hsbToRgb: function(){
		var br = Math.round(this[2] / 100 * 255);
		if (this[1] == 0){
			return [br, br, br];
		} else {
			var hue = this[0] % 360;
			var f = hue % 60;
			var p = Math.round((this[2] * (100 - this[1])) / 10000 * 255);
			var q = Math.round((this[2] * (6000 - this[1] * f)) / 600000 * 255);
			var t = Math.round((this[2] * (6000 - this[1] * (60 - f))) / 600000 * 255);
			switch (Math.floor(hue / 60)){
				case 0: return [br, t, p];
				case 1: return [q, br, p];
				case 2: return [p, br, t];
				case 3: return [p, q, br];
				case 4: return [t, p, br];
				case 5: return [br, p, q];
			}
		}
		return false;
	}

});

String.implement({

	rgbToHsb: function(){
		var rgb = this.match(/\d{1,3}/g);
		return (rgb) ? rgb.rgbToHsb() : null;
	},

	hsbToRgb: function(){
		var hsb = this.match(/\d{1,3}/g);
		return (hsb) ? hsb.hsbToRgb() : null;
	}

});


/*
---

script: Group.js

description: Class for monitoring collections of events

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Events
- /MooTools.More

provides: [Group]

...
*/

var Group = new Class({

	initialize: function(){
		this.instances = Array.flatten(arguments);
		this.events = {};
		this.checker = {};
	},

	addEvent: function(type, fn){
		this.checker[type] = this.checker[type] || {};
		this.events[type] = this.events[type] || [];
		if (this.events[type].contains(fn)) return false;
		else this.events[type].push(fn);
		this.instances.each(function(instance, i){
			instance.addEvent(type, this.check.bind(this, [type, instance, i]));
		}, this);
		return this;
	},

	check: function(type, instance, i){
		this.checker[type][i] = true;
		var every = this.instances.every(function(current, j){
			return this.checker[type][j] || false;
		}, this);
		if (!every) return;
		this.checker[type] = {};
		this.events[type].each(function(event){
			event.call(this, this.instances, instance);
		}, this);
	}

});


/*
---

script: Hash.Cookie.js

description: Class for creating, reading, and deleting Cookies in JSON format.

license: MIT-style license

authors:
- Valerio Proietti
- Aaron Newton

requires:
- core:1.2.4/Cookie
- core:1.2.4/JSON
- /MooTools.More

provides: [Hash.Cookie]

...
*/

Hash.Cookie = new Class({

	Extends: Cookie,

	options: {
		autoSave: true
	},

	initialize: function(name, options){
		this.parent(name, options);
		this.load();
	},

	save: function(){
		var value = JSON.encode(this.hash);
		if (!value || value.length > 4096) return false; //cookie would be truncated!
		if (value == '{}') this.dispose();
		else this.write(value);
		return true;
	},

	load: function(){
		this.hash = new Hash(JSON.decode(this.read(), true));
		return this;
	}

});

Hash.each(Hash.prototype, function(method, name){
	if (typeof method == 'function') Hash.Cookie.implement(name, function(){
		var value = method.apply(this.hash, arguments);
		if (this.options.autoSave) this.save();
		return value;
	});
});

/*
---

script: IframeShim.js

description: Defines IframeShim, a class for obscuring select lists and flash objects in IE.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Element.Event
- core:1.2.4/Element.Style
- core:1.2.4/Options Events
- /Element.Position
- /Class.Occlude

provides: [IframeShim]

...
*/

var IframeShim = new Class({

	Implements: [Options, Events, Class.Occlude],

	options: {
		className: 'iframeShim',
		src: 'javascript:false;document.write("");',
		display: false,
		zIndex: null,
		margin: 0,
		offset: {x: 0, y: 0},
		browsers: (Browser.Engine.trident4 || (Browser.Engine.gecko && !Browser.Engine.gecko19 && Browser.Platform.mac))
	},

	property: 'IframeShim',

	initialize: function(element, options){
		this.element = document.id(element);
		if (this.occlude()) return this.occluded;
		this.setOptions(options);
		this.makeShim();
		return this;
	},

	makeShim: function(){
		if(this.options.browsers){
			var zIndex = this.element.getStyle('zIndex').toInt();

			if (!zIndex){
				zIndex = 1;
				var pos = this.element.getStyle('position');
				if (pos == 'static' || !pos) this.element.setStyle('position', 'relative');
				this.element.setStyle('zIndex', zIndex);
			}
			zIndex = ($chk(this.options.zIndex) && zIndex > this.options.zIndex) ? this.options.zIndex : zIndex - 1;
			if (zIndex < 0) zIndex = 1;
			this.shim = new Element('iframe', {
				src: this.options.src,
				scrolling: 'no',
				frameborder: 0,
				styles: {
					zIndex: zIndex,
					position: 'absolute',
					border: 'none',
					filter: 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)'
				},
				'class': this.options.className
			}).store('IframeShim', this);
			var inject = (function(){
				this.shim.inject(this.element, 'after');
				this[this.options.display ? 'show' : 'hide']();
				this.fireEvent('inject');
			}).bind(this);
			if (!IframeShim.ready) window.addEvent('load', inject);
			else inject();
		} else {
			this.position = this.hide = this.show = this.dispose = $lambda(this);
		}
	},

	position: function(){
		if (!IframeShim.ready || !this.shim) return this;
		var size = this.element.measure(function(){ 
			return this.getSize(); 
		});
		if (this.options.margin != undefined){
			size.x = size.x - (this.options.margin * 2);
			size.y = size.y - (this.options.margin * 2);
			this.options.offset.x += this.options.margin;
			this.options.offset.y += this.options.margin;
		}
		this.shim.set({width: size.x, height: size.y}).position({
			relativeTo: this.element,
			offset: this.options.offset
		});
		return this;
	},

	hide: function(){
		if (this.shim) this.shim.setStyle('display', 'none');
		return this;
	},

	show: function(){
		if (this.shim) this.shim.setStyle('display', 'block');
		return this.position();
	},

	dispose: function(){
		if (this.shim) this.shim.dispose();
		return this;
	},

	destroy: function(){
		if (this.shim) this.shim.destroy();
		return this;
	}

});

window.addEvent('load', function(){
	IframeShim.ready = true;
});

/*
---

script: HtmlTable.js

description: Builds table elements with methods to add rows.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Options
- core:1.2.4/Events
- /Class.Occlude

provides: [HtmlTable]

...
*/

var HtmlTable = new Class({

	Implements: [Options, Events, Class.Occlude],

	options: {
		properties: {
			cellpadding: 0,
			cellspacing: 0,
			border: 0
		},
		rows: [],
		headers: [],
		footers: []
	},

	property: 'HtmlTable',

	initialize: function(){
		var params = Array.link(arguments, {options: Object.type, table: Element.type});
		this.setOptions(params.options);
		this.element = params.table || new Element('table', this.options.properties);
		if (this.occlude()) return this.occluded;
		this.build();
	},

	build: function(){
		this.element.store('HtmlTable', this);

		this.body = document.id(this.element.tBodies[0]) || new Element('tbody').inject(this.element);
		$$(this.body.rows);

		if (this.options.headers.length) this.setHeaders(this.options.headers);
		else this.thead = document.id(this.element.tHead);
		if (this.thead) this.head = document.id(this.thead.rows[0]);

		if (this.options.footers.length) this.setFooters(this.options.footers);
		this.tfoot = document.id(this.element.tFoot);
		if (this.tfoot) this.foot = document.id(this.thead.rows[0]);

		this.options.rows.each(function(row){
			this.push(row);
		}, this);

		['adopt', 'inject', 'wraps', 'grab', 'replaces', 'dispose'].each(function(method){
				this[method] = this.element[method].bind(this.element);
		}, this);
	},

	toElement: function(){
		return this.element;
	},

	empty: function(){
		this.body.empty();
		return this;
	},

	set: function(what, items) {
		var target = (what == 'headers') ? 'tHead' : 'tFoot';
		this[target.toLowerCase()] = (document.id(this.element[target]) || new Element(target.toLowerCase()).inject(this.element, 'top')).empty();
		var data = this.push(items, {}, this[target.toLowerCase()], what == 'headers' ? 'th' : 'td');
		if (what == 'headers') this.head = document.id(this.thead.rows[0]);
		else this.foot = document.id(this.thead.rows[0]);
		return data;
	},

	setHeaders: function(headers){
		this.set('headers', headers);
		return this;
	},

	setFooters: function(footers){
		this.set('footers', footers);
		return this;
	},

	push: function(row, rowProperties, target, tag){
		var tds = row.map(function(data){
			var td = new Element(tag || 'td', data.properties),
				type = data.content || data || '',
				element = document.id(type);
			if($type(type) != 'string' && element) td.adopt(element);
			else td.set('html', type);

			return td;
		});

		return {
			tr: new Element('tr', rowProperties).inject(target || this.body).adopt(tds),
			tds: tds
		};
	}

});


/*
---

script: HtmlTable.Zebra.js

description: Builds a stripy table with methods to add rows.

license: MIT-style license

authors:
- Harald Kirschner
- Aaron Newton

requires:
- /HtmlTable
- /Class.refactor

provides: [HtmlTable.Zebra]

...
*/

HtmlTable = Class.refactor(HtmlTable, {

	options: {
		classZebra: 'table-tr-odd',
		zebra: true
	},

	initialize: function(){
		this.previous.apply(this, arguments);
		if (this.occluded) return this.occluded;
		if (this.options.zebra) this.updateZebras();
	},

	updateZebras: function(){
		Array.each(this.body.rows, this.zebra, this);
	},

	zebra: function(row, i){
		return row[((i % 2) ? 'remove' : 'add')+'Class'](this.options.classZebra);
	},

	push: function(){
		var pushed = this.previous.apply(this, arguments);
		if (this.options.zebra) this.updateZebras();
		return pushed;
	}

});

/*
---

script: HtmlTable.Sort.js

description: Builds a stripy, sortable table with methods to add rows.

license: MIT-style license

authors:
- Harald Kirschner
- Aaron Newton

requires:
- core:1.2.4/Hash
- /HtmlTable
- /Class.refactor
- /Element.Delegation
- /Date

provides: [HtmlTable.Sort]

...
*/

HtmlTable = Class.refactor(HtmlTable, {

	options: {/*
		onSort: $empty, */
		sortIndex: 0,
		sortReverse: false,
		parsers: [],
		defaultParser: 'string',
		classSortable: 'table-sortable',
		classHeadSort: 'table-th-sort',
		classHeadSortRev: 'table-th-sort-rev',
		classNoSort: 'table-th-nosort',
		classGroupHead: 'table-tr-group-head',
		classGroup: 'table-tr-group',
		classCellSort: 'table-td-sort',
		classSortSpan: 'table-th-sort-span',
		sortable: false
	},

	initialize: function () {
		this.previous.apply(this, arguments);
		if (this.occluded) return this.occluded;
		this.sorted = {index: null, dir: 1};
		this.bound = {
			headClick: this.headClick.bind(this)
		};
		this.sortSpans = new Elements();
		if (this.options.sortable) {
			this.enableSort();
			if (this.options.sortIndex != null) this.sort(this.options.sortIndex, this.options.sortReverse);
		}
	},

	attachSorts: function(attach){
		this.element.removeEvents('click:relay(th)');
		this.element[$pick(attach, true) ? 'addEvent' : 'removeEvent']('click:relay(th)', this.bound.headClick);
	},

	setHeaders: function(){
		this.previous.apply(this, arguments);
		if (this.sortEnabled) this.detectParsers();
	},
	
	detectParsers: function(force){
		if (!this.head) return;
		var parsers = this.options.parsers, 
				rows = this.body.rows;

		// auto-detect
		this.parsers = $$(this.head.cells).map(function(cell, index) {
			if (!force && (cell.hasClass(this.options.classNoSort) || cell.retrieve('htmltable-parser'))) return cell.retrieve('htmltable-parser');
			var thDiv = new Element('div');
			$each(cell.childNodes, function(node) {
				thDiv.adopt(node);
			});
			thDiv.inject(cell);
			var sortSpan = new Element('span', {'html': '&#160;', 'class': this.options.classSortSpan}).inject(thDiv, 'top');
			
			this.sortSpans.push(sortSpan);

			var parser = parsers[index], 
					cancel;
			switch ($type(parser)) {
				case 'function': parser = {convert: parser}; cancel = true; break;
				case 'string': parser = parser; cancel = true; break;
			}
			if (!cancel) {
				HtmlTable.Parsers.some(function(current) {
					var match = current.match;
					if (!match) return false;
					for (var i = 0, j = rows.length; i < j; i++) {
						var text = $(rows[i].cells[index]).get('html').clean();
						if (text && match.test(text)) {
							parser = current;
							return true;
						}
					}
				});
			}

			if (!parser) parser = this.options.defaultParser;
			cell.store('htmltable-parser', parser);
			return parser;
		}, this);
	},

	headClick: function(event, el) {
		if (!this.head || el.hasClass(this.options.classNoSort)) return;
		var index = Array.indexOf(this.head.cells, el);
		this.sort(index);
		return false;
	},

	sort: function(index, reverse, pre) {
		if (!this.head) return;
		pre = !!(pre);
		var classCellSort = this.options.classCellSort;
		var classGroup = this.options.classGroup, 
				classGroupHead = this.options.classGroupHead;

		if (!pre) {
			if (index != null) {
				if (this.sorted.index == index) {
					this.sorted.reverse = !(this.sorted.reverse);
				} else {
					if (this.sorted.index != null) {
						this.sorted.reverse = false;
						this.head.cells[this.sorted.index].removeClass(this.options.classHeadSort).removeClass(this.options.classHeadSortRev);
					} else {
						this.sorted.reverse = true;
					}
					this.sorted.index = index;
				}
			} else {
				index = this.sorted.index;
			}

			if (reverse != null) this.sorted.reverse = reverse;

			var head = document.id(this.head.cells[index]);
			if (head) {
				head.addClass(this.options.classHeadSort);
				if (this.sorted.reverse) head.addClass(this.options.classHeadSortRev);
				else head.removeClass(this.options.classHeadSortRev);
			}

			this.body.getElements('td').removeClass(this.options.classCellSort);
		}

		var parser = this.parsers[index];
		if ($type(parser) == 'string') parser = HtmlTable.Parsers.get(parser);
		if (!parser) return;

		if (!Browser.Engine.trident) {
			var rel = this.body.getParent();
			this.body.dispose();
		}

		var data = Array.map(this.body.rows, function(row, i) {
			var value = parser.convert.call(document.id(row.cells[index]));

			return {
				position: i,
				value: value,
				toString:  function() {
					return value.toString();
				}
			};
		}, this);
		data.reverse(true);

		data.sort(function(a, b){
			if (a.value === b.value) return 0;
			return a.value > b.value ? 1 : -1;
		});

		if (!this.sorted.reverse) data.reverse(true);

		var i = data.length, body = this.body;
		var j, position, entry, group;

		while (i) {
			var item = data[--i];
			position = item.position;
			var row = body.rows[position];
			if (row.disabled) continue;

			if (!pre) {
				if (group === item.value) {
					row.removeClass(classGroupHead).addClass(classGroup);
				} else {
					group = item.value;
					row.removeClass(classGroup).addClass(classGroupHead);
				}
				if (this.zebra) this.zebra(row, i);

				row.cells[index].addClass(classCellSort);
			}

			body.appendChild(row);
			for (j = 0; j < i; j++) {
				if (data[j].position > position) data[j].position--;
			}
		};
		data = null;
		if (rel) rel.grab(body);

		return this.fireEvent('sort', [body, index]);
	},

	reSort: function(){
		if (this.sortEnabled) this.sort.call(this, this.sorted.index, this.sorted.reverse);
		return this;
	},

	enableSort: function(){
		this.element.addClass(this.options.classSortable);
		this.attachSorts(true);
		this.detectParsers();
		this.sortEnabled = true;
		return this;
	},

	disableSort: function(){
		this.element.removeClass(this.options.classSortable);
		this.attachSorts(false);
		this.sortSpans.each(function(span) { span.destroy(); });
		this.sortSpans.empty();
		this.sortEnabled = false;
		return this;
	}

});

HtmlTable.Parsers = new Hash({

	'date': {
		match: /^\d{2}[-\/ ]\d{2}[-\/ ]\d{2,4}$/,
		convert: function() {
			return Date.parse(this.get('text')).format('db');
		},
		type: 'date'
	},
	'input-checked': {
		match: / type="(radio|checkbox)" /,
		convert: function() {
			return this.getElement('input').checked;
		}
	},
	'input-value': {
		match: /<input/,
		convert: function() {
			return this.getElement('input').value;
		}
	},
	'number': {
		match: /^\d+[^\d.,]*$/,
		convert: function() {
			return this.get('text').toInt();
		},
		number: true
	},
	'numberLax': {
		match: /^[^\d]+\d+$/,
		convert: function() {
			return this.get('text').replace(/[^-?^0-9]/, '').toInt();
		},
		number: true
	},
	'float': {
		match: /^[\d]+\.[\d]+/,
		convert: function() {
			return this.get('text').replace(/[^-?^\d.]/, '').toFloat();
		},
		number: true
	},
	'floatLax': {
		match: /^[^\d]+[\d]+\.[\d]+$/,
		convert: function() {
			return this.get('text').replace(/[^-?^\d.]/, '');
		},
		number: true
	},
	'string': {
		match: null,
		convert: function() {
			return this.get('text');
		}
	},
	'title': {
		match: null,
		convert: function() {
			return this.title;
		}
	}

});



/*
---

script: HtmlTable.Select.js

description: Builds a stripy, sortable table with methods to add rows. Rows can be selected with the mouse or keyboard navigation.

license: MIT-style license

authors:
- Harald Kirschner
- Aaron Newton

requires:
- /Keyboard
- /HtmlTable
- /Class.refactor
- /Element.Delegation

provides: [HtmlTable.Select]

...
*/

HtmlTable = Class.refactor(HtmlTable, {

	options: {
		/*onRowFocus: $empty,
		onRowUnfocus: $empty,*/
		useKeyboard: true,
		classRowSelected: 'table-tr-selected',
		classRowHovered: 'table-tr-hovered',
		classSelectable: 'table-selectable',
		allowMultiSelect: true,
		selectable: false
	},

	initialize: function(){
		this.previous.apply(this, arguments);
		if (this.occluded) return this.occluded;
		this.selectedRows = new Elements();
		this.bound = {
			mouseleave: this.mouseleave.bind(this),
			focusRow: this.focusRow.bind(this)
		};
		if (this.options.selectable) this.enableSelect();
	},

	enableSelect: function(){
		this.selectEnabled = true;
		this.attachSelects();
		this.element.addClass(this.options.classSelectable);
	},

	disableSelect: function(){
		this.selectEnabled = false;
		this.attach(false);
		this.element.removeClass(this.options.classSelectable);
	},

	attachSelects: function(attach){
		attach = $pick(attach, true);
		var method = attach ? 'addEvents' : 'removeEvents';
		this.element[method]({
			mouseleave: this.bound.mouseleave
		});
		this.body[method]({
			'click:relay(tr)': this.bound.focusRow
		});
		if (this.options.useKeyboard || this.keyboard){
			if (!this.keyboard) this.keyboard = new Keyboard({
				events: {
					down: function(e) {
						e.preventDefault();
						this.shiftFocus(1);
					}.bind(this),
					up: function(e) {
						e.preventDefault();
						this.shiftFocus(-1);
					}.bind(this),
					enter: function(e) {
						e.preventDefault();
						if (this.hover) this.focusRow(this.hover);
					}.bind(this)
				},
				active: true
			});
			this.keyboard[attach ? 'activate' : 'deactivate']();
		}
		this.updateSelects();
	},

	mouseleave: function(){
		if (this.hover) this.leaveRow(this.hover);
	},

	focus: function(){
		if (this.keyboard) this.keyboard.activate();
	},

	blur: function(){
		if (this.keyboard) this.keyboard.deactivate();
	},

	push: function(){
		var ret = this.previous.apply(this, arguments);
		this.updateSelects();
		return ret;
	},

	updateSelects: function(){
		Array.each(this.body.rows, function(row){
			var binders = row.retrieve('binders');
			if ((binders && this.selectEnabled) || (!binders && !this.selectEnabled)) return;
			if (!binders){
				binders = {
					mouseenter: this.enterRow.bind(this, [row]),
					mouseleave: this.leaveRow.bind(this, [row])
				};
				row.store('binders', binders).addEvents(binders);
			} else {
				row.removeEvents(binders);
			}
		}, this);
	},

	enterRow: function(row){
		if (this.hover) this.hover = this.leaveRow(this.hover);
		this.hover = row.addClass(this.options.classRowHovered);
	},

	shiftFocus: function(offset){
		if (!this.hover) return this.enterRow(this.body.rows[0]);
		var to = Array.indexOf(this.body.rows, this.hover) + offset;
		if (to < 0) to = 0;
		if (to >= this.body.rows.length) to = this.body.rows.length - 1;
		if (this.hover == this.body.rows[to]) return this;
		this.enterRow(this.body.rows[to]);
	},

	leaveRow: function(row){
		row.removeClass(this.options.classRowHovered);
	},

	focusRow: function(){
		var row = arguments[1] || arguments[0]; //delegation passes the event first
		if (!this.body.getChildren().contains(row)) return;
		var unfocus = function(row){
			this.selectedRows.erase(row);
			row.removeClass(this.options.classRowSelected);
			this.fireEvent('rowUnfocus', [row, this.selectedRows]);
		}.bind(this);
		if (!this.options.allowMultiSelect) this.selectedRows.each(unfocus);
		if (!this.selectedRows.contains(row)) {
			this.selectedRows.push(row);
			row.addClass(this.options.classRowSelected);
			this.fireEvent('rowFocus', [row, this.selectedRows]);
		} else {
			unfocus(row);
		}
		return false;
	},

	selectAll: function(status){
		status = $pick(status, true);
		if (!this.options.allowMultiSelect && status) return;
		if (!status) this.selectedRows.removeClass(this.options.classRowSelected).empty();
		else this.selectedRows.combine(this.body.rows).addClass(this.options.classRowSelected);
		return this;
	},

	selectNone: function(){
		return this.selectAll(false);
	}

});


/*
---

script: Keyboard.js

description: KeyboardEvents used to intercept events on a class for keyboard and format modifiers in a specific order so as to make alt+shift+c the same as shift+alt+c.

license: MIT-style license

authors:
- Perrin Westrich
- Aaron Newton
- Scott Kyle

requires:
- core:1.2.4/Events
- core:1.2.4/Options
- core:1.2.4/Element.Event
- /Log

provides: [Keyboard]

...
*/

(function(){
	
	var Keyboard = this.Keyboard = new Class({

		Extends: Events,

		Implements: [Options, Log],

		options: {
			/*
			onActivate: $empty,
			onDeactivate: $empty,
			*/
			defaultEventType: 'keydown',
			active: false,
			events: {},
			nonParsedEvents: ['activate', 'deactivate', 'onactivate', 'ondeactivate', 'changed', 'onchanged']
		},

		initialize: function(options){
			this.setOptions(options);
			this.setup();
		}, 
		setup: function(){
			this.addEvents(this.options.events);
			//if this is the root manager, nothing manages it
			if (Keyboard.manager && !this.manager) Keyboard.manager.manage(this);
			if (this.options.active) this.activate();
		},

		handle: function(event, type){
			//Keyboard.stop(event) prevents key propagation
			if (event.preventKeyboardPropagation) return;
			
			var bubbles = !!this.manager;
			if (bubbles && this.activeKB){
				this.activeKB.handle(event, type);
				if (event.preventKeyboardPropagation) return;
			}
			this.fireEvent(type, event);
			
			if (!bubbles && this.activeKB) this.activeKB.handle(event, type);
		},

		addEvent: function(type, fn, internal){
			return this.parent(Keyboard.parse(type, this.options.defaultEventType, this.options.nonParsedEvents), fn, internal);
		},

		removeEvent: function(type, fn){
			return this.parent(Keyboard.parse(type, this.options.defaultEventType, this.options.nonParsedEvents), fn);
		},

		toggleActive: function(){
			return this[this.active ? 'deactivate' : 'activate']();
		},

		activate: function(instance){
			if (instance) {
				//if we're stealing focus, store the last keyboard to have it so the relenquish command works
				if (instance != this.activeKB) this.previous = this.activeKB;
				//if we're enabling a child, assign it so that events are now passed to it
				this.activeKB = instance.fireEvent('activate');
				Keyboard.manager.fireEvent('changed');
			} else if (this.manager) {
				//else we're enabling ourselves, we must ask our parent to do it for us
				this.manager.activate(this);
			}
			return this;
		},

		deactivate: function(instance){
			if (instance) {
				if(instance === this.activeKB) {
					this.activeKB = null;
					instance.fireEvent('deactivate');
					Keyboard.manager.fireEvent('changed');
				}
			}
			else if (this.manager) {
				this.manager.deactivate(this);
			}
			return this;
		},

		relenquish: function(){
			if (this.previous) this.activate(this.previous);
		},

		//management logic
		manage: function(instance){
			if (instance.manager) instance.manager.drop(instance);
			this.instances.push(instance);
			instance.manager = this;
			if (!this.activeKB) this.activate(instance);
			else this._disable(instance);
		},

		_disable: function(instance){
			if (this.activeKB == instance) this.activeKB = null;
		},

		drop: function(instance){
			this._disable(instance);
			this.instances.erase(instance);
		},

		instances: [],

		trace: function(){
			Keyboard.trace(this);
		},

		each: function(fn){
			Keyboard.each(this, fn);
		}

	});
	
	var parsed = {};
	var modifiers = ['shift', 'control', 'alt', 'meta'];
	var regex = /^(?:shift|control|ctrl|alt|meta)$/;
	
	Keyboard.parse = function(type, eventType, ignore){
		if (ignore && ignore.contains(type.toLowerCase())) return type;
		
		type = type.toLowerCase().replace(/^(keyup|keydown):/, function($0, $1){
			eventType = $1;
			return '';
		});

		if (!parsed[type]){
			var key, mods = {};
			type.split('+').each(function(part){
				if (regex.test(part)) mods[part] = true;
				else key = part;
			});

			mods.control = mods.control || mods.ctrl; // allow both control and ctrl
			
			var keys = [];
			modifiers.each(function(mod){
				if (mods[mod]) keys.push(mod);
			});
			
			if (key) keys.push(key);
			parsed[type] = keys.join('+');
		}

		return eventType + ':' + parsed[type];
	};

	Keyboard.each = function(keyboard, fn){
		var current = keyboard || Keyboard.manager;
		while (current){
			fn.run(current);
			current = current.activeKB;
		}
	};

	Keyboard.stop = function(event){
		event.preventKeyboardPropagation = true;
	};

	Keyboard.manager = new Keyboard({
		active: true
	});
	
	Keyboard.trace = function(keyboard){
		keyboard = keyboard || Keyboard.manager;
		keyboard.enableLog();
		keyboard.log('the following items have focus: ');
		Keyboard.each(keyboard, function(current){
			keyboard.log(document.id(current.widget) || current.wiget || current);
		});
	};
	
	var handler = function(event){
		var keys = [];
		modifiers.each(function(mod){
			if (event[mod]) keys.push(mod);
		});
		
		if (!regex.test(event.key)) keys.push(event.key);
		Keyboard.manager.handle(event, event.type + ':' + keys.join('+'));
	};
	
	document.addEvents({
		'keyup': handler,
		'keydown': handler
	});

	Event.Keys.extend({
		'shift': 16,
		'control': 17,
		'alt': 18,
		'capslock': 20,
		'pageup': 33,
		'pagedown': 34,
		'end': 35,
		'home': 36,
		'numlock': 144,
		'scrolllock': 145,
		';': 186,
		'=': 187,
		',': 188,
		'-': Browser.Engine.Gecko ? 109 : 189,
		'.': 190,
		'/': 191,
		'`': 192,
		'[': 219,
		'\\': 220,
		']': 221,
		"'": 222
	});

})();


/*
---

script: Keyboard.js

description: Enhances Keyboard by adding the ability to name and describe keyboard shortcuts, and the ability to grab shortcuts by name and bind the shortcut to different keys.

license: MIT-style license

authors:
- Perrin Westrich

requires:
- core:1.2.4/Function
- /Keyboard.Extras

provides: [Keyboard.Extras]

...
*/
Keyboard.prototype.options.nonParsedEvents.combine(['rebound', 'onrebound']);

Keyboard.implement({

	/*
		shortcut should be in the format of:
		{
			'keys': 'shift+s', // the default to add as an event.
			'description': 'blah blah blah', // a brief description of the functionality.
			'handler': function(){} // the event handler to run when keys are pressed.
		}
	*/
	addShortcut: function(name, shortcut) {
		this.shortcuts = this.shortcuts || [];
		this.shortcutIndex = this.shortcutIndex || {};
		
		shortcut.getKeyboard = $lambda(this);
		shortcut.name = name;
		this.shortcutIndex[name] = shortcut;
		this.shortcuts.push(shortcut);
		if(shortcut.keys) this.addEvent(shortcut.keys, shortcut.handler);
		return this;
	},

	addShortcuts: function(obj){
		for(var name in obj) this.addShortcut(name, obj[name]);
		return this;
	},

	getShortcuts: function(){
		return this.shortcuts || [];
	},

	getShortcut: function(name){
		return (this.shortcutIndex || {})[name];
	}

});

Keyboard.rebind = function(newKeys, shortcuts){
	$splat(shortcuts).each(function(shortcut){
		shortcut.getKeyboard().removeEvent(shortcut.keys, shortcut.handler);
		shortcut.getKeyboard().addEvent(newKeys, shortcut.handler);
		shortcut.keys = newKeys;
		shortcut.getKeyboard().fireEvent('rebound');
	});
};


Keyboard.getActiveShortcuts = function(keyboard) {
	var activeKBS = [], activeSCS = [];
	Keyboard.each(keyboard, [].push.bind(activeKBS));
	activeKBS.each(function(kb){ activeSCS.extend(kb.getShortcuts()); });
	return activeSCS;
};

Keyboard.getShortcut = function(name, keyboard, opts){
	opts = opts || {};
	var shortcuts = opts.many ? [] : null,
		set = opts.many ? function(kb){
				var shortcut = kb.getShortcut(name);
				if(shortcut) shortcuts.push(shortcut);
			} : function(kb) { 
				if(!shortcuts) shortcuts = kb.getShortcut(name);
			};
	Keyboard.each(keyboard, set);
	return shortcuts;
};

Keyboard.getShortcuts = function(name, keyboard) {
	return Keyboard.getShortcut(name, keyboard, { many: true });
};


/*
---

script: Mask.js

description: Creates a mask element to cover another.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Options
- core:1.2.4/Events
- core:1.2.4/Element.Event
- /Class.Binds
- /Element.Position
- /IframeShim

provides: [Mask]

...
*/

var Mask = new Class({

	Implements: [Options, Events],

	Binds: ['position'],

	options: {
		// onShow: $empty,
		// onHide: $empty,
		// onDestroy: $empty,
		// onClick: $empty,
		//inject: {
		//  where: 'after',
		//  target: null,
		//},
		// hideOnClick: false,
		// id: null,
		// destroyOnHide: false,
		style: {},
		'class': 'mask',
		maskMargins: false,
		useIframeShim: true,
		iframeShimOptions: {}
	},

	initialize: function(target, options){
		this.target = document.id(target) || document.id(document.body);
		this.target.store('Mask', this);
		this.setOptions(options);
		this.render();
		this.inject();
	},
	
	render: function() {
		this.element = new Element('div', {
			'class': this.options['class'],
			id: this.options.id || 'mask-' + $time(),
			styles: $merge(this.options.style, {
				display: 'none'
			}),
			events: {
				click: function(){
					this.fireEvent('click');
					if (this.options.hideOnClick) this.hide();
				}.bind(this)
			}
		});
		this.hidden = true;
	},

	toElement: function(){
		return this.element;
	},

	inject: function(target, where){
		where = where || this.options.inject ? this.options.inject.where : '' || this.target == document.body ? 'inside' : 'after';
		target = target || this.options.inject ? this.options.inject.target : '' || this.target;
		this.element.inject(target, where);
		if (this.options.useIframeShim) {
			this.shim = new IframeShim(this.element, this.options.iframeShimOptions);
			this.addEvents({
				show: this.shim.show.bind(this.shim),
				hide: this.shim.hide.bind(this.shim),
				destroy: this.shim.destroy.bind(this.shim)
			});
		}
	},

	position: function(){
		this.resize(this.options.width, this.options.height);
		this.element.position({
			relativeTo: this.target,
			position: 'topLeft',
			ignoreMargins: !this.options.maskMargins,
			ignoreScroll: this.target == document.body
		});
		return this;
	},

	resize: function(x, y){
		var opt = {
			styles: ['padding', 'border']
		};
		if (this.options.maskMargins) opt.styles.push('margin');
		var dim = this.target.getComputedSize(opt);
		if (this.target == document.body) {
			var win = window.getSize();
			if (dim.totalHeight < win.y) dim.totalHeight = win.y;
			if (dim.totalWidth < win.x) dim.totalWidth = win.x;
		}
		this.element.setStyles({
			width: $pick(x, dim.totalWidth, dim.x),
			height: $pick(y, dim.totalHeight, dim.y)
		});
		return this;
	},

	show: function(){
		if (!this.hidden) return this;
		window.addEvent('resize', this.position);
		this.position();
		this.showMask.apply(this, arguments);
		return this;
	},

	showMask: function(){
		this.element.setStyle('display', 'block');
		this.hidden = false;
		this.fireEvent('show');
	},

	hide: function(){
		if (this.hidden) return this;
		window.removeEvent('resize', this.position);
		this.hideMask.apply(this, arguments);
		if (this.options.destroyOnHide) return this.destroy();
		return this;
	},

	hideMask: function(){
		this.element.setStyle('display', 'none');
		this.hidden = true;
		this.fireEvent('hide');
	},

	toggle: function(){
		this[this.hidden ? 'show' : 'hide']();
	},

	destroy: function(){
		this.hide();
		this.element.destroy();
		this.fireEvent('destroy');
		this.target.eliminate('mask');
	}

});

Element.Properties.mask = {

	set: function(options){
		var mask = this.retrieve('mask');
		return this.eliminate('mask').store('mask:options', options);
	},

	get: function(options){
		if (options || !this.retrieve('mask')){
			if (this.retrieve('mask')) this.retrieve('mask').destroy();
			if (options || !this.retrieve('mask:options')) this.set('mask', options);
			this.store('mask', new Mask(this, this.retrieve('mask:options')));
		}
		return this.retrieve('mask');
	}

};

Element.implement({

	mask: function(options){
		this.get('mask', options).show();
		return this;
	},

	unmask: function(){
		this.get('mask').hide();
		return this;
	}

});

/*
---

script: Scroller.js

description: Class which scrolls the contents of any Element (including the window) when the mouse reaches the Element's boundaries.

license: MIT-style license

authors:
- Valerio Proietti

requires:
- core:1.2.4/Events
- core:1.2.4/Options
- core:1.2.4/Element.Event
- core:1.2.4/Element.Dimensions

provides: [Scroller]

...
*/

var Scroller = new Class({

	Implements: [Events, Options],

	options: {
		area: 20,
		velocity: 1,
		onChange: function(x, y){
			this.element.scrollTo(x, y);
		},
		fps: 50
	},

	initialize: function(element, options){
		this.setOptions(options);
		this.element = document.id(element);
		this.docBody = document.id(this.element.getDocument().body);
		this.listener = ($type(this.element) != 'element') ?  this.docBody : this.element;
		this.timer = null;
		this.bound = {
			attach: this.attach.bind(this),
			detach: this.detach.bind(this),
			getCoords: this.getCoords.bind(this)
		};
	},

	start: function(){
		this.listener.addEvents({
			mouseover: this.bound.attach,
			mouseout: this.bound.detach
		});
	},

	stop: function(){
		this.listener.removeEvents({
			mouseover: this.bound.attach,
			mouseout: this.bound.detach
		});
		this.detach();
		this.timer = $clear(this.timer);
	},

	attach: function(){
		this.listener.addEvent('mousemove', this.bound.getCoords);
	},

	detach: function(){
		this.listener.removeEvent('mousemove', this.bound.getCoords);
		this.timer = $clear(this.timer);
	},

	getCoords: function(event){
		this.page = (this.listener.get('tag') == 'body') ? event.client : event.page;
		if (!this.timer) this.timer = this.scroll.periodical(Math.round(1000 / this.options.fps), this);
	},

	scroll: function(){
		var size = this.element.getSize(), 
			scroll = this.element.getScroll(), 
			pos = this.element != this.docBody ? this.element.getOffsets() : {x: 0, y:0}, 
			scrollSize = this.element.getScrollSize(), 
			change = {x: 0, y: 0};
		for (var z in this.page){
			if (this.page[z] < (this.options.area + pos[z]) && scroll[z] != 0) {
				change[z] = (this.page[z] - this.options.area - pos[z]) * this.options.velocity;
			} else if (this.page[z] + this.options.area > (size[z] + pos[z]) && scroll[z] + size[z] != scrollSize[z]) {
				change[z] = (this.page[z] - size[z] + this.options.area - pos[z]) * this.options.velocity;
			}
		}
		if (change.y || change.x) this.fireEvent('change', [scroll.x + change.x, scroll.y + change.y]);
	}

});

/*
---

script: Tips.js

description: Class for creating nice tips that follow the mouse cursor when hovering an element.

license: MIT-style license

authors:
- Valerio Proietti
- Christoph Pojer

requires:
- core:1.2.4/Options
- core:1.2.4/Events
- core:1.2.4/Element.Event
- core:1.2.4/Element.Style
- core:1.2.4/Element.Dimensions
- /MooTools.More

provides: [Tips]

...
*/

(function(){

var read = function(option, element){
	return (option) ? ($type(option) == 'function' ? option(element) : element.get(option)) : '';
};

this.Tips = new Class({

	Implements: [Events, Options],

	options: {
		/*
		onAttach: $empty(element),
		onDetach: $empty(element),
		*/
		onShow: function(){
			this.tip.setStyle('display', 'block');
		},
		onHide: function(){
			this.tip.setStyle('display', 'none');
		},
		title: 'title',
		text: function(element){
			return element.get('rel') || element.get('href');
		},
		showDelay: 100,
		hideDelay: 100,
		className: 'tip-wrap',
		offset: {x: 16, y: 16},
		windowPadding: {x:0, y:0},
		fixed: false
	},

	initialize: function(){
		var params = Array.link(arguments, {options: Object.type, elements: $defined});
		this.setOptions(params.options);
		if (params.elements) this.attach(params.elements);
		this.container = new Element('div', {'class': 'tip'});
	},

	toElement: function(){
		if (this.tip) return this.tip;

		return this.tip = new Element('div', {
			'class': this.options.className,
			styles: {
				position: 'absolute',
				top: 0,
				left: 0
			}
		}).adopt(
			new Element('div', {'class': 'tip-top'}),
			this.container,
			new Element('div', {'class': 'tip-bottom'})
		).inject(document.body);
	},

	attach: function(elements){
		$$(elements).each(function(element){
			var title = read(this.options.title, element),
				text = read(this.options.text, element);
			
			element.erase('title').store('tip:native', title).retrieve('tip:title', title);
			element.retrieve('tip:text', text);
			this.fireEvent('attach', [element]);
			
			var events = ['enter', 'leave'];
			if (!this.options.fixed) events.push('move');
			
			events.each(function(value){
				var event = element.retrieve('tip:' + value);
				if (!event) event = this['element' + value.capitalize()].bindWithEvent(this, element);
				
				element.store('tip:' + value, event).addEvent('mouse' + value, event);
			}, this);
		}, this);
		
		return this;
	},

	detach: function(elements){
		$$(elements).each(function(element){
			['enter', 'leave', 'move'].each(function(value){
				element.removeEvent('mouse' + value, element.retrieve('tip:' + value)).eliminate('tip:' + value);
			});
			
			this.fireEvent('detach', [element]);
			
			if (this.options.title == 'title'){ // This is necessary to check if we can revert the title
				var original = element.retrieve('tip:native');
				if (original) element.set('title', original);
			}
		}, this);
		
		return this;
	},

	elementEnter: function(event, element){
		this.container.empty();
		
		['title', 'text'].each(function(value){
			var content = element.retrieve('tip:' + value);
			if (content) this.fill(new Element('div', {'class': 'tip-' + value}).inject(this.container), content);
		}, this);
		
		$clear(this.timer);
		this.timer = (function(){
			this.show(this, element);
			this.position((this.options.fixed) ? {page: element.getPosition()} : event);
		}).delay(this.options.showDelay, this);
	},

	elementLeave: function(event, element){
		$clear(this.timer);
		this.timer = this.hide.delay(this.options.hideDelay, this, element);
		this.fireForParent(event, element);
	},

	fireForParent: function(event, element){
		element = element.getParent();
		if (!element || element == document.body) return;
		if (element.retrieve('tip:enter')) element.fireEvent('mouseenter', event);
		else this.fireForParent(event, element);
	},

	elementMove: function(event, element){
		this.position(event);
	},

	position: function(event){
		if (!this.tip) document.id(this);

		var size = window.getSize(), scroll = window.getScroll(),
			tip = {x: this.tip.offsetWidth, y: this.tip.offsetHeight},
			props = {x: 'left', y: 'top'},
			obj = {};
		
		for (var z in props){
			obj[props[z]] = event.page[z] + this.options.offset[z];
			if ((obj[props[z]] + tip[z] - scroll[z]) > size[z] - this.options.windowPadding[z]) obj[props[z]] = event.page[z] - this.options.offset[z] - tip[z];
		}
		
		this.tip.setStyles(obj);
	},

	fill: function(element, contents){
		if(typeof contents == 'string') element.set('html', contents);
		else element.adopt(contents);
	},

	show: function(element){
		if (!this.tip) document.id(this);
		this.fireEvent('show', [this.tip, element]);
	},

	hide: function(element){
		if (!this.tip) document.id(this);
		this.fireEvent('hide', [this.tip, element]);
	}

});

})();

/*
---

script: Spinner.js

description: Adds a semi-transparent overlay over a dom element with a spinnin ajax icon.

license: MIT-style license

authors:
- Aaron Newton

requires:
- core:1.2.4/Fx.Tween
- /Class.refactor
- /Mask

provides: [Spinner]

...
*/

var Spinner = new Class({

	Extends: Mask,

	options: {
		/*message: false,*/
		'class':'spinner',
		containerPosition: {},
		content: {
			'class':'spinner-content'
		},
		messageContainer: {
			'class':'spinner-msg'
		},
		img: {
			'class':'spinner-img'
		},
		fxOptions: {
			link: 'chain'
		}
	},

	initialize: function(){
		this.parent.apply(this, arguments);
		this.target.store('spinner', this);

		//add this to events for when noFx is true; parent methods handle hide/show
		var deactivate = function(){ this.active = false; }.bind(this);
		this.addEvents({
			hide: deactivate,
			show: deactivate
		});
	},

	render: function(){
		this.parent();
		this.element.set('id', this.options.id || 'spinner-'+$time());
		this.content = document.id(this.options.content) || new Element('div', this.options.content);
		this.content.inject(this.element);
		if (this.options.message) {
			this.msg = document.id(this.options.message) || new Element('p', this.options.messageContainer).appendText(this.options.message);
			this.msg.inject(this.content);
		}
		if (this.options.img) {
			this.img = document.id(this.options.img) || new Element('div', this.options.img);
			this.img.inject(this.content);
		}
		this.element.set('tween', this.options.fxOptions);
	},

	show: function(noFx){
		if (this.active) return this.chain(this.show.bind(this));
		if (!this.hidden) {
			this.callChain.delay(20, this);
			return this;
		}
		this.active = true;
		return this.parent(noFx);
	},

	showMask: function(noFx){
		var pos = function(){
			this.content.position($merge({
				relativeTo: this.element
			}, this.options.containerPosition));
		}.bind(this);
		if (noFx) {
			this.parent();
			pos();
		} else {
			this.element.setStyles({
				display: 'block',
				opacity: 0
			}).tween('opacity', this.options.style.opacity || 0.9);
			pos();
			this.hidden = false;
			this.fireEvent('show');
			this.callChain();
		}
	},

	hide: function(noFx){
		if (this.active) return this.chain(this.hide.bind(this));
		if (this.hidden) {
			this.callChain.delay(20, this);
			return this;
		}
		this.active = true;
		return this.parent(noFx);
	},

	hideMask: function(noFx){
		if (noFx) return this.parent();
		this.element.tween('opacity', 0).get('tween').chain(function(){
			this.element.setStyle('display', 'none');
			this.hidden = true;
			this.fireEvent('hide');
			this.callChain();
		}.bind(this));
	},

	destroy: function(){
		this.content.destroy();
		this.parent();
		this.target.eliminate('spinner');
	}

});

Spinner.implement(new Chain);

if (window.Request) {
	Request = Class.refactor(Request, {
		
		options: {
			useSpinner: false,
			spinnerOptions: {},
			spinnerTarget: false
		},
		
		initialize: function(options){
			this._send = this.send;
			this.send = function(options){
				if (this.spinner) this.spinner.chain(this._send.bind(this, options)).show();
				else this._send(options);
				return this;
			};
			this.previous(options);
			var update = document.id(this.options.spinnerTarget) || document.id(this.options.update);
			if (this.options.useSpinner && update) {
				this.spinner = update.get('spinner', this.options.spinnerOptions);
				['onComplete', 'onException', 'onCancel'].each(function(event){
					this.addEvent(event, this.spinner.hide.bind(this.spinner));
				}, this);
			}
		},
		
		getSpinner: function(){
			return this.spinner;
		}
		
	});
}

Element.Properties.spinner = {

	set: function(options){
		var spinner = this.retrieve('spinner');
		return this.eliminate('spinner').store('spinner:options', options);
	},

	get: function(options){
		if (options || !this.retrieve('spinner')){
			if (this.retrieve('spinner')) this.retrieve('spinner').destroy();
			if (options || !this.retrieve('spinner:options')) this.set('spinner', options);
			new Spinner(this, this.retrieve('spinner:options'));
		}
		return this.retrieve('spinner');
	}

};

Element.implement({

	spin: function(options){
		this.get('spinner', options).show();
		return this;
	},

	unspin: function(){
		var opt = Array.link(arguments, {options: Object.type, callback: Function.type});
		this.get('spinner', opt.options).hide(opt.callback);
		return this;
	}

});

/*
---

script: Date.English.US.js

description: Date messages for US English.

license: MIT-style license

authors:
- Aaron Newton

requires:
- /Lang
- /Date

provides: [Date.English.US]

...
*/

MooTools.lang.set('en-US', 'Date', {

	months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	//culture's date order: MM/DD/YYYY
	dateOrder: ['month', 'date', 'year'],
	shortDate: '%m/%d/%Y',
	shortTime: '%I:%M%p',
	AM: 'AM',
	PM: 'PM',

	/* Date.Extras */
	ordinal: function(dayOfMonth){
		//1st, 2nd, 3rd, etc.
		return (dayOfMonth > 3 && dayOfMonth < 21) ? 'th' : ['th', 'st', 'nd', 'rd', 'th'][Math.min(dayOfMonth % 10, 4)];
	},

	lessThanMinuteAgo: 'less than a minute ago',
	minuteAgo: 'about a minute ago',
	minutesAgo: '{delta} minutes ago',
	hourAgo: 'about an hour ago',
	hoursAgo: 'about {delta} hours ago',
	dayAgo: '1 day ago',
	daysAgo: '{delta} days ago',
	weekAgo: '1 week ago',
	weeksAgo: '{delta} weeks ago',
	monthAgo: '1 month ago',
	monthsAgo: '{delta} months ago',
	yearAgo: '1 year ago',
	yearsAgo: '{delta} years ago',
	lessThanMinuteUntil: 'less than a minute from now',
	minuteUntil: 'about a minute from now',
	minutesUntil: '{delta} minutes from now',
	hourUntil: 'about an hour from now',
	hoursUntil: 'about {delta} hours from now',
	dayUntil: '1 day from now',
	daysUntil: '{delta} days from now',
	weekUntil: '1 week from now',
	weeksUntil: '{delta} weeks from now',
	monthUntil: '1 month from now',
	monthsUntil: '{delta} months from now',
	yearUntil: '1 year from now',
	yearsUntil: '{delta} years from now'

});


/*
---

script: Form.Validator.English.js

description: Form Validator messages for English.

license: MIT-style license

authors:
- Aaron Newton

requires:
- /Lang
- /Form.Validator

provides: [Form.Validator.English]

...
*/

MooTools.lang.set('en-US', 'Form.Validator', {

	required:'This field is required.',
	minLength:'Please enter at least {minLength} characters (you entered {length} characters).',
	maxLength:'Please enter no more than {maxLength} characters (you entered {length} characters).',
	integer:'Please enter an integer in this field. Numbers with decimals (e.g. 1.25) are not permitted.',
	numeric:'Please enter only numeric values in this field (i.e. "1" or "1.1" or "-1" or "-1.1").',
	digits:'Please use numbers and punctuation only in this field (for example, a phone number with dashes or dots is permitted).',
	alpha:'Please use letters only (a-z) with in this field. No spaces or other characters are allowed.',
	alphanum:'Please use only letters (a-z) or numbers (0-9) only in this field. No spaces or other characters are allowed.',
	dateSuchAs:'Please enter a valid date such as {date}',
	dateInFormatMDY:'Please enter a valid date such as MM/DD/YYYY (i.e. "12/31/1999")',
	email:'Please enter a valid email address. For example "fred@domain.com".',
	url:'Please enter a valid URL such as http://www.google.com.',
	currencyDollar:'Please enter a valid $ amount. For example $100.00 .',
	oneRequired:'Please enter something for at least one of these inputs.',
	errorPrefix: 'Error: ',
	warningPrefix: 'Warning: ',

	//Form.Validator.Extras

	noSpace: 'There can be no spaces in this input.',
	reqChkByNode: 'No items are selected.',
	requiredChk: 'This field is required.',
	reqChkByName: 'Please select a {label}.',
	match: 'This field needs to match the {matchName} field',
	startDate: 'the start date',
	endDate: 'the end date',
	currendDate: 'the current date',
	afterDate: 'The date should be the same or after {label}.',
	beforeDate: 'The date should be the same or before {label}.',
	startMonth: 'Please select a start month',
	sameMonth: 'These two dates must be in the same month - you must change one or the other.',
	creditcard: 'The credit card number entered is invalid. Please check the number and try again. {length} digits entered.'

});

var unitTypeCache = {"XEN_ZEK":{"name":"Zek","slot":{"type":"SPECIAL","name":"Civilian ship"}},"TERRAN_PULSAR":{"name":"Pulsar","slot":{"type":"SPECIAL","name":"Civilian ship"}},"ALIEN_SEPIOTEUTHIS":{"name":"Sepioteuthis","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Espionage"}}},"TERRAN_RECYCLER":{"name":"Recycler","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Can harvest"}}},"TITAN_RECYCLER":{"name":"Recycler","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Can harvest"}}},"TERRAN_FRIGATE":{"name":"Frigate","slot":{"type":"RECON","name":"Recon ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"ALIEN_PHOLIDOTEUTHIS":{"name":"Pholidoteuthis","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TITAN_FREIGHTER":{"name":"Freighter","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Transport"}}},"TITAN_COLONY_SHIP":{"name":"Colony Ship","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Colonize"}}},"TITAN_OBSERVER":{"name":"Observer","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Espionage"}}},"TITAN_PROTECTOR":{"name":"Protector","slot":{"type":"SPECIAL","name":"Civilian ship"}},"TERRAN_FREIGHTER":{"name":"Freighter","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Transport"}}},"TERRAN_LARGE_RECYCLER":{"name":"Large Recycler","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Can harvest"}}},"XEN_SUIKON":{"name":"Suikon","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_MOTHERSHIP":{"name":"Mothership","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"XEN_COLONY_SHIP":{"name":"Colony Ship","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Colonize"}}},"TITAN_CORSAIR":{"name":"Corsair","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_XNAIR":{"name":"Xnair","slot":{"type":"RECON","name":"Recon ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"TERRAN_BATTLESHIP":{"name":"Battleship","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"XEN_BOMBER":{"name":"Bomber","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}},"special_ability":{"name":"Abilities","value":"Bombardement"}}},"XEN_OCTOPON":{"name":"Octopon","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Can harvest"}}},"TERRAN_FIGHTER":{"name":"Fighter","slot":{"type":"RECON","name":"Recon ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"XEN_MYLON":{"name":"Mylon","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TITAN_DELPHI":{"name":"Delphi","slot":{"type":"DEFENCE","name":"Defense ship"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TITAN_SCOUT":{"name":"Scout","slot":{"type":"RECON","name":"Recon ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"TITAN_CARRIER":{"name":"Carrier","slot":{"type":"DEFENCE","name":"Defense ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_ZEKKON":{"name":"Zekkon","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Espionage"}}},"TERRAN_CRUISER":{"name":"Cruiser","slot":{"type":"DEFENCE","name":"Defense ship"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_MACID":{"name":"Macid","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"TERRAN_BOMBER":{"name":"Bomber","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}},"special_ability":{"name":"Abilities","value":"Bombardement"}}},"ALIEN_CHIROTEUTHIS":{"name":"Chiroteuthis","slot":{"type":"DEFENCE","name":"Defense ship"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_MAXTRON":{"name":"Maxtron","slot":{"type":"DEFENCE","name":"Defense ship"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TITAN_TERMINATOR":{"name":"Terminator","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TITAN_PHOENIX":{"name":"Phoenix","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}},"special_ability":{"name":"Abilities","value":"Bombardement"}}},"TERRAN_DESTROYER":{"name":"Destroyer","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TERRAN_PROBE":{"name":"Probe","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Espionage"}}},"XEN_PSIKON":{"name":"Psikon","slot":{"type":"ATTACK","name":"Attack ship"},"additional":{"strong_against":{"name":"Strong against","value":{"SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","HEAVY":"Defense ship","GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TITAN_LARGE_FREIGHTER":{"name":"Large Freighter","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Transport"}}},"TERRAN_COLONY_SHIP":{"name":"Colony Ship","slot":{"type":"SPECIAL","name":"Civilian ship"},"additional":{"special_ability":{"name":"Abilities","value":"Colonize"}}},"ALIEN_ARCHITEUTHIS":{"name":"Architeuthis","slot":{"type":"ARTILLERY","name":"Artillery ship"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TERRAN_GAUSS_CANNON":{"name":"Neutron Cannon","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TITAN_DISRUPTOR":{"name":"Disruptor","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TERRAN_PULSE_LASER":{"name":"Missile Battery","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TERRAN_TACHYON_RAY":{"name":"Missile Silo","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TITAN_BOSON_ACCELERATOR":{"name":"Boson Accelerator","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_PARATEC":{"name":"Paratec","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"XEN_KALMANAR":{"name":"Kalmanar","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"MEDIUM":"Attack ship"}},"weak_against":{"name":"Weak against","value":{"GIANT":"Artillery ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"TERRAN_INTERVAL_CANNON":{"name":"Interval Cannon","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_ACIDOR":{"name":"Acidor","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TITAN_MASTERBLASTER":{"name":"Antimatter Ray","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"XEN_SPOROK":{"name":"Sporok","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"XEN_ZUIKON":{"name":"Zuikon","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"SMALL":"Recon ship","GIANT":"Artillery ship"}},"weak_against":{"name":"Weak against","value":{"MEDIUM":"Attack ship","HEAVY":"Defense ship","PLANETARY":"Planetary defense","SUPPORT":"Civilian ship"}}}},"ALIEN_TURRET":{"name":"alien_turret","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"TITAN_INJECTOR":{"name":"Injector","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}},"TITAN_NANOBLADE":{"name":"Nanoblade","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","SUPPORT":"Civilian ship"}}}},"TERRAN_FLAK_BATTERY":{"name":"Flak Battery","slot":{"type":"PLANETARY","name":"Planetary defense"},"additional":{"strong_against":{"name":"Strong against","value":{"HEAVY":"Defense ship","PLANETARY":"Planetary defense","SHIELD":"Shield"}},"weak_against":{"name":"Weak against","value":{"SMALL":"Recon ship","MEDIUM":"Attack ship","GIANT":"Artillery ship","SUPPORT":"Civilian ship"}}}}};
/**
 * tabs
 */
var SIDEBAR_TAB_TOP_BUIDLINGS	= 'buildings';
var SIDEBAR_TAB_TOP_SHIPS		= 'ships';
var SIDEBAR_TAB_TOP_TURRETS		= 'turrets';

var SIDEBAR_TAB_BOT_CIVIL		= 'CIVIL';
var SIDEBAR_TAB_BOT_MILITARY	= 'MILITARY';

/**
 * mission
 */
var MISSION_UNDEFINED				= 'UNDEFINED';
var MISSION_ASSAULT					= 'ASSAULT';
var MISSION_TRANSPORT				= 'TRANSPORT';
var MISSION_MINING					= 'MINING';
var MISSION_BOMBARDMENT				= 'BOMBARDMENT';
var MISSION_ANNEXION				= 'ANNEXION';
var MISSION_INVASION				= 'INVASION';
var MISSION_COLONIZATION			= 'COLONIZATION';
var MISSION_DEPLOYMENT				= 'DEPLOYMENT';
var MISSION_ESPIONAGE				= 'ESPIONAGE';

/**
 * queues
 */
var QUEUE_UNDEFINED					= 'UNDEFINED';
var QUEUE_TURRET_REPAIR				= 'TURRET_REPAIR';

/**
 * recycle type
 */
var RECYCLE_TYPE_SHIP				= 'RECYCLE_SHIP';
var RECYCLE_TYPE_TURRET				= 'RECYCLE_TURRET';

/**
 * fleet list
 */
var FLEET_LIST_TYPE_INCOMING		= 'incoming';
var FLEET_LIST_TYPE_OUTGOING		= 'outgoing';
var FLEET_LIST_TYPE_ORBITAL			= 'stationed';
var FLEET_LIST_TYPE_WORKING			= 'working';

var FLEET_LIST_STATE_DISABLED		= 'disabled';
var FLEET_LIST_STATE_ENABLED		= 'enabled';
var FLEET_LIST_STATE_ACTIVE			= 'active';
var FLEET_LIST_STATE_BAD			= 'bad';

/**
 * turret state
 */
var TURRET_STATE_ORBITAL			= 'ON';
var TURRET_STATE_HIDDEN				= 'OFF';

/**
 * hide civil
 */
var HANGAR_AUTO_HIDE_ON				= 'ON';
var HANGAR_AUTO_HIDE_OFF			= 'OFF';

/**
 * Resources
 */
var RESOURCE_TYPE_METAL				= 'metal';
var RESOURCE_TYPE_CRYSTAL			= 'crystal';
var RESOURCE_TYPE_TRITIUM			= 'tritium';
var RESOURCE_TYPE_ANNEXION			= 'annexion';
var RESOURCE_TYPE_RESEARCH			= 'research';
var RESOURCE_TYPE_POPULATION		= 'population';
var RESOURCE_TYPE_ENERGY			= 'energy';
var RESOURCE_TYPE_SHIELD			= 'shield';


var RESOURCE_DIRECTION_NO			= 0;
var RESOURCE_DIRECTION_UP			= 1;
var RESOURCE_DIRECTION_DOWN			= -1;

/**
 * Surface slot type
 */
var SURFACE_SLOT_TYPE_UNDEFINED 	= 'undefined';
var SURFACE_SLOT_TYPE_EMPTY 		= 'empty';
var SURFACE_SLOT_TYPE_TRASH 		= 'trash';
var SURFACE_SLOT_TYPE_TAKEN 		= 'taken';
var SURFACE_SLOT_TYPE_BUILD 		= 'build';

/**
 * Tools ScrollBar
 */
var SCROLLBAR_DIRECTION_VERTICAL	= 'vertical';
var SCROLLBAR_DIRECTION_HORIZONTAL	= 'horizontal';

/**
 * Unit type constants
 */
var UNIT_TYPE_UNDEFINED				= 'undefined';
var UNIT_TYPE_SHIP					= 'ship';
var UNIT_TYPE_TURRET				= 'turret';

/**
 * galaxy konstanten
 */
var GALAXY_TYPE_MIDGAME				= 1;
var GALAXY_TYPE_ENDGAME				= 2;
var GALAXY_TYPE_TUTORIAL			= 3;

/**
 * planet types
 */
var PLANET_TYPE_UNDEFINED			= 'UNDEFINED';
var PLANET_TYPE_TERRAN				= 'TERRESTRIAL';
var PLANET_TYPE_DESERT				= 'DESERT';
var PLANET_TYPE_ICE					= 'ICE';
var PLANET_TYPE_VOLCANO				= 'VOLCANO';
var PLANET_TYPE_WATER				= 'WATER';
var PLANET_TYPE_GAS					= 'GAS';
var PLANET_TYPE_ALIEN01				= 'ALIEN01';
var PLANET_TYPE_ALIEN02				= 'ALIEN02';

/**
 * location types
 */
var LOCATION_TYPE_UNDEFINED 		= 'undefined';
var LOCATION_TYPE_SYSTEM	 		= 'SYSTEM';
var LOCATION_TYPE_PLANET 			= 'PLANET';
var LOCATION_TYPE_DEBRIS 			= 'DEBRIS';
var LOCATION_TYPE_COMET 			= 'COMET';

/**
 * map stages
 */
var MAP_STAGE_UNDEFINED				= 'UNDEFINED';
var MAP_STAGE_MINIMAP				= 'MINIMAP';
var MAP_STAGE_GALAXY				= 'GALAXY';
var MAP_STAGE_SYSTEM				= 'SYSTEM';
var MAP_STAGE_ORB					= 'ORB';

/**
 * quest box type
 */
var QUEST_BOX_TYPE_INFO				= 'INFO';
var QUEST_BOX_TYPE_NEXT				= 'NEXT';
var QUEST_BOX_TYPE_FORM				= 'FORM';

/**
 * alliance
 */
var ALLIANCE_FORUM_MIN_SUBJECT_LENGTH	= 3;

var ALIEN_ACOOUNT_ID = 999;

// zeit der ship und turret queue
var MAX_QUEUE_DURATION = 356400;
/**
 * Imperion Core Library
 */

// for old browsers
window.undefined = window.undefined;

//check if console is defined
if (typeof console === 'undefined') {
    var consoleObject = new Class({
        log: function(param){
    		//alert(param);
        }
    });
	var console = new consoleObject();
}

/**
 * Mootools singleton extension
 */

Class.Singleton = new Class({
	initialize: function(classDefinition, options){
		var singletonClass = new Class(classDefinition);
		return new singletonClass(options);
	}
});

Class.Mutators.toString = Class.Mutators.valueOf = $arguments(0);

/**
 * Create Imperion Object
 */
Imperion = {
	/**
	 * @var String
	 */
	version : '1.0'
};

/**
 * override default apply method
 */
Imperion.apply = function(o, c, defaults){
    // no "this" reference for friendly out of scope calls
    if(defaults) {
    	Imperion.apply(o, defaults);
    }
    if(o && c && typeof c == 'object') {
        for(var p in c){
            o[p] = c[p];
        }
    }
    return o;
};

/**
 * create core library functions
 */
Imperion.apply(Imperion, {
	/**
	 * create namespace (register objects to window object)
	 */
	Namespace : function(){
		var o, d, a;
		for(var i = 0 ; i < arguments.length ; i++) {
			d = arguments[i].split(".");
			o = window[d[0]] = window[d[0]] || {};
			a = d.slice(1);
			for(var j = 0 ; j < a.length ; j++) {
				o = o[a[j]] = o[a[j]] || {};
			}
		}
		return o;
	},
	/**
	 * Imperion cache
	 *
	 * @type	Object
	 */
	Cache : {
		Template	: {}
	},
	Templates : {},
	/**
	 * translation funcionality
	 *
	 *
	 */
	Translate : {
		/**
		 * translation
		 *
		 * @type	Object
		 */
		translation : null,

		/**
		 * translate key
		 *
		 * @param	{String}	key
		 *
		 * @returns	{String}
		 */
		translate : function(key) {
			if(this.translation === null) {
				this.translation = Imperion.Factory.registry().get('translation');
			}
			if(this.translation && this.translation[key]) {
				return this.translation[key];
			}
			return '!!'+key+'!!';
		}


		// translate : function(code, arguments) {
		// 	return MooTools.lang.get('frontend', code, arguments)?MooTools.lang.get('frontend',code, arguments):'!!!' + code + '!!!';
		// }
	},
	/**
	 * Imperion module functionality
	 *
	 *
	 */
	Module : {
		/**
		 * bootstrap instance
		 *
		 * @type Imperion.Bootstrap
		 */
		bootstrap : null,

		/**
		 * set the bootstrap instance
		 *
		 * @param Imperion.Bootstrap bootstrap
		 *
		 * @type void
		 */
		setBootstrap : function(bootstrap) {
			this.bootstrap = bootstrap;
		},

		/**
		 * get bootstrap instance
		 *
		 * @type Imperion.Bootstrap
		 */
		getBootstrap : function() {
			if(this.bootstrap !== null) {
				return this.bootstrap;
			}
			return null;
		}
	},

	/**
	 * Core Part - Events
	 */
	Event : {
		/**
		 * add key event
		 *
		 * @param String keyType
		 * @param Hash params event parameter
		 */
		addKeyEvent : function(keyType, params) {
			document.addEvent(keyType, this.eventHandler.bindWithEvent(this, params));
		},
		/**
		 * add normal event
		 *
		 * @param String eventType type of event (click, mouseover...)
		 * @param String / DOM-Element elementName element for the event
		 * @param Hash params parameter for event execution
		 *
		 * @return function
		 */
		addEvent : function(eventType, elementName, params) {
			var eventElement = $(elementName);
			var functionPointer = null;
			if (eventElement) {
				functionPointer = this.eventHandler.bindWithEvent(this, params);
				eventElement.addEvent(eventType, functionPointer);
			}
			return functionPointer;
		},
		/**
		 * remove event from element
		 *
		 * @param String eventType
		 * @param String / DOM-Element elementName
		 * @param function functionPointer
		 *
		 * @return void
		 */
		removeEvent : function(eventType, elementName, functionPointer) {
			var eventElement = $(elementName);
			if (eventElement) {
				eventElement.removeEvent(eventType, functionPointer);
			}
		}
	},
	/**
	 * Core Part - Observer Pattern
	 */
	Observable : {
		/**
		 * set the class attribute new every time it is not set
		 */
		_setStorage : function() {
			if(!this.observers) {
				this.observers = new Hash();
			}
		},
		/**
		 * check if observer already exist
		 *
		 * @param String|Integer identifier
		 *
		 * @returns	{Boolean}
		 */
		observerExist : function(identifier) {
			this._setStorage();
			return this.observers.has(identifier);
		},
		/**
		 * add an observer
		 *
		 * @param String|Integer identifier
		 * @param Class observer
		 */
		attach : function(ident, observer) {
			this._setStorage();
			if(!ident && !observer) {
				// ERROR HANDLING
			}
			this.observers.set(ident, observer);
		},
		/**
		 * add more then 1 observers
		 *
		 * @param Object observers
		 */
		attachMultiple : function(observers) {
			$H(observers).each(function(observer, ident) {
				this.attach(ident, observer);
			}, this);
		},
		/**
		 * remove an observer
		 *
		 * @param String|Integer identifier
		 */
		detach : function(ident) {
			this._setStorage();
			if(!ident) {
				// ERROR HANDLING
			}
			this.observers.erase(ident);
		},

		/**
		 * detach all listener
		 *
		 * @return void
		 */
		detachAll : function() {
			this.observers.empty();
		},

		/**
		 * notify all observers
		 *
		 * @param Object params
		 * @param String notification
		 */
		notify : function(params, notification) {
			//console.log(notification);
			this._setStorage();
			this.observers.each(function(observer, key) {
				if(observer[notification]) {
					observer[notification](params, key);
				}
				/*
				 * else if(observer.update) { observer.update(params); }
				 */
			}, this);
		}
	},
	/**
	 * Core Parts - handle templates from layout
	 *
	 * get dom element by id matching following namespace criteria
	 *
	 * Imperion.Template.[id] (without brackets)
	 *
	 * @param String templateName name of the template (represents the last part of the element id)
	 *
	 * @return DOM-Element
	 */
	Template : {
		/**
		 * get clone of DOM Element from Layout
		 *
		 * @param	{String}	templateName
		 *
		 * @returns	{Element}
		 */
		getClonedTemplate : function(templateName) {
			if(!templateName) {
				// ERROR HANDLING
			}
			//check if already in cache
			if(Imperion.Cache.Template[templateName]) {
				var temp = Imperion.Cache.Template[templateName].clone();
				return temp;
			}
			else {
				//create hole id string
				var elementId = 'Imperion-Template-' + templateName;
				//get DOM-Element by id
				var templateElement = $(elementId);
				//check if element was found
				if(!templateElement) {
					// ERROR HANDLING
					throw '// ERROR HANDLING ' + elementId;
				}
				//save at cache
				Imperion.Cache.Template[templateName] = templateElement.clone();
				//return clone of template element
				return Imperion.Cache.Template[templateName].clone();
			}
		},
		/**
		 * get origin of DOM Element from Layout
		 *
		 * @param	{String}	templateName
		 *
		 * @returns	{Element}
		 */
		getTemplate : function(templateName) {
			if(!templateName) {
				// ERROR HANDLING
			}
			//create whole id string
			var elementId = 'Imperion-Template-' + templateName;
			//get DOM-Element by id
			var templateElement = $(elementId);
			//check if element was found
			if(!templateElement) {
				// ERROR HANDLING
			}
			return templateElement;
		},

		/**
		 * returns a static template
		 *
		 * @param	{String}	templateName
		 *
		 * @returns	{Element}
		 */
		getStaticTemplate : function(templateName) {
			//check if already in cache
			if(Imperion.Cache.Template[templateName]) {
				return Imperion.Cache.Template[templateName].clone();
			}
			//save at cache
			Imperion.Cache.Template[templateName] = $(new Element('DIV').set('html', Imperion.Templates[templateName]).firstChild);
			//return clone of template element
			return Imperion.Cache.Template[templateName].clone();
		}
	},
	Templates : {},
	History : new Class({
		/**
		 * set new hash to url
		 *
		 * @param String newHash
		 */
		setHash : function(newHash) {
			top.location.hash = newHash;
		},
		/**
		 * return the hash from the current url at browser adress bar
		 *
		 * @return String
		 */
		getHash : function () {
			var locationUrl = top.location.href;
			var hashPosition = locationUrl.indexOf("#");
			//check if hash is set
			if(i >= 0) {
				return locationUrl.substr(hashPosition + 1);
			}
			return null;
	    }
	}),
	HistoryState : new Class.Singleton({

	})
});


/**
 * create namespaces
 */
Imperion.Namespace(
	'Imperion.Interface',
	'Imperion.Interface.Debug',
	'Imperion.Interface.Tools',
	'Imperion.Map',
	'Imperion.Map.Composite',
	'Imperion.Map.Config',
	'Imperion.Map.Generator',
	'Imperion.Map.Handle',
	'Imperion.Map.Modules',
	'Imperion.Util',
	'Imperion.Util.Log',
	'Imperion.Log',
	'Imperion.Data',
	'Imperion.Debug',
	'Imperion.Interface.FleetTransport',
	'Imperion.Interface.FleetSummary',
	'Imperion.Interface.Function',
	'Imperion.Interface.Gui',
	'Imperion.Interface.Menu',
	'Imperion.Interface.Infobox',
	'Imperion.Interface.Dialog',
	'Imperion.Interface.Dialog.Context',
	'Imperion.Interface.Dialog.Context.Debug',
	'Imperion.Interface.Dialog.Context.Igm',
	'Imperion.Interface.Dialog.Context.Forum',
	'Imperion.Interface.Dialog.Context.Payment',
	'Imperion.Interface.Dialog.Context.Overview',
	'Imperion.Interface.Dialog.Context.Alliance',
	'Imperion.Interface.Dialog.Context.Endgame',
	'Imperion.Interface.Dialog.Context.Admiral',
	'Imperion.Interface.Dialog.Context.Stream',
	'Imperion.Interface.Dialog.Context.Report',
	'Imperion.Interface.Map',
	'Imperion.Interface.Igm',
	'Imperion.Interface.Igm.Form',
	'Imperion.Interface.Module',
	'Imperion.Interface.Module.Alliance',
	'Imperion.Interface.Module.Admiral',
	'Imperion.Interface.Module.Endgame',
	'Imperion.Interface.Module.Forum',
	'Imperion.Interface.Module.Overview',
	'Imperion.Interface.Module.Stream',
	'Imperion.Interface.Module.Report',
	'Imperion.Interface.Resource',
	'Imperion.Interface.Sidebar',
	'Imperion.Interface.Sidebar.Create',
	'Imperion.Interface.Sidebar.Queue',
	'Imperion.Interface.Sidebar.Data',
	'Imperion.Interface.Sidebar.Map',
	'Imperion.Interface.Sidebar.Buildings',
	'Imperion.Interface.Surface'
);


Imperion.Templates['SelectPlanetList']			= '<div class="Imperion-Layout-PlanetDropdownList hideContainer"><div class="content"></div><div class="col hideContainer"></div></div>';
Imperion.Templates['SelectPlanetListHeadline']	= '<h1 class="galaxy"></h1>';
Imperion.Templates['SelectPlanetListPlanet']	= '<a href="#" class="planetstatus"><span class="galaxy"><span class="planet">&nbsp;</span></span><span class="tray"><span class="identifier"></span><span class="icon buildings">&nbsp;</span><span class="icon ships">&nbsp;</span><span class="icon turrets">&nbsp;</span><span class="icon invasion">&nbsp;</span><span class="icon annexation">&nbsp;</span></span><span class="indicator">&nbsp;</span></a>';

Imperion.Factory = new Class.Singleton({
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : {
		bootstrap	: null,
		layout		: null,
		registry	: null,
		quest		: null
	},
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			bootstrap	: null,
			layout		: null,
			registry	: null,
			quest		: null
		};
	},
	
	/**
	 * return the imperion bootstrap instance
	 * 
	 * @return Imperion.Bootstrap
	 */
	bootstrap : function() {
		if(!this.storage.boostrap) {
			this.storage.boostrap = new Imperion.Bootstrap(Imperion.Util.Factory.secondTimer());
		}
		return this.storage.boostrap;
	},
	
	/**
	 * return the imperion layout instance
	 * 
	 * @return Imperion.Layout
	 */
	layout : function() {
		if(!this.storage.layout) {
			this.storage.layout = new Imperion.Layout();
		}
		return this.storage.layout;
	},
	
	/**
	 * return the imperion registry
	 * 
	 * @type Imperion.Util.Registry
	 */
	registry : function() {
		if(!this.storage.registry) {
			this.storage.registry = Imperion.Util.Factory.registry();
		}
		return this.storage.registry;
	},
	
	/**
	 * return the imperion quest handler
	 * 
	 * @returns	{Imperion.Quest}
	 */
	quest : function() {
		if(!this.storage.quest) {
			this.storage.quest = new Imperion.Quest(Imperion.Util.Factory.globalEvents());
		}
		return this.storage.quest;
	},
	
	/**
	 * create a new queue object
	 * 
	 * @params	{String}	queueType
	 * @param	{Array}		queueData
	 * 
	 * @returns	{Imperion.Queue}
	 */
	queue : function(queueType, queueData) {
		return new Imperion.Queue(queueType, queueData, Imperion.Util.Factory.secondTimer());
	},
	
	/**
	 * create a new queue item object
	 * 
	 * @param	{Number}			running
	 * @param	{Object}			data
	 * @param	{Imperion.Queue}	parentQueue
	 * 
	 * @returns	{Imperion.Queue}
	 */
	queueItem : function(running, data, parentQueue) {
		return new Imperion.QueueItem(running, data, parentQueue);
	},
	
	/**
	 * create turret repair queue object
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns	{Imperion.Queue}
	 */
	turretRepairQueueByObject : function(params) {
		return this.queue(QUEUE_TURRET_REPAIR, params);
	}
});
/**
 * append additional functionality to default class
 */
Imperion.Util.Class = new Class({
	Implements : Options,
	
	/**
	 * current user
	 * 
	 * @type Imperion.Data.User
	 */
	user : null,
	
	/**
	 * current planet
	 * 
	 * @type Imperion.Data.Planet
	 */
	planet : null,
	
	elements : {},
	/**
	 * add load element callback on domready
	 */
	loadElementsOnDomready : function() {
		window.addEvent('domready', function() {
			this.loadElements();
		}.bindNew(this));
	},
	/**
	 * append html to an element and call after the domready event the callback function
	 */
	setElementHtmlWithDomReadyCallback : function(domElement, newHtml, callback) {
		switch($type(newHtml)) {
			case 'string':
				domElement.set('html', newHtml);
				break;
			case 'element':
				newHtml.inject(domElement);
				break;
		}
		domElement.addEvent('domready', callback);
	},
	
	/**
	 * clean up the instance
	 * 
	 * @return void
	 */
	cleanUp : function() {
		//remove elements
		this.cleanUpElements(this.elements);
	},
	
	/**
	 * clean up elements (recursive)
	 * 
	 * @param Object elements
	 */
	cleanUpElements : function(elements) {
		$H(elements).each(function(item) {
			switch($type(item)) {
				case 'element':
					item.destroy();
					 break;
				case 'array':
					this.cleanUpElements($splat(item));
					break;
				case 'object':
					this.cleanUpElements(item);
					break;
			}
		}, this);
		delete elements;
	},
	
	/**
	 * set current user
	 * 
	 * @param Imperion.Data.User user
	 * 
	 * @type void
	 */
	setUser : function(user) {
		this.user = user;
	},
	
	/**
	 * set current planet
	 * 
	 * @param Imperion.Data.Planet planet
	 * 
	 * @type void
	 */
	setPlanet : function(planet) {
		this.planet = planet;
	},
	
	/**
	 * get the user
	 * 
	 * @return Imperion.Data.User
	 */
	getUser : function() {
		if(this.user === null) {
			this.user = Imperion.Factory.registry().get('user');
		}
		return this.user;
	},
	
	/**
	 * show planet contextmenu
	 * 
	 * @param	{Event}		eventObject
	 * @param	{Number}	planetId
	 * 
	 * @returns	{Void}
	 */
	showPlanetContextMenu : function(eventObject, planetId) {
		var planetMenu = Imperion.Interface.Menu.Factory.planet();
		var playerMenu = Imperion.Interface.Menu.Factory.player();
		playerMenu.hideMenu();
		planetMenu.setPosition(eventObject.page.x, eventObject.page.y);
		planetMenu.showMenu(planetId, LOCATION_TYPE_PLANET);
	},
	
	/**
	 * show player contextmenu
	 * 
	 * @param	{Event}		eventObject
	 * @param	{Number}	playerId
	 * 
	 * @returns	{Void}
	 */
	showPlayerContextMenu : function(eventObject, playerId) {
		var playerMenu = Imperion.Interface.Menu.Factory.player();
		var planetMenu = Imperion.Interface.Menu.Factory.planet();
		planetMenu.hideMenu();
		playerMenu.setPosition(eventObject.page.x, eventObject.page.y);
		playerMenu.showMenu(playerId);
	},
	
	/**
	 * show the help dialog
	 * 
	 * @param	{String}	section		help section
	 * @param	{String}	id			context id
	 * @param	{String}	size		preset dialog size
	 * 
	 * @returns	{Void}
	 */
	showHelpDialog : function(section, id, size) {
		if(size === undefined) {
			size = 'SMALL';
		}
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('helpcenter' + '_' + section + '_' + id);
		var helpcenter = Imperion.Interface.Dialog.Context.Factory.helpCenter(dialog, size, {
			section	: section,
			type	: id
		});
		helpcenter.showContext();
	},
	
	/**
	 * show
	 * 
	 * @return void
	 */
	show : function() {
		if(this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
		}
	},
	
	/**
	 * hide
	 * 
	 * @return void
	 */
	hide : function() {
		if(!this.elements.container.hasClass('hideContainer')) {
			this.elements.container.addClass('hideContainer');
		}
	},
	
	/**
	 * toggle
	 * 
	 * @return void
	 */
	toggle : function() {
		if(this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
		}
		else {
			this.elements.container.addClass('hideContainer');
		}
	},
	
	/**
	 * reload
	 * 
	 * @returns	{Void}
	 */
	reloadPage : function() {
		window.location.href = '/';
	},
	
	/**
	 * add something to the log
	 * 
	 * @return void
	 */
	addLog : function(message, level) {
		Imperion.Util.Log.Factory.handle().addLog(message, level);
	},
	
	loadForms : function() {
		Imperion.Util.Form.load(this.elements.container, $H());
	},
	
	loadScrollbar : function(scrollArea, scrollBody, options) {
		return new Imperion.Interface.Tools.Scroller(scrollArea,scrollBody, options);
	}
});

Imperion.Util.Content = new Class({
	/**
	 * content handle
	 * 
	 * @var Mixed
	 */
	contentHandle : null,
	
	/**
	 * set the content handle
	 * 
	 * @param mixed handle
	 * 
	 * @return void
	 */
	setContentHandle : function(handle) {
		if(!handle) {
			throw '// ERROR HANDLING';
		}
		this.contentHandle = handle;
	},
	
	/**
	 * update the content via handle
	 * 
	 * @param
	 * 
	 * @return void
	 */
	updateContent : function() {
		this.destroy();
		this.setElementHtmlWithDomReadyCallback(this.elements.container, response.getResponseHtml(), response.evalResponseJs.bindNew(response));
		if(destroyCallback) {
			this.onDestroy = destroyCallback;
		}
	}
});
Imperion.Util.CountDownCounter = 0;

Imperion.Util.Countdown = new Class({
	Implements : [Imperion.Util.Class, Imperion.Observable],
	/**
	 * timerElement
	 * 
	 * @var Element
	 */
	timerElement : null,
	
	/**
	 * count down id
	 * 
	 * @var int
	 */
	countDownId : 0,
	
	/**
	 * start value
	 * 
	 * @var int
	 */
	startValue : 0,
	
	/**
	 * current value
	 */
	currentValue : 0,
	
	/**
	 * start time
	 * 
	 * @var timestamp
	 */
	startTime : 0,
	
	/**
	 * offset
	 */
	offset : 0,
	
	/**
	 * user instance
	 * 
	 * @var Imperion.Data.User
	 */
	user : null,
	
	/**
	 * prepare the object
	 */
	initialize : function(timerElement, startValue, offset) {
		if(!offset) {
			offset = 0;
		}
		this.elements.timer = timerElement;
		this.user = Imperion.Util.Registry.get('user');
		
		this.offset = offset;
		this.startValue = this.currentValue = startValue - offset;
		this.startTime = new Date().getTime(); 
		//increase global counter
		Imperion.Util.CountDownCounter++;
		this.countDownId = Imperion.Util.CountDownCounter;
		//register countdown at secondtimer
		Imperion.Util.SecondTimer.attach('CountDown'+this.countDownId, this);
		//set time
		this.setTime(this.startValue);
	},
	/**
	 * set new time
	 * 
	 * @param int newTimeValue
	 * 
	 * @return void
	 */
	setTime : function(newTimeValue) {
		this.elements.timer.set('text', this.user.formatDuration(newTimeValue));
	},
	
	/**
	 * clear all
	 * 
	 * @return void
	 */
	clean : function() {
		Imperion.Util.SecondTimer.detach('CountDown'+this.countDownId);
		this.cleanUp();
		delete this;
	},
	
	/**
	 * callback for second timer
	 * 
	 * @param Object timerData
	 * 
	 * @return void
	 */
	timerStep : function(timerData) {
		this.currentValue = this.startValue - Math.round((timerData.currentTime - this.startTime) / 1000);
		if(this.currentValue > 0) {
			this.notify(this, 'stepCountDown');
			this.setTime(this.currentValue);
		}
		else {
			this.notify(this, 'finishCountdown');
			Imperion.Util.SecondTimer.detach('CountDown'+this.countDownId);
		}
	}
});
Imperion.Util.Dialog = {

	getDialogLinks : function(dialogHandler, container) {
		var links = container.getElements('a');
		this.processDialogLinks(dialogHandler, links);
	},

	processDialogLinks: function(dialogHandler, links) {
		var pattern;

		pattern = /^([^::]*)::([^(]*)(\(([0-9]+)\))?/;

		links.each(function(link, index) {
			if (result = link.target.match(pattern)) {
				var	dialogId  = result[1],
					contextId = result[2],
					entityId  = result[4];

				dialogHandler.addEvent('click', link, $H({
					action    : 'show_dialog',
					dialogId  : dialogId,
					contextId : contextId,
					entityId  : entityId
				}));
				switch(contextId) {
					case 'playerprofile':
						dialogHandler.addEvent('contextmenu', link, $H({
							action	: 'player_context_menu',
							id 		: entityId
						}));
						break;
					case 'playerprofile1':

						break;
				}
			}
		}.bindNew(this));
	}
}

/**
 * 
 * Util.Exception
 * Exception Class and Subclasses
 *
 * $id$
 */


var IMPERION_UNKNOWN_EXCEPTION = 0;

Imperion.Util.Exception = new Class({
    Extends : Error,
    Implements : [Options],
    
    /**
     * options for the exception
     * 
     * @var Object
     */
    options : {},
	/**
	 * error message
	 * 
	 * @var String
	 */
	message : 'Unknown exception',
	
	/**
	 * error code
	 * 
	 * @var int
	 */
	code : IMPERION_UNKNOWN_EXCEPTION,

	/**
	 * create exception
	 * 
	 * @param String message
	 * @param Int	code
	 * 
	 * @return void
	 */
	initialize : function(message, code, options) {
    	this.setOptions(options);
		this.message = message;
		this.code = code;
	},
	
	/**
	 * returns the error message 
	 *
	 * @return string
	 **/
	toString : function() {
		return this.message;
	}
});

/**
 * Util.ExceptionCritical
 * A Critical Exception could jeopardize the integrity of the Game
 * so a restart is necessary
 *
 **/
Imperion.Util.ExceptionCritical = new Class({
    Extends: Imperion.Util.Exception
});

/**
 * Util.ExceptionError
 * A Error Exception means something went wrong but the Game itself
 * should still work
 *
 **/
Imperion.Util.ExceptionError = new Class({
    Extends: Imperion.Util.Exception
});

/**
 * Util.ExceptionWarning
 *
 **/
Imperion.Util.ExceptionWarning = new Class({
    Extends: Imperion.Util.Exception
});
Imperion.Util.Factory = new Class.Singleton({
	
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : {
		filter		: null,
		helper		: null,
		secondTimer : null,
		validator	: null
	},
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			filter		: null,
			helper		: null,
			secondTimer : null,
			validator	: null
		};
	},
	
	/**
	 * return the helper
	 * 
	 * @returns {Imperion.Util.Helper}
	 */
	helper : function() {
		//REFACTOR
		if(!this.storage.helper) {
			this.storage.helper = Imperion.Util.Helper;
		}
		return this.storage.helper;
	},
	
	/**
	 * returns a registry object
	 * 
	 * @type Imperion.Util.Registry
	 */
	registry : function() {
		return Imperion.Util.Registry;
	},
	
	/**
	 * create response object
	 * 
	 * @param {Object} responseData
	 * 
	 * @type {Imperion.Util.Reponse}
	 */
	response : function(responseData) {
		return new Imperion.Util.Response(responseData, Imperion.Factory.bootstrap());
	},
	
	/**
	 * response dummy object
	 * 
	 * @param	{Object}	data
	 * @param	{String}	html
	 * 
	 * @returns	{Imperion.Util.ResponseDummy}
	 */
	responseDummy : function(data, html) {
		return new Imperion.Util.ResponseDummy(data, html);
	},
	
	/**
	 * global events 
	 * 
	 * @return Imperion.Util.GlobalEvents
	 */
	globalEvents : function() {
		return Imperion.Util.GlobalEvents;
	},
	
	/**
	 * create a timer object
	 * 
	 * @param int intervall
	 * @param Object observers
	 * @param Object options
	 * 
	 * @return Imperion.Util.Timer
	 */
	timer : function(interval, observers, options) {
		return new Imperion.Util.Timer(interval, observers, options);
	},
	
	/**
	 * return an instance from second timer
	 * 
	 * @return Imperion.Util.SecondTimer
	 */
	secondTimer : function() {
		// REFACTOR
		if(!this.storage.secondTimer) {
			this.storage.secondTimer = new Imperion.Util.SecondTimer();
		}
		return this.storage.secondTimer;
	},
	
	/**
	 * retrieve an eta timer object
	 * 
	 * @param Object options
	 * 
	 * @return Imperion.Util.TimerEta
	 */
	timerEta : function(options) {
		return new Imperion.Util.TimerEta(options, this.secondTimer(), Imperion.Factory.registry().get('user'));
	},
	
	/**
	 * create validator
	 * 
	 * @returns	{Imperion.Util.Validator}
	 */
	validator : function() {
		if(!this.storage.validator) {
			this.storage.validator = new Imperion.Util.Validator();
		}
		return this.storage.validator;
	},
	
	/**
	 * create filter
	 * 
	 * @returns	{Imperion.Util.Filter}
	 */
	filter : function() {
		if(!this.storage.filter) {
			this.storage.filter = new Imperion.Util.Filter(this.validator());
		}
		return this.storage.filter;
	},

	/**
	 * Prepare unit type cache
	 *
	 * @param	{Object}	unitTypeCache
	 * @param	{Object}	userUnitTypeCache
	 *
	 * @returns	{Imperion.Util.UnitType}
	 */
	unitType : function(unitTypeCache, userUnitTypeCache) {
		if(!this.storage.unitType) {
			this.storage.unitType = new Imperion.Util.UnitType(unitTypeCache, userUnitTypeCache);
		}
		return this.storage.unitType;
	}
});
Imperion.Util.Filter = new Class(
	/** @lends Imperion.Util.Filter.prototype */
	{
		/**
		 * instance from validation
		 * 
		 * @type	Imperion.Util.Validator
		 */
		validator : null,
		
		/**
		 * setup the filter class
		 * 
		 * @class helper class for filtering serveral data types and convert then to the right type
		 * 
		 * @param	{Imperion.Util.Validator}	validator
		 * 
		 * @constructs
		 */
		initialize : function(validator) {
			this.validator = validator;
		},
		
		/**
		 * filter integer
		 * 
		 * @param	{Mixed}		testNumber			type to test
		 * @param	{Number}	[defaultValue=0]	value if number is not valid
		 * 
		 * @returns	{Boolean}	
		 */
		filterInteger : function(testNumber, defaultValue) {
			if(testNumber == '-') {
				return '-';
			}
			var filteredValue = testNumber.replace(/^[^-^+]?[^0-9]+$/g, '');
			if(filteredValue === '') {
				filteredValue = defaultValue !== undefined ? defaultValue : 0; 
			}
			else {
				if(filteredValue !== '-') {
					filteredValue = filteredValue.toInt();
				}
			}
			return filteredValue;
		}
	}
);
/**
 * Form helper
 *
 * various methods to work with forms
 *
 * @version $Id: form.js 6793 2011-05-18 11:52:08Z m.trenker $
 *
 */
Imperion.Util.Form = new Class.Singleton({
    Implements : [Imperion.Event, Options],
    
    /**
     * a collection of formelements to manipulate
     *
     * @var	array
     */
    formElements : null,
    
    /**
     * loads the elements and calls process
     *
     * @return void
     */
    load : function(container, options) {
    	this.formElements = container.getElements('input.Imperion-UI, select.Imperion-UI, textarea.Imperion-UI');
    	this.process();
	},
	
	/**
	 * iterates and replaces the form elements
	 *
	 * @return void
	 */
	process : function(){
		this.formElements.each(function(item, index, array) {
			item.addClass('hideForm');
			var replacement = this.replace(item);
			replacement.inject(item, 'before');
		}, this);
	},
	
	
	/**
	 * returns the matching Form Element for replacement
	 *
	 * @return	Object	Imperion.Util.FormItem
	 */
	replace : function(item){
		switch(item.get('tag')) {
			case 'input':
				switch(item.type) {
					case 'radio':
						item.addClass('UI-Radio');
						return new Imperion.Util.FormRadio(item);
						break;
					case 'checkbox':
						item.addClass('UI-Checkbox');
						return new Imperion.Util.FormCheckbox(item);
						break;
					case 'text':
					case 'password':
						item.addClass('UI-InputText');
						item.removeClass('hideForm');
						item.removeClass('Imperion-UI');
						return new Imperion.Util.FormInputText(item);
						break;
				}
				break;
			case 'select':
				item.addClass('UI-Select');
				return new Imperion.Util.FormSelect(item);
				break;
			case 'textarea':
				item.addClass('UI-TextArea');
				item.removeClass('hideForm');
				item.removeClass('Imperion-UI');
				return new Imperion.Util.FormTextarea(item);
				break;
			default:
				return;
		}
	}
});

/**
 * Baseclass for any custom Form Element
 *
 */
Imperion.Util.FormItem = new Class({
	Implements : [Imperion.Util.Class, Imperion.Event, Imperion.Template],
	
	/**
	 * the original form element
	 *
	 * @var	Object	HTMLElement
	 */
	item : null,
	
	/**
	 * the type of replacement
	 *
	 * @var	String	
	 */
	type : null,
	
	/**
	 * toggles a checkbox and the class for the replacement if successfull
	 *
	 * @return void
	 */
	toggleChecked : function(){
		this.item.checked = !this.item.checked;
		
		if (this.item.checked) {
			this.elements.container.addClass('checked');
		} else {
			this.elements.container.removeClass('checked');
		}
		this.item.fireEvent('click');
	},
	
	/**
	 * removes all checks from elements within the radio group and checks the 
	 * new item. no deselect needed since radios are one-way only
	 *
	 * @return void
	 */
	selectRadio : function() {
		// deselect all radios in the group
		$$('.' + this.item.name.replace('[', '').replace(']', '')).each(function(item, index) {
			item.removeClass('checked');
		});
		
		this.item.checked = true;
		
		if (this.item.checked) {
			this.elements.container.addClass('checked');
		}
		this.item.fireEvent('click');
	},
	
	/**
	 * changes the text of the select replacement on change
	 *
	 * @return void
	 */
	changeSelect : function() {
		this.elements.container.getElement('.text').set('text', this.item.getElement('option:selected').get('text'));
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return void
	 */	
	eventHandler : function(eventObject, params) {
		var item     = eventObject.target;
		var preValue = null;
		var action = eventObject.type;
		if (params && params.action) {
			action = params.get('action');
		};
		if (params && params.item) {
			item = params.get('item');
			if (params.preValue) {
				preValue = params.get('preValue');
			}
		}
		switch(action) {
			case 'focus':
				item.addClass('active');
				if (preValue && !item.value) {
					preValue.addClass('hideContainer');
					item.focus();
				}
				break;
			case 'blur':
				item.removeClass('active');
				if (preValue && !item.value) {
					preValue.removeClass('hideContainer');
				}
				break;
			case 'click':
				eventObject.stop();
				switch(this.type) {
					case 'checkbox':
						this.toggleChecked();
						break;
					case 'radio':
						this.selectRadio(); // radios dont toggle
						break;
					case 'select':
						break;
				}
				break;
			case 'keyup':
				this.changeSelect();
				break;
			case 'change':
				switch(this.type) {
					case 'checkbox':
						this.toggleChecked();
						break;
					case 'radio':
						this.selectRadio(); // radios dont toggle
						break;
					case 'select':
						this.changeSelect();
						break;
				}
				break;
		}
	},
	
	/**
	 * load HTML elements and bind events
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('Span').removeClass('hideContainer');
		this.addEvent('click', this.elements.container, $H({action : 'click'}));
	},
	
	/**
	 * specific preperation of the item and replacement 
	 * (custom events, classes, ...)
	 *
	 * @return void
	 */
	prepare : function(item){
		
		if ('label' === item.getParent().get('tag')) {
			var label = item.getParent();
			this.addEvent('click', label);
		}
		
		if ('select' === item.get('tag')) {
			this.addEvent('keyup', item, $H({action: 'keyup'}));
			this.addEvent('change', item, $H({action: 'change'}));
		}
		
		if (item.checked) {
			this.elements.container.addClass('checked');
		}
		
		this.elements.container.setStyles(item.getStyles('margin', 'left', 'top'));
		
		this.item = item;
	}
});

/**
 * Checkbox replacement 
 *
 * @return Object
 */
Imperion.Util.FormCheckbox = new Class({
	Extends: Imperion.Util.FormItem,
	
	type : 'checkbox',
	
	
	initialize : function(item) {

		this.loadElements();
		this.prepare(item);
		
		var checkbox = this.elements.container;
		checkbox.addClass('UI-Checkbox');
		checkbox.addClass(item.name.replace(/\[(.*)\]/,''));

		if(item.hasClass('disabled')) {
			checkbox.addClass('disabled');
		}
		
		this.elements.input = checkbox;

		this.addEvent('change', item, $H({action : 'change'}));
		
		return checkbox;
	}
});

/**
 * Text replacement 
 *
 * @return Object
 */
Imperion.Util.FormInputText = new Class({
	Extends: Imperion.Util.FormItem,
	
	type : 'text',
	
	initialize : function(item) {
		if (item.title) {
			var preValue = this.getClonedTemplate('Span');
			preValue.addClass('preValue')
		 	.set('text', item.title)
		 	.removeClass('hideContainer')
		 	.inject(item, 'after');
			if (item.value) {
				preValue.addClass('hideContainer');
			}

			if (item.hasClass('full')) {
				preValue.setStyles({
					paddingLeft : item.getStyle('margin-left').toInt() + item.getStyle('border-left').toInt() + item.getStyle('padding-left').toInt() + 'px',
					top         : '-' + (item.getStyle('height').toInt()+3) + 'px'
				});
			} else {
				preValue.setStyles({
					marginLeft : '-' + (item.getStyle('width').toInt()-10) + 'px',
					top         : 5 + 'px'
				});
			}
		}
		this.addEvent('focus', item, $H({
			action : 'focus',
			item     : item,
			preValue : preValue
		}));
		this.addEvent('click', preValue, $H({
			action : 'focus',
			item : item,
			preValue : preValue
		}));
		this.addEvent('blur', item, $H({
			action : 'blur',
			item : item,
			preValue : preValue
		}));	
		return item;
	}
});

/**
 * Textarea replacement 
 *
 * @return Object
 */
Imperion.Util.FormTextarea = new Class({
	Extends: Imperion.Util.FormItem,
	
	type : 'textarea',
	
	initialize : function(item) {
		if (item.title) {
			var preValue = this.getClonedTemplate('Span');
			preValue.addClass('preValue')
		 	.set('text', item.title)
		 	.removeClass('hideContainer')
		 	.inject(item, 'after');
			if (item.value) {
				preValue.addClass('hideContainer');
			}
			if ('block' === item.style['display'] && ('left' != item.style['float'])) {
				preValue.setStyles({
					paddingLeft : item.getStyle('margin-left').toInt() + item.getStyle('border-left').toInt() + item.getStyle('padding-left').toInt() + 'px',
					top         : '-' + (item.getStyle('height').toInt()+3) + 'px'
				});
			} else {
				preValue.setStyles({
					marginLeft : '-' + (item.getStyle('width').toInt()+10) + 'px',
					top         : '17px'
				});
			}
		}
		this.addEvent('focus', item, $H({
			action : 'focus',
			item     : item,
			preValue : preValue
		}));
		this.addEvent('click', preValue, $H({
			action : 'focus',
			item : item,
			preValue : preValue
		}));
		this.addEvent('blur', item, $H({
			action : 'blur',
			item : item,
			preValue : preValue
		}));	
		return item;
	}
});

/**
 * Radio replacement 
 *
 * @return Object
 */
Imperion.Util.FormRadio = new Class({
	Extends: Imperion.Util.FormItem,
	
	type : 'radio',
	
	
	initialize : function(item) {
		this.addEvent('change', item);
		this.loadElements();
		this.prepare(item);
		
		var radio = this.elements.container;
		radio.addClass('UI-Radio');
		radio.addClass(item.name.replace('[', '').replace(']', ''));
		
		this.elements.input = radio;
		
		return radio;
	}
});

/**
 * Select replacement 
 *
 * @return Object
 */
Imperion.Util.FormSelect = new Class({
	Extends: Imperion.Util.FormItem,
	
	type : 'select',
	
	
	initialize : function(item) {
		this.loadElements();
		this.prepare(item);
		
		var select = this.elements.container;
		var knob = select.clone().addClass('knob').erase('style');
		var text = select.clone().addClass('text').erase('style');
		select.addClass('UI-Select');
		select.addClass(item.name);
		text.set('text', item.getElement('option:selected').get('text'))
		text.inject(select);
		knob.inject(select);
		
		select.setStyle('width', this.item.getStyle('width'));
		
		this.elements.input = select;

		this.addEvent('focus', select, $H({
			action : 'focus'
		}));
		this.addEvent('blur', select, $H({
			action : 'blur'
		}));
		this.addEvent('change', item);
		
		return select;
	}
});
Imperion.Util.Format = new Class.Singleton({

	Implements : Imperion.Translate,
	
	/**
	 * Adds a trailing 0 in front of the number.
	 * If the number has just one digit.
	 *
	 * @param number
	 *
	 * @returns	{String} string with trailing zeroes
	 */
	trailingZeroes : function(number){
		if(number > 9 || number === 0){
			return number;
		}else{
			return ('0' + number).slice(-2);
		}
	},
	
	/**
	 * formats a remaining timer (in seconds) to a string
	 * 
	 * @param {Integer} 
	 * 
	 * @returns {String} string with formated timer
	 */
	remainingTime : function(remainingTime) {
		var formatedTime = null;
		var seconds = remainingTime;
		var minutes = remainingTime / 60;
		var hours = remainingTime / 60 / 60;
		var days = remainingTime / 60 / 60 / 24;
		
		if (days >= 1)
		{
			var displayDays = Math.floor(days)
			var displayHours = days - displayDays;
			displayHours = Math.round(displayHours * 24);
			formatedTime = displayDays + this.translate('default__days_short') + ' ' + displayHours + this.translate('default__hours_short'); 
		}
		else if (hours >= 1)
		{
			var displayHours = Math.floor(hours)
			var displayMinutes = hours - displayHours;
			displayMinutes = Math.round(displayMinutes * 60);
			formatedTime = displayHours + this.translate('default__hours_short') + ' ' + displayMinutes + this.translate('default__minutes_short');
		}
		else if (minutes >= 1)
		{
			var displayMinutes = Math.floor(minutes)
			var displaySeconds = minutes - displayMinutes;
			displaySeconds = Math.round(displaySeconds * 60);
			formatedTime = displayMinutes + this.translate('default__minutes_short') + ' ' + displaySeconds + this.translate('default__seconds_short'); 
		}
		else if (seconds >= 1)
		{
			formatedTime = seconds + 's';
		}
		
		return formatedTime;
	}
});
Imperion.Util.ObjectHelper = new Class.Singleton({
	/**
	 * Checks if the object is empty i.e. has no properties
	 * @param obj
	 *
	 * @returns	{Boolean}
	 */
	isObjectEmpty : function(obj) {
		//$chk() aus Mootools funzt leider nicht für den Fall.
		//chk Doku : Returns true if the passed in value/object exists or is 0, otherwise returns false.
		return Object.keys(obj).length === 0;
	}
});

Imperion.Util.GlobalEvents = new Class.Singleton({
	Implements : [Imperion.Event, Imperion.Observable, Imperion.Util.Class],
	
	/**
	 * mousemovement event point
	 * 
	 * @type	function
	 */
	eventMouseMovePointer : null,
	
	/**
	 * context enabled
	 * 
	 * @type	Boolean
	 */
	contextEnabled : false,
	
	/**
	 * prepare the global event handler
	 * 
	 * @return void
	 */
	initialize : function() {
		this.loadElementsOnDomready();
		this.contextEnabled = false;
	},
	
	/**
	 * add the mousemove event listener
	 * 
	 * @returns	{Void}
	 */
	startMouseMoveListen : function() {
		if(this.eventMouseMovePointer === null) {
			this.eventMouseMovePointer = this.addEvent('mousemove', this.elements.body, $H({
				action : 'mouse_move'
			}));
		}
	},
	
	/**
	 * remove the mousemove event listener
	 * 
	 * @returns	{Void}
	 */
	endMouseMoveListen : function() {
		if(this.eventMouseMovePointer !== null) {
			this.removeEvent('mousemove', this.elements.body, this.eventMouseMovePointer);
			this.eventMouseMovePointer = null;
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'body_click':
				this.notify({}, 'onBodyClick');
				break;
			case 'mouse_move':
				this.notify({
					eventObj : eventObject
				}, 'onMouseMove');
				break;
			case 'key_press':
				eventObject.killEvent = false;
				this.notify({
					eventObj : eventObject
				}, 'keyPressed');
				this.notify({
					eventObj : eventObject
				}, eventObject.key + 'Pressed');
				//abort key event
				if(eventObject.killEvent) {
					return false;
				}
				break;
			case 'contextmenu':
				if(!this.contextEnabled) {
					eventObject.preventDefault();
					new Event(eventObject).stop();
				}
				break;
			case 'key_press_fix':
				this.notify({
					eventObj : eventObject
				}, 'keyPressedFix');
				break;
		}
	},
	
	/**
	 * load elements to bind events
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.body = $(document.body);
		this.addEvent('click', this.elements.body, $H({
			action : 'body_click'
		}));
		this.addEvent('contextmenu', this.elements.body, $H({
			action : 'contextmenu'
		}));
		this.addKeyEvent('keypress', $H({
			action : 'key_press_fix'
		}));
		//key events
		this.addKeyEvent('keydown', $H({
			action : 'key_press'
		}));
	}
});
Imperion.Util.Helper = new Class.Singleton({
	
	/**
	 * no functionality at this class
	 *
	 * @constructor
	 */
	initialize : function() {
	
	},
	/**
	 * create an url with module, controller, action
	 * 
	 * @param String module
	 * @param String controller
	 * @param String action
	 * @param Object parameter
	 * 
	 * @return String url
	 */
	url : function(module, controller, action, parameter) {
		if(!action) {
			action = 'index';
		}
		if(!controller) {
			controller = 'index';
		}
		if(!module) {
			module = 'index';
		}
		params = '';
		if(parameter) {
			$H(parameter).each(function(value, key) {
				params += key + '/' + value + '/';
			});
		}
		
		return '/' + module + '/' + controller + '/' + action + '/' + params;
	},
	
	findPos: function(element) {
		var curleft = curtop = 0;
		if (element.offsetParent) {
			do {
				curleft += element.offsetLeft;
				curtop += element.offsetTop;
			} while (element = element.offsetParent);
			return [curleft,curtop];
		}
	}
});
/**
 * list factory for all list types
 * 
 * implement as Singleton
 * 
 * @class Imperion.Util.ListFactory
 * @author Paul Kreichauf
 */
Imperion.Util.ListFactory = new Class.Singleton(/** @lends Imperion.Util.ListFactory.prototype */{
	/**
	 * constructor
	 * 
	 * will be execute after js class add to dom
	 * 
	 * @constructor
	 * @member Imperion.Util.ListFactory
	 */
	initialize : function() {
		
	},
	/**
	 * get a list by type
	 * 
	 * @param String type
	 * @return Mixed
	 */
	getListByType : function(listType) {
		switch(itemType) {
			case 'ListItem':
				return this.getList();
				break;
			default:
				// ERROR HANDLING
				break;
		}
	},
	/**
	 * create a list and return
	 * 
	 * @return Imperion.Util.List
	 */
	getList : function() {
		return new Imperion.Util.List();
	}
});

/**
 * class for lists
 * 
 * only for inheritance
 */
Imperion.Util.List = new Class({
	Implements : [Imperion.Template, Options, Imperion.Util.Class],
	/**
	 * options from list
	 * 
	 * @var Object
	 */
	options : {
		template : 'ListContainer'
	},
	/**
	 * hash with items
	 * 
	 * @var Hash
	 */
	items : $H(),
	/**
	 * constructor
	 */
	initialize : function(options) {
		this.setOptions(options);
		//reset attributes
		this.items = $H({});
	},
	/**
	 * add a item
	 * 
	 * @var Object item
	 */
	add : function(item) {
		this.items.set(item.id, item);
	},
	/**
	 * get by id
	 * 
	 * @var Mixed id
	 */
	get : function(id) {
		return this.items.get(id);
	},
	/**
	 * removes a item
	 * 
	 * @var Object item
	 */
	remove : function(item) {
		this.items.erase(item.id);
	},
	/**
	 * draw the list
	 */
	draw : function() {
		this.items.each(function(item) {
			
		});
	}
});
/**
 * class for list where items are in groups
 * 
 * @extends Imperion.Util.List
 */
Imperion.Util.GroupList = new Class({
	Implements : [Options],
	/**
	 * options for a group list
	 * 
	 * @var Object
	 */
	options : {
		groups : [{
			name : 'default',
			options : {}
		}]
	},
	/**
	 * group list storage
	 * 
	 * @var Hash
	 */
	groupLists : $H(),
	/**
	 * constructor
	 */
	initialize : function(options) {
		//
		this.setOptions(options);
		//reset attributes
		this.groupLists = $H();
		//add groups
		for(var i = 0 ; i < this.options.groups.length ; i++) {
			this.addGroup(this.options.groups[i].name, this.options.groups[i].options);
		}
	},
	/**
	 * add a group
	 * 
	 * @param String groupName
	 */
	addGroup : function(groupName) {
		if(!this.groupLists.get(groupName)) {
			this.groupLists.set(groupName, new Imperion.Util.List());
		}
	},
	/**
	 * get a group by name
	 * 
	 * @param String groupName
	 */
	getGroup : function(groupName) {
		if(!this.groupLists.get(groupName)) {
			// ERROR HANDLING
		}
		return this.groupLists.get(groupName);
	}
});
/**
 * list item factory for all item types
 * 
 * implement as Singleton
 */
Imperion.Util.ListItemFactory = new Class.Singleton({
	/**
	 * constructor
	 * 
	 * will be execute after js class add to dom
	 */
	initialize : function() {
		
	},
	/**
	 * get a item by type
	 * 
	 * @param String type
	 */
	getItemByType : function(itemType, id, parent, options) {
		switch(itemType) {
			case 'ListItem':
				return this.getListItem(id, parent, options);
				break;
			case 'PlanetListItem':
				return this.getPlanetListItem(id, parent, options);
				break;
			case 'LogListItem':
				return this.getLogListItem(id, parent, options);
				break;
			case 'LogListExceptionItem':
				return this.getLogListExceptionItem(id, parent,options);
				break;
			case 'LogListSqlItem':
				return this.getLogListSqlItem(id, parent, options);
				break;
			case 'CreateBuildingListItem':
				return this.getCreateBuildingListItem(id, parent, options);
				break;
			case 'PlanetSurfaceListItem':
				return this.getPlanetSurfaceListItem(id, parent, options);
				break;
			default:
				// ERROR HANDLING
				break;
		}
	},
	/**
	 * create a list item and return
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return Imperion.Util.ListItem
	 */
	getListItem : function(id, parent, options) {
		return new Imperion.Util.ListItem(id, parent, options);
	},
	/**
	 * create a planet list item and return
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return Imperion.Interface.PlanetListItem
	 */
	getPlanetListItem : function(id, parent, options) {
		return new Imperion.Interface.PlanetListItem(id, parent, options);
	},
	/**
	 * Create a LogList Item and return it
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return Imperion.Debug.LogListItem
	 */
	getLogListItem : function(id, parent, options) {
		return new Imperion.Debug.LogListItem(id, parent, options);
	},
	/**
	 * Create a LogListExceptionItem and return it
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return LogListExceptionItem
	 */
	getLogListExceptionItem : function(id, parent, options) {
		return new Imperion.Debug.LogListExceptionItem(id, parent, options);
	},
	/**
	 * Create a LogListSqlItem and return it
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return LogListSqlItem
	 */
	getLogListSqlItem : function(id, parent, options) {
		return new Imperion.Debug.LogListSqlItem(id, parent, options);
	},
	/**
	 * Create a LogList Item and return it
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return Imperion.Debug.LogListItem
	 */
	getCreateBuildingListItem : function(id, parent, options) {
		return new Imperion.Interface.CreateBuildingListItem(id, parent, options);
	},
	/**
	 * Create a LogList Item and return it
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return Imperion.Debug.LogListItem
	 */
	getPlanetSurfaceListItem : function(id, parent, options) {
		return new Imperion.Interface.PlanetSurfaceListItem(id, parent, options);
	},
	
	/**
	 * Create a LogList Item and return it
	 * 
	 * @param Mixed id unique identifier from item
	 * @param Object parent Instance from parent list container
	 * @param Object options
	 * 
	 * @return Imperion.Debug.LogListItem
	 */
	getMapContextmenuItem : function(id, parent, options) {
		return new Imperion.Interface.Map.ContextmenuItem(id, parent, options);
	}
});


/**
 * class for b
 * 
 * only for inheritance
 */
Imperion.Util.ListItem = new Class({
	Implements : [Options],
	/**
	 * unique id of item
	 * 
	 * @var mixed
	 */
	id : null,
	/**
	 * instance of parent list
	 * 
	 * @var Object
	 */
	parentList : null,
	/**
	 * options of items
	 * 
	 * @var Object
	 */
	options : {
		itemType : ''
	},
	/**
	 * constructor
	 * 
	 * @param Object Parent
	 */
	initialize : function(id, parent, options) {
		this.setOptions(options);
		//check parameter
		if(!id || !parent) {
			// ERROR HANDLING
		}
		this.id = id;
		this.parentList = parent;
	}
});
Imperion.Util.Progress = new Class({
	Implements : [Imperion.Util.Class],
	/**
	 * start value
	 * 
	 * @var int
	 */
	startValue : 0,
	
	/**
	 * prepare the object
	 * 
	 * @param Element barElement
	 * @param int startValue
	 * 
	 * @return void
	 */
	initialize : function(barElement, begin) {
		if(!begin) {
			begin = 0;
		}
		this.loadElements(barElement);
		
		this.setPercentage(begin);
	},
	
	/**
	 * percantege from progress bar
	 * 
	 * @param int percent
	 * 
	 * @return void
	 */
	setPercentage : function(percent) {
		this.elements.bar.setStyle('width', percent+'%');
	},
	
	/**
	 * clear all
	 * 
	 * @return void
	 */
	clean : function() {
		this.cleanUp();
	},
	
	/**
	 * load the dom elements
	 */
	loadElements : function(barElement) {
		this.elements.container = barElement;
		this.elements.bar = this.elements.container.getElement('div');
	}
});
Imperion.Util.Checkpoint = {
	
	/**
	 * quest highlights
	 * 
	 * @type	Hash
	 */
	highlights : $H(),
	
	/**
	 * active checkpoints
	 * 
	 * @type	Object
	 */
	activeCheckpoints : {},
	
	/**
	 * return a checkpoint highlight
	 * 
	 * @param	{String}	ident
	 * @param	{Object}	options
	 * 
	 * @returns	{Imperion.Interface.Gui.Highlight}
	 */
	getCheckpointHighlight : function(ident, options) {
		if(this.highlights.has(ident)) {
			return this.highlights.get(ident);
		}
		if(options === undefined) {
			options = {};
		}
		var highlight = Imperion.Interface.Gui.Factory.highlight(ident, options);
		this.highlights.set(ident, highlight);
		return highlight;
	},
	
	/**
	 * remove highlight
	 * 
	 * @param	{String}	ident
	 * 
	 * @returns	{Void}
	 */
	removeCheckpointHighlight : function(ident) {
		if(this.highlights.has(ident)) {
			var highlight = this.highlights.get(ident);
			highlight.clean();
			this.highlights.erase(ident);
		}
	},
	
	/**
	 * set active Checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Void}
	 */
	setCheckpointActive : function(ident, questObj) {
		this.activeCheckpoints[ident] = questObj;
	},
	
	/**
	 * get active Checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Imperion.Quest}
	 */
	getCheckpointActive : function(ident) {
		if(this.isCheckpointActive(ident)) {
			return this.activeCheckpoints[ident];
		}
		return null;
	},
	
	/**
	 * check if Checkpoint is active
	 * 
	 * @param	{String}	ident
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointActive : function(ident) {
		if(this.activeCheckpoints[ident]) {
			return true;
		}
		return false;
	},
	
	/**
	 * unset Checkpoint active
	 * 
	 * @param	{String}	ident
	 * 
	 * @returns	{Void}
	 */
	unsetCheckpointActive : function(ident) {
		if(this.activeCheckpoints[ident]) {
			this.activeCheckpoints[ident] = null;
		}	
	}
};
/**
 * The random class
 *
 */
Imperion.Util.PseudoRandom = new Class.Singleton({
	/**
	 * default seed
	 * 
	 * @var int
	 */
    seed: 12345,
    
    /**
     * prepare the random class
     * 
     * @return void
     */
    initialize: function(newSeed){
        if (newSeed) {
            this.seed = newSeed;
        }
        this.randomInt32();
        this.randomInt32();
    },
    
    /**
     * set new seed
     * 
     * @param int newSeed
     * 
     * @return void
     */
    setNewSeed: function(newSeed){
        if (newSeed) {
            this.seed = newSeed;
        }
        this.randomInt32();
        this.randomInt32();
        
        return this;
    },
    
    /**
     * do somethin
     * 
     * @return int
     */
    randomInt32: function(){
        lo = 16807 * (this.seed % 0xFFFF);
        hi = 16807 * (this.seed >> 16);
        
        lo += (hi % 0x7FFF) << 16;
        lo += hi >> 15;
        
        if (lo > 0x7FFFFFFF) {
            lo -= 0x7FFFFFFF;
        }
        
        this.seed = lo;
        return this.seed;
    },
    
    /**
     * randomize something
     * 
     * @return int
     */
    randomReal32: function(){
        var randValue = this.randomInt32() / 0x7FFFFFFF;
        return Math.round(randValue * 100000000) / 100000000;
    },
    
    /**
     * create random value
     * 
     * @param int min
     * @param int max
     * 
     * @return int
     */
    rand: function(min, max){
        return Math.floor(min + (this.randomReal32() * Math.abs(max + 1 - min)));
    }
});
Imperion.Util.Registry = new Class.Singleton({
	/**
	 * storage for registry entries
	 * 
	 * @var Hash
	 */
	storage : null,
	
	/**
	 * prepare the object
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = new Hash();
	},
	
	/**
	 * set an entry
	 * 
	 * @param string key
	 * @param mixed value
	 * 
	 * @return void
	 */
	set : function(key, value) {
		if(key && value) {
			this.storage.set(key, value);
		}
	},
	
	/**
	 * retrieves a value
	 * 
	 * @param string key
	 * 
	 * @return mixed
	 */
	get : function(key) {
		return this.storage.get(key);
	}
});
Imperion.Util.Request = new Class.Singleton ({

    Implements : [Imperion.Observable],

	/**
	 * 
	 * @params	{Boolean}	dontShowLoading
	 * 
	 */
	send : function(url, params, callback, callbackParams, dontShowLoading, headerParam) {
		if(!Imperion.Util.Response) {
			throw '// ERROR HANDLING - Response not defined';
		}
		if(!url || !params || !callback) {
			throw '// ERROR HANDLING - Parameter not set properly';
		}
		//append current planet id to params
		params.planetId = Imperion.Util.Registry.get('planet').getId();
		if(callback) {
			if(!dontShowLoading) { 	
				Imperion.Factory.layout().showLoading(300);
			}
			var jsonResponse = new Request.JSON({
				url : url,
				data : params,
				onSuccess : function(jsonObject) {
					if(!dontShowLoading) {
						Imperion.Factory.layout().hideLoading();
					}
					var jsonResObj = Imperion.Util.Factory.response(jsonObject);
					//for CSRF protection
					if(this.getHeader('Tan')){
						jsonResObj.tan = this.getHeader('Tan');
					}
					callback(jsonResObj, callbackParams);
					Imperion.Factory.quest().refresh(true);
				},
				onFailure : function(response) {
					var message = response.status + ': ' + response.statusText;
					switch(response.status) {
						case 401 :
						case 503 :
							window.location.href = '/';
							return;
							break;
						case 409:
							message = 'Your order was not transmitted correctly, commander. Please try again!'; // @FIXME translate!
							break;
						case 0:
							message = 'Your order was not transmitted correctly, commander. Please reload the page!'; // @FIXME translate!
							break;
						default  :
							break;
					}
					if(!dontShowLoading) {
						Imperion.Factory.layout().hideLoading();
					}
					Imperion.Interface.Factory.eventBox().setEventBox({
						type : 'error',
						content : message
					}).showEventBox();
				}
			});
			if(headerParam){
				jsonResponse.setHeader(headerParam['name'],headerParam['value']);
			}
			jsonResponse.send();
            this.notify({}, 'onRequestSend');
		}
	},

	/**
	 * synchronus request
	 * 
	 * @param	{String}	url
	 * @param	{Object}	params
	 * @params	{Boolean}	dontShowLoading
	 * 
	 * @returns	{Imperion.Util.Response}
	 */
	sendSync : function(url, params, dontShowLoading) {
		if(!Imperion.Util.Response) {
			throw '// ERROR HANDLING';
		}
		if(!url || !params) {
			throw '// ERROR HANDLING';
		}
		//append current planet id to params
		params.planetId = Imperion.Util.Registry.get('planet').getId();
		//
		var jsonResObj;
		var jsonResponse = new Request.JSON({
			url : url,
			async : false,
			data : params,
			onRequest : function() {
				if(!dontShowLoading) {
					Imperion.Factory.layout().showLoading();
				}
			},
			onSuccess : function(jsonObject) {
				if(!dontShowLoading) {
					Imperion.Factory.layout().hideLoading();
				}
				jsonResObj = new Imperion.Util.Response(jsonObject);
				Imperion.Factory.quest().refresh(true);
			},
			onFailure : function(response) {
				switch(response.status) {
					case 503 :
						window.location.href = url;
						return
						break;
					default  :
						break;
				}
				if(!dontShowLoading) {
					Imperion.Factory.layout().hideLoading();
				}
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : response.status + ': ' + response.statusText
				}).showEventBox();
			}
		}).send();
		return jsonResObj;
	}
});
var RESPONSE_TYPE_DEFAULT = 1;
var RESPONSE_TYPE_EXTRA = 2;

Imperion.Util.Response = new Class({
	/**
	 * response json data -> default
	 * 
	 * @var Object
	 */
	jsonDataDefault : null,
	
	/**
	 * default method which will be called if no method is defined
	 * 
	 * @var String
	 */
	defaultMethod : 'update',
	
	/**
	 * bootstrap instance
	 * 
	 * @type {Imperion.Bootstrap}
	 */
	bootstrap : null,
	
	/**
	 * init the response object
	 * 
	 * @param {Object} jsonData
	 * @param {Imperion.Bootstrap} bootstrap
	 * 
	 * @type {void}
	 */
	initialize : function(jsonData, bootstrap) {
		this.bootstrap = bootstrap;
		if(!jsonData) {
			// ERROR HANDLING
		}
		$splat(jsonData).each(function(item, key) {
			if(!item.type) {
				throw '// ERROR HANDLING RESPONSE TYPE NOT SET';
			}
			switch(item.type) {
				case RESPONSE_TYPE_DEFAULT:
					this.jsonDataDefault = item;
					delete this.jsonDataDefault.type;
					break;
				case RESPONSE_TYPE_EXTRA:
					this.process(item.target, item.method, item.data);
					break;
			}
		}, this);
	},
	
	/**
	 * return the default json data from response
	 * 
	 * @return Object
	 */
	getResponseData : function() {
		return this.jsonDataDefault.data;
	},
	
	/**
	 * return the default html data from response
	 * 
	 * @return Object
	 */
	getResponseHtml : function() {
		return this.jsonDataDefault.html;
	},
	
	/**
	 * eval response javascript
	 * 
	 * @return void
	 */
	evalResponseJs : function() {
		$exec(this.jsonDataDefault.javascript);
	},
	
	/**
	 * process the data given from request
	 * 
	 * @param {String} ident
	 * @param {String} method
	 * @param {Object} params
	 * 
	 * @return {void}
	 */
	process : function(ident, method, params) {
		try {
			if(!ident || !method) {
				throw '//ERROR HANDLING';
			}
			var module = this.bootstrap.getModule(ident);
			if(module !== null && module[method]) {
				if(params) {
					module[method](params);
				}
				else {
					module[method]();
				}
			}
		}
		catch(e) {
		}
	}
});

Imperion.Util.ResponseDummy = new Class({
	/**
	 * fake data
	 * 
	 * @type	Object
	 */
	data : null,
	
	/**
	 * fake html
	 * 
	 * @type	String
	 */
	html : '',
	
	/**
	 * 
	 * @class response dummy object
	 * 
	 * @param	{Object}	data
	 * @param	{String}	html
	 * 
	 * @constructor
	 */
	initialize : function(data, html) {
		this.data	= data;
		this.html	= html;
	},
	
	/**
	 * fake method for data
	 * 
	 * @returns	{Object}
	 */
	getResponseData : function() {
		return this.data;
	},
	
	/**
	 * fake method for data
	 * 
	 * @returns	{Object}
	 */
	getResponseHtml : function() {
		return this.html;
	},
	
	/**
	 * fake eval js
	 * 
	 * @returns void
	 */
	evalResponseJs : function() {
		
	}
});
/**
 * Timer Class
 *
 * notify a amount of observers executed in a given interval
 *
 * @implements Imperion.Observable
 */
Imperion.Util.Timer = new Class({
	Implements : [Imperion.Observable, Options],
	/**
	 * interval for each step in milliseconds (default 1000ms)
	 *
	 * @var int
	 */
	interval : 1000,
	/**
	 * timestamp of last notification
	 *
	 * @var Int
	 */
	lastStep : null,
	/**
	 * timedelta from lastcall
	 *
	 * @var Int
	 */
	lastDelay : null,
	/**
	 * flag if counter is paused
	 *
	 * @var Boolean
	 */
	pause : false,
	/**
	 * options for timer
	 *
	 * @var Object
	 */
	// TODO refractor other options from atrributes to options object
	options : {
		correctLag : true
	},

	/**
	 * delay id
	 *
	 * @type	int
	 */
	delayId : null,

	/**
	 * constructor
	 *
	 * @param int 	interval Intervall for each step in milliseconds
	 * @param hash	amount of observers
	 */
	initialize : function(interval, observers, options) {
		this.setOptions(options);
		//set default interval
		this.pause = false;
		this.interval = 1000;
		this.pause = false;
		if(interval) {
			this.interval = interval;
		}
		if(observers) {
			this.attachMultiple(observers);
		}
		//call first step
		this.delayId = this.step.delay(this.interval, this);
	},

	/**
	 * clean timer
	 *
	 * @returns	{Void}
	 */
	clean : function() {
		$clear(this.delayId);
		this.detachAll();
	},

	/**
	 * start pause
	 */
	startPause : function() {
		this.pause = true;
	},
	/**
	 * end timer pause
	 */
	endPause : function() {
		if(this.pause) {
			this.lastStep = new Date().getTime();
			this.lastDelay = this.interval;
			this.pause = false;
			this.delayId = this.step.delay(this.interval, this);
		}
	},

	/**
	 * update the timer with new intervall
	 *
	 * @param {Int} newInterval
	 *
	 * @type {Void}
	 */
	updateInterval : function(newInterval) {
		this.lastStep = new Date().getTime() + newInterval;
		this.interval = newInterval;
		this.lastDelay = null;
	},
	/**
	 * notify observers each step
	 */
	step : function(lagCorrection) {
		if(!this.pause) {
			var offset = 0;
			var timeDelta = 0;
			// set delay for first step
			var delay = this.interval;
			var currentObj	= new Date();
			var currentTime = currentObj.getTime();
			// check if not first step
			if (this.lastStep !== null) {
				// calculate time between now and last call
				timeDelta = currentTime - this.lastStep;
				// calculate new offset
				offset = this.lastDelay - timeDelta;
				// set time for next call
				delay = this.interval + offset;
			}
			// save current time and time for next call
			this.lastStep = new Date().getTime();
			//notify observer
			this.notify({
				timer : this,
				delay : this.lastDelay,
				offset : offset,
				delta : timeDelta,
				currentTime : currentTime,
				currentObj : currentObj,
				lag : (lagCorrection) ? true : false
			}, 'timerStep');
			this.lastDelay = delay;
			//prevent javascript lags
			if(this.options.correctLag && this.lastDelay < 0) {
				this.step(true);
			}
			else {
				this.delayId = this.step.delay(this.lastDelay, this);
			}
		}
	}
});
Imperion.Util.TimerEta = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template],
	
	/**
	 * options of the timer
	 * 
	 * @var Object
	 */
	options : {
		name		: 'undefined',
		template 	: 'undefined',
		format 		: '%H:%M:%S'
	},
	
	/**
	 * timer offset
	 * 
	 * @var int
	 */
	offset : 0,
	
	/**
	 * date object for format ...
	 * 
	 * @var Date
	 */
	dateObj : null,
	
	/**
	 * second timer
	 * 
	 * @var Imperion.Util.SecondTimer
	 */
	secondTimer : null,
	
	/**
	 * local offset to utc
	 * 
	 * @type Number
	 */
	localOffset : 0,
	
	/**
	 * prepare the timer
	 * 
	 * @param String name
	 * @param Imperion.Util.SecondTimer secondTimer
	 * @param	{Imperion.Data.User}	user
	 * 
	 * @return void
	 */
	initialize : function(options, secondTimer, user) {
		this.setOptions(options);
		this.setUser(user);
		//create Date instance
		this.dateObj = new Date();
		this.localOffset = this.dateObj.getTimezoneOffset() * 60000;
		//
		this.secondTimer = secondTimer;
		//update
		this.loadElements();
		//
		this.setOffset(0);
		//
		this.show();
	},
	
	/**
	 * clean timer
	 * 
	 * @return void
	 */
	clean : function() {
		delete this.dateObj;
		if(this.offset > 0) {
			this.secondTimer.detach(this.options.name);
		}
		this.cleanUp();
	},
	
	/**
	 * convert to utc
	 * 
	 * @param	{Number}	convertTime
	 * 
	 * @returns	{Number}
	 */
	toUTC : function(convertTime) {
		   return convertTime + this.localOffset; 
	},
	
	/**
	 * set offset
	 * 
	 * @param int newOffset offset in seconds
	 * 
	 * @return void
	 */
	setOffset : function(newOffset) {
		//no offset -> pause timer
		if(newOffset === 0) {
			this.set(0);
			this.secondTimer.detach(this.options.name);
		}
		//new offset -> resume timer
		else if(this.offset === 0 && newOffset > 0) {
			this.secondTimer.attach(this.options.name, this);
		}
		this.offset = newOffset * 1000; 
	},
	
	/**
	 * timer step listener callback
	 * 
	 * @param Object timerData
	 * 
	 * @return void
	 */
	timerStep : function(timerData) {
		//update time only if no lag occours
		if(!timerData.lag) {
			this.set(this.toUTC(timerData.currentTime));
		}
	},
	
	/**
	 * set new time
	 * 
	 * @param Int newTime
	 * 
	 * @return void
	 */
	set : function(newTime) {
		if(newTime === 0) {
			this.elements.container.set('text', '00:00:00');
		}
		else {
			//calc current time
			var localTime = newTime + this.offset + this.user.getOffset();
			//set time
			this.dateObj.set('Time', localTime);
			this.elements.container.set('text', this.dateObj.format(this.user.getTimeFormat()));
		}
	},
	
	/**
	 * load timer elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate(this.options.template);
	}
});
Imperion.Util.SecondTimer = new Class({
	Extends : Imperion.Util.Timer,
	initialize : function() {
		this.parent(1000, {});
	}
});
Imperion.Util.Validator = new Class(
	/** @lends Imperion.Util.Validator.prototype */
	{
		/**
		 * setup the validation class
		 * 
		 * @class helper class for validation serveral data types
		 * 
		 * @constructs
		 */
		initialize : function() {
			
		},
		
		/**
		 * validate integer
		 * 
		 * @param	{Mixed}		testNumber
		 * 
		 * @returns	{Boolean}	
		 */
		validateInteger : function(testNumber) {
			return true;
		}
	}
);
Imperion.Util.UnitType = new Class({

	/**
	 * Unit type cache
	 * 
	 * @var {Hash}
	 */
	unitTypeCache : {},

	/**
	 * User unit type cache
	 *
	 * @var {Hash}
	 */
	userUnitTypeCache : {},
	
	/**
	 * Init the cache objects
	 *
	 * @param {Object} jsonData
	 * @param {Imperion.Bootstrap} bootstrap
	 * 
	 * @type {void}
	 */
	initialize : function(unitTypeCache, userUnitTypeCache) {
		this.unitTypeCache		= new Hash(unitTypeCache);
		this.userUnitTypeCache	= new Hash(userUnitTypeCache);
	},
	
	/**
	 * Returns the unit type data as an object (ship, turret)
	 * 
	 * @return {Object}
	 */
	get : function(typeName, isOwner) {
		var unitType = this.unitTypeCache.get(typeName);

		if (isOwner === true) {
			var userUnitType	= this.userUnitTypeCache.get(typeName);
			unitType.energy		= userUnitType.energy;

			if (userUnitType.basic) {
				unitType.basic = userUnitType.basic;
			}
		}

		return unitType;
	}

});
Imperion.Bootstrap = new Class(
	/** @lends Imperion.Bootstrap.prototype */
	{
		/**
		 * array with modules
		 * 
		 * @type {Object}
		 */
		modules : null,
		
		/**
		 * array with loaded modules
		 * 
		 * @type {Object}
		 */
		loadedModules : null,
		
		/**
		 * second timer
		 * 
		 * @type	Imperion.Util.SecondTimer
		 */
		secondTimer : null,
		
		/**
		 * refresh times
		 * 
		 * @type	Array
		 */
		refreshTimes : null,
		
		/**
		 * prepare the bootstrap class
		 * 
		 * @type void
		 */
		initialize : function(secondTimer) {
			//
			this.modules		= new Hash();
			this.refreshTimes	= [];
			this.loadedModules	= new Hash();
			//
			this.secondTimer	= secondTimer;
		},
		
		/**
		 * update the game
		 * 
		 * @param {String} options
		 * 
		 * @type void
		 */
		update : function(options) {
			if(!options) {
				options = {};
			}
			if(!options.method) {
				options.method = 'all';
			}
			if(!options.params) {
				options.params = {};
			}
			Imperion.Util.Request.send(Imperion.Util.Helper.url('frontend', 'update', options.method), options.params, this.afterUpdate.bindNew(this));
		},
		
		/**
		 * add refresh timer
		 * 
		 * @param	{Number}	refreshTime
		 * 
		 * @returns	{Void}
		 */
		addRefreshTimer : function(refreshTime) {
			if(refreshTime && refreshTime > 0) {
				this.refreshTimes.push(refreshTime);
				if(!this.secondTimer.observerExist('bootstrap')) {
					this.secondTimer.attach('bootstrap', this);
				}
			}
		},
		
		/**
		 * add multiple refresh timer
		 * 
		 * @param	{Array}	refreshTimes
		 * 
		 * @returns	{Void}
		 */
		addRefreshTimers : function(refreshTimes) {
			for(var i = refreshTimes.length - 1 ; i >= 0 ; i--) {
				this.addRefreshTimer(refreshTimes[i]);
			}
		},
		
		/**
		 * secondtimer callback
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		timerStep : function(params) {
			for(var i = this.refreshTimes.length - 1 ; i >= 0 ; i--) {
				if(this.refreshTimes[i] === 0) {
					//refresh
					this.update();
					delete this.refreshTimes[i];
				}
				if(this.refreshTimes[i] > 0) {
					this.refreshTimes[i]--;
				}
			}
		},
		
		/**
		 * callback after update request
		 * 
		 * @param Imperion.Util.Response response
		 * 
		 * @type void
		 */
		afterUpdate : function(response) {
			
		},
		
		/**
		 * Add a module
		 * 
		 * module will load and initialized during dispatch
		 * 
		 * @param {String} 		ident
		 * @param {Function} 	factory
		 * @param {Object}		params
		 * 
		 * @type {void}
		 */
		addModule : function(ident, factory, params) {
			if(!this.modules.has(ident)) {
				this.modules.set(ident, {
					factory : factory,
					params : params !== undefined ? params : null
				});
			}
		},
		
		/**
		 * get loaded module
		 * 
		 * @param {String} ident
		 * 
		 * @return {mixed}
		 */
		getModule : function(ident) {
			if(!this.loadedModules.has(ident)) {
				throw 'Module ['+ident+'] not found';
			}
			return this.loadedModules.get(ident);
		},
		
		/**
		 * Dispatch add modules
		 * 
		 * loop over all added modules and inialize them
		 * 
		 * @type void
		 */
		dispatch : function() {
			this.modules.each(function(module, ident) {
				var loaded;
				if(module.params !== null) {
					loaded = module.factory(module.params);
					
				}
				else {
					loaded = module.factory();
				}
				loaded.setBootstrap(this);
				this.loadedModules.set(ident, loaded);
			}, this);
		}
	}
);
Imperion.Layout = new Class({
	Implements : [Imperion.Template, Imperion.Event, Imperion.Util.Class, Imperion.Module, Imperion.Util.Checkpoint],

	/**
	 * load delayed flag
	 *
	 * @type boolean
	 */
	delaying : false,

	/**
	 * layout contexts
	 *
	 * @type	Object
	 */
	context : {
		account			: null,
		profile			: null,
		changePassword	: null,
		deleteAccount	: null
	},
	
	/**
	 * gate open flag
	 *
	 * @type	Boolean
	 */
	gateOpen : false,

	/**
	 * prepare
	 *
	 * @return void
	 * @constructor
	 */
	initialize : function() {
		//
		this.delaying	= false;
		this.gateOpen	= false;
		//
		this.setUser(Imperion.Util.Registry.get('user'));
		//
		this.loadElements();
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'GHOST':
				return false;
				break;
			case 'ResearchButton':
				return Imperion.Interface.Dialog.Factory.handle().dialogExist('research');
				break;
			case 'GalaxySwitchButton':
				try	{
					var mapModule = this.bootstrap.getModule('Imperion.Map.Handle');
				}
				catch(e) {
					if(e === 'Module [Imperion.Map.Handle] not found') {
						return false;
					}
					else {
						throw e;
					}
				}
				return true;
			case 'GalaxySwitchHover':
				if(this.gateOpen) {
					return true;
				}
				try	{
					var mapModule = this.bootstrap.getModule('Imperion.Map.Handle');
					if(mapModule.galaxy !== params.galaxy.toInt()) {
						return false;
					}
				}
				catch(e) {
					if(e === 'Module [Imperion.Map.Handle] not found') {
						return false;
					}
					else {
						throw e;
					}
				}
				return true;
				break;
			case 'MidgameButton':
				try	{
					var mapModule = this.bootstrap.getModule('Imperion.Map.Handle');
					if(mapModule.galaxy !== GALAXY_TYPE_MIDGAME) {
						return false;
					}
				}
				catch(e) {
					if(e === 'Module [Imperion.Map.Handle] not found') {
						return false;
					}
					else {
						throw e;
					}
				}
				return true;
			case 'TutorialButton':
				try	{
					var mapModule = this.bootstrap.getModule('Imperion.Map.Handle');
					if(mapModule.galaxy !== GALAXY_TYPE_TUTORIAL) {
						return false;
					}
				}
				catch(e) {
					if(e === 'Module [Imperion.Map.Handle] not found') {
						return false;
					}
					else {
						throw e;
					}
				}
				return true;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'GHOST':

				break;
			case 'ResearchButton':
				//add top highlight
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						y : 30
					},
					rotation	: 'arrowTop'
				});
				highlight.appendOver(this.elements.research);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'GalaxySwitchHover':
			case 'GalaxySwitchButton':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						y : -45
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.gate.button);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'MidgameButton':
				var highlight = this.getCheckpointHighlight(ident, {
					container	: this.elements.gate.container,
					posOffset	: {
						y : 35
					}
				});
				highlight.appendOver(this.elements.gate.midgame);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'TutorialButton':
				var highlight = this.getCheckpointHighlight(ident, {
					container	: this.elements.gate.container,
					posOffset	: {
						y : 35
					}
				});
				highlight.appendOver(this.elements.gate.tutorial);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'GHOST':

				break;
			case 'ResearchButton':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			case 'GalaxySwitchHover':
			case 'GalaxySwitchButton':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			case 'TutorialButton':
			case 'MidgameButton':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Layout ident not exist';
				break;
		}
	},

	/**
	 * object wrapper for async request
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns	{Void}
	 */
	_addRefreshTimer : function(params) {
		this.bootstrap.addRefreshTimer(params.time.toInt());
	},
	
	/**
	 * object wrapper for async request
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns	{Void}
	 */
	_addRefreshTimers : function(params) {
		this.bootstrap.addRefreshTimers(params.times);
	},
	
	/**
	 * show the research dialog
	 *
	 * @returns {void}
	 */
	showResearchDialog : function() {
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('research');
		var research = Imperion.Interface.Dialog.Context.Factory.research(dialog);
		research.showContext();
	},

	/**
	 * show the energy dialog
	 *
	 * @returns {void}
	 */
	showEnergyDialog : function() {
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('energy');
		var energy = Imperion.Interface.Dialog.Context.Factory.energyOverview(dialog);
		energy.showContext();
	},
	
	/**
	 * show the population dialog
	 *
	 * @returns {void}
	 */
	showPopulationDialog : function() {
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('population');
		var population = Imperion.Interface.Dialog.Context.Factory.populationOverview(dialog);
		population.showContext();
	},
	
	/**
	 * show the annexion dialog
	 *
	 * @returns {Void}
	 */
	showAnnexionDialog : function() {
		var annexionUnit = this.bootstrap.getModule('Imperion.Interface.Resource.Annexion');
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('annexion');
		var annexion = Imperion.Interface.Dialog.Context.Factory.annexion(dialog);
		annexion.showContext();
	},

	/**
	 * show the account dialog
	 *
	 * @returns {void}
	 */
	showAccountDialog : function() {
		var dialog				= Imperion.Interface.Dialog.Factory.handle().getDialog('AccountProfile');
		this.context.profile	= Imperion.Interface.Dialog.Context.Factory.editprofile(dialog);
		this.context.account	= Imperion.Interface.Dialog.Context.Factory.account(dialog);
		this.context.profile.showContext();
	},

	/**
	 * show the imprint dialog
	 *
	 * @returns {void}
	 */
	showImprintDialog : function() {
		var dialog	= Imperion.Interface.Dialog.Factory.handle().getDialog('Imprint');
		var imprint	= Imperion.Interface.Dialog.Context.Factory.imprint(dialog);
		imprint.showContext();
	},

	/**
	 * show the terms and conditions dialog
	 *
	 * @returns {void}
	 */
	showTermsConditionsDialog : function () {
		var dialog			= Imperion.Interface.Dialog.Factory.handle().getDialog('TermsConditions');
		var termsconditions	= Imperion.Interface.Dialog.Context.Factory.termsconditions(dialog);
		termsconditions.showContext();
	},

	/**
	 * enable galaxy button
	 *
	 * @param	{Object}	params
	 *
	 * @returns	{Void}
	 */
	_enableGalaxyButton : function(params) {
		if(this.elements.gate[params.galaxy]) {
			this.elements.gate[params.galaxy].removeClass('disabled');
		}
	},

	/**
	 * disable galaxy button
	 *
	 * @param	{Object}	params
	 *
	 * @returns	{Void}
	 */
	_disableGalaxyButton : function(params) {
		if(this.elements.gate[params.galaxy]) {
			this.elements.gate[params.galaxy].addClass('disabled');
		}
	},

	/**
	 * update the fleet slots values
	 *
	 * @param params
	 */
	_updateFleetSlots : function(params) {
		this.elements.gate.maxFleetSlots.set('text',params['maxFleetSlots']);
		this.elements.gate.usedFleetSlots.set('text',params['usedFleetSlots']);
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'show_gate':
				this.showGate();
				break;
			case 'hide_gate':
				this.hideGate();
				break;
			case 'show_research':
				this.removeCheckpoint('ResearchButton');
				this.showResearchDialog();
				eventObject.stop();
				break;
			case 'show_population':
				this.showPopulationDialog();
				eventObject.stop();
				break;
			case 'show_energy':
				//this.showEnergyDialog();
				eventObject.stop();
				break;
			case 'show_annexion':
				this.showAnnexionDialog();
				eventObject.stop();
				break;
			case 'show_account':
				this.showAccountDialog();
				eventObject.stop();
				break;
			case 'show_imprint':
				this.showImprintDialog();
				eventObject.stop();
				break;
			case 'show_termsconditions':
				this.showTermsConditionsDialog();
				eventObject.stop();
				break;
			case 'disable_click':
				if(this.elements.gate[params.galaxy] && this.elements.gate[params.galaxy].hasClass('disabled')) {
					eventObject.preventDefault();
					new Event(eventObject).stop();
					return false;
				}
				return true;
				break;
		}
		return false;
	},

	/**
	 * show the gate
	 *
	 * @returns {Void}
	 */
	showGate : function() {
		if(!this.gateOpen) {
			this.elements.gate.container.removeClass('hideContainer');
			this.gateOpen = true;
		}
		this.removeCheckpoint('GalaxySwitchHover');
		Imperion.Factory.quest().refresh();
	},

	/**
	 * hide the gate
	 *
	 * @returns {Void}
	 */
	hideGate : function() {
		if(this.gateOpen) {
			this.elements.gate.container.addClass('hideContainer');
			this.gateOpen = false;
		}
		Imperion.Factory.quest().refresh();
	},

	/**
	 * show dialog black layer
	 *
	 * @return void
	 */
	showBlackLayer : function() {
		this.elements.blackLayer.removeClass('hideContainer');
	},

	/**
	 * hide dialog black layer
	 *
	 * @return void
	 */
	hideBlackLayer : function() {
		this.elements.blackLayer.addClass('hideContainer');
	},

	/**
	 * show loading
	 *
	 * @param {Int} delayed Delay in ms
	 *
	 * @return void
	 */
	showLoading : function(delayed) {
		if(!delayed) {
			this.showBlackLayer();
			this.elements.loading.removeClass('hideContainer');
		}
		else {
			this.delaying = true;
			this.showLoadingDelayed.delay(delayed, this);
		}
	},

	/**
	 * show loading screen delayed
	 *
	 * @type void
	 */
	showLoadingDelayed : function() {
		if(this.delaying) {
			this.showLoading();
			this.delaying = false;
		}
	},

	/**
	 * hide loading
	 *
	 * @return void
	 */
	hideLoading : function() {
		this.delaying = false;
		if (Imperion.Interface.Factory.eventBox().eventBoxOpen === false)
		{
			this.hideBlackLayer();
		}
		this.elements.loading.addClass('hideContainer');
	},

	/**
	 * load layout elements
	 *
	 * @return void
	 */
	loadElements : function() {
		//black layer
		this.elements.blackLayer = this.getTemplate('BlackLayer');
		this.elements.blackLayer.setStyle('opacity', 0.75);
		
		//loading
		this.elements.loading		= this.getTemplate('LoadingBar');
		//
		this.elements.annexion		= this.getTemplate('Resource_annexion');
		this.elements.energy		= this.getTemplate('Resource_energy');
		this.elements.population	= this.getTemplate('Resource_population');
		this.elements.research		= this.getTemplate('ResourceCounter_research');

		this.addEvent('click', this.elements.annexion, $H({
			action : 'show_annexion'
		}));
		this.addEvent('click', this.elements.research, $H({
			action : 'show_research'
		}));
		this.addEvent('click', this.elements.population, $H({
			action : 'show_population'
		}));
		this.addEvent('click', this.elements.energy, $H({
			action : 'show_energy'
		}));
		//gate
		this.elements.gate = {};
		this.elements.gate.button			= this.getTemplate('GateButton');
		this.elements.gate.container		= this.getTemplate('GateSelection');
		this.elements.gate.tutorial			= this.elements.gate.container.getElement('.tutorial');
		this.elements.gate.midgame			= this.elements.gate.container.getElement('.midgame');
		this.elements.gate.endgame			= this.elements.gate.container.getElement('.endgame');
		this.elements.gate.fleetSlots		= this.elements.gate.container.getElement('.fleetSlots');
		this.elements.gate.maxFleetSlots	= this.elements.gate.fleetSlots.getElement('.maxFleetSlots');
		this.elements.gate.usedFleetSlots	= this.elements.gate.fleetSlots.getElement('.usedFleetSlots');

		this.addEvent('click', this.elements.gate.midgame, $H({
			action	: 'disable_click',
			galaxy	: 'midgame'
		}));

		this.addEvent('click', this.elements.gate.endgame, $H({
			action	: 'disable_click',
			galaxy	: 'endgame'
		}));

		this.addEvent('mouseenter', this.elements.gate.button, $H({
			action : 'show_gate'
		}));
		this.addEvent('mouseleave', this.elements.gate.button, $H({
			action : 'hide_gate'
		}));

		var endgame = this.elements.gate.container.getElement('.endgame');
		if(endgame) {
			this.elements.gate.container.setStyle('right', -176);
		}
		//profile
		this.elements.account = this.getTemplate('ShowAccount');
		this.addEvent('click', this.elements.account, $H({
			action : 'show_account'
		}));
		//imprint
		this.elements.imprint = this.getTemplate('ShowImprint');
		this.addEvent('click', this.elements.imprint, $H({
			action : 'show_imprint'
		}));
		//terms and conditions
		this.elements.termsconditions = this.getTemplate('ShowTermsConditions');
		this.addEvent('click', this.elements.termsconditions, $H({
			action : 'show_termsconditions'
		}));
	}
});

Imperion.Queue = new Class(
	/** @lends Imperion.Queue.prototype */
	{
		Implements : [Imperion.Module, Imperion.Observable],
		
		/**
		 * type of the queue
		 * 
		 * @type	String
		 */
		type : QUEUE_UNDEFINED,
		
		/**
		 * queue data
		 * 
		 * @type	Array
		 */
		data : null,
		
		/**
		 * queue items
		 * 
		 * @type	Hash
		 */
		items : null,
		
		/**
		 * positions
		 * 
		 * @type	Array
		 */
		positions : null,
		
		/**
		 * second timer instance
		 * 
		 * @type	Imperion.Util.SecondTimer
		 */
		secondTimer : null,
		
		/**
		 * running queue entry
		 * 
		 * @type 	Imperion.QueueItem
		 */
		runningItem : null,
		
		/**
		 * current position
		 * 
		 * @type	Number
		 */
		currentPos : 0,
		
		/**
		 * prepare the queue
		 * 
		 * @class Handle all queue actions
		 * 
		 * @param	{String}					queueType
		 * @param	{Array}						queueData
		 * @param	{Imperion.Util.SecondTimer}	secondTimer
		 *
		 * @constructs
		 */
		initialize : function(queueType, queueData, secondTimer) {
			//
			this.type			= queueType;
			this.secondTimer	= secondTimer;
			this.secondTimer.attach(this.type, this);
			//
			this.items			= $H();
			//
			this.update(queueData);
		},
		
		/**
		 * update the queue with new data
		 * 
		 * @param	{Array}	queueData
		 * 
		 * @returns	{Void}
		 */
		update : function(queueData) {
			//empty existing queue
			this.empty();
			//create new queue
			var item;
			for(var i = 0 ; i < queueData.length ; i++) {
				if(!queueData[i].id) {
					throw '//ERROR HANDLING - QUEUE ID NOT SET';
				}
				item = Imperion.Factory.queueItem(queueData[i].running, queueData[i], this);
				this.items.set(queueData[i].id, item);
				this.positions[i] = queueData[i].id; 
				//check if item is running item
				if(queueData[i].running > 0) {
					this.runningItem = item;
				}
			}
		},

		/**
		 * empty queue
		 * 
		 * @returns	{Void}
		 */
		empty : function() {
			this.runningItem	= null;
			this.positions		= [];
			this.items.each(function(item, key) {
				
			}.bindNew(this));
			
		},
		
		/**
		 * start the next item in queue
		 * 
		 * @returns	{Void}
		 */
		startNextItem : function() {
			if(this.runningItem) {
				this.notify({
					key	: this.runningItem.data.id
				}, 'onFinishItem');
				this.items.erase(this.runningItem.data.id);
				delete this.runningItem;
				this.runningItem = null;
			}
			for(this.currentPos ; this.currentPos < this.positions.length ; this.currentPos++) {
				if(this.items.has(this.positions[this.currentPos])) {
					break;
				}
			}
			if(this.items.has(this.positions[this.currentPos])) {
				this.runningItem = this.items.get(this.positions[this.currentPos]);
				this.notify({
					key	: this.runningItem.data.id
				}, 'onActivateItem');
			}
		},
		
		/**
		 * listener for each second timer
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		timerStep : function(params) {
			if(this.runningItem !== null && !this.runningItem.data.paused) {
				if(this.runningItem.step()) {
					this.startNextItem();
				}
			}
		}
	}
);

Imperion.QueueItem = new Class(
	/** @lends Imperion.QueueItem.prototype */
	{
		Implements : [Imperion.Observable],
		/**
		 * data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * parent queue
		 * 
		 * @type	Imperion.Queue
		 */
		parentQueue : null,
		
		/**
		 * running time
		 * 
		 * @type	Number
		 */
		running : 0,
		
		/**
		 * prepare the queue
		 * 
		 * @class Handle all queue actions
		 * 
		 * @param	{Number}			running
		 * @param	{Object}			data
		 * @param	{Imperion.Queue}	parentQueue
		 *
		 * @constructs
		 */
		initialize : function(running, data, parentQueue) {
			//
			this.running		= running;
			this.data			= data;
			this.parentQueue	= parentQueue;
		},
		
		/**
		 * 1 step
		 * 
		 * @returns	{Boolean}
		 */
		step : function() {
			this.running++;
			if(this.running >= this.data.duration) {
				return true;
			}
			this.notify({
				percent : this.getPercent(),
				remain	: this.getRemainTime(),
				amount	: this.getRemainAmount()
			}, 'onStep');
			return false;
		},
		
		/**
		 * return percent
		 * 
		 * @returns	{Number}
		 */
		getPercent : function() {
			return this.running * 100 / this.data.duration;
		},
		
		/**
		 * return the remaining time
		 * 
		 * @returns	{Number}
		 */
		getRemainTime : function() {
			return this.data.duration - this.running;
		},
		
		/**
		 * get remain amount
		 * 
		 * @returns	{Number}
		 */
		getRemainAmount : function() {
			if(this.data.amount) {
				return this.data.amount - (this.getPercent() * this.data.amount / 100).toInt();
			}
			return 1;
		},
		
		/**
		 * finish item
		 * 
		 * @returns	{Void}
		 */
		finish : function() {
			
		}
	}
);
Imperion.Quest = new Class(
	/** @lends Imperion.Quest.prototype */
	{
		Implements : [Imperion.Module, Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Util.Form],
		/**
		 * current quest data
		 * 
		 * @type	Array
		 */
		questData : null,
		
		/**
		 * box area
		 * 
		 * @type	Imperion.Interface.Area
		 */
		boxArea : null,
		
		/**
		 * current registered box type
		 * 
		 * @type	String
		 */
		boxType : null,
		
		/**
		 * current quest text class
		 * 
		 * @type	String
		 */
		currentQuestText : null,
		
		/**
		 * quest running flag
		 * 
		 * @type	Boolean
		 */
		questRunning : false,
		
		/**
		 * update params
		 * 
		 * @type	Object
		 */
		updateParams : null,
		
		/**
		 * content loaded flag
		 * 
		 * @type	Boolean
		 */
		contentLoaded : false,
		
		/**
		 * prepare the quest class
		 * 
		 * @param	{Imperion.Util.GlobalEvents}	globalEvents
		 * 
		 * @type void
		 */
		initialize : function(globalEvents) {
			//
			this.questData			= null;
			this.questRunning		= false;
			this.updateParams	 	= null;
			this.boxType		 	= null;
			this.currentQuestText	= 'questDefault';
			this.contentLoaded		= false;
			//
			//globalEvents.attach('Quest', this);
			//
			this.loadElements();
			//
			/*
			this.boxArea = Imperion.Interface.Factory.dynamicArea('quest', this.elements.box.content);
			this.boxArea.setDestroyCallback(this.cleanQuestSystem.bind(this));
			*/
		},
		
		/**
		 * set current quest
		 * 
		 * @param	{Array}	questData
		 * 
		 * @returns	{Void}
		 */
		update : function(questData) {
			this.questData = questData;
		},
		
		/**
		 * check
		 * 
		 * @returns	{Void}
		 */
		toggleQuestSystem : function() {
			if(this.questRunning) {
				this.deactivateQuestSystem();
				Imperion.Util.Request.send(
					Imperion.Util.Helper.url('quest', 'bubble', 'toggle'),
					{},
					function(){}
				);
				this.hideQuestBox();
			}
			else {
				this.activateQuestSystem();
			}
		},
		
		/**
		 * show
		 * 
		 * @returns	{Void}
		 */
		activateQuestSystem : function() {
			if(!this.questRunning) {
				Imperion.Util.Request.send(
					Imperion.Util.Helper.url('quest', 'bubble', 'toggle'),
					{},
					this.afterRequestQuest.bindNew(this)
				);
			}
		},
		
		/**
		 * request wrapping
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_activateQuestSystem : function(params) {
			this.activateQuestSystem();
		},
		
		
		/**
		 * set checkpoints
		 * 
		 * @param	{Object}	quest
		 * 
		 * @returns	{Void}
		 */
		setQuest : function(quest) {
			if(quest.checkpoints && quest.checkpoints.length > 0) {
				this.questRunning = true;
				this.update(quest);
			}
		},
		
		/**
		 * object wrapper
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_setQuest : function(params) {
			this.setQuest(params.quest);
		},
		
		/**
		 * set box
		 * 
		 * @param	{String}	boxType
		 * @param	{String}	newHtml
		 * @param	{Array}		checkpoints
		 * @param	{Object}	updateParams
		 * @param	{Boolean}	show
		 * 
		 * @returns	{Void} 
		 */
		updateBox : function(boxType, newHtml, checkpoints, updateParams, show) {
			this.deactivateQuestSystem();
			this.boxType	= boxType;
			this.setBoxHtml(newHtml);
			//update box specific informations
			switch(this.boxType) {
				case QUEST_BOX_TYPE_INFO:
					
					break;
				case QUEST_BOX_TYPE_NEXT:
					if(updateParams) {
						this.updateParams	= updateParams;
						var nextButton		= this.elements.box.content.getElement('.next');
						this.addEvent('click', nextButton, $H({
							action : 'go_next'
						}));
					}
					break;
				case QUEST_BOX_TYPE_FORM:
					if(updateParams) {
						this.updateParams	= updateParams;
						var saveButton		= this.elements.box.content.getElement('.save');
						this.addEvent('click', saveButton, $H({
							action : 'save'
						}));
						this.load(this.elements.box.container);
					}
					break;
			}
			//check for iframe
			var iframe = this.elements.box.content.getElement('.tpixeliframe');
			if(iframe) {
				this.addEvent('load', iframe, $H({
					action : 'iframe_loaded'
				}));
				Imperion.Factory.layout().showLoading();
			}
			//scan for links
			var links = this.elements.box.content.getElements('A.bubble');
			for(var i = links.length - 1 ; i >= 0 ; i--) {
				this.addEvent('click', links[i], $H({
					action : 'link_click'
				}));
			}
			//set checkpoints
			if(checkpoints) {
				this.setQuest(checkpoints);
			}
			//show / hide box
			if(show) {
				this.showQuestBox();
			}
			else {
				this.hideQuestBox();
			}
		},
		
		/**
		 * update box wrapper
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_updateBox : function(params) {
			this.updateBox(params.type, params.html, params.quest, params.update, params.show);
		},
		
		/**
		 * request callback
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestQuest : function(response) {
			var requestData		= response.getResponseData();
			if(requestData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : requestData.error
				}).showEventBox();
			}
			else {
				this.updateBox(requestData.type, response.getResponseHtml(), requestData.quest, requestData.update, requestData.show);
			}
		},
		
		/**
		 * hide quest box
		 * 
		 * @returns	{Void}
		 */
		deactivateQuestSystem : function() {
			if(this.questRunning) {
				//this.hideQuestBox();
				switch(this.boxType) {
					case QUEST_BOX_TYPE_INFO:
						
						break;
					case QUEST_BOX_TYPE_NEXT:
						
						break;
					case QUEST_BOX_TYPE_FORM:
						
						break;
				}
				this.cleanQuestSystem();
				this.questRunning = false;
			}
		},
		
		/**
		 * show quest text by class
		 * 
		 * @param	{String}	cssClass
		 * 
		 * @returns	{Void}
		 */
		showQuestText : function(cssClass) {
			if(this.currentQuestText !== cssClass) {
				var currentEle = this.elements.box.content.getElement('.' + this.currentQuestText);
				if(currentEle) {
					currentEle.addClass('hideContainer');
				}
				this.currentQuestText = cssClass;
				var nextEle = this.elements.box.content.getElement('.' + this.currentQuestText);
				if(nextEle) {
					nextEle.removeClass('hideContainer');
				}
			}
		},
		
		/**
		 * update the box html
		 * 
		 * @param	{String}	newHtml
		 * 
		 * @returns	{Void}
		 */
		setBoxHtml : function(newHtml) {
			if(this.contentLoaded) {
				this.removeBoxHtml();
			}
			this.elements.box.content.set('html', newHtml.replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&quot;/g, '"'));
			this.contentLoaded = true;
		},
		
		/**
		 * clean the container
		 * 
		 * @returns	{Void}
		 */
		removeBoxHtml : function() {
			this.elements.box.content.empty();
			this.contentLoaded = false;
		},
		
		/**
		 * clean the quest
		 * 
		 * @returns {Void}
		 */
		cleanQuestSystem : function() {
			if(this.questData !== null) {
				var checkpointCount		= this.questData.checkpoints.length;
				for(var i = 0 ; i < checkpointCount ; i++) {
					//check if ident is set
					if(!this.questData.checkpoints[i].module || !this.questData.checkpoints[i].ident || !this.questData.checkpoints[i].params) {
						throw 'Checkpoint parameters not set correctly';
					}
					try {
						var module = this.bootstrap.getModule(this.questData.checkpoints[i].module);
					}
					catch(e) {
						if(e === 'Module ['+this.questData.checkpoints[i].module+'] not found') {
							continue;
						}
						else {
							throw e;
						}
					}
					//check for Checkpoint callback
					if(!module.isCheckpointResolved || !module.activateCheckpoint || !module.removeCheckpoint) {
						throw 'Checkpoint methods in module not defined ['+this.questData.checkpoints[i].module+']';
					}
					module.removeCheckpoint(this.questData.checkpoints[i].ident, false);
				}
				this.questData = null;
			}
			this.currentQuestText = 'questDefault';
		},
		
		/**
		 * refresh checkpoints
		 * 
		 * @param	{Boolean}	removeCheckpoints
		 * @param	{Boolean}	log
		 * 
		 * @returns	{Void}
		 */
		refresh : function(removeCheckpoints, log) {
			if(this.questData !== null) {
				var checkpointCount		= this.questData.checkpoints.length;
				var resvoledCount		= this.questData.checkpoints.length;
				var resolved			= true;
				var checkpointRunning	= false;
				for(var i = 0 ; i < checkpointCount ; i++) {
					//check if ident is set
					if(!this.questData.checkpoints[i].module || !this.questData.checkpoints[i].ident || !this.questData.checkpoints[i].params) {
						throw 'Checkpoint parameters not set correctly';
					}
					try {
						var module = this.bootstrap.getModule(this.questData.checkpoints[i].module);
					}
					catch(e) {
						if(e === 'Module ['+this.questData.checkpoints[i].module+'] not found') {
							continue;
						}
						else {
							throw e;
						}
					}
					//check for Checkpoint callback
					if(!module.isCheckpointResolved || !module.activateCheckpoint || !module.removeCheckpoint) {
						throw 'Checkpoint methods in module not defined ['+this.questData.checkpoints[i].module+']';
					}
					resolved = module.isCheckpointResolved(this.questData.checkpoints[i].ident, this.questData.checkpoints[i].params, this);
					//check if checkpoint is resolved
					if(!resolved && !checkpointRunning) {
						//checkpoint not resolved -> activate checkpoint
						module.activateCheckpoint(this.questData.checkpoints[i].ident, this.questData.checkpoints[i].params, this);
						//checkpoint running flag
						checkpointRunning = true;
						//check text change
						if(this.questData.checkpoints[i].text !== undefined) {
							this.showQuestText(this.questData.checkpoints[i].text);
						}
						else {
							this.showQuestText('questDefault');
						}
					}
					else {
						resvoledCount--;
						if(removeCheckpoints) {
							module.removeCheckpoint(this.questData.checkpoints[i].ident);
						}
					}
				}
				if(resvoledCount === 0) {
					if(this.questData.update !== undefined) {
						Imperion.Util.Request.send(
							Imperion.Util.Helper.url('quest', 'bubble', this.questData.update.method),
							this.questData.update.params,
							this.afterRequestQuest.bindNew(this)
						);
					}
					this.deactivateQuestSystem();
				}
				else {
				}
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param {Element.Event}	eventObject
		 * @param {Hash}			params
		 * 
		 * @returns {Boolean}
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'go_next':
					Imperion.Util.Request.send(
						Imperion.Util.Helper.url('quest', 'bubble', this.updateParams.method),
						this.updateParams.params,
						this.afterRequestQuest.bindNew(this)
					);
					this.deactivateQuestSystem();
					break;
				case 'save':
					var reqParams = this.updateParams.params;
					reqParams.data = this.elements.box.container.toQueryString().parseQueryString();
					Imperion.Util.Request.send(
						Imperion.Util.Helper.url('quest', 'bubble', this.updateParams.method),
						reqParams,
						this.afterRequestQuest.bindNew(this)
					);
					break;
				case 'link_click':
					Imperion.Util.Request.send(
						eventObject.target.href,
						{},
						this.afterRequestQuest.bindNew(this)
					);
					break;
				case 'iframe_loaded':
					Imperion.Factory.layout().hideLoading();
					break;
			}
			return false;
		},
		
		/**
		 * body click listener
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		onBodyClick : function(params) {
			this.refresh();
		},
		
		/**
		 * show quest box
		 * 
		 * @returns	{Void}
		 */
		showQuestBox : function() {
			if(this.elements.box.container.hasClass('hideContainer')) {
				this.elements.box.container.removeClass('hideContainer');
			}
		},
		
		/**
		 * hide quest box
		 * 
		 * @returns	{Void}
		 */
		hideQuestBox : function() {
			if(!this.elements.box.container.hasClass('hideContainer')) {
				this.elements.box.container.addClass('hideContainer');
			}
		},
		
		/**
		 * load quest elements
		 * 
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.box	= {};
			this.elements.box.container	= this.getTemplate('QuestBox');
			this.elements.box.content	= this.elements.box.container.getElement('.content');
		}
	}
);


Imperion.Data.Factory = new Class.Singleton({
	
	/**
	 * storage
	 * 
	 * @var Object
	 */
	storage : {
	
	},
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			
		};
	},
		
	/**
	 * planet list
	 * 
	 * @return Imperion.Data.PlanetList
	 */
	planetList : function() {
		return new Imperion.Data.PlanetList();
	},
	
	/**
	 * returns an instance from a system location object
	 * 
	 * @param Object locationData
	 * 
	 * @return Imperion.Data.LocationSystem
	 */
	locationSystem : function(locationData) {
		return new Imperion.Data.LocationSystem(locationData);
	},
	
	/**
	 * returns an instance from a planet location object
	 * 
	 * @param Object locationData
	 * 
	 * @return Imperion.Data.LocationPlanet
	 */
	locationPlanet : function(locationData) {
		return new Imperion.Data.LocationPlanet(locationData);
	},
	
	/**
	 * returns an instance from a comet location object
	 * 
	 * @param Object locationData
	 * 
	 * @return Imperion.Data.LocationComet
	 */
	locationComet : function(locationData) {
		return new Imperion.Data.LocationComet(locationData);
	},
	
	/**
	 * returns an instance from a debris location object
	 * 
	 * @param Object locationData
	 * 
	 * @return Imperion.Data.LocationDebris
	 */
	locationDebris : function(locationData) {
		return new Imperion.Data.LocationDebris(locationData);
	},
	
	/**
	 * returns a location object by type
	 * 
	 * @param int locationType
	 * @param Object locationData
	 * 
	 * @return Imperion.Data.Location
	 */
	locationByType : function(locationType, locationData) {
		switch(locationType) {
			case LOCATION_TYPE_PLANET:
				return this.locationPlanet(locationData);
				break;
			case LOCATION_TYPE_DEBRIS:
				return this.locationDebris(locationData);
				break;
			case LOCATION_TYPE_COMET:
				return this.locationComet(locationData);
				break;
		}
	}
});
Imperion.Data.Galaxy = new Class({
	Implements : [Options],
	/**
	 * options for context menu
	 * 
	 * @var Object
	 */
	options : {
		width: 0,
		height: 0,
		halfWidth : 0,
		halfHeight : 0,
		blockWidth : 0,
		blockHeight: 0
	},
	
	/**
	 * planet id
	 * 
	 * @var int
	 */
	gType : 0,
	
	/**
	 * prepare the object
	 * 
	 * @param int gType
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(gType, options) {
		if(!gType) {
			throw '// ERROR HANDLING gTypeNotSet';
		}
		this.gType = gType;
		this.setOptions(options);
	}
});
Imperion.Data.Location = new Class({
	Implements : [Options],
	
	/**
	 * location options
	 * 
	 *  @var Object
	 */
	options : {
		id : 0,
		type : LOCATION_TYPE_UNDEFINED,
		name : 'UNDEFINED'
	},
	
	/**
	 * prepare the location
	 * 
	 * @param Object locationData
	 * 
	 * @return void
	 */
	initialize : function(locationData) {
		//
		this.setOptions(locationData);
	},
	
	/**
	 * get id
	 * 
	 * @return int
	 */
	getId : function() {
		return this.options.id;
	},
	
	/**
	 * get id
	 * 
	 * @return int
	 */
	getType : function() {
		return this.options.type;
	},
	
	/**
	 * get location name
	 * 
	 * @return string
	 */
	getName : function() {
		return this.options.name;
	}
});

Imperion.Data.LocationSystem = new Class({
	Extends : Imperion.Data.Location,
	
	/**
	 * location options
	 * 
	 *  @var Object
	 */
	options : {
		type : LOCATION_TYPE_SYSTEM
	}
});

Imperion.Data.LocationPlanet = new Class({
	Extends : Imperion.Data.Location,
	
	/**
	 * location options
	 * 
	 *  @var Object
	 */
	options : {
		type		: LOCATION_TYPE_PLANET,
		planetType	: 'undefined',
		invasion	: false
	},
	
	/**
	 * return the planet type
	 * 
	 * @return String
	 */
	getPlanetType : function() {
		return this.options.planetType;
	}
});

Imperion.Data.LocationDebris = new Class({
	Extends : Imperion.Data.Location,
	
	/**
	 * location options
	 * 
	 *  @var Object
	 */
	options : {
		type		: LOCATION_TYPE_DEBRIS,
		parentType	: LOCATION_TYPE_UNDEFINED
	}
});

Imperion.Data.LocationComet = new Class({
	Extends : Imperion.Data.Location,
	
	/**
	 * location options
	 * 
	 *  @var Object
	 */
	options : {
		type : LOCATION_TYPE_COMET
	}
});
Imperion.Data.Planet = new Class({
	Implements : [Options],
	/**
	 * options for context menu
	 * 
	 * @var Object
	 */
	options : {
		type : 'terran'
	},
	
	/**
	 * planet id
	 * 
	 * @var int
	 */
	id : 0,
	
	/**
	 * prepare the object
	 * 
	 * @param int planetId
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(planetId, options) {
		if(!planetId) {
			throw '// ERROR HANDLING planetIdNotSet';
		}
		this.id = planetId;
		this.setOptions(options);
	},
	
	/**
	 * return the planet type
	 * 
	 * @type {String}
	 */
	getPlanetType : function() {
		return this.options.type;
	}
});
Imperion.Data.PlanetList = new Class({
	
	/**
	 * storage with planets
	 * 
	 * @var Hash
	 */
	planets : null,
	
	/**
	 * prepare the list
	 * 
	 * @return void
	 */
	initialize: function() {
		this.planets = new Hash();
	},
	
	/**
	 * update the planet list
	 * 
	 * @param	{Object}	planets
	 * 
	 * @return void
	 */
	update : function(planets) {
		$H(planets).each(function(galaxy, galaxyId) {
			$splat(galaxy.planets).each(function(planetData) {
				var planet = Imperion.Data.Factory.locationPlanet({
					id : planetData.id_planet,
					planetType : planetData.type
				});
				this.addPlanet(planetData.id_planet, planet);
			}, this);
		}, this);
	},
	
	/**
	 * add a planet
	 * 
	 * @param int planetId
	 * @param Imperion.Data.LocationPlanet planet
	 * 
	 * @return void
	 */
	addPlanet : function(planetId, planet) {
		if(!this.planets.has(planetId)) {
			this.planets.set(planetId, planet);
		}
	}
});
Imperion.Data.User = new Class({
	Implements : [Options],
	/**
	 * options for context menu
	 * 
	 * @var Object
	 */
	options : {
		kind		: '',
		seperator	: '.',
		decimal		: ',',
		offset		: 0,
		timeFormat	: '%H:%M:%S',
		dateFormat	: '%d.%m.%y',
		allianceId  : 0
	},
	
	/**
	 * user id
	 * 
	 * @var int
	 */
	id : 0,
	
	/**
	 * prepare the object
	 * 
	 * @param int userId
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(userId, options) {
		if(!userId) {
			throw '// ERROR HANDLING userIDNoTSet';
		}
		this.id = userId;
		this.setOptions(options);
	},
	
	/**
	 * get the kind
	 * 
	 * @type {String}
	 */
	getKind : function() {
		return this.options.kind.toUpperCase();
	},
	
	/**
	 * get the timezone offset
	 * 
	 * @returns	{Number}
	 */
	getOffset : function() {
		return this.options.offset;
	},
	
	/**
	 * get the time format
	 * 
	 * @returns	{String}
	 */
	getTimeFormat : function() {
		return this.options.timeFormat;
	},
	
	/**
	 * get the time format
	 * 
	 * @returns	{String}
	 */
	getDateFormat : function() {
		return this.options.dateFormat;
	},

	/**
	 * get the allianceId
	 *
	 * @returns	{String}
	 */
	getAllianceId : function() {
		return this.options.allianceId;
	},

	/**
	 * sets the allianceId
	 *
	 * @param newAllianceId
	 */
	setAllianceId : function(newAllianceId){
		this.options.allianceId = newAllianceId;
	},
	
	/**
	 * format a number with user specific seperator
	 * 
	 * @param int number
	 * 
	 * @return String 
	 */
	formatNumber : function(number) {
		var testRegExp = new RegExp('(-?[0-9]+)([0-9]{3})');
		number = "" + number;
		while(testRegExp.test(number)) {
			number = number.replace(testRegExp, '$1'+this.options.seperator+'$2');
		}
		return number;
	},
	
	/**
	 * unformat a number from user specific seperator
	 * 
	 * @param int number
	 * 
	 * @return int
	 */
	unformatNumber : function(number) {
		var testRegExp = new RegExp('\\'+this.options.seperator, 'g');
		number = "" + number;
		return number.replace(testRegExp, '').toInt();
	},
	
	/**
	 * format a timestamp
	 * 
	 * @param int time
	 * 
	 * @return string
	 */
	formatDuration : function(time) {
		var hours = parseInt(time / 3600);
		if (hours < 10)
			hours = '0' + hours;
		var minutes = parseInt((time - (hours * 3600)) / 60);
		if (minutes < 10)
			minutes = '0' + minutes;
		var seconds = time % 60;
		if (seconds < 10)
			seconds = '0' + seconds;
		return hours + ':' + minutes + ':' + seconds;
	}
});
Imperion.Interface.Dialog.Factory = new Class.Singleton(
	/** @lends Imperion.Interface.Dialog.Factory.prototype */
	{
		Implements 	: [],

		/**
		 * The storage object
		 * 
		 * @type Object
		 */
		storage : {
			handle : null
		},
		
		/**
		 * prepare
		 *
		 * @class		Dialog Factory
		 *
		 * @constructs
		 */
		initialize : function() {
			this.storage = {
				handle : null
			};
		},
		
		/**
		 * Returns the Dialog Handle
		 * 
		 * @returns {Imperion.Interface.Dialog.Handle}
		 */
		handle : function() {
			if(!this.storage.handle) {
				this.storage.handle = new Imperion.Interface.Dialog.Handle(Imperion.Util.Factory.globalEvents());
			}
			return this.storage.handle;
		},

		/**
		 * Return the Default Dialog
		 * 
		 * @param	{String}	dialogId		The Dialog ID
		 * @param	{Object}	dialogHandler	The Dialog Handler
		 * 
		 * @returns {Imperion.Interface.Dialog.Default}
		 */
		dialog : function(dialogId, dialogHandler){
			return new Imperion.Interface.Dialog.Default(dialogId, dialogHandler);
		}
	}
);
Imperion.Interface.Dialog.Handle = new Class(
	/** @lends Imperion.Interface.Dialog.Modal.prototype */
	{
		Implements : [Imperion.Event, Imperion.Module, Imperion.Util.Class],

		/**
		 * All Dialogs
		 * 
		 * @type Object
		 * @default Empty Object
		 */
		dialogs : $H(),

		/**
		 * The Position [1-4] of the Dialog (Index)
		 * 
		 * @type Number
		 * @default 1
		 */
		position: 1,
		
		/**
		 * The Active Dialog Instance
		 * 
		 * @type Object
		 * @default null
		 */
		activeDialog : null,
		
		/**
		 * global events instance
		 * 
		 * @type	Imperion.Util.GlobalEvents
		 */
		globalEvents : null,
		
		/**
		 * Initialize the Handle
		 * 
		 * @class The Handle for all Dialogs
		 *
		 * @param	{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(globalEvents) {
			this.globalEvents = globalEvents;
			this.globalEvents.attach('dialogHandle', this);
			
			
			this.dialogs = $H();
			this.activeDialog	= null;
		},

		/**
		 * check if checkpoint is resolved
		 * 
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'ResearchCategory':
				case 'ResearchAttribute':
					if(this.dialogs.has('research')) {
						return this.dialogs.get('research').contexts.get('research').isCheckpointResolved(ident, params, questObj);
					}
					return true;
					break;
				case 'FleetTransportShips':
				case 'FleetTransportShowMission':
				case 'FleetTransportSelectMission':
				case 'FleetTransportResource':
				case 'FleetTransportSendFleet':
					if(this.dialogs.has('fleetTransport')) {
						return this.dialogs.get('fleetTransport').contexts.get('fleetTransport').isCheckpointResolved(ident, params, questObj);
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.Dialog.Handle ident not exist';
					break;
			}
		},
		
		/**
		 * activate checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'ResearchCategory':
				case 'ResearchAttribute':
					var context = this.dialogs.get('research').contexts.get('research');
					context.activateCheckpoint(ident, params, questObj);
					break;
				case 'FleetTransportShips':
				case 'FleetTransportShowMission':
				case 'FleetTransportSelectMission':
				case 'FleetTransportResource':
				case 'FleetTransportSendFleet':
					if(this.dialogs.has('fleetTransport')) {
						var context = this.dialogs.get('fleetTransport').contexts.get('fleetTransport');
						context.activateCheckpoint(ident, params, questObj);
					}
					break;
				default:
					throw 'Imperion.Interface.Dialog.Handle ident not exist';
					break;
			}
		},
		
		/**
		 * remove checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Boolean}			refreshQuests
		 * 
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			switch(ident) {
				case 'ResearchCategory':
				case 'ResearchAttribute':
					if(this.dialogs.has('research')) {
						var context = this.dialogs.get('research').contexts.get('research');
						context.removeCheckpoint(ident);
					}
					break;
				case 'FleetTransportShips':
				case 'FleetTransportShowMission':
				case 'FleetTransportSelectMission':
				case 'FleetTransportResource':
				case 'FleetTransportSendFleet':
					if(this.dialogs.has('fleetTransport')) {
						var context = this.dialogs.get('fleetTransport').contexts.get('fleetTransport');
						context.removeCheckpoint(ident);
					}
					break;
				default:
					throw 'Imperion.Interface.Dialog.Handle ident not exist';
					break;
			}
		},
		
		/**
		 * refresh dialog from backend
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_refresh : function(params) {
			var ident = params.ident;
			//check if dialog exist
			if(this.dialogs.has(ident)) {
				//check if context factory exist
				if(Imperion.Interface.Dialog.Context.Factory[ident]) {
					var context = Imperion.Interface.Dialog.Context.Factory[ident](this.dialogs.get(ident));
					context.showContext();
				}
			}
		},
		
		/**
		 * listener for esc key pressed
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		escPressed : function(params) {
			if (this.activeDialog && Imperion.Interface.Factory.eventBox().eventBoxOpen === false) {
				this.activeDialog.closeDialog();
			}
		},
		
		/**
		 * create the Dialog
		 * 
		 * @param {String}	dialogId	The Unique Dialog Id
		 */
		createDialog : function(dialogId){
			var dialog = Imperion.Interface.Dialog.Factory.dialog(dialogId, this);
			if (!this.activeDialog) {
				this.setActiveDialog(dialog);
			}
			this.dialogs.set(dialogId, dialog);
		},

		/**
		 * Get a Dialog by its ID
		 * 
		 * @param {String}	dialogId
		 * 
		 * @returns {Imperion.Interface.Dialog.Root}	THe Dialog
		 */
		getDialog : function(dialogId) {
			if (!this.dialogs.has(dialogId)) {
				this.createDialog(dialogId);
			}
			return this.dialogs.get(dialogId);
		},
		
		/**
		 * check if dialog exists
		 * 
		 * @param	{String}	dialogId
		 * 
		 * @returns	{Boolean}
		 */
		dialogExist : function(dialogId) {
			return this.dialogs.has(dialogId);
		},

		/**
		 * remove the Dialog by its ID
		 * 
		 * @param {String}	dialogId
		 * 
		 * @returns {Void}
		 */
		removeDialog : function(dialogId){
			if(this.activeDialog !== null && this.activeDialog.id === dialogId) {
				
			}
			this.dialogs.erase(dialogId);
			if (1 <= this.dialogs.getLength()) {
				this.activeDialog = this.dialogs.get(this.dialogs.getKeys()[0]);

				this.dialogs.each(function(dialog) {
					if (dialog.elements.container.style.zIndex > this.activeDialog.elements.container.style.zIndex) {
						this.activeDialog = dialog;
					}
				}.bindNew(this));
			} else {
				this.activeDialog = null;
			}
		},

		/**
		 * Reset a Context
		 * 
		 * @param {String}	contextId
		 * 
		 * @returns {Void}
		 */
		clearContext : function(dialog, contextId){
			if (dialog.contexts[contextId]) {
				dialog.contexts[contextId].cleanContext();
				dialog.contexts.erase(contextId);
			}
		},

		/**
		 * Set the activeDialog property
		 * 
		 * @param {Object}	dialog	The Dialog to set active
		 * 
		 * @returns {Void}
		 */
		setActiveDialog : function(dialog){
			if(this.activeDialog !== null) {
				this.activeDialog.hasFocus = false;
			}
			this.activeDialog = dialog;
			this.activeDialog.hasFocus = true;
		},

		/**
		 * Get the active Dialog
		 * 
		 * @returns {Imperion.Interface.Dialog.Root}	The active Dialog
		 */
		getActiveDialog : function(){
			return this.activeDialog;
		},

		/**
		 * Default event Handler
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'player_context_menu':
					if(params.get('id') !== 'NaN') {
						this.showPlayerContextMenu(eventObject, params.get('id'));
					}
					return false;
					break;
				case 'planet_context_menu':
					if(params.get('id') !== 'NaN') {
						this.showPlanetContextMenu(eventObject, params.get('id'));
					}
					return false;
					break;
				case 'show_dialog':
					var dialogId  = params.get('dialogId'),
						contextId = params.get('contextId'),
						entityId  = params.get('entityId') || '',
						dialog    = null,
						context   = null;

					eventObject.stop();
					
					if (this.activeDialog.isModal()) {
						dialog  = this.activeDialog;
					} else {
						dialog  = this.getDialog(dialogId+entityId);
					}

					if(contextId !== 'allianceProfile'){
						context = Imperion.Interface.Dialog.Context.Factory.getContextByType(contextId, dialog, entityId);
						context.showContext();
					}else{
						if(this.getUser().getAllianceId() == entityId){
							var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_profile');
							var profile = Imperion.Interface.Dialog.Context.Factory.allianceProfile(dialog, this.getUser().getAllianceId(),true);
							var forum = Imperion.Interface.Dialog.Context.Factory.forumIndex(dialog,1);
							profile.showContext();
						}else{
							context = Imperion.Interface.Dialog.Context.Factory.getContextByType(contextId, dialog, entityId);
							context.showContext();
						}
					}

					break;
			}
		}
	}
);
Imperion.Interface.Dialog.Root = new Class(
	/** @lends Imperion.Interface.Dialog.Root.prototype	*/
	{
	    Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Observable, Options],

	    /**
	     * options
	     *
	     * @type Object
	     * @default null
	     */
	    options : {
	    },

	    /**
	     * The Dialog Id
	     *
	     * @type String
	     * @default empty string
	     */
	    id : '',

	    /**
	     * The Dialog handler
	     *
	     * @type Object
	     * @default null
	     */
	    handle : null,

	    /**
	     * size class
	     *
	     * @type	String
	     */
	    currentSize : 'big',

	    /**
	     * The Context Store
	     *
	     * @type Object
	     * @default empty object
	     */
	    contexts : {},

	    /**
	     * The Template for the Dialog
	     *
	     * @type String
	     * @default 'Dialog'
	     */
	    template : 'Dialog',

	    /**
	     * THe z-index of the Dialog
	     *
	     * @type Number
	     * @default 8000
	     */
	    zIndex : 8000,

	    offset : {
	    	top  : 25,
	    	left : 25
	    },

	    /**
	     * The Modal-State of the Dialog
	     *
	     * @type Boolean
	     * @default false
	     */
	    modal  : false,

	    /**
	     * The Drag Element
	     *
	     * @type Object
	     * @default null
	     */
	     drag : null,

	    /**
	     * flag if dialog is focused
	     *
	     * @type	Boolean
	     */
	    hasFocus : false,

		/**
		 * Object with help section and help id
		 *
		 * @type	Boolean
		 */
		help : {},

		/**
		 *
		 * Flag if dialog should not get focused on showDialog()
		 *
		 * @type	Boolean
		 */
		doNotFocusOnShowDialog : false,

	    /**
	     * base class for dialogs
	     *
	     * @class Dialogs for Dynamic and Static contexts
	     *
	     * @param {String|Number}	id		The ID of the Context
	     * @param {Object}			handle	The dialg handler
	     * @param {Object}			options	Dialog Options
	     *
	     * @constructs
	     */
	    initialize : function(id, handle, options) {
			this.setOptions(options);
			this.loadElements();
			this.setId(id);
			this.handle = handle;
			this.contexts = $H({});
			this.currentSize = 'big';
			this.elements.container.setStyle('zIndex', this.zIndex);
		},

		/**
		 * set the id of the context
		 *
		 * @param {String}	[id]	the context id
		 *
		 * @returns {void}
		 */
		setId: function(id){
			if ('string' === $type(id)) {
				this.id = id;
			} else {
				this.id = 'dialog_'+Math.ceil(Math.random()*10000000);
			}
			this.elements.container.addClass(this.id);
		},

		/**
		 * Set the content of the Dialog
		 * @param {String|Element} content The content for the Dialog
		 *
		 * @returns {void}
		 */
		setContent : function(content) {
			switch($type(content)) {
				case 'element':
					content.inject(this.elements.content);
					break;
				default:
					this.elements.content.set('html', content);
					break;
			}
		},

		/**
		 * notify each registered context to hide
		 *
		 * @returns {void}
		 */
		hideAllContext : function() {
			this.notify({}, 'onHideContext');
		},

		/**
		 * Set Tabs for the Dialog
		 */
		setTabs : function() {
			this.elements.titleBar.removeClass('hideContainer');
			this.elements.tabList.removeClass('hideContainer');
		},

		/**
		 * Make the Dialog Dragable
		 */
		setDragable : function() {
			if (this.modal) {
				// never make a modal dialog dragable
				return
			}
			this.drag = new Drag(this.elements.container, {
				handle: this.elements.titleBar
			});
			this.elements.titleBar.addClass('dragHandle');
		},

		setModal : function() {
			if (this.drag) {
				// if a dialog becomes modal and a drag exists, detach it
				//this.drag.detach();
				//delete this.drag;
			}
			this.zIndex = 9000;
			this.modal = true;
			this.loadBlackLayer();
		},

		isModal : function(){
			return this.modal;
		},

		/**
		 * show the dialog
		 *
		 * @returns {void}
		 */
		showDialog : function() {
			if (this.elements.container.hasClass('hideContainer')) {
				this.elements.container.removeClass('hideContainer');
				this.elements.container.position({
					offset   : {x: -(this.elements.container.getSize().x/2), y: 0},
					position : 'topCenter',
					minimum  : {x: 0, y: 30}
				});

				if (!this.isModal()) {
					var topLeft = this.elements.container.getStyles('top', 'left');
					this.elements.container.setStyles({
						top : topLeft.top.toInt()  + (this.offset.top  * this.handle.position),
						left: topLeft.left.toInt() + (this.offset.left * this.handle.position)
					});
					if (0 === ++this.handle.position % 4) {
						this.handle.position = 1;
					}
				}
			}
			this.elements.container.removeClass('hideContainer');
			if (this.doNotFocusOnShowDialog === false) {
				this.focusDialog();
			}
		},

		/**
		 * Do not focus the dialog if showDialog is called
		 * Needed for the alliance forum so that the thread view
		 * can be refreshed without being focused
		 *
		 * @param	boolean	doNotFocus
		 * @returns	void
		 */
		setDoNotFocusOnShowDialog : function(doNotFocusOnShowDialog) {
			this.doNotFocusOnShowDialog = doNotFocusOnShowDialog;
		},

		/**
		 * Focus the Dialog
		 *
		 * @returns {void}
		 */
		focusDialog : function() {
			var activeDialog = this.handle.getActiveDialog();
			activeZ = activeDialog.elements.container.getStyle('zIndex').toInt();
			this.elements.container.setStyle('zIndex', ++activeZ);
			if (this.modal && this.elements.blackLayer) {
				this.elements.blackLayer.removeClass('hideContainer');
				this.elements.blackLayer.setStyle('zIndex', --activeZ);
			}
			this.handle.setActiveDialog(this);
		},

		/**
		 * Close the Dialog, remove the dialog from the handle
		 *
		 * @returns {void}
		 */
		closeDialog : function() {
			this.handle.removeDialog(this.id);
			if (this.elements.blackLayer) {
				this.elements.blackLayer.addClass('hideContainer');
			}
			Imperion.Interface.Gui.Factory.tooltip().hide();
			Imperion.Interface.Gui.Factory.htmltooltip().hide();
			this.clean();
		},

		/**
		 * Opens the defined help dialog
		 *
		 * @returns {void}
		 */
		helpDialog : function() {
			this.showHelpDialog(this.help.section, this.help.id, 'SMALL');
		},

		/**
		 * Cleans the remains of the Dialog: notify everybody related to call 'onCleanUp' and cleans itself
		 *
		 * @param {Object}	param	param description
		 *
		 * @returns {void}
		 */
		clean : function() {
			this.notify({}, 'onCleanUp');
			this.cleanUp();
		},

		/**
		 * Show the Close button
		 *
		 * @returns {void}
		 */
		showCloseButton : function() {
			this.elements.titleBar.closeButton.removeClass('hideContainer');
		},

		/**
		 * Show the help button
		 *
		 * @param	{Object}	Object with help section and help id
		 * @returns {void}
		 */
		showHelpButton : function(help) {
			this.help	= help;
			this.elements.titleBar.helpButton.removeClass('hideContainer');
		},

		/**
		 * Hide the Close button
		 *
		 * @returns {void}
		 */
		hideHelpButton : function() {
			this.help = {};
			this.elements.titleBar.helpButton.addClass('hideContainer');
		},

		/**
		 * Set the Size of the Dialog
		 *
		 * @returns {void}
		 */
		setSize : function (size) {
			this.elements.wrap.removeClass(this.currentSize);
			this.currentSize = size;
			this.elements.wrap.addClass(this.currentSize);
		},

		/**
		 * Load the Black Layer for Modal Dialogs
		 *
		 * @returns {void}
		 */
		loadBlackLayer : function() {
			this.elements.blackLayer = this.getClonedTemplate('BlackLayer');
			this.elements.blackLayer.inject(document.body);
		},

		/**
		 * Removes all Contexts.
		 *
		 * @returns {Void}
		 */
		clearContexts : function() {
			this.contexts.each(function(context) {
				context.onCleanUp();
			});
		},

		/**
		 * generic eventhandler
		 *
		 * @param {Object}	eventObject	The Event Object
		 * @param {Object}	params		Parameters
		 *
		 * @returns {Boolean}
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'closeButton_click':
					eventObject.preventDefault();
					new Event(eventObject).stop();
					this.closeDialog();
					break;
				case 'helpButton_click':
					eventObject.preventDefault();
					new Event(eventObject).stop();
					this.helpDialog();
					break;
				case 'titleBar_mousedown':
					this.elements.container.addClass('drag');
					this.elements.titleBar.addClass('drag');
					return true;
					break;
				case 'titleBar_mouseup':
					this.elements.container.removeClass('drag');
					this.elements.titleBar.removeClass('drag');
					return true;
					break;
				case 'focus':
					this.focusDialog();
					return true;
					break;
			}
			return false;
		},

		/**
		 * load DOM-Elements
		 *
		 * @returns {Void}
		 */
		loadElements : function() {
			this.elements.container = this.getClonedTemplate(this.template);

			this.elements.content = this.elements.container.getElement('.dialogContent');

			this.elements.wrap = this.elements.container.getElement('.wrap');

			this.elements.titleBar = this.elements.container.getElement('.tabs');
			this.addEvent('mousedown', this.elements.titleBar, $H({
				action : 'titleBar_mousedown'
			}));

			this.addEvent('mouseup', this.elements.titleBar, $H({
				action : 'titleBar_mouseup'
			}));

			this.elements.blackLayer = this.getClonedTemplate('BlackLayer');
			this.elements.blackLayer.addClass('Imperion-Interface-Dialog-BlackLayer');
			this.elements.blackLayer.inject(this.elements.wrap);

			this.elements.toolBar = this.elements.container.getElement('.tools');

			this.elements.titleBar.closeButton = this.elements.container.getElement('.closeDialog');
			this.addEvent('click', this.elements.titleBar.closeButton, $H({
				action : 'closeButton_click'
			}));

			this.elements.titleBar.helpButton = this.elements.container.getElement('.helpDialog');
			this.addEvent('click', this.elements.titleBar.helpButton, $H({
				action : 'helpButton_click'
			}));

			this.elements.tabList = this.elements.titleBar.getElement('ul');

			this.elements.container.inject(document.body);

			this.addEvent('mousedown', this.elements.container, $H({
				action: 'focus'
			}));
		}
	}
);
Imperion.Interface.Dialog.Default = new Class(
	/** @lends Imperion.Interface.Dialog.Default.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Root,
	    Implements : [],
	    
	    /**
		 * prepare the unit
		 *
		 * @augments	Imperion.Interface.Dialog.Root
		 * @class		The Default Dialog Class
		 * 
		 * @param		{Object}	id		id of the dialog
		 * @param		{String}	handle	handle of the dialog
		 *
		 * @constructs
		 */
	    initialize : function(id, handle) {
	    	options = null;
			this.parent(id, handle, options);
		}
	}
);
Imperion.Interface.Dialog.Context.Factory = new Class.Singleton(
	/** @lends Imperion.Interface.Dialog.Context.Factory.prototype */
	{
		Implements 	: [],

		/**
		 * Returns a Context by the Type
		 *
		 * @param {String}	type	The context type
		 * @param {Object}	dialog	THe Dialog Object
		 * @param {String}	id		Unique ID of the Context
		 *
		 * @returns {Object}
		 */
		getContextByType : function(type, dialog, id) {
			return this[type](dialog, id);
		},

		/**
		 * Returns a Tab
		 *
		 * @param {Object}	context	The Context of the Tab
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Tab}
		 */
		tab : function(context){
			return new Imperion.Interface.Dialog.Context.Tab(context);
		},

		/**
		 * forum
		 *
		 * @param	{Imperion.Interface.Dialog.Handle}	dialog
		 * @param	{String}							type
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Forum.Index}
		 */
		forumIndex : function(dialog, type) {
			if(!dialog.contexts['forum_' + type]) {
				dialog.contexts['forum_' + type] = new Imperion.Interface.Dialog.Context.Forum.Index(dialog, type);
			}
			return dialog.contexts['forum_' + type];
		},

		/**
		 * thread
		 *
		 * @param	{Imperion.Interface.Dialog.Handle}	dialog
		 * @param	{Number}							threadId
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Forum.Thread}
		 */
		forumThread : function(dialog, threadId) {
			if(!dialog.contexts['thread_' + threadId]) {
				dialog.contexts['thread_' + threadId] = new Imperion.Interface.Dialog.Context.Forum.Thread(dialog, threadId);
			}
			return dialog.contexts['thread_' + threadId];
		},

		/**
		 * FleetSummary Context
		 *
		 * @param	{String}	type			The Type of Summary
		 * @param	{Object}	dialog			The dialog to bin the context to
		 * @param	{Number}	annexId			id if info for annex planet
		 *
		 * @returns {Imperion.Interface.Dialog.Context.FleetSummary}
		 */
		fleetSummary : function(type, dialog, annexId) {
			if(!dialog.contexts['fleetSummary']) {
				dialog.contexts['fleetSummary'] = new Imperion.Interface.Dialog.Context.FleetSummary(type, dialog,  Imperion.Util.Factory.globalEvents(), annexId);
			} else {
				dialog.contexts['fleetSummary'].loadUrl(null, {filter: type, idannex: annexId});
			}
			return dialog.contexts['fleetSummary'];
		},

		/**
		 * FleetTransport Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 * @param {Object}	options		Context Options
		 *
		 * @returns {Imperion.Interface.Dialog.Context.FleetTransport}
		 */
		fleetTransport : function(dialog, options) {
			if(!dialog.contexts.fleetTransport) {
				dialog.contexts.fleetTransport = new Imperion.Interface.Dialog.Context.FleetTransport(dialog, options);
			}
			return dialog.contexts.fleetTransport;
		},

		/**
		 * simulator Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 * @param {Object}	options		Context Options
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Simulator}
		 */
		simulator : function(dialog, options) {
			if(!dialog.contexts.simulator) {
				dialog.contexts.simulator = new Imperion.Interface.Dialog.Context.Simulator(dialog, options);
			}
			return dialog.contexts.simulator;
		},

		/**
		 * Report Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 * @param {String}	id			The unique ID for the Report
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Report}
		 */
		report : function(dialog, id) {
			if (dialog.isModal()) {
				if (!dialog.contexts.report) {
					dialog.contexts.report = new Imperion.Interface.Dialog.Context.Report(dialog, id);
				} else {
					dialog.contexts.report.update('report', id);
				}
				return dialog.contexts.report;
			}
			if (!dialog.contexts['report'+id]) {
				dialog.contexts['report'+id] = new Imperion.Interface.Dialog.Context.Report(dialog, id);
			}
			return dialog.contexts['report'+id];
		},

		/**
		 * ReportList Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 * @param	{Imperion.Data.Location}	target
		 *
		 * @returns {Imperion.Interface.Dialog.Context.ReportList}
		 */
		reportList : function(dialog, target) {
			var rlType = 'reportList';
			if(typeof target === 'undefined') {
				target = null;
			}
			else {
				rlType += target.getType() + target.getId();
			}


			if(!dialog.contexts[rlType]) {
				dialog.contexts[rlType] = new Imperion.Interface.Dialog.Context.ReportList(dialog, Imperion.Util.Factory.globalEvents(), target);
			}
			return dialog.contexts[rlType];
		},
		
		/**
		 * ReportArchive Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 * @param	{Imperion.Data.Location}	target
		 *
		 * @returns {Imperion.Interface.Dialog.Context.ReportArchive}
		 */
		reportArchive : function(dialog, target) {
			var rlType = 'reportArchive';
			if(typeof target === 'undefined') {
				target = null;
			}
			else {
				rlType += target.getType() + target.getId();
			}

			if(!dialog.contexts[rlType]) {
				dialog.contexts[rlType] = new Imperion.Interface.Dialog.Context.ReportArchive(dialog, Imperion.Util.Factory.globalEvents(), target);
			}
			return dialog.contexts[rlType];
		},

		/**
		 * Stream report Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Stream.Report}
		 */
		streamReport : function(dialog) {
			if(!dialog.contexts.streamReport) {
				dialog.contexts.streamReport = new Imperion.Interface.Dialog.Context.Stream.Report(dialog);
			}
			return dialog.contexts.streamReport;
		},

		/**
		 * Stream report starred Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Stream.ReportStarred}
		 */
		streamReportStarred : function(dialog) {
			if(!dialog.contexts.streamReportStarred) {
				dialog.contexts.streamReportStarred = new Imperion.Interface.Dialog.Context.Stream.ReportStarred(dialog);
			}
			return dialog.contexts.streamReportStarred;
		},

		/**
		 * Stream report story Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Stream.ReportStory}
		 */
		streamReportStory : function(dialog) {
			if(!dialog.contexts.streamReportStory) {
				dialog.contexts.streamReportStory = new Imperion.Interface.Dialog.Context.Stream.ReportStory(dialog);
			}
			return dialog.contexts.streamReportStory;
		},

		/**
		 * Report Detail Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Report.ReportDetail}
		 */
		reportDetail : function(dialog, reportId, elementReportData) {
			if (!dialog.contexts['reportDetail'+reportId]) {
				dialog.contexts['reportDetail'+reportId] = new Imperion.Interface.Dialog.Context.Report.ReportDetail(dialog, reportId, elementReportData);
			}
			return dialog.contexts['reportDetail'+reportId];
		},

		/**
		 * Report Story Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Report.ReportStory}
		 */
		reportStory : function(dialog, reportId) {
			if (!dialog.contexts['reportDetail'+reportId]) {
				dialog.contexts['reportDetail'+reportId] = new Imperion.Interface.Dialog.Context.Report.ReportStory(dialog, reportId);
			}
			return dialog.contexts['reportDetail'+reportId];
		},


		/**
		 * Research Lab Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.ResearchLab}
		 */
		research : function(dialog) {
			if(!dialog.contexts.research) {
				dialog.contexts.research = new Imperion.Interface.Dialog.Context.ResearchLab(dialog);
			}
			return dialog.contexts.research;
		},

		/**
		 * Hangar Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Hangar}
		 */
		hangar : function(dialog) {
			if(!dialog.contexts.hangar) {
				dialog.contexts.hangar = new Imperion.Interface.Dialog.Context.Hangar(dialog);
			}
			return dialog.contexts.hangar;
		},

		/**
		 * Ship Yard Context
		 *
		 * @param	{Object}	dialog			The dialog to bind the context to
		 * @param	{String}	recycleType
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Recycle}
		 */
		recycle : function(dialog, recycleType) {
			if(!dialog.contexts[recycleType]) {
				dialog.contexts[recycleType] = new Imperion.Interface.Dialog.Context.Recycle(dialog, recycleType);
			}
			return dialog.contexts[recycleType];
		},

		/**
		 * Weapone Factory Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.WeaponFactory}
		 */
		weaponfactory : function(dialog) {
			if(!dialog.contexts.weaponfactory) {
				dialog.contexts.weaponfactory = new Imperion.Interface.Dialog.Context.WeaponFactory(dialog);
			}
			return dialog.contexts.weaponfactory;
		},

		/**
		 * Plus Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Plus}
		 */
		plus : function(dialog) {
			if(!dialog.contexts.plus) {
				dialog.contexts.plus = new Imperion.Interface.Dialog.Context.Plus(dialog);
			}
			return dialog.contexts.plus;
		},

		/**
		 * Help Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Help}
		 */
		help : function(dialog) {
			if(!dialog.contexts.help) {
				dialog.contexts.help = new Imperion.Interface.Dialog.Context.Help(dialog);
			}
			return dialog.contexts.help;
		},

		/**
		 * Help Center Context
		 *
		 * @param	{Object}	dialog			The dialog to bind the context to
		 * @param	{String}	dialogSize		Starting size of dialog
		 * @params	{Object}	sectionParams	request help section parameters
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Help}
		 */
		helpCenter : function(dialog, dialogSize, sectionParams) {
			if(!dialog.contexts.helpCenter) {
				dialog.contexts.helpCenter = new Imperion.Interface.Dialog.Context.HelpCenter(dialog, dialogSize, sectionParams);
			}
			return dialog.contexts.helpCenter;
		},

		/**
		 * PlayerStatistic Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 *
		 * @returns {Imperion.Interface.Dialog.Context.PlayerStatistics}
		 */
		playerStatistics : function(dialog, statisticType) {
			if(!dialog.contexts.playerStatistics) {
				dialog.contexts.playerStatistics = new Imperion.Interface.Dialog.Context.PlayerStatistics(dialog, statisticType);
			}
			return dialog.contexts.playerStatistics;
		},

		/**
		 * create a account context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Account}
		 */
		account : function(dialog) {
			if(!dialog.contexts.account) {
				dialog.contexts.account = new Imperion.Interface.Dialog.Context.Account(dialog);
			}
			return dialog.contexts.account;
		},

		/**
		 * create the annexion context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Annexion}
		 */
		annexion : function(dialog) {
			if(!dialog.contexts.annexion) {
				dialog.contexts.annexion = new Imperion.Interface.Dialog.Context.Annexion(dialog);
			}
			return dialog.contexts.annexion;
		},

		/**
		 * change password context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.ChangePassword}
		 */
		changePassword : function(dialog) {
			if(!dialog.contexts.changePassword) {
				dialog.contexts.changePassword = new Imperion.Interface.Dialog.Context.ChangePassword(dialog);
			}
			return dialog.contexts.changePassword;
		},

		/**
		 * delete account context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.DeleteAccount}
		 */
		deleteAccount : function(dialog) {
			if(!dialog.contexts.deleteAccount) {
				dialog.contexts.deleteAccount = new Imperion.Interface.Dialog.Context.DeleteAccount(dialog);
			}
			return dialog.contexts.deleteAccount;
		},

		/**
		 * Player Profile Context
		 *
		 * @param {Object}	dialog		The dialog to bind the context to
		 * @param {String}	id			The unique ID for the Profile
		 *
		 * @returns {Imperion.Interface.Dialog.Context.Profile}
		 */
		profile : function(dialog, id) {
			if (dialog.isModal()) {
				if (!dialog.contexts.report) {
					dialog.contexts.profile = new Imperion.Interface.Dialog.Context.Profile(dialog, id);
				} else {
					dialog.contexts.profile.update('profile', id);
				}
				return dialog.contexts.profile;
			}
			if (!dialog.contexts['profile'+id]) {
				dialog.contexts['profile'+id] = new Imperion.Interface.Dialog.Context.Profile(dialog, id);
			}
			return dialog.contexts['profile'+id];
		},

		/**
		 * create edit profile context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.EditProfile}
		 */
		editprofile : function(parentDialog) {
			if(!parentDialog.contexts.editprofile) {
				parentDialog.contexts.editprofile = new Imperion.Interface.Dialog.Context.EditProfile(parentDialog);
			}
			return parentDialog.contexts.editprofile;
		},

		/**
		 * create npc context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 * @param	{Object}							params
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.NPC}
		 */
		npc : function(parentDialog, params) {
			if(!parentDialog.contexts.npc) {
				parentDialog.contexts.npc = new Imperion.Interface.Dialog.Context.NPC(parentDialog, params);
			}
			else {
				parentDialog.contexts.npc.getModule()._update(params);
			}
			return parentDialog.contexts.npc;
		},

		/**
		 * create edit profile context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 * @param	{Number}							playerId
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.EditProfile}
		 */
		playerprofile : function(parentDialog, playerId) {
			if (parentDialog.isModal()) {
				if (!parentDialog.contexts.report) {
					parentDialog.contexts.profile = new Imperion.Interface.Dialog.Context.PlayerProfile(parentDialog, playerId);
				} else {
					parentDialog.contexts.profile.update('profile', playerId);
				}
				return parentDialog.contexts.profile;
			}
			if (!parentDialog.contexts['profile'+playerId]) {
				parentDialog.contexts['profile'+playerId] = new Imperion.Interface.Dialog.Context.PlayerProfile(parentDialog, playerId);
			}
			return parentDialog.contexts['profile'+playerId];
		},

		/**
		 * create a imprint context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Imprint}
		 */
		imprint : function(parentDialog) {
			return new Imperion.Interface.Dialog.Context.Imprint(parentDialog);
		},

		/**
		 * create a terms and conditions context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.TermsConditions}
		 */
		termsconditions : function(parentDialog) {
			return new Imperion.Interface.Dialog.Context.TermsConditions(parentDialog);
		},

		/**
		 * create a mailbox context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 * @param	{String}							type
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Igm.Mailbox}
		 */
		mailbox : function(dialog, mailbox, type) {
			if(!dialog.contexts['mailbox'+type]) {
				dialog.contexts['mailbox'+type] = new Imperion.Interface.Dialog.Context.Igm.Mailbox(dialog, mailbox, type);
			}
			return dialog.contexts['mailbox'+type];
		},

		/**
		 * create a compose context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Igm.Mailbox}
		 */
		compose: function(dialog, mailbox) {
			if(!dialog.contexts.compose) {
				dialog.contexts.compose = new Imperion.Interface.Dialog.Context.Igm.Compose(dialog, mailbox);
			}
			return dialog.contexts.compose;
		},

		/**
		 * payment products context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Payment.Products}
		 */
		paymentProducts : function(parentDialog) {
			if(!parentDialog.contexts.products) {
				parentDialog.contexts.products = new Imperion.Interface.Dialog.Context.Payment.Products(parentDialog);
			}
			return parentDialog.contexts.products;
		},

		/**
		 * payment orders context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Payment.Orders}
		 */
		paymentOrders : function(parentDialog) {
			if(!parentDialog.contexts.orders) {
				parentDialog.contexts.orders = new Imperion.Interface.Dialog.Context.Payment.Orders(parentDialog);
			}
			return parentDialog.contexts.orders;
		},

		/**
		 * payment orders context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Payment.Orders}
		 */
		paymentPurchases : function(parentDialog) {
			if(!parentDialog.contexts.purchases) {
				parentDialog.contexts.purchases = new Imperion.Interface.Dialog.Context.Payment.Purchases(parentDialog);
			}
			return parentDialog.contexts.purchases;
		},

		/**
		 * Alliance Index Context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Alliance.Index}
		 */
		allianceIndex : function(parentDialog) {
			if(!parentDialog.contexts['alliance_index']) {
				parentDialog.contexts['alliance_index'] = new Imperion.Interface.Dialog.Context.Alliance.Index(parentDialog);
			}
			return parentDialog.contexts['alliance_index'];
		},
		
		/**
		 * Alliance Profile Context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Alliance.Profile}
		 */
		allianceProfile : function(parentDialog, allianceId, ownAlliance) {
			if (!parentDialog.contexts['alliance_profile_'+allianceId]) {
				parentDialog.contexts['alliance_profile_'+allianceId] = new Imperion.Interface.Dialog.Context.Alliance.Profile(parentDialog, allianceId, ownAlliance);
			}
			return parentDialog.contexts['alliance_profile_'+allianceId];
		},

		/**
		 * Energy Overview Context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Overview.Energy}
		 */
		energyOverview : function(parentDialog) {
			if(!parentDialog.contexts.energyOverview) {
				parentDialog.contexts.energyOverview = new Imperion.Interface.Dialog.Context.Overview.Energy(parentDialog);
			}
			return parentDialog.contexts.energyOverview;
		},

		/**
		 * Population Overview Context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Overview.Population}
		 */
		populationOverview : function(parentDialog) {
			if(!parentDialog.contexts.populationOverview) {
				parentDialog.contexts.populationOverview = new Imperion.Interface.Dialog.Context.Overview.Population(parentDialog);
			}
			return parentDialog.contexts.populationOverview;
		},

		/**
		 * Energy Overview Context Ressources
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Overview.Ressources}
		 */
		ressourcesOverview : function(parentDialog) {
			if(!parentDialog.contexts.ressourcesOverview) {
				parentDialog.contexts.ressourcesOverview = new Imperion.Interface.Dialog.Context.Overview.Ressources(parentDialog);
			}
			return parentDialog.contexts.ressourcesOverview;
		},
		
		/**
		 * Endgame Victory Context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Endgame.Victory}
		 */
		endgameVictory : function(parentDialog) {
			if(!parentDialog.contexts['endgame_victory']) {
				parentDialog.contexts['endgame_victory'] = new Imperion.Interface.Dialog.Context.Endgame.Victory(parentDialog);
			}
			return parentDialog.contexts['endgame_victory'];
		},

		/**
		 * Endgame Screen Context
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Endgame.Screen}
		 */
		endgameScreen : function(parentDialog) {
			if(!parentDialog.contexts['endgame_screen']) {
				parentDialog.contexts['endgame_screen'] = new Imperion.Interface.Dialog.Context.Endgame.Screen(parentDialog);
			}
			return parentDialog.contexts['endgame_screen'];
		},

		/**
		 * Admiral Skill Tree
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Admiral.Techtree}
		 */
		admiralTechtree : function(parentDialog) {
			if(!parentDialog.contexts['admiral_techtree']) {
				parentDialog.contexts['admiral_techtree'] = new Imperion.Interface.Dialog.Context.Admiral.Techtree(parentDialog);
			}
			return parentDialog.contexts['admiral_techtree'];
		},

		/**
		 * DebugConsole
		 *
		 * @param	{Imperion.Interface.Dialog.Default}	parentDialog
		 *
		 * @returns	{Imperion.Interface.Dialog.Context.Debug.Console}
		 */
        debugConsole : function(parentDialog) {
            if(!parentDialog.contexts['debugConsole']) {
                parentDialog.contexts['debugConsole'] = new Imperion.Interface.Dialog.Context.Debug.Console(parentDialog);
            }
            return parentDialog.contexts['debugConsole'];
        },

		/**
		 * TEST CONTEXT
		 */
		test : function(dialog) {
			return new Imperion.Interface.Dialog.Context.Test(dialog);
		}
	}
);

Imperion.Interface.Dialog.Context.Root = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Root.prototype */
	{
	    Implements : [Imperion.Observable, Imperion.Template, Imperion.Util.Dialog, Imperion.Util.Class, Imperion.Event, Imperion.Translate],
	    
	    /**
		 * the id of the context
		 * 
		 * @type String
		 * @default null
		 */
	    id : null,
	    
	    /**
		 * The Dialog in which the Context exists
		 * 
		 * @type Object
		 * @default null
		 */
	    dialog : null,
	    
	    /**
		 * The Tab Item of the Context
		 * 
		 * @type Object
		 * @default null
		 */
	    tab : null,

	    autoScrollbar : true,
	    
	    /**
		 * The Caption of the Context / Tab Item
		 * 
		 * @type String
		 * @default 'Context'
		 */
	    caption : 'Context',
	    
	    /**
		 * current amount of resource
		 * 
		 * @type Number
		 * @default 0
		 */
	    active : false,
	    
	    /**
		 * The Default Template for the Context
		 * 
		 * @type String
		 * @default 'Default'
		 */
	    template : 'Default',

	    /**
		 * Size of the Dialog
		 * 
		 * @type String
		 * @default 'big'
		 */
	    size : 'big',

	    /**
		 * Global Eventhandler
		 * 
		 * @type Imperion.Util.GlobalEvents
		 * @default null
		 */
	    globalEvents : null,

	    /**
	     * Flags the Content as Dynamic or Static
	     * 
	     * @type Boolean
	     * @default false
	     */
	    dynamic : false,

	    tooltip : null,

        /**
         * instance of currently loaded module
         *
         * @type	Imperion.Interface.Module.Root
         */
        loadedModule : null,

        /**
         * domready event pointer
         *
         * @type Function
         */
        domReadyFunction : null,
	    
	    /**
		 * Options for the Dialog
		 */
	    options : {
	    	caption : null,
	    	chromeless : false,
	    	params : null,
	    	callbackParams : null
	    },
	    
		/**
		 * initialize the context
		 * 
		 * @class Base Class for all Contexts
		 * 
		 * @param {Object}						dialog			The Dialog to attach the Context
		 * @param {Object}						options		 	Context Options
		 * @param {Imperion.Util.GlobalEvents}	globalEvents 	Global Eventhandler
		 *
		 * @constructs
		 */
	    initialize : function(dialog, options, globalEvents) {
	    	this.setOptions(options);
	    	this.globalEvents = globalEvents;
	    	this.loadElements();
	    	this.tooltip = Imperion.Interface.Gui.Factory.tooltip();
	    	
	    	this.caption = this.options.caption || this.caption;

			dialog.attach(this.id, this);

			this.dialog = dialog;
            this.loadedModule = null;
			
			if (this.hasTab) {
				this.tab = Imperion.Interface.Dialog.Context.Factory.tab(this);
				dialog.elements.titleBar.removeClass('hideContainer');
				this.tab.elements.container.inject(dialog.elements.tabList);

				dialog.showCloseButton();
			}

			if (this.dragable) {
				this.dialog.setDragable();
			}

			if (this.modal) {
				this.dialog.setModal();
			}
			
			dialog.setSize(this.size);
			this.elements.container.addClass(this.id);
		},

		initializeScrollBar : function() {
			this.elements.entries = this.elements.container.getElement('.entries');

			if (this.elements.entries) {
				this.elements.list = this.elements.entries.getElement('ul');
				this.elements.scrollbar = this.elements.container.getElement('.bar');
			}

			if (this.elements.entries && this.elements.list && this.elements.scrollbar) {
				setTimeout(function() {
					this.scrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollbar, {});
					this.scrollbar.attachTo(this.elements.entries, this.elements.list);
				}.bindNew(this), 0);
			}
		},
		
		/**
		 * Set the Contents of the Context by passing its container to the Dialog
		 * 
		 * @returns {void}
		 */
		setContent : function() {
			this.dialog.setContent(this.elements.container);
			if (this.autoScrollbar) {
				this.initializeScrollBar();
			}
		},
		
		/**
		 * show the context
		 * 
		 * @returns {void}
		 */
		showContext : function() {
			this.dialog.hideAllContext();
			this.active = true;
			this.show();
			if (this.tab) {
				this.tab.setActive();
				if ($chk(this.help)) {
					this.dialog.showHelpButton(this.help);
				} else {
					this.dialog.hideHelpButton();
				}
			}
			this.dialog.showDialog();
		},
		
		
		/**
		 * Hide the context
		 * 
		 * @returns {void}
		 */
		hideContext : function() {
			this.elements.container.addClass('hideContainer');
			this.active = false;
			
			if (this.tab) {
				this.tab.setInactive();
			}
		},

		/**
		 * Destroy the Context and Everything related
		 * 
		 * @returns {Void}
		 */
		
		cleanContext: function(){
			if (this.tab) {
				this.tab.cleanTab();
			}
			this.elements.container.destroy();
		},
		
		/**
		 * onHide Listener
		 * 
		 * @returns {void}
		 */
		onHideContext : function() {
			this.hideContext();
		},
		
		/**
		 * onCleanUp Listener
		 * 
		 * @returns {void}
		 */
		onCleanUp : function() {
			this.dialog.handle.clearContext(this.dialog, this.id);
		},

        /**
         * Generic eventHandler
         */
        eventHandler : function(eventObject, params) {
            //get action
            var action = params.get('action');
            //
            if(!action) {
                // ERROR HANDLING
            }
            //
            switch(action) {
                case 'load_content_ready':
                    if (this.options.module && this.options.module.factory) {
                        this.loadedModule = this.options.module.factory(this.options.module.params, this.data, this.dialog, this);
                        this.attach('onContextActionClick', this.loadedModule);
                    }
                    this.removeEvent('domready', this.dialog.elements.container, this.domReadyFunction);
                    break;
            }
            return false;
        },

		/**
		 * Fills the container with the response of the request
		 */
		setHtml: function(html) {
			this.elements.container.set('html', html);

			this.parseHtml();
			this.setContent();
		},

		/**
		 * Parse the content of the response for further evaluation
		 */
		parseHtml : function(container) {
			var domLinks, domForms;
			if (container == undefined) {
				container = this.elements.container;
			}
			this.getDialogLinks(this.dialog.handle, container);
			domLinks = container.getElements('a');
			domLinks.each(function(link, index) {
				this.registerLink(link);
			}, this);

			domForms = container.getElements('form');
			domForms.each(function(form, index) {
				if(!form.hasClass('stop')) {
					form.onsubmit = function() {
						this.submitForm(form);
						return false;
					}.bindNew(this);
				}
			}, this);
		},

		/**
		 * Load elements
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.elements.container = this.getClonedTemplate('Dialog-'+this.template);
			this.elements.container.inject('dialogArea');
		}
	});

	Imperion.Interface.Dialog.Context.Tab = new Class({
	    Implements : [Imperion.Observable, Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Observable, Options],
	    
	    context : null,
	    
	    options : {},

	    /**
		 * Prepare the Context Tab
		 * 
		 * @class The Tab Item
		 * 
		 * @param {Object}	context	The Context Object
		 *
		 * @constructs
		 */
	    initialize : function(context) {
			this.loadElements();
			this.context = context;
			//
			this.setCaption(context.caption);
			//
			this.elements.container.removeClass('hideContainer').inject(context.dialog.elements.tabList);
		},
		
		/**
		 * set the tab caption
		 * 
		 * @param	 {String}	caption
		 * 
		 * @returns	{Void}
		 */
		setCaption : function(caption) {
			this.elements.caption.set('text', caption);
		},
		
		/**
		 * Set the Tab to Active
		 * 
		 * @returns {void}
		 */
		setActive : function() {
			this.elements.container.addClass('active')
		},
		
		/**
		 * Set the Tab to Inactive
		 * 
		 * @returns {void}
		 */
		setInactive : function() {
			this.elements.container.removeClass('active')
		},

		cleanTab : function() {
			this.elements.container.destroy();
		},
		
		/**
		 * eventhandler
		 * 
		 * @returns {void}
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'tab_click':
					if (!this.context.active) {
						this.context.showContext();
					}
					break;
            }
			return false;
		},
		
		/**
		 * load elements
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.elements.container = this.getClonedTemplate('Dialog-TabsItem');
			
			this.addEvent('click', this.elements.container, $H({
				action : 'tab_click'
			}));
			
			this.elements.caption = this.elements.container.getElement('.caption');
		}
	}
);
Imperion.Interface.Dialog.Context.Request = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Request.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Root,

		Implements : [Imperion.Util.Checkpoint,Imperion.Event],

		url        : null,

		html       : null,

		data       : null,

		params     : null,

		callback   : null,

		dynamic    : true,

		/**
		 * request running flag
		 *
		 * @type	Boolean
		 */
		requestRunning : false,

		/**
		 * initialize the context
		 *
		 * @class Base Class for all Contexts
		 *
		 * @param {Object}						dialog			The Dialog to attach the Context
		 * @param {String}						url				THe Url for the request
		 * @param {Object}						options		 	Context Options
		 * @param {Imperion.Util.GlobalEvents}	globalEvents 	Global Eventhandler
		 *
		 * @constructs
		 */
	    initialize : function(dialog, url, options, globalEvents) {
			if (!url) {
				throw new Imperion.Interface.ExceptionCritical();
			}
			this.url = url;
			this.parent(dialog, options, globalEvents);

			this.requestRunning = false;
		},

		/**
		 * returns the currently loaded module -> no module loaded -> exception
		 *
		 * @throws 	{Exception}
		 *
		 * @returns	{Imperion.Interface.Module.Root}
		 */
		getModule : function() {
			if(this.loadedModule === null) {
				throw '//ERROR HANDLING: no module loaded';
			}
			return this.loadedModule;
		},

		/**
		 * update function refreshes the current tab if dynamic and sets new ID
		 *
		 * @param {String}	contextName	The base name for the Context
		 * @param {Number}	id			THe ID of the Context
		 *
		 * @returns {}
		 */
		update : function(contextName, id) {
			var contextId = contextName + '_' + id;
			if (contextId !== this.id) {
				this.options.params.id = id;
			}
			if (this.dynamic || contextId != this.id) {
				this.loadUrl();
			} else {
				this.showContext(this.url, this.params, this.callback, true);
			}
			this.id = contextId;
		},

		/**
	     * Loads the URL and calls the callback
	     *
	     * @param {String} [url] The URL to load
	     * @param {Object} [params] Params for the request
	     */
		loadUrl : function(url, params, callback) {
			if(!this.requestRunning) {
				var url    = url    || this.url;
				var params = params || this.options.params;
				var callback = callback || this.afterLoadUrl;
				this.requestRunning = true;

				Imperion.Util.Request.send(url, params, callback.bindNew(this));
			}
		},

		loadHtml : function(html) {
			this.setHtml(html);
			this.showContext(this.url, this.params, this.callback, true);
		},

		/**
	     * Default callback for loadUrl
	     *
	     * @param {Object} [response] The response Object
	     */
		afterLoadUrl : function(response) {
			this.requestRunning = false;
			this.data = response.getResponseData();
			if(this.data.error !== undefined) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : this.data.error
				}).showEventBox();
			} else {
				this.html = response.getResponseHtml();
				this.setHtml(this.html);

				if (this.hasFilters) {
					this.loadFilters();
				}
				this.showContext(this.url, this.params, this.callback, true);
				this.loadForms();
				this.loadFilters();
				this.domReadyFunction = this.addEvent('domready', this.dialog.elements.container, $H({
					action : 'load_content_ready'
				}));
			}
		},

		/**
		 * calls loadUrl and waits until loaded is true, then shows the context
		 */
		showContext: function(url, params, callback, loaded) {
			var url    = url    || this.url;
			var params = params || this.options.params;
			var callback = callback || this.afterLoadUrl;
			if ((!this.dynamic && this.html) || loaded) {
				this.parent();
				return;
			}
			this.loadUrl(url, params, callback);
		},

		/**
		 * extend clean context
		 *
		 * @returns {Void}
		 */
		cleanContext : function() {
			if(this.loadedModule !== null) {
				if(!this.loadedModule.clean) {
					throw '//ERROR HANDLING: no clean method defined';
				}
				this.loadedModule.clean();
			}
			this.parent();
		},

		setFilter : function(state) {
			this.hasFilters = state;
		},

		setParams : function(params) {
			this.params = params;
		},

		/**
		 * loads the filter-toggle
		 */
		loadFilters : function() {
			this.elements.filterButtons = this.elements.container.getElements('.filter a');

			this.elements.filterButtons.each(function(el, i) {
				this.addEvent('click', el, $H({
					action : 'toggle_filter'
				}));
			}.bindNew(this));


			this.elements.filterContainer = this.elements.container.getElement('.filters');

			if (this.elements.filterContainer) {
				this.elements.filterButtons = this.elements.filterContainer.getElements('a');

				this.elements.filterButtons.each(function(item) {
					this.addEvent('mouseenter', item, $H({
						action : 'show_tooltip',
						text   : item.get('text').trim()
					}));

					this.addEvent('mouseleave', item, $H({
						action : 'hide_tooltip'
					}));
				}, this);
			}
			if (this.globalEvents) {
				this.globalEvents.attach(this.id, this);
			}
		},

		submitForm : function(form, callback){
			var callback = callback  || null;
			var pairs = form.toQueryString().split('&');
			var params = {};
			pairs.each(function(item) {
				var pair = item.split('=');
				params[pair[0]] = pair[1];
			}, this);
			this.loadUrl(form.getProperty('action'), params, callback);
		},

		/**
		 * register a context-link and bind a custom event on it
		 *
		 * @param {Element} link The <a> Element
		 */
		registerLink : function(link) {
			if(link.get('href').test('/map/index/index/stage/ORB/targetPlanetId/')) {
				var pId = link.get('href').replace('/map/index/index/stage/ORB/targetPlanetId/', '').toInt();
				this.dialog.handle.addEvent('contextmenu', link, $H({
					action	: 'planet_context_menu',
					id 		: pId
				}));
			}
			if (link.hasClass('action')) {
				this.addEvent('click', link, $H({
					action : 'action_click'
				}));
				return;
			}

			if ("self" == link.target && !link.hash) {
				this.addEvent('click', link, $H({
					action : 'plain_link_click',
					params : params
				}));
				return;
			}

			if ((link.hash && "self" == link.target) || "self" == link.target) {
				var params = {};
				var hash = link.hash.substr(1);
				var pairs = hash.split(';');
				pairs.each(function(item) {
					var pair = item.split('=');
					params[pair[0]] = pair[1];
				}, this);
				this.addEvent('click', link, $H({
					action	: 'link_click',
					params	: params,
					url		: link.href
				}));
				return;
			}

			if ((link.hash && "selfurl" == link.target) || "selfurl" == link.target) {
				var params = {};
				var hash = link.hash.substr(1);
				var pairs = hash.split(';');
				pairs.each(function(item) {
					var pair = item.split('=');
					params[pair[0]] = pair[1];
				}, this);
				this.addEvent('click', link, $H({
					action	: 'link_url_click',
					params	: params,
					url		: link.href
				}));
				return;
			}
		},

		/**
		 * Global Event Handler
		 *
		 * @param	{Object}	params
		 *
		 * @returns {Void}
		 */
		onBodyClick : function(params){
			this.elements.filterContainer.addClass('hideContainer');
		},

		/**
		 * Generic eventHandler
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'toggle_filter':
					this.elements.filterContainer.toggleClass('hideContainer');
					break;
				case 'link_url_click':
					this.loadUrl(params.get('url'), params.get('params'));
					this.tooltip.hide();
					break;
				case 'link_click':
					this.loadUrl(this.url, params.get('params'));
					this.tooltip.hide();
					break;
				case 'plain_link_click':
					this.loadUrl(eventObject.target.href);
					this.tooltip.hide();
					break;
				case 'action_click':
					this.notify({event : eventObject, params: this.params}, 'onContextActionClick');
					break;
				case 'show_tooltip':
					this.tooltip.setText(params.get('text'));
					this.tooltip.show();
					break;
				case 'hide_tooltip':
					this.tooltip.hide();
					break;
                default:
                       return this.parent(eventObject, params);
                    break;
			}
			return false;
		}
	}
);

Imperion.Interface.Dialog.Context.Annexion = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Annexion.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,

		modal	: false,
		
		size : 'big',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'annexion';
			this.parent(dialog, Imperion.Util.Helper.url('annexion', 'index', 'index'), {
				caption : this.translate('dialog__tab_annexion'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.annexion,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.ResearchLab = new Class(
	/** @lends Imperion.Interface.Dialog.Context.ResearchLab.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,
		
		size : 'big',

		hasTab : true,
	    
		autoScrollbar : false,
		
		questItems : null,
		
		lastRequestType : null,
		
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
			this.questItems = {
				ResearchAttribute : null
			};
			this.lastRequestType = null;
	    	this.id = 'research';
			this.parent(dialog, Imperion.Util.Helper.url('research', 'index', 'index'), {
				caption : this.translate('dialog__tab_research'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.researchlab,
					params	: {}
				}
			});
		},
		
		/**
		 * check if checkpoint is resolved
		 * 
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'ResearchCategory':
					return this.getModule().isCheckpointResolved(ident, params, questObj);
					break;
				case 'ResearchAttribute':
					if(this.lastRequestType !== null) {
						for(var i = params.researches.length -1 ; i >= 0 ;i--) {
							if(params.researches[i].type == this.lastRequestType) {
								return true;
							}
						}
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.Dialog.Context.Research ident not exist';
					break;
			}
		},
		
		/**
		 * activate checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'ResearchCategory':
					this.getModule().activateCheckpoint(ident, params, questObj);
					break;
				case 'ResearchAttribute':
					this.questItems[ident] = new Array();
					for(var i = params.researches.length -1 ; i >= 0 ;i--) {
						var resEle = this.getResearchElement(params.researches[i].type);
						var highlight = this.getCheckpointHighlight(ident + params.researches[i].type, {
							container	: resEle.getParent().getParent().getParent(),
							posOffset	: {
								x : 350
							},
							rotation	: 'arrowRight'
						});
						highlight.appendOver(resEle);
						highlight.start();
						this.setCheckpointActive(ident + params.researches[i].type, questObj);
						this.questItems[ident].push(params.researches[i].type);
					}
					break;
				default:
					throw 'Imperion.Interface.Dialog.Context.Research ident not exist';
					break;
			}
		},
		
		/**
		 * remove checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Boolean}			refreshQuests
		 * 
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			//refreshQuests = refreshQuests === undefined ? true : refreshQuests;
			switch(ident) {
				case 'ResearchCategory':
					this.getModule().removeCheckpoint(ident, refreshQuests);
				break;
				case 'ResearchAttribute':
					if(this.questItems[ident] !== null) {
						for(var i = this.questItems[ident].length -1 ; i >= 0 ;i--) {
							var questObj = this.getCheckpointActive(ident + this.questItems[ident][i]);
							if(questObj !== null) {
								this.unsetCheckpointActive(ident + this.questItems[ident][i]);
								this.removeCheckpointHighlight(ident + this.questItems[ident][i]);
							}
						}
						this.questItems[ident]	= null;
					}
					break;
				default:
					throw 'Imperion.Interface.Dialog.Context.Research ident not exist';
					break;
			}
		},
		
		/**
		 * extend load url method
		 * 
		 * @param	{String}	url
		 * @param	{Object}	params
		 * @param	{Function}	callback	
		 * 
		 * @returns void
		 */
		loadUrl : function(url, params, callback) {
			if(params.type !== undefined) {
				this.lastRequestType = params.type;
				this.removeCheckpoint('ResearchAttribute');
			}
			this.parent(url, params, callback);
		},
		
		/**
		 * extend cleanup method
		 * 
		 * @returns	{Void}
		 */
		cleanContext : function() {
			this.removeCheckpoint('ResearchAttribute');
			Imperion.Factory.quest().refresh();
			this.parent();
		},
		
		/**
		 * get element for research by type
		 * 
		 * @param	{String}	researchType
		 * 
		 * @returns	{Element}
		 */
		getResearchElement : function(researchType) {
			return this.elements.container.getElement('.attribute.' + researchType);
		},
		
		/**
		 * get element for research by type
		 * 
		 * @param	{String}	researchType
		 * 
		 * @returns	{Element}
		 */
		getResearchCategory : function(researchCategory) {
			return this.elements.container.getElement('.attribute.' + researchCategory);
		},
		
		/**
		 * extend set html
		 * 
		 * @returns {void}
		 */
		setHtml : function(html) {
			this.parent(html);
			this.elements.tableContainer = this.elements.container.getElement('.Imperion-Interface-Module-ResearchLab');
		}
	}
);
Imperion.Interface.Dialog.Context.Plus = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Plus.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		Implements : [],

		dragable : false,
		
		model : true,

		size : 'big',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'plus';
			this.parent(dialog, Imperion.Util.Helper.url('plus', 'spend', 'credits'), {
				caption : this.translate('plus__tab_spend_credits'),
				params : {
				},
				module : {
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Hangar = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Hangar.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id		= 'hangar';
	    	var caption	= 'dialog__tab_hangar';
	    	
	    	if(this.getUser().getKind() === 'TITAN') {
	    		caption = 'dialog__tab_stealth';
	    	}

			this.parent(dialog, Imperion.Util.Helper.url('building', 'hangar', 'hangar'), {
				caption : this.translate(caption),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.hangar,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Recycle = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Recycle.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, recycleType) {
	    	this.id = 'recylce';
	    	var caption;
	    	if(this.getUser().getKind() === 'XEN' && recycleType == RECYCLE_TYPE_SHIP) {
	    		caption = this.translate('dialog__tab_shipyard_disassemble');
	    	}
	    	else {
	    		caption = this.translate('dialog__tab_shipyard_recycling');
	    	}
			this.parent(dialog, Imperion.Util.Helper.url('building', 'special', 'recycling'), {
				caption : caption,
				params : {
					recycletype	: recycleType
				},
				module : {
					factory : Imperion.Interface.Module.Factory.recycle,
					params	: {
						type	: recycleType
					}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.WeaponFactory = new Class(
	/** @lends Imperion.Interface.Dialog.Context.WeaponFactory.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'weaponfactory';
			this.parent(dialog, Imperion.Util.Helper.url('building', 'armsfactory', 'repair'), {
				caption : this.translate('dialog__tab_armsfactory_recycling'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.weaponfactory,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Help = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Help.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		Implements : [],

		dragable : true,

		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'help';
			this.parent(dialog, Imperion.Util.Helper.url('index', 'index', 'sitemap'), {
				caption : 'Sitemap',
				params : {
				},
				module : {
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.HelpCenter = new Class(
	/** @lends Imperion.Interface.Dialog.Context.HelpCenter.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		size : 'help',

		hasTab : true,
	    
	    /**
	     * @params	{Imperion.Interface.Dialog.Root}	parentDialog 
	     * @params	{String}							dialogSize		starting size of help center dialog
	     * @params	{Object}							sectionParams	request help section
	     * 
	     * @constructs
	     */
	    initialize : function(parentDialog, dialogSize, sectionParams) {
			var params = {};
			this.id = 'helpCenter';
			if(sectionParams !== undefined) {
				params = sectionParams;
				this.id += '_' + params.section + '_' + params.type;
			}
			this.parent(parentDialog, Imperion.Util.Helper.url('help', 'index', 'index'), {
				caption : this.translate('dialog__tab_help_center'),
				params : params,
				module : {
					factory : Imperion.Interface.Module.Factory.help,
					params	: {
						size : dialogSize
					}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Imprint = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Imprint.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : false,

		modal	: true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id= 'imprint';
			this.parent(dialog, Imperion.Util.Helper.url('index', 'index', 'imprint'), {
				caption : this.translate('dialog__tab_imprint'),
				params : {},
				module : {}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.TermsConditions = new Class(
	/** @lends Imperion.Interface.Dialog.Context.TermsConditions.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,

		modal	: false,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id= 'imprint';
			this.parent(dialog, Imperion.Util.Helper.url('index', 'index', 'termsconditions'), {
				caption : this.translate('dialog__tab_termsconditions'),
				params : {},
				module : {}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.PlayerStatistics = new Class(
	/** @lends Imperion.Interface.Dialog.Context.PlayerStatistics.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		Implements : [],

		dragable : true,

		size : 'small',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, statisticType) {
	    	this.id = 'playerStatistics';
			this.parent(dialog, Imperion.Util.Helper.url('statistic', 'index', 'index'), {
				caption : this.translate('dialog__tab_statistic'),
				params : {
					statistic : statisticType
				},
				module : {
					factory : Imperion.Interface.Module.Factory.playerStatistics,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.FleetTransport = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Fleet.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		Implements : [],

		size : 'big',

		hasTab : true,

		modal: false,
		
		dragable : true,
		
		id : 'fleetTransport',
		
		dynamic    : false,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, options) {
	    	var type, start, target;
	    	type = options.type;
	    	start = options.start;
	    	target = options.target;
	    	mission	= options.mission !== undefined ? options.mission : null; 
	    	
			this.parent(dialog, Imperion.Util.Helper.url('fleet', 'mission', 'transport'), {
				caption : this.translate('dialog__tab_send_fleet'),
				params : {
					id : target.options.id,
	 				type : type
				},
				module : {
					factory : Imperion.Interface.FleetTransport.Factory.handle,
					params	: {
		 				start			: start,
		 				target			: target,
		 				currentMission	: mission
		 			}
				}
			});
		},
		
		/**
		 * check if checkpoint is resolved
		 * 
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			return this.getModule().isCheckpointResolved(ident, params, questObj);
		},
		
		/**
		 * activate checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Void}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			this.getModule().activateCheckpoint(ident, params, questObj);
		},
		
		/**
		 * remove checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Boolean}			refreshQuests
		 * 
		 * @returns	{Void}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			this.getModule().removeCheckpoint(ident, refreshQuests);
		}
	}
);
Imperion.Interface.Dialog.Context.FleetSummary = new Class(
	/** @lends Imperion.Interface.Dialog.Context.FleetSummary.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		Implements : [],

		size : 'big',

		hasTab : true,

		dragable : true,

		autoScrollbar : false,

	    initialize : function(type, dialog, globalEvents, annexId) {
	    	this.id = 'fleetSummary';

	    	var params	= {
	    		filter : type
	    	};

	    	if(typeof annexId !== 'undefined') {
	    		params.idannex = annexId;
	    	}

			this.parent(dialog, Imperion.Util.Helper.url('frontend', 'fleet', 'list'), {
				caption : this.translate('dialog__tab_fleet_summary'),
				params : params,
				module : {
					factory : Imperion.Interface.FleetSummary.Factory.handle,
					params	: {
						context : this,
						type    : type
		 			}
				}
			}, globalEvents);
		}
	}
);

Imperion.Interface.Dialog.Context.Account = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Account.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : false,

		modal	: true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'account';
			this.parent(dialog, Imperion.Util.Helper.url('account', 'settings', 'index'), {
				caption : this.translate('dialog__tab_account'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.account,
					params	: {
		 				start 	: 1
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.ChangePassword = new Class(
	/** @lends Imperion.Interface.Dialog.Context.ChangePassword.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : false,

		modal	: true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
			this.id = 'changepassword';
			this.parent(dialog, Imperion.Util.Helper.url('frontend', 'index', 'changepassword'), {
				caption : this.translate('dialog__tab_change_password'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.password,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.DeleteAccount = new Class(
	/** @lends Imperion.Interface.Dialog.Context.DeleteAccount.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : false,

		modal	: true,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
			this.id = 'deleteaccount';
			this.parent(dialog, Imperion.Util.Helper.url('frontend', 'index', 'deleteaccount'), {
				caption : this.translate('dialog__tab_delete_account'),
				params : {
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Igm.Mailbox = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Igm.Mailbox.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,

		modal	: false,
		
		size : 'big',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, handle, type) {
	    	this.id = 'inbox '+type;
			this.parent(dialog, Imperion.Util.Helper.url('igm', 'index', type), {
				caption : this.translate('dialog__tab_' + type),
				params : {
				},
				module : {
					factory : handle.loadListOverview,
					params	: {
						type : type,
						handle : handle
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Igm.Compose = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Igm.Compose.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		modal	: false,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, mailbox) {
	    	this.id = 'Compose';
			this.parent(dialog, Imperion.Util.Helper.url('igm', 'index', 'compose'), {
				caption : this.translate('dialog__tab_compose'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Igm.Factory.compose,
					params	: {
						mailbox  : mailbox
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Profile = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Profile.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,

		modal	: false,
		
		size : 'small',

		hasTab : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'profile';
			this.parent(dialog, Imperion.Util.Helper.url('frontend', 'index', 'profile'), {
				caption : 'Profile', //this.translate('dialog__tab_account'),
				params : {
				},
				module : {
					//factory : Imperion.Interface.Module.Factory.account,
					//params	: {
		 			//	start 	: 1
		 			//}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.EditProfile = new Class(
	/** @lends Imperion.Interface.Dialog.Context.EditProfile.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : false,

		modal	: true,
		
		size : 'small',

		hasTab : true,
		
		dynamic    : false,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'editProfile';
			this.parent(dialog, Imperion.Util.Helper.url('account', 'profile', 'edit'), {
				caption : this.translate('dialog__tab_editprofile'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.editprofile,
					params	: {
		 				start 	: 1
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.PlayerProfile = new Class(
	/** @lends Imperion.Interface.Dialog.Context.PlayerProfile.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,

		modal	: false,
		
		size : 'small',

		hasTab : true,
		
		autoScrollbar : false,
	    
		dynamic : false,
		
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, playerId) {
			if(playerId === undefined) {
				playerId = 0;
			}
			this.id = 'playerprofile_' + playerId;
			this.parent(dialog, Imperion.Util.Helper.url('account', 'profile', 'index'), {
				caption : this.translate('dialog__tab_playerprofile'),
				params : {
					account : playerId
				},
				module : {
					factory : Imperion.Interface.Module.Factory.playerprofile,
					params	: {
						accountId : playerId
					}
				}
			});
		},
		
		/**
		 * extend after load url method
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterLoadUrl : function(response) {
			this.parent(response);
			
			this.tab.setCaption(this.translate('dialog__tab_playerprofile') + ' ' + this.data.name);
		}
	}
);
Imperion.Interface.Dialog.Context.NPC = new Class(
	/** @lends Imperion.Interface.Dialog.Context.NPC.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,

		size : 'small',

		hasTab : true,
	    
		dynamic : false,
		
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, params) {
	    	this.id = 'npc';
			this.parent(dialog, Imperion.Util.Helper.url('plus', 'spend', 'npc'), {
				caption : this.translate('dialog__tab_npc'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.npc,
					params	: params
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Payment.Products = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Payment.Products.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : false,

		modal	: true,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, mailbox) {
	    	this.id = 'products';
			this.parent(dialog, Imperion.Util.Helper.url('plus', 'buy', 'credits'), {
				caption : this.translate('plus__tab_buy_credits'),
				params : {
				},
				module : {
					factory		: Imperion.Interface.Module.Factory.paymentPlus,
					params		: {
		 				type 	: 'paymentProducts'
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Payment.Orders = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Payment.Orders.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : false,

		modal	: true,

		size : 'big',

		hasTab : true,

		autoScrollbar : false,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, mailbox) {
	    	this.id = 'orders';
			this.parent(dialog, Imperion.Util.Helper.url('plus', 'spend', 'history'), {
				caption : this.translate('plus__tab_history'),
				params : {
				},
				module : {
					factory		: Imperion.Interface.Module.Factory.paymentPlus,
					params		: {
		 				type 	: 'paymentOrders'
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Payment.Purchases = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Payment.Purchases.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : false,

		modal	: true,

		size : 'big',

		hasTab : true,

		autoScrollbar : false,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, mailbox) {
	    	this.id = 'purchases';
			this.parent(dialog, Imperion.Util.Helper.url('plus', 'buy', 'history'), {
				caption : this.translate('plus__tab_transactions'),
				params : {
				},
				module : {
					factory		: Imperion.Interface.Module.Factory.paymentPlus,
					params		: {
		 				type 	: 'paymentPurchases'
		 			}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Overview.Energy = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Overview.Energy.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		modal	: false,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'energy_overview';
			this.parent(dialog, Imperion.Util.Helper.url('account', 'overview', 'energy'), {
				caption : this.translate('dialog__tab_energy'),
				params : {
				},
				module : {
					factory : null,
					params	: {
		 			}
				}
			});
		}
	}
);

Imperion.Interface.Dialog.Context.Overview.Population = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Overview.Population.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		modal	: false,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'population_overview';
			this.parent(dialog, Imperion.Util.Helper.url('account', 'overview', 'population'), {
				caption : this.translate('dialog__tab_population'),
				params : {
				},
				module : {
					factory : null,
					params	: {
		 			}
				}
			});
		}
	}
);

Imperion.Interface.Dialog.Context.Overview.Ressources = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Overview.Ressources.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		modal	: false,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'ressources_overview';
			this.parent(dialog, Imperion.Util.Helper.url('account', 'overview', 'resources'), {
				caption : this.translate('dialog__tab_resources'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.resourcesOverview,
					params	: {
		 			}
				}
			});
		}
	}
);

Imperion.Interface.Dialog.Context.Overview.Population = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Overview.Population.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		modal	: false,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'population_overview';
			this.parent(dialog, Imperion.Util.Helper.url('account', 'overview', 'population'), {
				caption : this.translate('dialog__tab_population'),
				params : {
				},
				module : {
					factory : null,
					params	: {
		 			}
				}
			});
		}
	}
);

Imperion.Interface.Dialog.Context.Endgame.Victory = new Class(
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,
		
		size : 'big',
	
		hasTab : true,
		
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'endgame_victory';
	
	    	this.parent(dialog, Imperion.Util.Helper.url('endgame', 'index', 'victory'), {
				caption : this.translate('dialog__tab_endgame_victory'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.endgameVictory,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Endgame.Screen = new Class(
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		dragable : true,
		
		size : 'big',
	
		hasTab : true,
		
	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'endgame_screen';
	
	    	this.parent(dialog, Imperion.Util.Helper.url('endgame', 'index', 'screen'), {
				caption : this.translate('dialog__tab_endgame_screen'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.endgameScreen,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Admiral.Techtree = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Techtree.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		size : 'big',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id		= 'admiral_techtree';

			this.parent(dialog, Imperion.Util.Helper.url('admiral', 'index', 'index'), {
				caption : this.translate('dialog__tab_admiral_techtree'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.admiralTechtree,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Forum.Index = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Forum.Index.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		Implements : [],

		size : 'small',

		hasTab : true,

		modal: false,
		
		dragable : true,
	    
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, type) {
			this.id = 'forum_' + type;
	    	
			this.parent(dialog, Imperion.Util.Helper.url('alliance', 'index', 'forum'), {
				caption : this.translate('dialog__tab_'+this.id),
				params : {},
				module : {
					factory : Imperion.Interface.Module.Factory.forumIndex,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Forum.Thread = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Forum.Thread.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,
		
		Implements : [],

		size : 'small',

		hasTab : true,

		modal: false,
		
		dragable : true,
	    
		id_threat : 0,
		
	    /**
	     * @constructs
	     */
	    initialize : function(dialog, threadId) {
			this.id = 'thread_' + threadId;
			this.id_threat = threadId;
	    	
			this.parent(dialog, Imperion.Util.Helper.url('alliance', 'index', 'thread'), {
				caption : this.translate('dialog__tab_forum_thread'),
				params : {
					thread	: threadId
				},
				module : {
					factory : Imperion.Interface.Module.Factory.forumThread,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Alliance.Index = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Alliance.Index.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		modal	: false,

		size : 'small',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog) {
	    	this.id = 'alliance_index';
			this.parent(dialog, Imperion.Util.Helper.url('alliance', 'index', 'alliance-index'), {
				caption : this.translate('dialog__tab_alliance_index'),
				params : {
				},
				module : {
					factory : Imperion.Interface.Module.Factory.allianceIndex,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Alliance.Profile = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Alliance.Profile.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable   : true,

		modal	   : false,

		size       : 'small',

		hasTab     : true,

	    /**
		 * @param ownAlliance parameter to check if the allianceButton in the controlpanel was clicked
		 *
	     * @constructs
	     */
	    initialize : function(dialog, allianceId, ownAlliance) {
			if(allianceId === undefined) {
				allianceId = 1;
			}
			this.id = 'alliance_profile_' + allianceId;

			//reason: if a player was kicked by an alliance leader
			//the frontend does not know it, till the next request (asyncHelper)
			//there is no problem except one situation:
			//if the next request (after being kicked) is a click on the alliance button in the controlpanel
			//then the frontend would not know that the index dialog should be opened
			//it would open the old alliance profile. For that there is a check in the ownallianceprofile action.
			//but this check will end in a bug, if the player tries to open an alliance profile over e.g. the ranking list.
			//then also the alliance index dialog would be openend
			var urlAction = 'allianceprofile';
			if(ownAlliance){
				urlAction = 'ownallianceprofile';
			}

			this.parent(dialog, Imperion.Util.Helper.url('alliance', 'index', urlAction), {
				caption : this.translate('dialog__tab_alliance_profile'),
				params : {
					'allianceId' : allianceId
				},
				module : {
					factory : Imperion.Interface.Module.Factory.allianceProfile,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Stream.Index = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Stream.Index.prototype */
	{
		Extends : Imperion.Interface.Dialog.Context.Request,

		Implements : [],

		size : 'stream',

		hasTab : true,

		dragable : true,

		id : 'streamReport',

		modal: false
	}
);

Imperion.Interface.Dialog.Context.Stream.Report = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Stream.Report.prototype */
	{
		Extends : Imperion.Interface.Dialog.Context.Stream.Index,

		id : 'streamReport',

		/**
		 * @constructs
		 */
		initialize : function(dialog) {
			this.parent(dialog, Imperion.Util.Helper.url('stream', 'report', 'index'), {
				caption : this.translate('dialog__tab_stream_report'),
				params : {
					id : this.id
				},
				module : {
					factory : Imperion.Interface.Module.Factory.streamReport,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Stream.ReportStarred = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Stream.ReportStarred.prototype */
	{
		Extends : Imperion.Interface.Dialog.Context.Stream.Index,

		id : 'streamReportStarred',

		/**
		 * @constructs
		 */
		initialize : function(dialog) {
			this.parent(dialog, Imperion.Util.Helper.url('stream', 'report', 'starred'), {
				caption : this.translate('dialog__tab_stream_report_starred'),
				params : {
					id : this.id
				},
				module : {
					factory : Imperion.Interface.Module.Factory.streamReportStarred,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Stream.ReportStory = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Stream.ReportStory.prototype */
	{
		Extends : Imperion.Interface.Dialog.Context.Stream.Index,

		id : 'streamReportStory',

		/**
		 * @constructs
		 */
		initialize : function(dialog) {
			this.parent(dialog, Imperion.Util.Helper.url('stream', 'report', 'story'), {
				caption : this.translate('dialog__tab_stream_report_story'),
				params : {
					id : this.id
				},
				module : {
					factory : Imperion.Interface.Module.Factory.streamReportStory,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Report.ReportDetail = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Report.ReportDetail.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		size : 'stream',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, reportId, elementReportData) {
			this.id = 'reportDetail'+reportId;

			this.parent(dialog, Imperion.Util.Helper.url('stream', 'reportdetail', 'index'), {
				caption : this.translate('dialog__tab_stream_report_detail'),
				params : {
					id : reportId
				},
				module : {
					factory : Imperion.Interface.Module.Factory.reportDetail,
					params	: {
						elementReportData : elementReportData
					}
				}
			});
		}
	}
);
Imperion.Interface.Dialog.Context.Report.ReportStory = new Class(
	/** @lends Imperion.Interface.Dialog.Context.Report.ReportStory.prototype */
	{
		Extends    : Imperion.Interface.Dialog.Context.Request,

		dragable : true,

		size : 'story',

		hasTab : true,

	    /**
	     * @constructs
	     */
	    initialize : function(dialog, reportId) {
			this.id = 'reportDetail'+reportId;

			this.parent(dialog, Imperion.Util.Helper.url('stream', 'reportdetail', 'index'), {
				caption : this.translate('dialog__tab_stream_report_detail'),
				params : {
					id : reportId
				},
				module : {
					factory : null,
					params	: {}
				}
			});
		}
	}
);
Imperion.Interface.Areas = new Class.Singleton({
	/**
	 * registered areas
	 * 
	 * @var Hash
	 */
	areas : null,
	
	/**
	 * prepare objects
	 */
	initialize : function() {
		this.areas = new Hash();
	},
	
	/**
	 * register an area
	 * 
	 * @param String areaName
	 * 
	 * @return Imperion.Interface.Area 
	 */
	register : function(areaName) {
		var area;
		if(!this.areas.has(areaName)) {
			area = new Imperion.Interface.Area(areaName);
			this.areas.set(areaName, area);
		}
		else {
			area = this.areas.get(areaName); 
		}
		return area;
	},
	
	/**
	 * get an area
	 * 
	 * @param String areaName
	 * 
	 * @return Imperion.Interface.Area
	 */
	get : function(areaName) {
		return this.areas.get(areaName);
	}
});

Imperion.Interface.Area = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class],
	
	/**
	 * name of the area
	 */
	areaName : '',
	
	/**
	 * destroy callback
	 * 
	 * @var function
	 */
	onDestroy : null,
	/**
	 * prepare the object
	 */
	initialize : function(areaName) {
		this.onDestroy = null;
		this.areaName = areaName;
		this.loadElements();
	},
	
	/**
	 * set the content and append callback for destroy
	 * 
	 * @param Imperion.Util.Response response
	 * @param function destroyCallback
	 */
	setContent : function(response, destroyCallback) {
		this.destroy();
		this.setElementHtmlWithDomReadyCallback(this.elements.container, response.getResponseHtml(), response.evalResponseJs.bindNew(response));
		if(destroyCallback) {
			this.onDestroy = destroyCallback;
		}
	},

	/**
	 * destroy the area
	 * 
	 * @return void
	 */
	destroy : function() {
		if(this.onDestroy) {
			try {
				this.onDestroy();
			}
			catch(e) {
				console.log(e);
			}
		}
		this.elements.container.empty();
	},
	
	/**
	 * set destroy callback
	 * 
	 * @param function destroyCallback
	 * 
	 * @return void
	 */
	setDestroyCallback : function(destroyCallback) {
		this.onDestroy = destroyCallback;
	},
	
	/**
	 * load elements from dom
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate(this.areaName);
	}
});

Imperion.Interface.DynamicArea = new Class({
	Extends    : Imperion.Interface.Area,
	
	initialize : function(areaName, container) {
		this.onDestroy = null;
		this.areaName = areaName;
		this.loadElements(container);
	},
		
	/**
	 * load elements from dom
	 * 
	 * @return void
	 */
	loadElements : function(container) {
		this.elements.container = container;
	}
});

Imperion.Interface.BlackLayer = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class],
	
	/**
	 * prepare the black layer
	 * 
	 * @return void
	 */
	initialize : function() {
		//load DOM Elements
		this.loadElements();
	},	

	/**
	 * load black layer elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('BlackLayer');
	}
});
/**
 * imperion clock
 */
Imperion.Interface.Clock = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Module],

	/**
	 * timestamp to sync with server
	 * 
	 * @var Int
	 */
	syncTimeStamp : null,
	/**
	 * offset for synchronize
	 * 
	 * @var Int
	 */
	syncOffset : 0,
	
	/**
	 * local offset to utc
	 * 
	 * @type Number
	 */
	localOffset : 0,
	
	/**
	 * date object for format ...
	 * 
	 * @type	Date
	 */
	dateObj : null,
	
	/**
	 * constructor
	 * 
	 * 
	 */
	initialize : function(secondTimer, user) {
		secondTimer.attach('Imperion.Interface.Clock', this);
		this.setUser(user);
		this.syncTimeStamp = null;
		this.syncOffset = null;
		//create Date instance
		this.dateObj = new Date();
		this.localOffset = this.dateObj.getTimezoneOffset() * 60000;
		//load html elements on domready (because singleton)
		this.loadElements();
	},
	/**
	 * do a step each second
	 * 
	 * function called from timer observable
	 * 
	 * @param Object timerObj
	 */
	timerStep : function(timerObj) {
		//update time only if no lag occours
		if(!timerObj.lag) {
			this.set(this.toUTC(timerObj.currentTime));
		}
	},
	
	/**
	 * convert to utc
	 * 
	 * @param	{Number}	convertTime
	 * 
	 * @returns	{Number}
	 */
	toUTC : function(convertTime) {
		   return convertTime + this.localOffset; 
	},
	
	/**
	 * set new time
	 * 
	 * @param Int newTime
	 */
	set : function(newTime) {
		//calc current time
		var localTime = newTime + this.user.getOffset();
		//check for sync
		if(this.syncTimeStamp !== null) {
			//console.log(localTime, this.syncTimeStamp, this.syncOffset);
		}
		//set time
		this.dateObj.set('Time', localTime);
		this.elements.container.set('text', this.dateObj.format(this.user.getTimeFormat()));
	},
	/**
	 * synchronize clock with a timestamp
	 * 
	 * @var Int serverTime
	 * @var Int timeZone
	 */
	synchronize : function(serverTime, timeZone) {
		//get client time
		clientTime = new Date().get('Time');
		//cast to string
		var checkDigitsTemp = syncTimestamp + '';
		//check if timestamp is in seconds
		if(checkDigitsTemp.length === 10) {
			//add miliseconds
			syncTimestamp = syncTimestamp * 1000;
		}
		this.syncTimeStamp = syncTimestamp;
		this.syncOffset = new Date().getTime();
	},
	/**
	 * load elements
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('Clock');
	}
});
Imperion.Interface.ContextMenu = new Class({
	Extends : Imperion.Util.List,
	
	Implements : [Imperion.Observable],
	
	/**
	 * object binded to contextmenu which will be transmitted each click on a item to all listener
	 * 
	 * @var mixed
	 */
	bindObject : null,
	
	/**
	 * prepare the contextmenu
	 * 
	 * @return void
	 */
	initialize : function() {
		//call parent constructor
		this.parent();
		//reset attributes
		this.bindObject = null;
		//
		this.loadElements();
	},
	
	/**
	 * override add method
	 * 
	 * @param Imperion.Interface.Map.ContextmenuItem
	 * 
	 * @return void
	 */
	add : function(item) {
		this.parent(item);
		item.elements.container.inject(this.elements.list, 'top');
	},
	
	/**
	 * show the menu
	 * 
	 * @return void
	 */
	show : function() {
		if(this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
		}
	},
	
	/**
	 * hide the menu
	 * 
	 * @return void
	 */
	hide : function() {
		if(!this.elements.container.hasClass('hideContainer')) {
			this.elements.container.addClass('hideContainer');
		}
	},
	
	/**
	 * set binded object to contextmenu
	 * 
	 * @param mixed bindObject
	 * 
	 * @return void
	 */
	setBindObject : function(bindObject) {
		this.bindObject = bindObject;
	},
	
	/**
	 * get binded object to contextmenu
	 * 
	 * @return mixed|null
	 */
	getBindObject : function(bindObject) {
		if(!this.bindObject) {
			return null;
		}
		return this.bindObject;
	},
	
	/**
	 * set the position of the context menu
	 * 
	 * @param int newX
	 * @param int nexY
	 * 
	 * @return void
	 */
	setPosition : function(newX, newY) {
		this.elements.container.setStyles({
			top : newY,
			left : newX
		});	
	},
	
	/**
	 * clicked event callback
	 * 
	 * @param Imperion.Interface.Map.ContextmenuItem item
	 * 
	 * @return void
	 */
	onItemClick : function(item) {
		//notify listens
		this.notify({
			itemType : item.options.type,
			bindObject : this.getBindObject()
		}, 'onContextItemClick');
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceContextmenu');
		this.elements.list = this.elements.container.getElement('.mc');
	}
});

Imperion.Interface.Map.ContextmenuItem = new Class({
	Extends : Imperion.Util.ListItem,
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		type : 0,
		caption : 'undefined'
	},
	
	/**
	 * prepare the item
	 * 
	 * @param mixed itemId
	 * @param Imperion.Interface.Map.Contextmenu parentList
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(id, parentList, options) {
		this.parent(id, parentList, options);
		this.loadElements();
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click':
				//call parent method for event delegation
				this.parentList.onItemClick(this);
				break;
		}
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('InterfaceContextmenuItem');
		this.elements.link = this.elements.container.getElement('SPAN');
		this.elements.link.set('text', this.options.caption);
		
		//add click event
		this.addEvent('click', this.elements.link, $H({
			action : 'click'
		}));
	}
	

});
Imperion.Interface.ControlPanel = new Class(
	/** @lends Imperion.Interface.ControlPanel */
	{
		Implements : [Imperion.Module, Imperion.Util.Class, Imperion.Template, Imperion.Event],

		/**
		 * currently stored report count
		 *
		 * @type Number
		 */
		reports : 0,

		/**
		 * currently stored message count
		 *
		 * @type Number
		 */
		messages : 0,
		
		/**
		 * currently admiral level
		 *
		 * @type Number
		 */
		admiralLevel : 0,
		
		/**
		 * currently admiral free skillpoints
		 *
		 * @type Number
		 */
		admiralFreeSkillpoints : 0,
		
		/**
		 * currently admiral percentage experience till next level
		 *
		 * @type Number
		 */
		admiralPercentageExperienceTillNextLevel : 0,
		
		/**
		 * current admiral experience
		 *
		 * @type Number
		 */
		admiralExperience: 0,

		/**
		 * admiral experience till next level
		 *
		 * @type Number
		 */
		admiralNextLevelExperience: 0,
		
		/**
		 * tooltip handle
		 *
		 * @type Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,
		
		/**
		 * html tooltip handle
		 *
		 * @type Imperion.Interface.Gui.HtmlTooltip
		 */
		htmlTooltip : null,

		/**
		 * quest object
		 *
		 * @type	Imperion.Quest
		 */
		questObj : null,
		
		/**
		 * options
		 * 
		 * @var Object
		 */
		options : {
			experienceParts		: 20
		},

		/**
		 * prepare the root
		 *
		 * @class control panel handling
		 *
		 * @param	{Object}							data	control panel init data
		 * @param	{Imperion.Interface.Gui.Tooltip}	tooltip
		 * @param	{Imperion.Interface.Gui.HtmlTooltip}	htmlTooltip
		 * @param	{Imperion.Quest}					questObj
		 *
		 * @constructs
		 */
		initialize : function(data, tooltip, htmlTooltip, questObj) {
			//
			this.tooltip		= tooltip;
			this.htmlTooltip	= htmlTooltip;
			this.questObj		= questObj;
			//load elements
			this.loadElements();
			//set data
			this.setMessageCount(data.messages);
			this.setReportCount(data.reports);
			this.setAdmiralLevel(data.admiralLevel);
			this.setAdmiralFreeSkillpoints(data.admiralFreeSkillpoints);
			this.setAdmiralExperiencePercent(data.admiralExperiencePercentTillNextLevel);
			this.setAdmiralExperience(data.admiralCurrentExperience);
			this.setAdmiralNextLevelExperience(data.admiralNextLevelExperience);
			
		},

		/**
		 * set reports count
		 *
		 * @param	{Number}	newCount
		 *
		 * @returns {Void}
		 */
		setReportCount : function(newCount) {
			newCount = newCount.toInt();
			if(this.reports === 0 && newCount > 0) {
				this.elements.buttons.reports.addClass('new').getElement('SPAN').set('text', newCount > 99 ? 99 : newCount);
			}
			else if(this.reports >= 0 && newCount === 0) {
				this.elements.buttons.reports.removeClass('new').getElement('SPAN').set('text', ' ');
			}
			else {
				this.elements.buttons.reports.getElement('SPAN').set('text', newCount > 99 ? 99 : newCount);
			}
			this.reports = newCount;
		},

		/**
		 * object wrapping
		 *
		 * @param	{Object}	params
		 *
		 * @returns {Void}
		 */
		_setReportCount : function(params) {
			this.setReportCount(params.count.toInt());
		},

		_setAllianceId : function(params) {
			this.getUser().setAllianceId(params.allianceId);
		},

		/**
		 * set message count
		 *
		 * @param	{Number}	newCount
		 *
		 * @returns {Void}
		 */
		setMessageCount : function(newCount) {
			newCount = newCount.toInt();
			if(this.messages === 0 && newCount > 0) {
				this.elements.buttons.messages.addClass('new').getElement('SPAN').set('text', newCount > 99 ? 99 : newCount);
			}
			else if(this.messages >= 0 && newCount === 0) {
				this.elements.buttons.messages.removeClass('new').getElement('SPAN').set('text', ' ');
			}
			else {
				this.elements.buttons.messages.getElement('SPAN').set('text', newCount > 99 ? 99 : newCount);
			}
			this.messages = newCount;
		},

		/**
		 * object wrapping
		 *
		 * @param	{Object}	params
		 *
		 * @returns {Void}
		 */
		_setMessageCount : function(params) {
			this.setMessageCount(params.count.toInt());
		},
		
		/**
		 * set admiral level
		 * 
		 * @param	{Number}	admiralLevel
		 * 
		 * @returns {Void}
		 */
		setAdmiralLevel : function(level)
		{
			this.admiralLevel = level;
			this.elements.admiral.level.set('text', this.admiralLevel); 
		},
		
		/**
		 * set admiral experience
		 * 
		 * @param	{Number}	percentDoneTillNextLevel
		 * 
		 * @returns {Void}
		 */
		setAdmiralExperiencePercent : function(percentDoneTillNextLevel)
		{
			var experiencePart = 0;
			this.elements.admiral.experience.erase('class');
			
			this.admiralPercentageExperienceTillNextLevel = percentDoneTillNextLevel;
			
			if (!this.admiralPercentageExperienceTillNextLevel == 0)
			{
				var partValue = 100 / this.options.experienceParts;
				experiencePart = Math.floor((this.admiralPercentageExperienceTillNextLevel + partValue) / partValue);
			}
			
			this.elements.admiral.experience.addClass(this.elements.admiral.experienceClass);
			this.elements.admiral.experience.addClass('part' + experiencePart);
		},
		
		/**
		 * set admiral free skillpoints
		 * 
		 * @param	{Number}	freeSkillpoints
		 * 
		 * @returns {Void}
		 */
		setAdmiralFreeSkillpoints : function(freeSkillpoints)
		{
			this.admiralFreeSkillpoints = freeSkillpoints;
			
			if (this.admiralFreeSkillpoints > 0)
			{
				this.elements.admiral.freeSkillpoints.removeClass('hideContainer');
			}
			else
			{
				if (!this.elements.admiral.freeSkillpoints.hasClass('hideContainer'))
				{
					this.elements.admiral.freeSkillpoints.addClass('hideContainer');
				}
			}
		},
		
		/**
		 * set admiral experience
		 *
		 * @param	{Number}	admiralExperience
		 *
		 * @returns {Void}
		 */
		setAdmiralExperience: function(admiralExperience)
		{
			this.admiralExperience = admiralExperience;
			var admiralExperienceContainer = this.elements.admiral.htmlTooltipContainer.getElement('P .admiralExperience');
			admiralExperienceContainer.set('text', this.getUser().formatNumber(this.admiralExperience));
		},

		/**
		 * set admiral next level experience
		 *
		 * @param	{Number}	admiralNextLevelExperience
		 *
		 * @returns {Void}
		 */
		setAdmiralNextLevelExperience: function(admiralNextLevelExperience)
		{
			this.admiralNextLevelExperience = admiralNextLevelExperience;
			var admiralNextLevelExperienceContainer = this.elements.admiral.htmlTooltipContainer.getElement('P .admiralNextLevelExperience');
			admiralNextLevelExperienceContainer.set('text', this.getUser().formatNumber(this.admiralNextLevelExperience));
		},
		
		/**
		 * object wrapping
		 *
		 * @param	{Object}	params
		 *
		 * @returns {Void}
		 */
		_setAdmiralValues : function(params) {
			this.setAdmiralLevel(params.level.toInt());
			this.setAdmiralExperiencePercent(params.percent_done_till_next_level.toFloat());
			this.setAdmiralFreeSkillpoints(params.free_skillpoints.toInt());
			this.setAdmiralExperience(params.current_experience.toInt());
			this.setAdmiralNextLevelExperience(params.next_level_experience.toInt());
		},

		/**
		 * enable button
		 * 
		 * @param	{String}	buttonName
		 * 
		 * @returns	{Void}
		 */
		enableButton : function(buttonName) {
			if(this.elements.buttons[buttonName]) {
				this.elements.buttons[buttonName].removeClass('disabled');
			}
		},
		
		/**
		 * disable button
		 * 
		 * @param	{String}	buttonName
		 * 
		 * @returns	{Void}
		 */
		disableButton : function(buttonName) {
			if(this.elements.buttons[buttonName]) {
				this.elements.buttons[buttonName].addClass('disabled');
			}
		},
		
		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param {Element.Event}	eventObject
		 * @param {Hash}			params
		 *
		 * @returns {Boolean}
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'show_reports':
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('streamReport');
					var streamReport = Imperion.Interface.Dialog.Context.Factory.streamReport(dialog);
					Imperion.Interface.Dialog.Context.Factory.streamReportStarred(dialog);
					Imperion.Interface.Dialog.Context.Factory.streamReportStory(dialog);
					streamReport.showContext();
					break;
				case 'show_help':
					/*
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('Help');
					var helpContext = Imperion.Interface.Dialog.Context.Factory.help(dialog);
					helpContext.showContext();
					*/
					this.showHelpDialog('DEFAULT', null, 'BIG');
					break;
				case 'show_statistics':
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('rankingList');
					var playerStatistics = Imperion.Interface.Dialog.Context.Factory.playerStatistics(dialog);
					playerStatistics.showContext();
					break;
				case 'show_endgame_screen':
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('endgame_screen');
					var endgameScreen = Imperion.Interface.Dialog.Context.Factory.endgameScreen(dialog);
					endgameScreen.showContext();
					break;
				case 'show_admiral':
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('admiral_techtree');
					var techtree = Imperion.Interface.Dialog.Context.Factory.admiralTechtree(dialog);
					techtree.showContext();
					break;
				case 'show_alliance':
					if(this.getUser().getAllianceId() > 0){
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_profile');
						var profile = Imperion.Interface.Dialog.Context.Factory.allianceProfile(dialog, this.getUser().getAllianceId(),true);
						var forum = Imperion.Interface.Dialog.Context.Factory.forumIndex(dialog,1);
						profile.showContext();
					}else{
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_index');
						var alliance = Imperion.Interface.Dialog.Context.Factory.allianceIndex(dialog);
						alliance.showContext();
					}
					break;
				case 'show_tooltip':
					var section = params.get('section');
					if(this.elements.buttons[section]) {
						this.tooltip.setText(params.get('text'));
						this.tooltip.show();
					}
					break;
				case 'hide_tooltip':
					this.tooltip.hide();
					break;
				case 'show_experience_tooltip':
					this.elements.admiral.htmlTooltipContainer.removeClass('hideContainer');
					this.htmlTooltip.setHtml(this.elements.admiral.htmlTooltipContainer);
					this.htmlTooltip.show();
					break;
				case 'hide_experience_tooltip':					
					this.elements.admiral.htmlTooltipContainer.inject(document.body);
					this.elements.admiral.htmlTooltipContainer.addClass('hideContainer');
					this.htmlTooltip.hide();
					break;
				case 'show_messages':
					this.mailHandle = Imperion.Interface.Igm.Factory.handle();
					this.mailHandle.open();
					break;
				case 'show_quest':
					this.questObj.toggleQuestSystem();
					break;
			}
			return false;
		},

		/**
		 * load dom elements
		 *
		 * @returns {Void}
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('ControlPanel');
			this.elements.buttons = {};
			$H({
				statistics		: '.statistics A',
				endgame_screen	: '.endgameScreen A',
				admiral			: '.character A',
				settings		: '.settings A',
				logout			: '.logout A',
				messages		: '.messages A',
				reports			: '.reports A',
				quest			: '.quest A',
				alliance		: '.alliance A',
				help			: '.help A'
			}).each(function(className, section) {
				this.elements.buttons[section] = this.elements.container.getElement(className);
				if (section != 'logout' && !this.elements.buttons[section].hasClass('disabled'))
				{
					this.addEvent('click', this.elements.buttons[section], $H({
						action : 'show_' + section
					}));
				}
				var text = this.elements.buttons[section].getProperty('title');
				if(text) {
					this.addEvent('mouseenter', this.elements.buttons[section], $H({
						action	: 'show_tooltip',
						text	: text,
						section	: section
					}));
					this.addEvent('mouseleave', this.elements.buttons[section], $H({
						action : 'hide_tooltip',
						section: section
					}));
					this.elements.buttons[section].removeProperty('title');
				}
			}, this);
			
			this.elements.admiral = {};
			this.elements.admiral.level = this.elements.container.getElement('.level');
			this.elements.admiral.experience = this.elements.container.getElement('.experience');
			this.elements.admiral.freeSkillpoints = this.elements.container.getElement('.freeSkillpoints');
			this.elements.admiral.experienceClass = this.elements.admiral.experience.get('class');
			this.elements.admiral.htmlTooltipContainer = this.getTemplate('AdmiralExperienceTooltip');
			
			this.addEvent('mouseenter', this.elements.admiral.experience, $H({
				action	: 'show_experience_tooltip'
			}));
			this.addEvent('mouseleave', this.elements.admiral.experience, $H({
				action : 'hide_experience_tooltip'
			}));
		}
	}
);
Imperion.Interface.Plus = new Class(
	/** @lends Imperion.Interface.Plus */
	{
		Implements : [Imperion.Module, Imperion.Util.Class, Imperion.Template, Imperion.Event],

		/**
		 * options
		 * 
		 * @var Object
		 */
		options : {
			animationFx : {
				morphOptions: {
					duration : 1500,
					transition : Fx.Transitions.Sine.easeOut
					
				},
				fxOptionsFrom: {
					opacity: 1
					
				},
				fxOptionsTo: {
					opacity: 0.5
				}
			}
		},
		
		/**
		 * init data
		 * 
		 * @var Object
		 */
		data : null,
		
		/**
		 * remainingTime in seconds
		 * 
		 * @var integer
		 */
		remainingTime : null,
		
		/**
		 * credits
		 * 
		 * @var integer
		 */
		credits : 0,

		/**
		 * GUI-Animation instance
		 * 
		 * @type Imperion.Interface.Gui.Animation
		 */
		animation : 0,

		/**
		 * prepare the root
		 *
		 * @param	{Object}	data	plus init data
		 *
		 * @constructs
		 */
		initialize : function(data) {
			//load elements
			this.loadElements();
			this.animation = Imperion.Interface.Gui.Factory.animation(this.elements.glow, this.options.animationFx);
			this.animation.pulse();
			
			// set data
			this.updateCredits(data.credits);
			this.updateRemainingTime(data.remainingTime);
		},
		
		updateCredits : function(credits)
		{
			this.credits = credits;
			this.elements.credits.set('text', Imperion.Util.Registry.get('user').formatNumber(this.credits));
		},
		
		updateRemainingTime : function(remainingTime)
		{
			this.remainingTime = remainingTime;
			this.elements.remainingTime.set('text', Imperion.Util.Format.remainingTime(this.remainingTime));
		},
		
		_updatePlus : function(params)
		{
			this.updateCredits(params.credits.toInt());
			this.updateRemainingTime(params.remainingTime.toInt());
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param {Element.Event}	eventObject
		 * @param {Hash}			params
		 *
		 * @returns {Boolean}
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			
			switch(action) {
				case 'show_plus':
					var dialog					= Imperion.Interface.Dialog.Factory.handle().getDialog('plus');
					var plusContext				= Imperion.Interface.Dialog.Context.Factory.plus(dialog);
					var paymentOrdersContent	= Imperion.Interface.Dialog.Context.Factory.paymentOrders(dialog);
					if(Imperion.Util.Factory.registry().get('payment')) {
						var paymentProductsContent	= Imperion.Interface.Dialog.Context.Factory.paymentProducts(dialog);
						var paymentPurchasesContent	= Imperion.Interface.Dialog.Context.Factory.paymentPurchases(dialog);
					}
					plusContext.showContext();
					break;
			}
		},
		
		/**
		 * load dom elements
		 *
		 * @returns {Void}
		 */
		loadElements : function() {
			this.elements.container		= this.getTemplate('Plus');
			this.elements.glow			= this.elements.container.getElement('.glow');
			this.elements.credits		= this.elements.container.getElement('.creditsContainer span');
			this.elements.remainingTime	= this.elements.container.getElement('.remainingTimeContainer span');
			
			this.addEvent('click', this.elements.container, $H({
				action : 'show_plus'
			}));
		}
	}
);
Imperion.Interface.Factory = new Class.Singleton({
	
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : {
		blackLayer  : null,
		clock : null,
		dialogModal : null,
		mission : null,
		planetSurface : null
	},
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			blackLayer  : null,
			clock : null,
			dialogModal : null,
			mission : null,
			planetSurface : null
		};
	},
	
	/**
	 * create control panel
	 * 
	 * @param	{Object}	data
	 * 
	 * @returns	{Imperion.Interface.ControlPanel} 
	 */
	controlpanel : function(data) {
		return new Imperion.Interface.ControlPanel(data.data, Imperion.Interface.Gui.Factory.tooltip(), Imperion.Interface.Gui.Factory.htmltooltip(), Imperion.Factory.bootstrap().getModule('Imperion.Quest'));
	},
	
	/**
	 * return a mission instance
	 * 
	 * @return Imperion.Interface.Mission
	 */
	mission : function() {
		if(!this.storage.mission) {
			this.storage.mission = new Imperion.Interface.Mission(Imperion.Util.GlobalEvents, Imperion.Interface.Gui.Factory.htmltooltip());
		}
		return this.storage.mission;
	},
	
	/**
	 * returns a mission item
	 * 
	 * @param Imperion.Interface.Mission parentMission
	 * @param Object options
	 * 
	 * @return Imperion.Interface.MissionItem
	 */
	missionItem : function(parentMission, options) {
		return new Imperion.Interface.MissionItem(parentMission, options);
	},
	
	/**
	 * return a planet surface instance
	 * 
	 * @param {Object} surfaceData
	 * 
	 * @return Imperion.Interface.PlanetSurface
	 */
	planetSurface : function(surfaceData, showLevel) {
		if(!this.storage.planetSurface) {
			this.storage.planetSurface = new Imperion.Interface.PlanetSurface(
				surfaceData, 
				Imperion.Factory.registry().get('planet'),
				Imperion.Factory.registry().get('user'),
				Imperion.Util.Factory.secondTimer(),
				Imperion.Interface.Gui.Factory.tooltip(),
				showLevel
			);
		}
		return this.storage.planetSurface;
	},
	
	/**
	 * create invasion object
	 * 
	 * @param	{Number}	time
	 * 
	 * @returns	{Imperion.Interface.Invasion}
	 */
	invasion : function(time) {
		return new Imperion.Interface.Invasion(time, Imperion.Util.Factory.secondTimer());
	},
	
	/**
	 * create invasion object
	 *
	 * @param	{Object}	params
	 * 
	 * @returns	{Imperion.Interface.Invasion}	
	 */
	invasionByObject : function(params) {
		return this.invasion(params.time);
	}, 
	
	/**
	 * surface by object
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns	{Imperion.Interface.PlanetSurface}
	 */
	planetSurfaceByObject : function(params) {
		return this.planetSurface(params.data, params.level);
	},
	
	/**
	 * return a planet surface contextmenu instance
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * 
	 * @return Imperion.Interface.PlanetSurfaceContextMenu
	 */
	planetSurfaceContextMenu : function(planetSurface) {
		return new Imperion.Interface.PlanetSurfaceContextMenu(this.contextMenu(), planetSurface);
	},
	
	/**
	 * returns a empty surface slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemEmpty
	 */
	planetSurfaceSlotItemEmpty : function(planetSurface, position, options) {
		return new Imperion.Interface.PlanetSurfaceSlotItemEmpty(planetSurface, position, options);
	},
	
	/**
	 * returns a trash surface slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemTrash
	 */
	planetSurfaceSlotItemTrash : function(planetSurface, position, options) {
		return new Imperion.Interface.PlanetSurfaceSlotItemTrash(planetSurface, position, options);
	},
	
	/**
	 * returns a taken surface slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemTaken
	 */
	planetSurfaceSlotItemTaken : function(planetSurface, position, options) {
		return new Imperion.Interface.PlanetSurfaceSlotItemTaken(planetSurface, position, options);
	},
	
	/**
	 * returns a build surface slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position1
	 * @param Object options
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemBuild
	 */
	planetSurfaceSlotItemBuild : function(planetSurface, position, options) {
		return new Imperion.Interface.PlanetSurfaceSlotItemBuild(planetSurface, position, options);
	},
	
	/**
	 * returns a planet surface slot item by type
	 * 
	 * @param string slotItemType
	 * @param Object position
	 * @param Object options
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItem
	 */
	planetSurfaceSlotItemByType : function(slotItemType, position, options) {
		switch(slotItemType) {
			case SURFACE_SLOT_TYPE_EMPTY:
				return this.planetSurfaceSlotItemEmpty(position, options);
				break;
			case SURFACE_SLOT_TYPE_TRASH:
				return this.planetSurfaceSlotItemTrash(position, options);
				break;	
			case SURFACE_SLOT_TYPE_TAKEN:
				return this.planetSurfaceSlotItemTaken(position, options);
				break;
			case SURFACE_SLOT_TYPE_BUILD:
				return this.planetSurfaceSlotItemBuild(position, options);
				break;
			case SURFACE_SLOT_TYPE_UNDEFINED:
			default:
				throw '// ERROR HANDLING';
				break;
		}
	},
		
	/**
	 * return planet switch
	 * 
	 * @param {Object} data
	 * 
	 * @type {Imperion.Interface.PlanetSwitch}
	 */
	planetSwitch : function(data) {
		if(!this.storage.planetSwitch) {
			this.storage.planetSwitch = new Imperion.Interface.PlanetSwitch(data.planet, data.attack, Imperion.Util.Factory.globalEvents(), Imperion.Util.Factory.secondTimer());
		}
		return this.storage.planetSwitch;
	},
	
	/**
	 * select planet list
	 * 
	 * @param	{Object}	allPlanets
	 * @param	{Object}	currentPlanet
	 * 
	 * @returns	{Imperion.Interface.SelectPlanetList}
	 */
	selectPlanetList : function(allPlanets, currentPlanet) {
		return new Imperion.Interface.SelectPlanetList(allPlanets, currentPlanet, Imperion.Util.Factory.globalEvents());
	},

	/**
	 * select planet list item headline
	 * 
	 * @param	{Number}								galaxy
	 * @param	{String}								caption
	 * @param	{Imperion.Interface.SelectPlanetList}	parentList
	 * 
	 * @returns	{Imperion.Interface.SelectPlanetListHeadline}
	 */
	selectPlanetListHeadline : function(galaxy, caption, parentList) {
		return new Imperion.Interface.SelectPlanetListHeadline(galaxy, caption, parentList);
	},

	/**
	 * select planet list item planet
	 * 
	 * @param	{Object}								options
	 * qparam	{Number}								galaxy
	 * @param	{Imperion.Interface.SelectPlanetList}	parentList
	 * 
	 * @returns	{Imperion.Interface.SelectPlanetListPlanet}
	 */
	selectPlanetListPlanet : function(options, galaxy, parentList) {
		return new Imperion.Interface.SelectPlanetListPlanet(options, galaxy, parentList);
	},
	
	/**
	 * select planet list instance by object
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns	{Imperion.Interface.SelectPlanetList}
	 */
	selectPlanetListByObject : function(params) {
		return this.selectPlanetList(params.planets, params.current);
	},
	
	/**
	 * return the model dialog
	 * 
	 * @return Imperion.Interface.DialogModal
	 */
	dialogModal : function() {
		if(!this.storage.dialogModal) {
			this.storage.dialogModal = new Imperion.Interface.DialogModal(this.blackLayer());
		}
		return this.storage.dialogModal;
	},
	
	/**
	 * tab item
	 * 
	 * @param mixed parentDialog
	 * 
	 * @return Imperion.Interface.DialogTabItem
	 */
	dialogTabItem : function(parentDialog) {
		return new Imperion.Interface.DialogTabItem(parentDialog);
	},
	
	/**
	 * create a fleet list object
	 * 
	 * @param {String} listType
	 * @param {Object} listData
	 * 
	 * @type Imperion.Interface.FleetList
	 */
	fleetList : function(listType, listData) {
		return new Imperion.Interface.FleetList(
			listType, 
			listData, 
			Imperion.Interface.Infobox.Factory.fleetList(listType), 
			Imperion.Util.Factory.secondTimer(),
			Imperion.Factory.bootstrap()
		);
	},
	
	/**
	 * fleet list by data object
	 * 
	 * @param listData 			data for mapping correct factory
	 * @param listData.type		type of list (incoming, outgoing, orbital and working)
	 * @param listData.data 	data for list
	 * 
	 * @type Imperion.Interface.FleetList
	 */
	fleetListByObject : function(listData) {
		return this.fleetList(listData.type, listData.data);
	},
	
	/**
	 * create a fleetlist item
	 * 
	 * @param {String} mission
	 * @param {Object} data
	 * @param Imperion.Interface.FleetListItem parentList
	 * 
	 * @type Imperion.Interface.FleetListItem
	 */
	fleetListItem : function(mission, data, parentList) {
		return new Imperion.Interface.FleetListItem(mission, data, parentList);
	},
	
	/**
	 * black layer
	 * 
	 * @return Imperion.Interface.BlackLayer
	 */
	blackLayer : function() {
		if(!this.storage.blackLayer) {
			this.storage.blackLayer = new Imperion.Interface.BlackLayer();
		}
		return this.storage.blackLayer;
	},
	
	/**
	 * returns an instance from contextmenu
	 * 
	 * @return Imperion.Interface.ContextMenu
	 */
	contextMenu : function() {
		return new Imperion.Interface.ContextMenu();
	},
	
	/**
	 * return an instance from a contextmenu item
	 * 
	 * @param mixed itemId
	 * @param Imperion.Interface.Contextmenu contextmenu
	 * @param Object options
	 * 
	 * @return Imperion.Interface.Map.ContextmenuItem
	 */
	contextmenuItem : function(itemId, contextmenu, options) {
		return new Imperion.Interface.Map.ContextmenuItem(itemId, contextmenu, options);
	},
	
	/**
	 * return the clock
	 * 
	 * @return Imperion.Interface.Clock
	 */
	clock : function() {
		return new Imperion.Interface.Clock(Imperion.Util.Factory.secondTimer(), Imperion.Factory.registry().get('user'));
	},
	
	/**
	 * retrieve an area without a template for the container but an object 
	 * 
	 * @param String areaName
	 * @param Object container
	 * 
	 * @return Imperion.Interface.DynamicArea
	 */
	dynamicArea : function(areaName, container) {
		return new Imperion.Interface.DynamicArea(areaName, container);
	},
	
	/**
	 * retrieve an area
	 * 
	 * @param String areaName
	 * 
	 * @return Imperion.Interface.Area
	 */
	area : function(areaName) {
		return new Imperion.Interface.Area(areaName);
	},
	
	/**
	 * retrieve an event box
	 * 
	 * @return Imperion.Interface.EventBox
	 */
	eventBox : function() {
		if(!this.storage.eventBox) {
			this.storage.eventBox = new Imperion.Interface.EventBox(Imperion.Interface.Gui.Factory.tooltip());
		}
		return this.storage.eventBox;
	},
	
	/**
	 * create plus object
	 * 
	 * @param	{Object}	data
	 * 
	 * @returns	{Imperion.Interface.Plus} 
	 */
	plus : function(data) {
		if(!this.storage.plus) {
			this.storage.plus = new Imperion.Interface.Plus(data.data);
		}
		return this.storage.plus;
	},

	/**
	 * create storyReport object
	 *
	 * @param	{Object}	data
	 *
	 * @returns	{Imperion.Interface.StoryReport}
	 */
	storyReport : function(data){
		return new Imperion.Interface.StoryReport();
	},

	/**
	 * create endgame object
	 *
	 * @param	{Object}	data
	 *
	 * @returns	{Imperion.Interface.Endgame}
	 */
	endgame : function(data) {
		return new Imperion.Interface.Endgame();
	}
});
/**
 * Fleetlist class
 *
 * Handles the interface Fleetlist buttons. 4 different types exist
 *
 * @class
 */
Imperion.Interface.FleetList = new Class(
	/**
	@lends Imperion.Interface.FleetList.prototype
	*/
	{
		Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Module],

		/**
		 * state of button
		 *
		 * @type {String}
		 */
		state : FLEET_LIST_STATE_DISABLED,

		/**
		 * type of list
		 *
		 * @type {String}
		 */
		type : '',

		/**
		 * infobox handler
		 *
		 * @type Imperion.Interface.Infobox.FleetList
		 */
		infoboxHandle : null,

		/**
		 * items type own
		 *
		 * @type Object
		 */
		items : {
			own : null,
			foreign : null
		},

		/**
		 * timer instance
		 *
		 * @type Imperion.Util.SecondTimer
		 */
		secondTimer : null,

		/**
		 * bootstrap instance for update callback
		 *
		 * @type Imperion.Bootstrap
		 */
		bootstrap : null,

		/**
		 * planet surface
		 *
		 * @type	Imperion.Interface.PlanetSurface
		 */
		planetSurface : null,

		/**
		 * setup fleet list
		 *
		 * @param {String} type type of FleetList
		 * @param {Object} data fleetlist start data
		 * @param Imperion.Interface.Infobox.FleetList 	infoboxHandle
		 * @param Imperion.Util.SecondTimer secondTimer
		 *
		 * @constructs
		 */
		initialize : function(type, data, infoboxHandle, secondTimer, bootstrap) {
			//
			this.items = {
				own : $H(),
				foreign : $H()
			},
			//
			this.type = type;
			this.infoboxHandle = infoboxHandle;
			this.secondTimer = secondTimer;
			this.secondTimer.attach('FleetList' + this.type, this);
			this.bootstrap = bootstrap;
			this.setUser(Imperion.Util.Registry.get('user'));
			this.setPlanet(Imperion.Util.Registry.get('planet'));
			//
			this.loadElements();
			//
			this.planetSurface = null;
			if(this.type === FLEET_LIST_TYPE_INCOMING) {
				try {
					this.planetSurface = this.bootstrap.getModule('Imperion.Interface.PlanetSurface');
				}
				catch(e) {
					if(e !== 'Module [Imperion.Interface.PlanetSurface] not found') {
						throw e;
					}
				}
			}
			//
			this._update(data);
			//
		},

		/**
		 * update
		 *
		 * @param {Array} data
		 *
		 * @type void
		 */
		_update : function(data) {
			this.cleanList();
			$splat(data).each(function(item) {
				this._add(item);
			}, this);
		},

		/**
		 * clean list
		 *
		 * @returns void
		 */
		cleanList : function() {
			this.items.own.each(function(item, type) {
				//item.hide();
				item.clean();
			}, this);
			this.items.own.empty();
			this.items.foreign.each(function(item, type) {
				//item.hide();
				item.clean();
			}, this);
			this.items.foreign.empty();
			this.setState(FLEET_LIST_STATE_DISABLED);
		},

		/**
		 * add an item
		 *
		 * @param {String} 	type
		 * @param {String}	mission
		 * @param {Object} 	params
		 *
		 * @type void
		 */
		add : function(type, mission, params) {
			var item;
			if(!this.items[type].has(mission)) {
				item = Imperion.Interface.Factory.fleetListItem(mission, params, this);
				this.elements.list[type].appendChild(item.elements.container);
				//.inject(this.elements.list[type]);
				this.items[type].set(mission, item);
				//if (this.getState() == FLEET_LIST_STATE_BAD) {
				if((mission === MISSION_ASSAULT || mission === MISSION_INVASION) && type === 'foreign' &&  !this.planet.options.invasion ||
					this.planet.options.invasion &&  mission === 'Orbital fleets' && type === 'foreign' ||
					this.planet.options.invasion && mission === MISSION_DEPLOYMENT
					) {
					item.toBad();
				}
			}
			else {
				this.items[type].get(mission).update(params);
			}
			this.items[type].get(mission).show();
			this.updateState();
		},

		/**
		 * object mapping
		 *
		 * @param {Object} params
		 *
		 * @type void
		 */
		_add : function(params) {
			this.add(params.type, params.mission, params);
		},

		/**
		 * check if list has items
		 *
		 * @type {Boolean}
		 */
		isEmpty : function() {
			if(this.items.own.getLength() > 0) {
				var check = false;
				this.items.own.each(function(item) {
					if(item.visible) {
						check = true;
					}
				});
				if(check) {
					return false;
				}
			}
			if(this.items.foreign.getLength() > 0) {
				var check = false;
				this.items.foreign.each(function(item) {
					if(item.visible) {
						check = true;
					}
				});
				if(check) {
					return false;
				}
			}
			return true;
		},

		/**
		 * listener for timer step
		 *
		 * @param {Object} params
		 *
		 * @return type
		 */
		timerStep : function() {
			this.items.own.each(function(item) {
				item.countdown();
			});
			this.items.foreign.each(function(item) {
				item.countdown();
			});
		},

		/**
		 * get possible state
		 *
		 * calculate the state from active items
		 *
		 * @type {String}
		 */
		getState : function() {
			if(this.isEmpty()) {
				return FLEET_LIST_STATE_DISABLED;
			}
			else {
				if(this.type === FLEET_LIST_TYPE_INCOMING && this.items.foreign[MISSION_ASSAULT] && this.items.foreign[MISSION_ASSAULT].visible && !this.planet.options.invasion) {
					return FLEET_LIST_STATE_BAD;
				}
				if(this.type === FLEET_LIST_TYPE_INCOMING && this.items.foreign[MISSION_INVASION] && this.items.foreign[MISSION_INVASION].visible) {
					return FLEET_LIST_STATE_BAD;
				}
				if(this.type === FLEET_LIST_TYPE_INCOMING && this.items.foreign[MISSION_BOMBARDMENT] && this.items.foreign[MISSION_BOMBARDMENT].visible) {
					return FLEET_LIST_STATE_BAD;
				}
				if(this.type === FLEET_LIST_TYPE_INCOMING && this.items.foreign[MISSION_DEPLOYMENT] && this.planet.options.invasion) {
					return FLEET_LIST_STATE_BAD;
				}
				if(this.type === FLEET_LIST_TYPE_ORBITAL && this.planet.options.invasion) {
					return FLEET_LIST_STATE_BAD;
				}
				return FLEET_LIST_STATE_ENABLED;
			}
		},

		/**
		 * set state of button
		 *
		 * @param {String} newState
		 *
		 * @type void
		 */
		setState : function(newState) {
			this.elements.link.removeProperty('class');
			var attack = false;
			switch(newState) {
				case FLEET_LIST_STATE_DISABLED:
					this.infoboxHandle.hideInfobox();
					this.elements.link.addClass('disabled');
					break;
				case FLEET_LIST_STATE_ENABLED:

					break;
				case FLEET_LIST_STATE_ACTIVE:
					this.elements.link.addClass('active');
					break;
				case FLEET_LIST_STATE_BAD:
					this.elements.link.addClass('bad');
					attack = true;
					break;
			}
			if(this.planetSurface !== null) {
				this.planetSurface.planetAttacked(attack);
			}
			this.state = newState;
		},

		/**
		 * update the state
		 *
		 * @type void
		 */
		updateState : function() {
			this.setState(this.getState());
		},

		/**
		 * finish item
		 *
		 * @param Imperion.Interface.FleetListItem item
		 *
		 * @type void
		 */
		finishItem : function(item) {
			this.updateState();
		},

		/**
		 * open the fleet list dialog
		 *
		 * @returns {Void}
		 */
		openList : function() {
			var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('fleetSummary');
			var fleetSummary = Imperion.Interface.Dialog.Context.Factory.fleetSummary(this.type, dialog);
			fleetSummary.showContext();
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'show_list':
					if(!this.isEmpty()) {
						this.infoboxHandle.setInfoboxPosition(10, 252);
						this.infoboxHandle.setInfoboxWidth(133);
						this.infoboxHandle.showInfobox();
					}
					break;
				case 'hide_list':
					this.infoboxHandle.hideInfobox();
					break;
				case 'open_list':
					if (this.state != FLEET_LIST_STATE_DISABLED) {
						this.openList();
					}
					break;
			}
		},

		/**
		 * load fleet list elements
		 *
		 * @type void
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('FleetList').getElement('.' + this.type);
			this.elements.link = this.elements.container.getElement('A');
			this.addEvent('mouseenter', this.elements.container, $H({
				action : 'show_list'
			}));
			this.addEvent('mouseleave', this.elements.container, $H({
				action : 'hide_list'
			}));
			this.addEvent('click', this.elements.container, $H({
				action : 'open_list'
			}));
			this.elements.list = {};
			//get list container from infobox
			this.elements.list.own = this.infoboxHandle.elements.container.getElement('.own');
			this.elements.list.foreign = this.infoboxHandle.elements.container.getElement('.foreign');
		}
	}
);

/**
 * Fleet list item class
 *
 * @class
 */
Imperion.Interface.FleetListItem = new Class(
	/**
	@lends Imperion.Interface.FleetListItem.prototype
	*/
	{
		Implements : [Imperion.Template, Imperion.Util.Class],

		/**
		 * options
		 *
		 * @type {Object}
		 */
		options : {
			caption1 : '',
			caption2 : '',
			update : ''
		},

		/**
		 * mission type of this item
		 *
		 * @type String
		 */
		mission : '',

		/**
		 * parent list
		 *
		 * @type Imperion.Interface.FleetList
		 */
		parentList : null,

		/**
		 * count value
		 *
		 * @type Array
		 */
		counter : null,

		/**
		 * flag if item is visible
		 *
		 * @type {Boolean}
		 */
		visible : false,

		/**
		 * flag if I have to reload the page next countDown step
		 *
		 * @type {Boolean}
		 */
		reloadPageFlag: false,

		/**
		 * setup the fleet list item
		 *
		 * @param {String} mission
		 * @param {Object} data
		 * @param Imperion.Interface.FleetList parentList
		 *
		 * @construct
		 * @type void
		 */
		initialize : function(mission, data, parentList) {
			this.parentList = parentList;
			//
			this.loadElements();
			//
			this.setMission(mission);
			//
			this.update(data);
		},

		/**
		 * clean item
		 *
		 * @returns {Void}
		 */
		clean : function() {
			this.cleanUp();
		},

		/**
		 * count 1 step down
		 *
		 * @type void
		 */
		countdown : function() {
            if (this.reloadPageFlag == true) {
                this.reloadPageFlag = false;
                this.finishCount();
            }
			if(this.counter !== null) {
				if(this.counter.length > 0) {
					if(this.counter[0] > 0) {
						this.elements.count.set('text', this.parentList.user.formatDuration(this.counter[0]--));
					}
					else {
						if(this.counter[0] === 0) {
                            this.reloadPageFlag = true;
							return;
						}
						this.counter.shift();
						if(this.counter.length > 0) {
							this.elements.count.set('text', this.parentList.user.formatDuration(this.counter[0]--));
							this.elements.top.set('text', this.counter.length + this.options.caption1);
						}
						else {
							this.elements.count.set('text', this.parentList.user.formatDuration(0));
							this.elements.top.set('text', 0 + this.options.caption1);
							//hide
							this.counter = null;
							this.visible = false;
							this.hide();
							this.parentList.finishItem(this);
						}
					}
				}
				else {
					this.counter = null;
				}
			}
		},

		/**
		 * finish a count item
		 *
		 * @type void
		 */
		finishCount : function() {
			if(
				this.mission === MISSION_INVASION ||
				this.mission === 'INVASION_TIMER' ||
				this.mission === MISSION_COLONIZATION ||
				this.mission === MISSION_BOMBARDMENT ||
				(this.mission === MISSION_ASSAULT && this.parentList.planet.options.invasion)
			) {
				this.reloadPage();
			}
			else {
				if(this.options.update !== '') {
					this.parentList.bootstrap.update(this.options.update);
				}
			}
		},

		/**
		 * update the item
		 *
		 * @param {Object} params
		 *
		 * @type void
		 */
		update : function(params) {
			this.show();
			this.options.caption1 = params.caption1;
			this.elements.cap.set('text', params.caption2);
			this.options.caption2 = params.caption2;
			this.options.update = params.update;
			switch(params.countType) {
                case 'countdown':
					this.counter = params.count;
					this.elements.top.set('text', this.counter.length + this.options.caption1);
					break;
				case 'value':
					this.elements.top.set('text', params.caption1);
					this.elements.count.set('text', this.parentList.user.formatNumber(params.count));
					this.counter = null;
					break;
			}
		},

		/**
		 * set the mission
		 *
		 * @param {String} newMission
		 *
		 * @type void
		 */
		setMission : function(newMission) {
			if(this.mission !== '') {
				this.elements.icon.removeClass('ICON_MISSION_SMALL_' + this.mission);
			}
			this.elements.icon.addClass('ICON_MISSION_SMALL_' + newMission);
			this.mission = newMission;
		},

		/**
		 * transform item to bad
		 *
		 * @type void
		 */
		toBad : function() {
			this.elements.container.addClass('bad');
			this.elements.icon.addClass('bad');
		},

		/**
		 * show
		 *
		 * @return void
		 */
		show : function() {
			if(!this.visible) {
				this.elements.container.removeClass('hideContainer');
				this.visible = true;
			}
		},

		/**
		 * hide
		 *
		 * @return void
		 */
		hide : function() {
			if(this.visible) {
				this.elements.container.addClass('hideContainer');
				this.visible = false;
			}
		},

		/**
		 * load item elements
		 *
		 * @type void
		 */
		loadElements : function() {
			this.elements.container = this.getClonedTemplate('InfoboxFleetListItem');

			this.elements.icon = this.elements.container.getElement('.icon');
			this.elements.top = this.elements.container.getElement('.top');
			this.elements.cap = this.elements.container.getElement('.caption');
			this.elements.count = this.elements.container.getElement('.count');
		}
	}
);


Imperion.Interface.FunctionGrid = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Options],
	/**
	 * options for building list
	 * 
	 * @var Object
	 */
	options : {
		width : 4,
		height : 3
	},
	
	/**
	 * storage for currently binded events on a grid element
	 * 
	 * @var array
	 */
	currentlyBinded : [],
	
	/**
	 * prepare object
	 */
	initialize : function() {
		this.currentlyBinded = [];
		//load html elements
		this.loadElements();
	},
	
	/**
	 * clean up the grid
	 * 
	 * @return void
	 */
	empty : function() {
		for(var x = 1 ; x <= this.options.width ; x++) {
			for(var y = 1 ; y <= this.options.height ; y++) {
				this.unsetElementCallbackAll(x, y);
				this.removeIcon(x, y);
				this.enableElement(x, y);
			}	
		}
	},
	
	/**
	 * return coords by index
	 * 
	 * @param int index
	 * 
	 * @return Object
	 */
	getCoordsByIndex : function(index) {
		var y = Math.floor((index - 1) / this.options.width) + 1;
		var x = (-1 * this.options.width * y) + this.options.width + index; 
		return {
			'y' : y,
			'x' : x
		};
	},
	
	/**
	 * set icon at position
	 * 
	 * @var int posX
	 * @var int posY
	 * @var string iconClassName
	 * 
	 * @return void
	 */
	setIcon : function(posX, posY, iconClassName) {
		if(this.elements.icons[posX] && this.elements.icons[posX][posY]) {
			this.removeIcon(posX, posY);
			this.elements.icons[posX][posY].setProperty('class', iconClassName);
		}
	},
	
	/**
	 * removes an icon
	 * 
	 * @var int posX
	 * @var int posY
	 * 
	 * @return void
	 */
	removeIcon : function(posX, posY) {
		if(this.elements.icons[posX] && this.elements.icons[posX][posY]) {
			this.elements.icons[posX][posY].removeProperty('class');
		}
	},
	
	/**
	 * enable grid element at position
	 * 
	 * @var int posX
	 * @var int posY
	 * 
	 * @return void
	 */
	enableElement : function(posX, posY) {
		if(this.elements.items[posX] && this.elements.items[posX][posY]) {
			this.elements.items[posX][posY].removeClass('disabled');
		}
	},
	
	/**
	 * disabled grid element at position
	 * 
	 * @var int posX
	 * @var int posY
	 * 
	 * @return void
	 */
	disableElement : function(posX, posY) {
		if(this.elements.items[posX] && this.elements.items[posX][posY]) {
			this.elements.items[posX][posY].addClass('disabled');
		}
	},
	
	/**
	 * binds functionality on a event type on a grid element
	 * 
	 * @param int posX
	 * @param int posY
	 * @param string eventType
	 * @param functionPointer callback
	 * @param object elementData
	 * 
	 * @return void
	 */
	setElementCallback : function(posX, posY, eventType, callback, elementData) {
		this.unsetElementCallback(posX, posY, eventType);
		if(this.elements.items[posX] && this.elements.items[posX][posY]) {
			var params = $H({
				action : 'event_on_grid_element',
				callback : callback,
				data : elementData
			});
			var eventIdent = this.addEvent(eventType, this.elements.items[posX][posY], params);
			if(!this.currentlyBinded[posX]) {
				this.currentlyBinded[posX] = [];
			}
			if(!this.currentlyBinded[posX][posY]) {
				this.currentlyBinded[posX][posY] = {};
			}
			this.currentlyBinded[posX][posY][eventType] = eventIdent;
		}
	},
	
	/**
	 * removes functionality on a grid a element
	 * 
	 * @param int posX
	 * @param int posY
	 * @param string eventType
	 * 
	 * @return void
	 */
	unsetElementCallback : function(posX, posY, eventType) {
		if(this.currentlyBinded[posX] && this.currentlyBinded[posX][posY] && this.currentlyBinded[posX][posY][eventType]) {
			this.removeEvent(eventType, this.elements.items[posX][posY], this.currentlyBinded[posX][posY][eventType]);
			delete this.currentlyBinded[posX][posY][eventType];
		}
	},
	
	/**
	 * remove all functions on a grid element
	 * 
	 * @param int posX
	 * @param int posY
	 * 
	 * @return void
	 */
	unsetElementCallbackAll : function(posX, posY) {
		if(this.currentlyBinded[posX] && this.currentlyBinded[posX][posY]) {
			$H(this.currentlyBinded[posX][posY]).each(function(item, eventType) {
				this.unsetElementCallback(posX, posY, eventType);
			}, this);
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'event_on_grid_element':
				var callback = params.get('callback');
				if(callback) {
					callback(params.get('data'));
				}
				break;
		}
		return true;
	},
	
	/**
	 * load all elements belong to grid
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('FunctionGrid');
		this.elements.items = new Array();
		this.elements.icons = new Array();
		for(var x = 1 ; x <= this.options.width ; x++) {
			this.elements.items[x] = new Array();
			this.elements.icons[x] = new Array();
			for(var y = 1 ; y <= this.options.height ; y++) {
				this.elements.items[x][y] = this.elements.container.getElement('.grid_'+y+'_'+x);
				this.elements.icons[x][y] = this.elements.items[x][y].getElement('span');
			}	
		}
	}
});
Imperion.Interface.Invasion = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Module],
	
	/**
	 * time remaining
	 * 
	 * @type	Number
	 */
	remaining : 0,
	
	/**
	 * second timer instance
	 * 
	 * @type	Imperion.Util.SecondTimer
	 */
	secondTimer : null,
	
	/**
	 * constructor
	 * 
	 * @class	Invasion class
	 * 
	 * @param	{Number}	time
	 * @param	{Imperion.Util.SecondTimer}	secondTimer
	 * 
	 * @constructs
	 */
	initialize : function(time, secondTimer) {
		this.secondTimer = secondTimer;
		if(time > 0) {
			this.secondTimer.attach('Imperion.Interface.Invasion', this);
			this.setUser(this.getUser());
			this.remaining = time;
			this.loadElements();
		}
		else {
			this.reloadPage();
		}
	},
	
	/**
	 * do a step each second
	 * 
	 * function called from timer observable
	 * 
	 * @param Object timerObj
	 */
	timerStep : function(timerObj) {
		this.elements.time.set('text', this.user.formatDuration(this.remaining));
		this.remaining--;
		if(this.remaining < 0) {
			this.secondTimer.detach('Imperion.Interface.Invasion');
			this.reloadPage();
		}
	},
	
	/**
	 * load elements
	 * 
	 * @returns	{Void}
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('Invasion');
		this.elements.time = this.elements.container.getElement('.time'); 
	}
});
Imperion.Interface.Mission = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Observable, Imperion.Util.Checkpoint, Imperion.Translate],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		visible : false,
		x : 0,
		y : 0
	},
	
	/**
	 * items
	 * 
	 * @var Object
	 */
	items : null,
	
	/**
	 * current active item
	 * 
	 * @var Imperion.Interface.MissionItem
	 */
	activeItem : null,
	
	/**
	 * global event listener
	 * 
	 * @var Imperion.Util.GlobalEvents
	 */
	globalEvents : null,
	
	/**
	 * tooltop handle
	 * 
	 * @var Imperion.Interface.Gui.HtmlTooltip
	 */
	tooltipHandle : null,
	
	/**
	 * quest items
	 * 
	 * @type	Object
	 */
	questItems : null,
	
	/**
	 * prepare the mission select handle
	 * 
	 * @param Imperion.Util.GlobalEvents globalEvents
	 * @param Imperion.Interface.Gui.HtmlTooltip tooltipHandle
	 * 
	 * @return void
	 */
	initialize : function(globalEvents, tooltipHandle) {
		//
		this.activeItem = null;
		this.questItems = {
			SelectMissionItem : null 
		};
		this.globalEvents = globalEvents;
		this.tooltipHandle = tooltipHandle;
		//
		this.loadElements();
		//
		this.items = {};
		var missions = ['ASSAULT', 'TRANSPORT', 'MINING', 'BOMBARDMENT', 'ANNEXION', 'INVASION', 'COLONIZATION', 'DEPLOYMENT', 'ESPIONAGE'];
		$splat(missions).each(function(mission) {
			var item = Imperion.Interface.Factory.missionItem(this, {
				type : mission
			});
			this.elements.container.appendChild(item.elements.container);
			this.items[mission] = item;
		}, this);
	},
	
	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'SelectMissionItem':
				if(this.options.visible && this.activeItem !== null && this.activeItem.options.type === params.mission) {
					return true;
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist' + ident;
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'SelectMissionItem':
				this.questItems[ident] = new Array();
				this.items[params.mission].activateCheckpoint(ident, params, questObj);
				this.questItems[ident].push(this.items[params.mission]);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'SelectMissionItem':
				if(this.questItems[ident] !== null) {
					for(var i = this.questItems[ident].length - 1 ; i >= 0 ; i--) {
						this.questItems[ident][i].removeCheckpoint(ident);
					}
					this.questItems[ident] = null;
					if(refreshQuests) {
						Imperion.Factory.quest().refresh();
					}
				}
				break;
			default:
				throw 'Imperion.Layout ident not exist';
				break;
		}
	},
	
	/**
	 * set multiple missions enabled -> disable rest
	 * 
	 * @param	{Array}		activeMissions
	 * 
	 * @returns {void}
	 */
	enableMultiple : function(activeMissions) {
		$H(this.items).each(function(item, mission) {
			if(activeMissions[mission]) {
				item.enable();
			}
			else {
				item.disable();
			}
		}, this);
	},
	
	/**
	 * set position
	 * 
	 * @param int newX
	 * @param int newY
	 * @param Element relativeElement
	 * 
	 * @return void
	 */
	setPosition : function(newX, newY, relativeElement) {
		if(relativeElement) {
			var rPos = relativeElement.getPosition();
			newX += rPos.x;
			newY += rPos.y;
		}
		if(this.options.x !== newX || this.options.y !== newY)
		this.elements.container.setPosition({
			x : newX,
			y : newY
		});
		this.options.x = newX;
		this.options.y = newY;
	},
	
	/**
	 * show the mission selection
	 * 
	 * @return void
	 */
	show : function() {
		if(this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
			this.globalEvents.attach('InterfaceMission', this);
			this.options.visible = true;
		}
	},
	
	/**
	 * hide the mission selection
	 * 
	 * @return void
	 */
	hide : function() {
		if(!this.elements.container.hasClass('hideContainer')) {
			this.elements.container.addClass('hideContainer');
			this.globalEvents.detach('InterfaceMission');
			this.options.visible = false;
			this.activeItem = null;
		}
	},
	
	/**
	 * toggle 
	 * 
	 * @return void
	 */
	toggle : function() {
		if(this.options.visible) {
			this.hide();
		}
		else {
			this.show();
		}
		       
	},
	
	/**
	 * global event on body click listener
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	onBodyClick : function() {
		this.hide();
	},
	
	/**
	 * item click function 
	 * 
	 * @param Imperion.Interface.MissionItem missionItem
	 * 
	 * @return void
	 */
	missionItemClicked : function(missionItem) {
		if(this.activeItem !== null) {
			//this.activeItem.deactivate();
			this.activeItem = null;
		}
		this.activeItem = missionItem;
		//this.activeItem.activate();
		this.notify({
			item : missionItem
		}, 'missionItemClicked');
	},
	
	/**
	 * load mission select elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceMission');
	}
});

Imperion.Interface.MissionItem = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Util.Checkpoint],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		type : '',
		caption : 'UNDEFINED'
	},
	
	/**
	 * flag for enabled / disabled
	 * 
	 * @var boolean
	 */
	enabled : false,
	
	/**
	 * parent 
	 * 
	 * @var Imperion.Interface.Mission
	 */
	parentMission : null,
	
	/**
	 * prepare the item
	 * 
	 * @param Imperion.Interface.Mission parentMission
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(parentMission, options) {
		this.parentMission = parentMission;
		this.enabled = false;
		//
		this.loadElements();
		//set type
		this.setType(options.type);
		//
		this.show();
	},

	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'SelectMissionItem':
				var highlight = this.getCheckpointHighlight(ident, {
					container : this.parentMission.elements.container,
					posOffset	: {
						y : 30
					}
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'SelectMissionItem':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Layout ident not exist';
				break;
		}
	},
	
	/**
	 * activate the item
	 * 
	 * @return void
	 */
	activate : function() {
		if(!this.elements.container.hasClass('active')) {
			this.elements.container.addClass('active');
		}
	},
	
	/**
	 * deactivate the item
	 * 
	 * @return void
	 */
	deactivate : function() {
		if(this.elements.container.hasClass('active')) {
			this.elements.container.removeClass('active');
		}
	},
	
	/**
	 * enable a item
	 * 
	 * @return void
	 */
	enable : function() {
		if(!this.enabled) {
			this.enabled = true;
			this.elements.container.removeClass('disabled');
		}
	},
	
	/**
	 * disable a item
	 * 
	 * @return void
	 */
	disable : function() {
		if(this.enabled) {
			this.deactivate();
			this.enabled = false;
			this.elements.container.addClass('disabled');
		}
	},
	
	/**
	 * set type of mission elements
	 * 
	 * @param String newType
	 * 
	 * @return void
	 */
	setType : function(newType) {
		if(this.options.type !== '') {
			this.elements.container.removeClass(this.options.type);
		}
		this.elements.container.addClass(newType);
		this.options.type = newType;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click':
				if(this.enabled) {
					this.parentMission.missionItemClicked(this);
					this.parentMission.removeCheckpoint('SelectMissionItem');
				}
				break;
			case 'mouse_enter':
				var missionTranslationKey = 'mission__' + this.options.type.toLowerCase();
				var ele = this.elements.tooltipContainer.clone();
				ele.removeClass('hideContainer');
				ele.getElement('H1').set('text', this.parentMission.translate(missionTranslationKey));
				ele.getElement('P').set('text', this.parentMission.translate(missionTranslationKey + '_description'));
				this.parentMission.tooltipHandle.setHtml(ele);
				this.parentMission.tooltipHandle.show();
				break;
			case 'mouse_leave':
				this.parentMission.tooltipHandle.hide();
				break;
		}
	},
	
	/**
	 * load item elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('InterfaceMissionItem');
		
		this.elements.tooltipContainer = this.getTemplate('MissionTooltip');
		
		this.addEvent('click', this.elements.container, $H({
			action : 'click'
		}));
		this.addEvent('mouseenter', this.elements.container, $H({
			action : 'mouse_enter'
		}));
		this.addEvent('mouseleave', this.elements.container, $H({
			action : 'mouse_leave'
		}));
	}
});
Imperion.Interface.PlanetSwitch = new Class(
	/** @lends Imperion.LayoutPlanetSwitch.prototype */
	{
		Implements : [Imperion.Template, Imperion.Event, Imperion.Util.Class, Imperion.Module, Imperion.Util.Checkpoint],

		/**
		 * global event handle
		 * 
		 * @type Imperion.Util.GlobalEvents
		 */
		globalEvents : null,

		/**
		 * planet name
		 * 
		 * @type {String}
		 */
		name : '',
		
		/**
		 * planet change url
		 * 
		 * @type {String}
		 */
		changeUrl : '',
		
		/**
		 * change mode
		 * 
		 * @type void
		 */
		changeMode : false,
		
		/**
		 * under attack seconds
		 * 
		 * @type	Number
		 */
		underAttackSeconds : null,
		
		/**
		 * second timer instance
		 * 
		 * @type 	Imperion.Util.SecondTimer
		 */
		secondTimer : null,
		
		/**
		 * prepare
		 * 
		 * @param	{Object}						data
		 * @param	{Number}						attack
		 * @param	{Imperion.Util.GlobalEvents}	globalEvents
		 * @param	{Imperion.Util.SecondTimer}		secondTimer
		 * 
		 * @contruct
		 */
		initialize : function(data, attack, globalEvents, secondTimer) {
			//
			this.globalEvents		= globalEvents;
			this.secondTimer		= secondTimer;
			this.underAttackSeconds	= null;
			//
			this.loadElements();
			//
			this.setPlanetName(data.name);
			//
			this.changeMode = false;
			//
			this.changeUrl = Imperion.Util.Helper.url('planet', 'index', 'rename');
			//
			if(attack > 0) {
				this.setAttack(attack.toInt());
			}
		},
		
		/**
		 * check if checkpoint is resolved
		 * 
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'PlanetSwitchButton':
					try	{
						var mapModule = this.bootstrap.getModule('Imperion.Map.Handle');
					}
					catch(e) {
						if(e === 'Module [Imperion.Map.Handle] not found') {
							return true;
						}
						else {
							throw e;
						}
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Handle ident not exist';
					break;
			}
		},
		
		/**
		 * activate checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'PlanetSwitchButton':
					var highlight = this.getCheckpointHighlight(ident, {
						posOffset	: {
							y : -30
						},
						rotation	: 'arrowBottom'
					});
					highlight.appendOver(this.elements.outer);
					highlight.start();
					this.setCheckpointActive(ident, questObj);
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Handle ident not exist';
					break;
			}
		},
		
		/**
		 * remove checkpoint
		 * 
		 * @param	{String}			ident
		 * 
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident) {
			switch(ident) {
				case 'PlanetSwitchButton':
					var questObj = this.getCheckpointActive(ident);
					if(questObj !== null) {
						this.unsetCheckpointActive(ident);
						this.removeCheckpointHighlight(ident);
					}
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Handle ident not exist';
					break;
			}
		},
		
		/**
		 * set planet name
		 * 
		 * @param {String} newPlanetName
		 * 
		 * @type void
		 */
		setPlanetName : function(newPlanetName) {
			var fakeEle = new Element('textarea');
			var newName = newPlanetName.replace(/</g,"&lt;").replace(/>/g,"&gt;");
			fakeEle.set('html', newName);
			
			this.elements.input.set('value', fakeEle.get('value'));
			this.elements.label.set('html', newName);
			this.name = fakeEle.get('value');
		},
		
		/**
		 * get name from input
		 * 
		 * @type {String}
		 */
		getPlanetNameFromInput : function() {
			return this.elements.input.get('value');
		},
		
		/**
		 * start mode planet rename
		 * 
		 * @type void
		 */
		startPlanetNameChange : function() {
			this.changeMode = true;
			this.elements.label.addClass('hideContainer');
			this.elements.rename.removeClass('hideContainer');
			this.elements.input.focus();
			this.elements.input.selectRange(0, this.getPlanetNameFromInput().length);
			this.globalEvents.attach('PlanetSwitch', this);
		},
		
		/**
		 * end mode planet rename
		 * 
		 * @type void
		 */
		endPlanetNameChange : function() {
			this.changeMode = false;
			this.elements.label.removeClass('hideContainer');
			this.elements.rename.addClass('hideContainer');
			this.globalEvents.detach('PlanetSwitch');
		},
		
		/**
		 * handle esc key - global event listener
		 * 
		 * @param {Object} params
		 * 
		 * @type void
		 */
		escPressed : function(params) {
			this.endPlanetNameChange();
		},
		
		/**
		 * handle esc key - global event listener
		 * 
		 * @param {Object} params
		 * 
		 * @type void
		 */
		enterPressed : function(params) {
			this.endPlanetNameChange();
			this.save(this.getPlanetNameFromInput());
		},
		
		/**
		 * save new planet name
		 * 
		 * @param {String} newPlanetName
		 * 
		 * @type void
		 */
		save : function(newPlanetName) {
			Imperion.Util.Request.send(this.changeUrl, {
				name : newPlanetName
			}, this.afterSave.bindNew(this), {
				name : newPlanetName
			});
		},
		
		/**
		 * callback after save request
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * @param	{Object}					requestParams	
		 * 
		 * @returns	{Void}
		 */
		afterSave : function(response, requestParams) {
			var rData = response.getResponseData();
			
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
				this.setPlanetName(this.name);
			}
			else {
				this.setPlanetName(requestParams.name);
				this.bootstrap.getModule('Imperion.Interface.SelectPlanetList').currentPlanetNameChange(requestParams);
			}
		},
		
		/**
		 * object wrapper to set attack
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_updateAttack : function(params) {
			if(params.attack) {
				this.setAttack(params.attack);
			}
			else {
				this.unsetAttack();
			}
		},
		
		/**
		 * set attack
		 * 
		 * @param	{Number}	seconds
		 * 
		 * @returns	{Void}
		 */
		setAttack : function(seconds) {
			if(this.underAttackSeconds === null || !this.underAttackSeconds && seconds) {
				this.secondTimer.attach('PlanetSwitch', this);
				this.underAttackSeconds = seconds;
				this.elements.container.addClass('attack');
			}
		},
		
		/**
		 * set attack
		 * 
		 * @returns	{Void}
		 */
		unsetAttack : function() {
			if(this.underAttackSeconds === null || this.underAttackSeconds) {
				this.secondTimer.detach('PlanetSwitch');
				this.elements.container.removeClass('attack');
				this.underAttackSeconds = 0;
			}
		},
		
		/**
		 * listener for timer
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		timerStep : function(params) {
			this.underAttackSeconds--;
			if(this.underAttackSeconds === 1) {
				this.unsetAttack();
			}
		},
		
		/**
		 * set arrow icon active
		 * 
		 * @returns	{Void}
		 */
		setActive : function() {
			this.elements.drop.addClass('active');
		},
		
		/**
		 * set arrow icon active
		 * 
		 * @returns	{Void}
		 */
		setInactive : function() {
			this.elements.drop.removeClass('active');
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'show_planet_list':
					this.setActive();
					this.bootstrap.getModule('Imperion.Interface.SelectPlanetList').toggleList();
					eventObject.stop();
					break;
				case 'show_planet_prev':
					this.bootstrap.getModule('Imperion.Interface.SelectPlanetList').rotateLeft();
					eventObject.stop();
					break;
				case 'show_planet_next':
					this.bootstrap.getModule('Imperion.Interface.SelectPlanetList').rotateRight();
					eventObject.stop();
					break;
				case 'change_planet_name':
					this.startPlanetNameChange();
					break;
				case 'blur_input':
					if(this.changeMode) {
						this.endPlanetNameChange();
						this.save(this.getPlanetNameFromInput());
					}
					break;
			}
			return false;
		},
		
		/**
		 * load dom elements
		 * 
		 * @type void
		 */
		loadElements : function() {
			this.elements.outer		= this.getTemplate('InterfacePlanetList');
			this.elements.container = this.elements.outer.getElement('UL');
			this.elements.drop 		= this.elements.container.getElement('.showList');
			this.elements.prev 		= this.elements.container.getElement('.switchLeft');
			this.elements.next 		= this.elements.container.getElement('.switchRight');
			this.elements.rename	= this.elements.container.getElement('.planetNameLabel');
			this.elements.input		= this.elements.rename.getElement('INPUT');
			this.elements.label		= this.elements.container.getElement('.planetName');
			
			
			this.addEvent('click', this.elements.drop, $H({
				action : 'show_planet_list'
			}));
			this.addEvent('click', this.elements.prev, $H({
				action : 'show_planet_prev'
			}));
			this.addEvent('click', this.elements.next, $H({
				action : 'show_planet_next'
			}));
			this.addEvent('dblclick', this.elements.label, $H({
				action : 'change_planet_name'
			}));
			this.addEvent('blur', this.elements.input, $H({
				action : 'blur_input'
			}));
		}
	}
);
Imperion.Interface.SelectPlanetList = new Class(
	/** @lends Imperion.Interface.SelectPlanetList.prototype */
	{
		Implements : [Imperion.Module, Imperion.Template, Imperion.Util.Class],
		/**
		 * counter options
		 *
		 * @type	Object
		 */
		options : {
			itemsPerCol		: 15,
			order			: [3, 1, 2],
			lookupGalaxy	: {
				1	: 'mid',
				2	: 'end',
				3	: 'tut'
			},
			lookupIcons	: {
				1	: 'buildings',
				2	: 'ships',
				3	: 'turrets',
				4	: 'invasion',
				5	: 'annexation'
			}
		},

		/**
		 * data of all planets
		 *
		 * @type	Object
		 */
		planetData : null,

		/**
		 * data of current planet
		 *
		 * @type	Object
		 */
		currentData : null,

		/**
		 * headline
		 *
		 * @type	Array
		 */
		headlines : null,

		/**
		 * planets
		 *
		 * @type	Object
		 */
		planets : null,

		/**
		 * global event handle
		 *
		 * @type	Imperion.Util.GlobalEvents
		 */
		globalEvents : null,

		/**
		 * active planet list item
		 *
		 * @type	Imperion.Interface.SelectPlanetListPlanet
		 */
		activePlanet : null,

		/**
		 * prepare the list
		 *
		 * @class select planet list
		 *
		 * @param	{Object}	allPlanets
		 * @param	{Object}	currentPlanet
		 *
		 * @constructs
		 */
		initialize : function(allPlanets, currentPlanet, globalEvents) {
			//
			this.planetData		= allPlanets;
			this.currentData	= currentPlanet;
			this.globalEvents	= globalEvents;
			//
			this.loadElements();
			//
			this.planets		= {};
			this.headlines		= [];
			var headline, planet, items = [], next = null, prev = null, first = null, newItem = null;

			for(var i = 0 ; i < this.options.order.length ; i++) {
				var galaxyId = this.options.order[i];
				//check if planets exist for galaxy
				if(this.planetData[galaxyId]) {
					//add headline item
					headline = Imperion.Interface.Factory.selectPlanetListHeadline(galaxyId, this.planetData[galaxyId].name, this);
					this.headlines.push(headline);
					items.push(headline);
					//add planets
					if(this.planetData[galaxyId].planets && this.planetData[galaxyId].planets.length > 0) {
						for(var j = 0 ; j < this.planetData[galaxyId].planets.length ; j++) {
							planet								= this.planetData[galaxyId].planets[j];
							newItem								= Imperion.Interface.Factory.selectPlanetListPlanet(planet, galaxyId, this);
							this.planets[planet['id_planet']]	= newItem;
							items.push(newItem);

							if(first === null) {
								first = newItem;
							}
							if(prev !== null) {
								prev.setNextItem(newItem);
								newItem.setPrevItem(prev);
							}
							prev = newItem;
							if(this.currentData.id_planet == planet['id_planet']) {
								this.activePlanet = newItem;
							}
						}
					}
				}
			}
			first.setPrevItem(prev);
			prev.setNextItem(first);
			//add items
			var currentCol;
			for(var i = 0 ; i < items.length ; i++) {
				//check if last col of first row is a headline -> move headline to next col and reduce amount of max rows in a col
				if(i === this.options.itemsPerCol - 1 && items[i].type === 'HEADLINE') {
					this.options.itemsPerCol = this.options.itemsPerCol - 1;
					i--;
					continue;
				}
				//check for next column
				if(i % this.options.itemsPerCol === 0) {
					currentCol = this.elements.column.clone();
					currentCol.inject(this.elements.content);
					currentCol.removeClass('hideContainer');
					this.elements.cols.push(currentCol);
				}
				//add item
				items[i].elements.container.inject(currentCol);
			}
			//
			this.elements.container.inject(this.getTemplate('LayoutContent'), 'top');
		},

		/**
		 * update method (object wrapper)
		 *
		 * @params	{Object}	params
		 *
		 * @returns	{Void}
		 */
		_update : function(params) {
			//update icons
			$H(params.planets).each(function(data, planetId) {
				if(this.planets[planetId]) {
					this.planets[planetId].setIcons(data.icons, data.attack);
				}
			}, this);


			this.globalEvents.attach('SelectPlanetList', this);
		},

		/**
		 * update and show list
		 *
		 * @returns	{Void}
		 */
		showList : function() {
			if(this.elements.container.hasClass('hideContainer')) {
				this.bootstrap.update({
					method	: 'planetlist',
					params	: {
						methods : []
					}
				});
			}
			this.elements.container.removeClass('hideContainer');
		},

		/**
		 * hide the list
		 *
		 * @returns	{Void}
		 */
		hideList : function() {
			if(!this.elements.container.hasClass('hideContainer')) {
				this.globalEvents.detach('SelectPlanetList');
				this.elements.container.addClass('hideContainer');
				this.bootstrap.getModule('Imperion.Interface.PlanetSwitch').setInactive();
			}
		},

		/**
		 * toggle the list
		 *
		 * @returns	{Void}
		 */
		toggleList : function() {
			if(this.elements.container.hasClass('hideContainer')) {
				this.showList();
			}
			else {
				this.hideList();
			}
		},

		/**
		 * on body click
		 *
		 * @return void
		 */
		onBodyClick : function() {
			this.hideList();
		},

		/**
		 * rotate the list in left direction
		 *
		 * @returns	{Void}
		 */
		rotateLeft : function() {
			this.switchPlanet(this.activePlanet.prev);
		},

		/**
		 * rotate the list in right direction
		 *
		 * @returns	{Void}
		 */
		rotateRight : function() {
			this.switchPlanet(this.activePlanet.next);
		},

		/**
		 * listener for current planet name change
		 *
		 * @param	{Object} params
		 *
		 * @returns	{Void}
		 */
		currentPlanetNameChange : function(params) {
			this.activePlanet.setName(params.name);
		},

		/**
		 * switch the planet
		 *
		 * @param {Imperion.Interface.SelectPlanetListPlanet} switchToPlanet
		 *
		 * @type {void}
		 */
		switchPlanet : function(switchToPlanet) {
			window.location = '/planet/index/change/planetId/' + switchToPlanet.id;
		},

		/**
		 * load templates
		 *
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.container = this.getStaticTemplate('SelectPlanetList');
			this.elements.content	= this.elements.container.getElement('.content');
			this.elements.column	= this.elements.container.getElement('.col');
			this.elements.cols		= [];
		}
	}
);
Imperion.Interface.SelectPlanetListHeadline = new Class(
	/** @lends Imperion.Interface.SelectPlanetListHeadline.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Template],

		/**
		 * parent list
		 *
		 * @type	Imperion.Interface.SelectPlanetList
		 */
		parentList : null,

		/**
		 * type item
		 *
		 * @type	String
		 */
		type : 'HEADLINE',

		/**
		 * prepare the item
		 *
		 * @class select planet list headline item
		 *
		 * @param	{Number}								galaxy
		 * @param	{String}								caption
		 * @param	{Imperion.Interface.SelectPlanetList}	parentList
		 *
		 * @constructs
		 */
		initialize : function(galaxy, caption, parentList) {
			//
			this.parentList = parentList;
			//
			this.loadElements();
			//
			this.elements.container.addClass(this.parentList.options.lookupGalaxy[galaxy]);
			this.elements.container.set('text', caption);
		},

		/**
		 * load templates
		 *
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.container = this.getStaticTemplate('SelectPlanetListHeadline');
		}
	}
);
Imperion.Interface.SelectPlanetListPlanet = new Class(
	/** @lends Imperion.Interface.SelectPlanetListPlanet.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event],

		/**
		 * name
		 *
		 * @type	String
		 */
		name : null,

		/**
		 * chained list pointer to next item
		 *
		 * @type	Imperion.Interface.SelectPlanetListPlanet
		 */
		next : null,

		/**
		 * chained list pointer to prev item
		 *
		 * @type	Imperion.Interface.SelectPlanetListPlanet
		 */
		prev : null,

		/**
		 * parent list
		 *
		 * @type	Imperion.Interface.SelectPlanetList
		 */
		parentList : null,

		/**
		 * galaxy planet belongs to
		 *
		 * @type	Number
		 */
		galaxy : null,

		/**
		 * planet id
		 *
		 * @type	Number
		 */
		id : null,

		/**
		 * type item
		 *
		 * @type	String
		 */
		type : 'PLANET',

		/**
		 * prepare the item
		 *
		 * @class select planet list planet item
		 *
		 * @param	{Object}								options
		 * @param	{Number}								galaxy
		 * @param	{Imperion.Interface.SelectPlanetList}	parentList
		 *
		 * @constructs
		 */
		initialize : function(options, galaxy, parentList) {
			//
			this.galaxy		= null;
			//
			this.parentList	= parentList;
			//
			this.loadElements();
			//
			this.setName(options.name);
			//
			this.setType(options.type);
			//
			this.setGalaxy(galaxy);
			//
			this.id = options.id_planet;
		},

		/**
		 * set next list item
		 *
		 * @param	{Imperion.Interface.SelectPlanetListPlanet}	nextItem
		 *
		 * @returns	{Void}
		 */
		setNextItem : function(nextItem) {
			this.next = nextItem;
		},

		/**
		 * set prev list item
		 *
		 * @param {Imperion.Interface.SelectPlanetListPlanet}	prevItem
		 *
		 * @returns	{Void}
		 */
		setPrevItem : function(prevItem) {
			this.prev = prevItem;
		},

		/**
		 * set icons
		 *
		 * @param	{Object}	iconData
		 * @param	{Number}	attack
		 *
		 * @returns	{Void}
		 */
		setIcons : function(iconData, attack) {
			this.elements.icon.buildings.removeClass('enabled');
			this.elements.icon.ships.removeClass('enabled');
			this.elements.icon.turrets.removeClass('enabled');
			this.elements.icon.invasion.removeClass('enabled');
			this.elements.icon.annexation.removeClass('enabled');
			this.elements.container.removeClass('warning');
			//main attack
			if(attack) {
				this.elements.container.addClass('alert');
			}
			else {
				this.elements.container.removeClass('alert');
			}
			var icon;
			for(var  i = iconData.length - 1 ; i >= 0 ; i--) {
				icon = this.parentList.options.lookupIcons[iconData[i]];
				this.elements.icon[icon].addClass('enabled');
				if(!attack && (icon === 'annexation' || icon === 'invasion')) {
					this.elements.container.addClass('warning');
				}
			}
		},

		/**
		 * set planet name
		 *
		 * @param	{String}	newName
		 *
		 * @returns	{Void}
		 */
		setName : function(newName) {
			this.elements.name.set('html', newName);
		},

		/**
		 * set planet type
		 *
		 * @param	{String}	newType
		 *
		 * @returns	{Void}
		 */
		setType : function(newType) {
			this.elements.planet.setProperty('class', 'planet ' + newType);
		},

		/**
		 * set the galaxy
		 *
		 * @param 	{Number}	newGalaxy
		 *
		 * @returns	{Void}
		 */
		setGalaxy : function(newGalaxy) {
			if(this.galaxy !== null) {
				this.elements.container.removeClass(this.parentList.options.lookupGalaxy[this.galaxy]);
			}
			this.galaxy = newGalaxy;
			this.elements.container.addClass(this.parentList.options.lookupGalaxy[this.galaxy]);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'click':
					this.parentList.switchPlanet(this);
					eventObject.stop();
					break;
				case 'contextmenu':
					this.showPlanetContextMenu(eventObject, this.id);
					break;
			}
			return false;
		},

		/**
		 * load templates
		 *
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.container = this.getStaticTemplate('SelectPlanetListPlanet');

			this.addEvent('click', this.elements.container, $H({
				action : 'click'
			}));
			this.addEvent('contextmenu', this.elements.container, $H({
				action : 'contextmenu'
			}));

			this.elements.planet	= this.elements.container.getElement('.planet');
			this.elements.name		= this.elements.container.getElement('.identifier');

			this.elements.icon		= {
				buildings	: this.elements.container.getElement('.buildings'),
				ships		: this.elements.container.getElement('.ships'),
				turrets		: this.elements.container.getElement('.turrets'),
				invasion	: this.elements.container.getElement('.invasion'),
				annexation	: this.elements.container.getElement('.annexation')
			};
		}
	}
);
Imperion.Interface.EventBox = new Class(
	/** @lends Imperion.Interface.ControlPanel */
	{
		Implements : [Imperion.Template, Imperion.Event, Imperion.Util.Class, Imperion.Module, Imperion.Util.Checkpoint],

		/**
		 * event box open flag
		 *
		 * @type	Boolean
		 */
		eventBoxOpen : false,

		/**
		 * event box data object
		 *
		 * @type	Object
		 */
		eventBoxData : {},

		/**
		 * Tooltip
		 *
		 * @type	{Imperion.Interface.Gui.Tooltip}
		 */
		tooltip : null,

		/**
		 * Prepare the root
		 *
		 * @param	{Imperion.Interface.Gui.Tooltip}	tooltip
		 *
		 * @constructs
		 */
		initialize : function(tooltip) {
			this.tooltip = tooltip;
		},

		/**
		 * check if checkpoint is resolved
		 *
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'TrashSlotActivate':
					if (this.eventBoxOpen === false)
					{
						return true;
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.EventBox ident not exist #1: ' + ident;
					break;
			}
		},

		/**
		 * activate checkpoint
		 *
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'TrashSlotActivate':
					var highlight = this.getCheckpointHighlight(ident, {
						container : this.elements.eventBox.container,
						posOffset : {
							y : 27
						}
					});
					highlight.appendOver(this.elements.eventBox.secondButton);
					highlight.start();
					this.setCheckpointActive(ident, questObj);
					break;
				default:
					throw 'Imperion.Interface.EventBox ident not exist #2: ' + ident;
					break;
			}
		},

		/**
		 * remove checkpoint
		 *
		 * @param	{String}			ident
		 *
		 * @returns	{Void}
		 */
		removeCheckpoint : function(ident) {
			switch(ident) {
				case 'TrashSlotActivate':
					var questObj = this.getCheckpointActive(ident);
					if(questObj !== null) {
						this.unsetCheckpointActive(ident);
						this.removeCheckpointHighlight(ident);
					}
				default:
//					throw 'Imperion.Interface.EventBox ident not exist #3: ' + ident;
					break;
			}
		},

		/**
		 * Set data for the event box
		 *
		 * var eventBoxData = {
		 * 		type						: 'confirm', // confirm or error
		 *		headline					: 'text headline',
		 *		content						: 'text content',
		 *		image						: '/images/layout/color-set/global/visuals/event_box/image.jpg',
		 *		firstButtonText				: 'text first button',
		 *		firstButtonDisabled			: false,
		 *		firstButtonTooltip			: 'This is a cool button!',
		 *		firstButtonCallback			: this.callbackfunction,
		 *		secondButtonText			: 'text second button',
		 *		secondButtonTextDisabled	: true,
		 *		secondButtonTextTooltip		: 'This button is disabled!',
		 *		secondButtonCallback		: this.callbackfunction
		 *
		 * };
		 *
		 * var eventBox = Imperion.Interface.Factory.eventBox();
		 * eventBox.setEventBox(eventBoxData);
		 * eventBox.showEventBox();
		 *
		 * @param {Object}	eventBoxData All required event box data
		 *
		 * @returns {void}
		 */
		setEventBox: function(eventBoxData) {
			if (this.eventBoxOpen === false)
			{
				this.loadElements();
				this.eventBoxData = eventBoxData;
				this.elements.eventBox.container.addClass(this.eventBoxData.type);

				this.setEventBoxHeadline();
				this.setEventBoxContent();
				this.setEventBoxImage();
				this.setEventBoxFirstButton();
				this.setEventBoxSecondButton();
			}

			return this;
		},

		/**
		 * set event box content
		 *
		 * @returns {void}
		 */
		setEventBoxContent : function() {
			this.elements.eventBox.content.set('html', this.eventBoxData.content);
		},

		/**
		 * set event box first button
		 *
		 * @returns {void}
		 */
		setEventBoxFirstButton : function() {
			this.elements.eventBox.firstButton.addClass(this.eventBoxData.type);

			if (this.eventBoxData.firstButtonDisabled == true) {
				this.elements.eventBox.firstButton.addClass('disabled');
			}

			if (typeof this.eventBoxData.firstButtonText !== 'undefined' && this.eventBoxData.firstButtonText !== null)
			{
				this.elements.eventBox.firstButton.getElement('span').set('html', this.eventBoxData.firstButtonText);
			}

			if (this.eventBoxData.firstButtonTooltip) {
				this.addEvent('mouseover', this.elements.eventBox.firstButton, $H({
					action : 'show_tooltip',
					tooltip : this.eventBoxData.firstButtonTooltip
				}));
				this.addEvent('mouseleave', this.elements.eventBox.firstButton, $H({
					action : 'hide_tooltip'
				}));
			}

			if (this.eventBoxData.firstButtonDisabled != true) {
				this.addEvent('click', this.elements.eventBox.firstButton, $H({
					action : 'close_eventBox',
					callback : this.eventBoxData.firstButtonCallback
				}));
			}
		},

		/**
		 * set event box second button
		 *
		 * @returns {void}
		 */
		setEventBoxSecondButton : function() {
			this.elements.eventBox.secondButton.addClass(this.eventBoxData.type);

			if(typeof this.eventBoxData.secondButtonText !== 'undefined' || typeof this.eventBoxData.secondButtonCallback !== 'undefined')
			{
				if (typeof this.eventBoxData.secondButtonText !== 'undefined' && this.eventBoxData.secondButtonText !== null)
				{
					this.elements.eventBox.secondButton.getElement('span').set('html', this.eventBoxData.secondButtonText);
				}

				if (this.eventBoxData.secondButtonDisabled == true) {
					this.elements.eventBox.secondButton.addClass('disabled');
				}

				if (this.eventBoxData.secondButtonTooltip) {
					this.addEvent('mouseover', this.elements.eventBox.secondButton, $H({
						action : 'show_tooltip',
						tooltip : this.eventBoxData.secondButtonTooltip
					}));
					this.addEvent('mouseleave', this.elements.eventBox.secondButton, $H({
						action : 'hide_tooltip'
					}));
				}

				if (this.eventBoxData.secondButtonDisabled != true) {
					this.addEvent('click', this.elements.eventBox.secondButton, $H({
						action : 'close_eventBox',
						callback : this.eventBoxData.secondButtonCallback
					}));
				}
			}
			else
			{
				this.elements.eventBox.firstButton.removeClass('first');
				this.elements.eventBox.secondButton.addClass('hideContainer');
			}
		},

		/**
		 * set event box image
		 *
		 * @returns {void}
		 */
		setEventBoxImage : function() {
			if (typeof this.eventBoxData.image !== 'undefined' && this.eventBoxData.image !== null)
			{
				this.elements.eventBox.image.set('src', this.eventBoxData.image);
				this.elements.eventBox.image.removeClass('hideContainer');
			}
		},

		/**
		 * set event box headline
		 *
		 * @returns {void}
		 */
		setEventBoxHeadline : function() {
			if (typeof this.eventBoxData.headline !== 'undefined')
			{
				if (this.eventBoxData.headline === false)
				{
					this.elements.eventBox.headline.addClass('hideContainer');
				}
				else
				{
					this.elements.eventBox.headline.set('html', this.eventBoxData.headline);
				}
			}
		},

		/**
		 * Show the event box
		 *
		 * @returns {void}
		 */
		showEventBox : function() {
			if (this.eventBoxOpen === false)
			{
				this.eventBoxOpen = true;
				Imperion.Factory.layout().showBlackLayer();
				this.elements.eventBox.container.removeClass('hideContainer');
			}
		},

		/**
		 * Hide the event box
		 *
		 * @returns {void}
		 */
		hideEventBox : function() {
			this.eventBoxOpen = false;
			this.removeEvent('click', this.elements.eventBox.firstButton);
			this.removeEvent('click', this.elements.eventBox.secondButton);
			this.elements.eventBox.container.destroy();
			Imperion.Factory.layout().hideBlackLayer();
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');
			switch(action) {
				case 'close_eventBox':
					this.hideEventBox();
					var callback = params.get('callback');
					if (typeof callback !== 'undefined' && callback !== null) {
						callback();
					}
					eventObject.stop();
					break;
				case 'show_tooltip':
					this.tooltip.setText(params.tooltip);
					this.tooltip.show();
					eventObject.stop();
					break;
				case 'hide_tooltip':
					this.tooltip.hide();
					eventObject.stop();
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @returns {Void}
		 */
		loadElements : function() {
			this.elements.eventBox = {};

			this.elements.eventBox.container = this.getClonedTemplate('EventBox-Container');
			this.elements.eventBox.container.inject(document.body);

			this.elements.eventBox.firstButton	= this.elements.eventBox.container.getElement('.first');
			this.elements.eventBox.secondButton	= this.elements.eventBox.container.getElement('.second');
			this.elements.eventBox.headline		= this.elements.eventBox.container.getElement('h2');
			this.elements.eventBox.image		= this.elements.eventBox.container.getElement('img');
			this.elements.eventBox.content		= this.elements.eventBox.container.getElement('p');
		}
	}
);
Imperion.Interface.StoryReport = new Class(
	/** @lends Imperion.Interface.StoryReport */
	{
		Implements : [Imperion.Module],

		/**
		 * Opens the story report details for a specified report
		 *
		 * @param	integer	idReport
		 * @return	{Void}
		 */
		openStoryReportDetails : function(idReport) {
			var dialog			= Imperion.Interface.Dialog.Factory.handle().getDialog('reportDetail' + idReport);
			var reportDetail	= Imperion.Interface.Dialog.Context.Factory.reportStory(dialog, idReport);
			reportDetail.showContext();
		},

		/**
		 * Opens the story report details for a specified report
		 *
		 * @param	{Object}	data
		 * @return	{Void}
		 */
		_openStoryReportDetails : function(data) {
			this.openStoryReportDetails(data.idReport);
		}
	}

);
Imperion.Interface.Endgame = new Class(
	/** @lends Imperion.Interface.Endgame */
	{
		Implements : [Imperion.Module],

		/**
		 * Opens the victory screen
		 *
		 * @return	{Void}
		 */
		openVictoryScreen : function() {
			var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('endgame_victory');
			var victory = Imperion.Interface.Dialog.Context.Factory.endgameVictory(dialog);
			victory.showContext();
		},

		/**
		 * Opens the victory screen
		 *
		 * @return	{Void}
		 */
		_openVictoryScreen : function() {
			this.openVictoryScreen();
		}
	}

);
Imperion.Interface.PlanetSurfaceContextMenu = new Class({
	Implements  : Options,
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		items : {
			'a' : {
				type : 2,
				caption : 'Angriff'
			}
		}
	},
	
	/**
	 * imperion context menu
	 * 
	 * @var Imperion.Interface.ContextMenu
	 */
	contextMenu : null,
	
	/**
	 * planet surface handle
	 * 
	 * @var Imperion.Interface.PlanetSurface
	 */
	planetSurface : null,
	
	/**
	 * prepare 
	 * 
	 * @param Imperion.Interface.ContextMenu
	 * 
	 * @return void
	 */
	initialize : function(contextMenu, planetSurface) {
		this.contextMenu = contextMenu;
		this.contextMenu.attach('observer', this);
		
		this.planetSurface = planetSurface;
		//add all possible items to contextmenu
		$H(this.options.items).each(function(item, key) {
			this.contextMenu.add(Imperion.Interface.Factory.contextmenuItem(key, this.contextMenu, item));
		}, this);
		Imperion.Util.GlobalEvents.attach('PlanetSurfaceContextMenu', this);
	},
	
	/**
	 * close contextmenu as global listener
	 * 
	 * @param Object data
	 * 
	 * @return void
	 */
	onBodyClick : function(data) {
		this.contextMenu.hide();
	},
	
	/**
	 * bind click listener to contextmenu
	 * 
	 * @param object data
	 * 
	 * @return void
	 */
	onContextItemClick : function(data) {
		
	},
	
	/**
	 * update the context menu
	 * 
	 * @param Object newPosition
	 * @param Imperion.Map.SystemElement systemElement
	 * 
	 * @return void
	 */
	update : function(newPosition, systemElement) {
		$H(this.options.items).each(function(item, key) {
			this.contextMenu.get(key).show();
		}, this);
		//this.contextMenu.setBindObject(systemElement);
		this.contextMenu.setPosition(newPosition.x, newPosition.y);
		this.contextMenu.show();
	}
});
Imperion.Interface.PlanetSurface = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Observable, Imperion.Event, Imperion.Module, Imperion.Translate, Imperion.Util.Checkpoint],

	/**
	 * surface options
	 *
	 * @var Object
	 */
	options : {
		maxSlots : 23,
		position : {
			1 	: 	{ x : 293, y : 474, z : 52},
			2	: 	{ x : 579, y : 419, z : 51},
			3	: 	{ x : 484, y : 585, z : 54},
			4	: 	{ x : 388, y : 419, z : 51},
			5	: 	{ x : 484, y : 474, z : 52},
			6	: 	{ x : 675, y : 474, z : 52},
			7	: 	{ x : 388, y : 529, z : 53},
			8	: 	{ x : 771, y : 419, z : 51},
			9	: 	{ x : 579, y : 529, z : 53},
			10	: 	{ x : 675, y : 585, z : 54},
			11	: 	{ x : 293, y : 585, z : 54},
			12	: 	{ x : 197, y : 419, z : 51},
			13	: 	{ x : 675, y : 364, z : 50},
			14	: 	{ x : 293, y : 364, z : 50},
			15	: 	{ x : 197, y : 529, z : 53},
			16	: 	{ x : 771, y : 529, z : 53},
			17	: 	{ x : 484, y : 364, z : 50},
			18	: 	{ x : 102, y : 474, z : 52},
			19	: 	{ x : 867, y : 474, z : 52},
			20	: 	{ x : 102, y : 585, z : 54},
			21	: 	{ x : 102, y : 364, z : 50},
			22	: 	{ x : 867, y : 364, z : 50}
		},
		container : {
			height : 270,
			width : 320
		},
		trigger : {
			height : 56,
			width : 94
		},
		level : {
			height : 43,
			width : 43
		},
		offset : 10,
		path : {
			buildings 	: '/images/buildings/surface/',
			free		: '/images/buildings/surface/free/',
			trash		: '/images/buildings/surface/trash/'
		},
		extension : '.png'
	},

	/**
	 * under attack flag
	 *
	 * @type	Boolean
	 */
	underAttack : false,

	/**
	 * registered items
	 */
	items : [],

	/**
	 * planet surface context menu handle
	 *
	 * @var Imperion.Interface.PlanetSurfaceContextMenu
	 */
	contextMenu : null,

	/**
	 * flag for building mode
	 *
	 * @var boolean
	 */
	buildingMode : false,

	/**
	 * active queue item
	 *
	 * @var Imperion.Interface.PlanetSurfaceSlotItem
	 */
	activeQueueItem : null,

	/**
	 * queue data
	 *
	 * @var Object
	 */
	queue : null,

	/**
	 * current queue position
	 *
	 * @var int
	 */
	queuePosition : 0,

	/**
	 * currently active item
	 *
	 * @type Imperion.Interface.PlanetSurfaceItem
	 */
	activeItem : null,

	/**
	 * instance from secondtimer
	 *
	 * @var Imperion.Util.SecondTimer
	 */
	secondTimer : null,

	/**
	 * tooltip handle
	 *
	 * @type	Imperion.Interface.ToolTip
	 */
	tooltip : null,
	/**
	 * tooltop handle
	 *
	 * @var Imperion.Interface.Gui.Tooltip
	 */
	tooltipHandle : null,

	/**
	 * html tooltop handle
	 *
	 * @var Imperion.Interface.Gui.HtmlTooltip
	 */
	htmlTooltipHandle : null,

	/**
	 * show level flag
	 *
	 * @type	Boolean
	 */
	levelShow : null,

	/**
	 * quest item array
	 *
	 * @type Object
	 */
	questItems : null,

	/**
	 * prepare the list
	 *
	 * @param	{Object} 							surfaceData
	 * @param	{Imperion.Data.Planet}				planet
	 * @param	{Imperion.Data.User}				user
	 * @param	{Imperion.Util.SecondTimer}			secondTimer
	 * @param	{Imperion.Interface.Gui.ToolTip}	tooltip
	 *
	 * @return void
	 */
	initialize : function(surfaceData, planet, user, secondTimer, tooltip, showLevel) {
		//set arguments
		this.setPlanet(planet);
		this.setUser(user);
		this.secondTimer	= secondTimer;
		this.tooltip		= tooltip;
		//reset attributes
		this.buildingMode	= false;
		this.underAttack	= false;
		this.activeQueueItem= null;
		this.queuePosition	= 0;
		this.items			= new Array();
		this.questItems		= {
			TrashSlotDrop	: null,
			FreeSlotDrop	: null,
			TakenSlotActive	: null,
			TrashSlotUnlock	: null
		};
		//set attributes
		//this.contextMenu	= Imperion.Interface.Factory.planetSurfaceContextMenu(this);
		//update paths
		this.options.path.buildings = this.options.path.buildings + user.getKind() + '/' + planet.getPlanetType() + '/';
		this.options.path.free		= this.options.path.free + planet.getPlanetType();
		this.options.path.trash		= this.options.path.trash + planet.getPlanetType();
		//load dom elements
		this.loadElements();
		//update the surface
		this._update(surfaceData);
		//start the queue
		this.startQueue();
		//
		if(showLevel === 'ON') {
			this.showLevel();
		}
		else {
			this.hideLevel();
		}
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'FreeSlotDrop':
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					if(this.items[params.slots[i].ground].options.type === SURFACE_SLOT_TYPE_BUILD) {
						return true;
					}
				}
				return false;
				break;
			case 'TrashSlotDrop':
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					if(this.items[params.slots[i].ground].options.type === SURFACE_SLOT_TYPE_BUILD) {
						return true;
					}
					else if(this.items[params.slots[i].ground].options.type === SURFACE_SLOT_TYPE_TRASH && Imperion.Interface.Factory.eventBox().eventBoxOpen === true) {
						return true;
					}
				}
				return false;
				break;
			case 'TakenSlotActive':
				//one surface slot is active and is a taken item
				if(this.activeItem !== null && this.activeItem.options.type === SURFACE_SLOT_TYPE_TAKEN) {
					for(var i = params.slots.length -1 ; i >= 0 ;i--) {
						//check if 1 slot is active from requested
						if(params.slots[i].ground == this.activeItem.options.ground ) {
							return true;
						}
					}
				}
				return false;
				break;
			case 'TrashSlotUnlock':
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					//check if 1 slot is active from requested
					if(this.items[params.slots[i].ground].options.type === SURFACE_SLOT_TYPE_EMPTY || this.items[params.slots[i].ground].activateSlotEventBox === true) {
						return true;
					}
				}
				return false;
				break;
			case 'TrashSlotActivate':
				return Imperion.Interface.Factory.eventBox().isCheckpointResolved(ident, params, questObj);
				break;
			default:
				throw 'Imperion.Interface.PlanetSurface ident not exist' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'TrashSlotDrop':
				this.questItems[ident] = new Array();
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					this.items[params.slots[i].ground].activateCheckpoint(ident, params.slots[i], questObj);
					this.questItems[ident].push(params.slots[i].ground);
				}
				break;
			case 'FreeSlotDrop':
				this.questItems[ident] = new Array();
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					this.items[params.slots[i].ground].activateCheckpoint(ident, params.slots[i], questObj);
					this.questItems[ident].push(params.slots[i].ground);
				}
				break;
			case 'TakenSlotActive':
			case 'TrashSlotUnlock':
				this.questItems[ident] = new Array();
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					this.items[params.slots[i].ground].activateCheckpoint(ident, params.slots[i], questObj);
					this.questItems[ident].push(params.slots[i].ground);
				}
				break;
			case 'TrashSlotActivate':
				Imperion.Interface.Factory.eventBox().activateCheckpoint(ident, params, questObj);
				break;
			default:
				throw 'Imperion.Interface.PlanetSurface ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident) {
		switch(ident) {
			case 'TrashSlotDrop':
			case 'FreeSlotDrop':
				if(this.questItems[ident] !== null) {
					for(var i = this.questItems[ident].length - 1 ; i >= 0 ; i--) {
						this.items[this.questItems[ident][i]].removeCheckpoint(ident);
					}
					this.questItems[ident] = null;
				}
				break;
			case 'TakenSlotActive':
			case 'TrashSlotUnlock':
				if(this.questItems[ident] !== null) {
					for(var i = this.questItems[ident].length - 1 ; i >= 0 ; i--) {
						this.items[this.questItems[ident][i]].removeCheckpoint(ident);
					}
					this.questItems[ident] = null;
				}
				break;
			case 'TrashSlotActivate':
				Imperion.Interface.Factory.eventBox().removeCheckpoint(ident);
				break;
			default:
				throw 'Imperion.Interface.PlanetSurface ident not exist';
				break;
		}
	},

	/**
	 * update the planet surface
	 *
	 * @param {Object}	buildings
	 * @param {Int}		slotCount
	 * @param {Int}		slotsActive
	 * @param {Object}	queue
	 *
	 * @type void
	 */
	update : function(buildings, slotCount, slotsActive, queue) {
		//loop over each slot
		var item;
		for(var ground = 1 ; ground <= slotCount ; ground++) {
			var position = this.options.position[ground];
			if(buildings[ground] && buildings[ground].level.toInt() === 0) {
				item = Imperion.Interface.Factory.planetSurfaceSlotItemBuild(this, position, {ground : ground, building: buildings[ground].type, caption : buildings[ground].caption});
			}
			else if(buildings[ground]) {
				item = Imperion.Interface.Factory.planetSurfaceSlotItemTaken(this, position, {
					ground 		: ground,
					building	: buildings[ground].type,
					level		: buildings[ground].level.toInt(),
					caption		: buildings[ground].caption
				});
			}
			else if(slotsActive[ground]) {
				item = Imperion.Interface.Factory.planetSurfaceSlotItemEmpty(this, position, {ground : ground});
			}
			else {
				item = Imperion.Interface.Factory.planetSurfaceSlotItemTrash(this, position, {ground : ground});
			}
			this.add(item, ground);
		}
		this.queue = queue;

	},

	/**
	 * object wrapping for backend request
	 *
	 * @param {Object} params
	 *
	 * @type void
	 */
	_update : function(params) {
		this.update(params.buildings, params.count, params.active, params.queue);
	},

	/**
	 * planet is under attack
	 *
	 * @param	{Boolean}	attacked
	 *
	 * @returns	{Void}
	 */
	planetAttacked : function(attacked) {
		if(attacked && !this.underAttack) {
			this.elements.outer.addClass('attack');
			this.underAttack = true;
		}
		else if(!attacked && this.underAttack) {
			this.elements.outer.removeClass('attack');
			this.underAttack = false;;
		}
	},

	/**
	 * start surface building mode
	 *
	 * @return void
	 */
	startBuildingMode : function() {
		this.buildingMode = true;
	},

	/**
	 * end surface building mode
	 *
	 * @return void
	 */
	endBuildingMode : function() {
		this.buildingMode = false;
	},

	/**
	 * set outline from all items
	 *
	 * @return void
	 */
	setOutline : function(){
		$splat(this.items).each(function(item) {
			if(item) {
				item.setOutlineActive();
			}
		});
	},

	/**
	 * remove outline from all items
	 *
	 * @return void
	 */
	removeOutline : function(){
		$splat(this.items).each(function(item) {
			if(item) {
				item.removeOutlineActive();
			}
		});
	},

	/**
	 * add slot item
	 *
	 * @param Imperion.Interface.PlanetSurfaceSlotItem slotItem
	 * @param int groundId
	 *
	 * @return void
	 */
	add : function(slotItem, groundId) {
		if(this.items[groundId]) {
			this.items[groundId].clean();
		}
		this.items[groundId] = slotItem;
		this.elements.container.appendChild(slotItem.elements.container);
		this.elements.trigger.appendChild(slotItem.elements.trigger);
		this.elements.level.appendChild(slotItem.elements.level);
	},

	/**
	 * check if item already exist at ground
	 *
	 * @param int ground
	 *
	 * @return boolean
	 */
	exist : function(ground) {
		if(this.items[ground]) {
			return true;
		}
		return false;
	},

	/**
	 * get array with item elements for droppables selection
	 *
	 * @return Array
	 */
	getDroppables : function() {
		var elementArray = new Array(this.options.maxSlots + 1);
		var counter = 0;
		$splat(this.items).each(function(item) {
			if(item) {
				elementArray[counter] = item.getTrigger();
				counter++;
			}
		});
		return elementArray;
	},

	/**
	 * start queue
	 *
	 * @param Imperion.Interface.PlanetSurfaceSlotItem item
	 *
	 * @return void
	 */
	startQueue : function() {
		if(this.queue.length > 0) {
			//show queue on items
			for(var i = 0 ; i < this.queue.length ; i++) {
				if(this.items[this.queue[i].ground]) {
					this.items[this.queue[i].ground].resetQueue();
					this.items[this.queue[i].ground].showQueue();
				}
			}
			//start queue
			this.startQueueItem(0);
		}
	},

	/**
	 * process queue item
	 *
	 * @param int queuePos
	 *
	 * @return void
	 */
	startQueueItem : function(queuePos) {
		if(this.queue[queuePos]) {
			var item = this.items[this.queue[queuePos].ground];
			if(item) {
				this.queuePosition = queuePos;
				this.activeQueueItem = item;
				this.activeQueueItem.resetQueue();
				this.activeQueueItem.showQueue();
				this.activeQueueItem.elements.bar.removeClass('disabled');

				var newWidth = this.queue[this.queuePosition].running * 100 / this.queue[this.queuePosition].duration;
				this.activeQueueItem.elements.barInner.setStyle('width', newWidth + '%');
				//this.processQueueItem();
				this.secondTimer.attach('surfaceQueue', this);
				//this.timerStep();
			}
		}
		else {
			this.queuePosition = -1;
			this.activeQueueItem = null;
			this.secondTimer.detach('surfaceQueue');
		}
	},

	/**
	 * listener for second timer
	 *
	 * @return void
	 */
	timerStep : function() {
		if(!this.queue[this.queuePosition].paused) {
			this.queue[this.queuePosition].running++;

			var newWidth = this.queue[this.queuePosition].running * 100 / this.queue[this.queuePosition].duration;
			this.activeQueueItem.elements.barInner.setStyle('width', newWidth + '%');

			if(this.queue[this.queuePosition].running <= this.queue[this.queuePosition].duration) {

			}
			else {
				this.finishQueueItem(this.queuePosition);
			}
		}
	},

	/**
	 * finish a queue entry and activate next entry
	 *
	 * @param int queuePos
	 * @param	{Boolean}	requestFlag
	 *
	 * @return void
	 */
	finishQueueItem : function(queuePos, requestFlag) {
		if(requestFlag === undefined) {
			requestFlag = true;
		}
		this.activeQueueItem.resetQueue();
		//check if another entry exist on this ground
		if(!this.anotherQueueEntryExist(queuePos)) {
			this.activeQueueItem.hideQueue();
		}
		//get sidebar instance
		var sidebar = this.getBootstrap().getModule('Imperion.Interface.Sidebar');
		//check for item convert
		switch(this.queue[queuePos].direction) {
			case 'BUILD':
				if(this.queue[queuePos].level.toInt() === 1) {
					var newItem = this.convertItemAtPosToTaken(queuePos);
					if(newItem && this.anotherQueueEntryExist(queuePos)) {
						newItem.showQueue();
					}
                    //continue the construction of ships that were already in progress once an initial shipyard has been built
                    if(sidebar.content.loadedModule && sidebar.content.loadedModule.className != 'Imperion.Interface.Sidebar.InnerView') {
                        if(sidebar.tabs.activeTop == SIDEBAR_TAB_TOP_SHIPS) {
                            sidebar.onTabChanged({
                                top : SIDEBAR_TAB_TOP_SHIPS,
                                bot : SIDEBAR_TAB_BOT_CIVIL
                            });
                        }
                    }
				}
				else {
					var item = this.items[this.queue[queuePos].ground];
					if(item.options.type === SURFACE_SLOT_TYPE_BUILD) {
						this.convertItemAtPosToTaken(queuePos);
					}
					else {
						item.setLevel(item.options.level + 1);
					}
				}
				break;
			case 'DEMOLISH':
				//close inner view if player is in the inner view of the building which is demolish
				if(sidebar.content.loadedModule !== null && sidebar.content.loadedModule.className === 'Imperion.Interface.Sidebar.InnerView') {
                    var innerView	= sidebar.content.loadedModule;
					var item		= this.items[this.queue[queuePos].ground];
					if(innerView.data.ground === item.options.ground) {
						sidebar.showGrid();
						sidebar.data.building.requestQueueGridData(sidebar.tabs.activeBot, Imperion.Interface.Sidebar.Factory.handle().updateQueueGrid.bindNew(sidebar));
						requestFlag = false;
					}
                }

				this.convertItemAtPosToEmpty(queuePos);
				break;
		}
		this.items[this.queue[queuePos].ground].hideQueue();
		if (requestFlag && sidebar.gridVisible && SIDEBAR_TAB_TOP_BUIDLINGS === sidebar.tabs.activeTop) {
			if(sidebar.content.loadedModule && sidebar.content.loadedModule.className && sidebar.content.loadedModule.className !== 'Imperion.Interface.Sidebar.Create.Building') {
				sidebar.data.building.requestQueueGridData(sidebar.tabs.activeBot, Imperion.Interface.Sidebar.Factory.handle().updateQueueGrid.bindNew(sidebar));
			}
			if(this.queue[queuePos].update && this.queue[queuePos].update !== '') {
				this.bootstrap.update(this.queue[queuePos].update);
			}
		}
		//check for update
		else if(this.queue[queuePos].update && this.queue[queuePos].update !== '' && requestFlag) {
			this.bootstrap.update(this.queue[queuePos].update);
		}
		this.activeQueueItem = null;
		delete this.queue[queuePos];
		this.startQueueItem(this.getNextQueuePosition());
	},

	/**
	 * abort a queue entry and activate next
	 *
	 * @param int queuePos
	 *
	 * @return void
	 */
	abortQueueItem : function(queuePos) {
		//check if another entry exist on this ground
		if(!this.anotherQueueEntryExist(queuePos)) {
			this.activeQueueItem.resetQueue();
			this.activeQueueItem.hideQueue();
		}
		//check for transform to taken item
		if(this.queue[queuePos].level.toInt() === 1 && this.queue[queuePos].direction === 'BUILD') {
			this.convertItemAtPosToEmpty(queuePos);
		}
		this.activeQueueItem = null;
		delete this.queue[queuePos];
		this.startQueueItem(this.getNextQueuePosition());
	},

	/**
	 * update the hole queue
	 *
	 * @param Object queueData
	 *
	 * @return void
	 */
	updateQueue : function(queueData) {
		if(this.activeQueueItem !== null) {
			this.timerStep();
			if(this.activeQueueItem !== null) {
				this.activeQueueItem.resetQueue();
				this.activeQueueItem.hideQueue();
				this.activeQueueItem = null;
			}
		}
		delete this.queue;
		this.queue = queueData;
		this.startQueue();
	},

	/**
	 * reset the hole queue
	 *
	 * @return void
	 */
	resetQueue : function() {

	},

	/**
	 * remove a queue item from queue
	 *
	 * @param int queueId
	 *
	 * @return void
	 */
	removeQueueEntryByQueueId : function(queueId) {
		this.removeQueueEntry(this.queueIdToPosition(queueId));
	},

	/**
	 * remove a queue item from queue
	 *
	 * @param int queuePos
	 *
	 * @return void
	 */
	removeQueueEntry : function(queuePos) {
		//check if queue data exist
		if(this.queue[queuePos]) {
			//check for active item
			if(queuePos === this.queuePosition) {
				this.abortQueueItem(queuePos);
			}
			else {
				var item = this.items[this.queue[queuePos].ground];
				if(item) {
					//check for transform to taken item
					if(this.queue[queuePos].level.toInt() === 1 && this.queue[queuePos].direction === 'BUILD') {
						this.convertItemAtPosToEmpty(queuePos);
					}
					if(!this.anotherQueueEntryExist(queuePos)) {
						item.resetQueue();
						item.hideQueue();
					}
					delete this.queue[queuePos];
				}
			}
		}
	},

	/**
	 * return the position by queueId
	 *
	 * @param int queueId
	 *
	 * @return int
	 */
	queueIdToPosition : function(queueId) {
		for(var i = this.queuePosition; i < this.queue.length ; i++) {
			if(this.queue[i] && this.queue[i].id === queueId) {
				return this.queue[i].position;
			}
		}
		return null;
	},

	/**
	 * check if another queue entry exist on this ground
	 *
	 * @param int queuePos
	 *
	 * @return void
	 */
	anotherQueueEntryExist : function(queuePos) {
		for(var i = queuePos + 1 ; i < this.queue.length ; i++) {
			if(this.queue[i] && this.queue[queuePos] && this.queue[queuePos].ground === this.queue[i].ground) {
				return true;
			}
		}
		return false;
	},

	/**
	 * get next queue position
	 *
	 * @return int
	 */
	getNextQueuePosition : function() {
		for(var i = this.queuePosition + 1; i < this.queue.length ; i++) {
			if(this.queue[i]) {
				return i;
			}
		}
		return null;
	},

	/**
	 * convert an item at a specific queue pos to empty item
	 *
	 * @param int queuePos
	 *
	 * @return void
	 */
	convertItemAtPosToEmpty : function(queuePos) {
		if(this.queue[queuePos]) {
			var item = this.items[this.queue[queuePos].ground];
			if(item) {
				var newItem = item.toEmptyItem();
				this.add(newItem, newItem.options.ground);
				return newItem;
			}
		}
	},

	/**
	 * convert an item at a specific queue pos to taken item
	 *
	 * @param int queuePos
	 *
	 * @return void
	 */
	convertItemAtPosToTaken : function(queuePos) {
		if(this.queue[queuePos]) {
			var item = this.items[this.queue[queuePos].ground];
			if(item) {
				var newItem = item.toTakenItem();
				this.add(newItem, newItem.options.ground);
			}
		}
	},

	/**
	 * remove active item
	 *
	 * @returns	{Void}
	 */
	deactiveActiveItem : function() {
		if(this.activeItem !== null) {
			this.activeItem.active = false;
			this.activeItem.removeHighlight();
			this.activeItem = null;
		}
	},

	/**
	 * show level
	 *
	 * @returns	{Void}
	 */
	showLevel : function() {
		this.elements.level.removeClass('hideContainer');
		this.elements.toggleLevel.addClass('active');
		this.levelShow = true;
	},

	/**
	 * hide level
	 *
	 * @returns	{Void}
	 */
	hideLevel : function() {
		this.elements.level.addClass('hideContainer');
		this.elements.toggleLevel.removeClass('active');
		this.levelShow = false;
	},


	/**
	 * transfer new level state to server
	 *
	 * @param	{String}	levelState
	 *
	 * @returns	{Void}
	 */
	requestLevel : function(levelState) {
		Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'special', 'level'), {
			state : levelState
		}, this.afterRequestLevel.bindNew(this));
	},

	/**
	 * callback after level state was changed
	 *
	 * @param	{Imperion.Util.Response}	response
	 *
	 * @returns	{Void}
	 */
	afterRequestLevel : function(response) {
		var rData = response.getResponseData();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			if(rData.newState == 'ON') {
				this.showLevel();
			}
			else {
				this.hideLevel();
			}
		}
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'mouse_enter':
				this.notify({
					event : eventObject
				}, 'onMouseEnterSurface');
				break;
			case 'mouse_leave':
				this.notify({
					event : eventObject
				}, 'onMouseLeaveSurface');
				break;
			case 'click_surface':
				// fire body onClick to assure global onBodyClick event is not ignored
				this.elements.body.fireEvent('click');
				this.notify({
					event : eventObject
				}, 'onSurfaceClick');
				new Event(eventObject).stop();
				this.deactiveActiveItem();
				return false;
				break;
			case 'toggle_level':
				if(this.levelShow) {
					this.requestLevel('OFF');
				}
				else {
					this.requestLevel('ON');
				}
				break;
			case 'zoom_to_planet':
				location.href = eventObject.target.getProperty('href');
				break;
			case 'show_zoom_to_planet_tooltip':
				this.tooltip.setText(this.translate('planetsurface__tooltip_show_zoom_to_planet'));
				this.tooltip.show();
				break;
			case 'toggle_level_tooltip_on':
					this.tooltip.setText(this.translate('planetsurface__tooltip_show_building_levels'));
					this.tooltip.show();
				break;
			case 'hide_tooltip':
					this.tooltip.hide();
				break;

		}
	},

	/**
	 * load the planet surface items
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.body = $(document.body);
		this.elements.outer = this.getTemplate('PlanetSurfaceListOuter');
		this.elements.container = this.getTemplate('PlanetSurfaceList');

		this.addEvent('click', this.elements.outer, $H({
			action : 'click_surface'
		}));
		this.addEvent('mouseenter', this.elements.outer, $H({
			action : 'mouse_enter'
		}));
		this.addEvent('mouseleave', this.elements.outer, $H({
			action : 'mouse_leave'
		}));

		this.elements.trigger = this.getTemplate('PlanetSurfaceTrigger');
		this.elements.level = this.getTemplate('PlanetSurfaceLevel');

		this.elements.toggleLevel = this.elements.outer.getElement('.toggleLevel');

		this.addEvent('click', this.elements.toggleLevel, $H({
			action : 'toggle_level'
		}));
		
		this.addEvent('mouseenter', this.elements.toggleLevel, $H({
			action : 'toggle_level_tooltip_on'
		}));
		
		this.addEvent('mouseleave', this.elements.toggleLevel, $H({
			action : 'hide_tooltip'
		}));
		
		
		this.elements.zoomPlanet = this.elements.outer.getElement('.zoomToPlanet');

		this.addEvent('click', this.elements.zoomPlanet, $H({
			action : 'zoom_to_planet'
		}));

		this.addEvent('mouseenter', this.elements.zoomPlanet, $H({
			action : 'show_zoom_to_planet_tooltip'
		}));

		this.addEvent('mouseleave', this.elements.zoomPlanet, $H({
			action : 'hide_tooltip'
		}));
	}
});
Imperion.Interface.PlanetSurfaceSlotItem = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Util.Checkpoint],
	
	/**
	 * slot options
	 * 
	 * @var Object
	 */
	options : {
		ground			: 0,
		type			: SURFACE_SLOT_TYPE_UNDEFINED,
		caption			: 'UNDEFINED',
		level			: 0,
		pos 			: {
			x : 0,
			y : 0,
			z : 0
		},
		highlight 		: {
			outline		: 'normal',
			normal 		: 'normal',
			building 	: 'normal' 
		}
	},
	
	/**
	 * parent surface
	 * 
	 * @var Imperion.Interface.PlanetSurface
	 */
	planetSurface : null,
	
	/**
	 * flag for active outline
	 * 
	 * @var boolean
	 */
	outlineActive : false,
	
	/**
	 * prepare the slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object pos
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(planetSurface, pos, options) {
		this.outlineActive 			= false;
		this.setOptions(options);
		//
		this.planetSurface			= planetSurface;
		//
		this.loadElements();
		//
		this.setPosition(pos.x, pos.y, pos.z);
	},
	
	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			default:
				throw 'Imperion.Interface.PlanetSurface ident not exist' + ident;
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'TrashSlotDrop':
			case 'TrashSlotUnlock':
			case 'FreeSlotDrop':
				this.addQuestHighlight(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.PlanetSurface ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident) {
		switch(ident) {
			case 'TrashSlotDrop':
			case 'TrashSlotUnlock':
			case 'FreeSlotDrop':
				this.removeQuestHighlight(ident);
				break;
			default:
				throw 'Imperion.Interface.PlanetSurface ident not exist';
				break;
		}
	},
	
	/**
	 * add a quest highlight
	 * 
	 * @param	{String}			ident
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Void}
	 */
	addQuestHighlight : function(ident, questObj) {
		var highlight = this.getCheckpointHighlight(ident + this.options.ground, {
			posOffset	: {
				y : 130
			},
			rotation	: 'arrowTop' 
		});
		highlight.appendOver(this.elements.container);
		highlight.start();
		this.setCheckpointActive(ident + this.options.ground, questObj);
	},
	
	/**
	 * remove quest highlight
	 * 
	 * @param	{String}	ident
	 * 
	 * @returns	{Void}
	 */
	removeQuestHighlight : function(ident) {
		var questObj = this.getCheckpointActive(ident + this.options.ground);
		if(questObj !== null) {
			this.unsetCheckpointActive(ident + this.options.ground);
			this.removeCheckpointHighlight(ident + this.options.ground);
		}
	},
	
	/**
	 * clean item
	 * 
	 * @return void
	 */
	clean : function() {
		//
		this.cleanUp();
	},
	
	/**
	 * set image
	 * 
	 * @param string imagePath
	 * 
	 * @return void
	 */
	setImage : function(imagePath) {
		this.elements.view.setProperty('src', imagePath + this.planetSurface.options.extension);
	},
	
	/**
	 * set the position of the item
	 * 
	 * @param int x
	 * @param int y
	 * @param int z
	 * 
	 * @return void
	 */
	setPosition : function(x, y, z) {
		this.elements.container.setStyles({
			'top' : y - this.planetSurface.options.container.height + 56,
			'left' : x - this.planetSurface.options.container.width / 2,
			'z-index' : z
		});
		this.elements.trigger.setStyles({
			'top' : y - this.planetSurface.options.trigger.height / 2,
			'left' : x - this.planetSurface.options.trigger.width / 2,
			'z-index' : z + this.planetSurface.options.offset
		});
		this.elements.level.setStyles({
			'top' : y - 52,
			'left' : x - this.planetSurface.options.level.width / 2,
			'z-index' : z + this.planetSurface.options.offset
		});
		
		this.options.pos.x = x;
		this.options.pos.y = y;
		this.options.pos.z = z;
	},
	
	/**
	 * set outline active
	 * 
	 * @return void
	 */
	setOutlineActive : function() {
		this.outlineActive = true;
		this.setOutline();
	},
	
	/**
	 * remove outline active
	 * 
	 * @return void
	 */
	removeOutlineActive : function() {
		this.outlineActive = false;
		this.removeOutline();
		this.removeHighlight();
	},
	
	/**
	 * set outline (html -> class) 
	 * 
	 * @return void
	 */
	setOutline : function() {
		this.elements.hover.addClass(this.options.highlight.outline);
	},
	
	/**
	 * remove outline
	 * 
	 * @return void
	 */
	removeOutline : function() {
		this.elements.hover.removeClass(this.options.highlight.outline);
	},
	
	/**
	 * add highlight on surface slot
	 * 
	 * @return void
	 */
	setHighlight : function() {
		if(this.outlineActive) {
			this.removeOutline();
		}
		if(this.planetSurface.buildingMode) {
			this.elements.hover.addClass(this.options.highlight.building);
		}
		else {
			this.elements.hover.addClass(this.options.highlight.normal);
		}
	},
	
	/**
	 * remove highlight on surface slot
	 * 
	 * @return void
	 */
	removeHighlight : function() {
		if(this.outlineActive) {
			this.setOutline();
		}
		if(this.planetSurface.buildingMode) {
			this.elements.hover.removeClass(this.options.highlight.building);
		}
		else {
			this.elements.hover.removeClass(this.options.highlight.normal);
		}
	},
	
	/**
	 * get trigger element
	 * 
	 * @return Element
	 */
	getTrigger : function() {
		return this.elements.trigger;
	},
	
	/**
	 * show level
	 * 
	 * @returns	{Void}
	 */
	showLevel : function() {
		if(this.elements.level.hasClass('hideContainer')) {
			this.elements.level.removeClass('hideContainer');
		}
	},
	
	/**
	 * show level
	 * 
	 * @returns	{Void}
	 */
	hideLevel : function() {
		if(!this.elements.level.hasClass('hideContainer')) {
			this.elements.level.addClass('hideContainer');
		}
	},
	
	/**
	 * set the level
	 * 
	 * @param	{Number}	level
	 * 
	 * @returns	{Void}
	 */
	setLevel : function(level) {
		this.options.level = level;
		this.elements.level.set('text', level);
	},
	
	/**
	 * reset the queue
	 * 
	 * @returns {void}
	 */
	resetQueue : function() {
		this.elements.bar.addClass('disabled');
	},
	
	/**
	 * convert item to taken item
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemTaken
	 */
	toEmptyItem : function() {
		var item = Imperion.Interface.Factory.planetSurfaceSlotItemEmpty(this.planetSurface, this.planetSurface.options.position[this.options.ground], {
			ground 	: this.options.ground
		});
		//copy quest data
		item.highlights			= this.highlights;
		item.activeCheckpoints	= this.activeCheckpoints;
		return item;
	},
	
	/**
	 * convert an empty item to an inbuild item
	 * 
	 * @param string buildingType
	 * @param Object creationData
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemBuild
	 */
	toBuildItem : function(buildingType, creationData, caption) {
		if(!caption) {
			caption = '!!UNDEFINED!!';
		}
		var item = Imperion.Interface.Factory.planetSurfaceSlotItemBuild(this.planetSurface, this.planetSurface.options.position[this.options.ground], {
			ground 		: this.options.ground,
			building	: buildingType,
			creating	: creationData,
			caption		: caption
		});
		//copy quest data
		item.highlights			= this.highlights;
		item.activeCheckpoints	= this.activeCheckpoints;
		return item;
	},
	
	/**
	 * convert item to taken item
	 * 
	 * @return Imperion.Interface.PlanetSurfaceSlotItemTaken
	 */
	toTakenItem : function() {
		var item = Imperion.Interface.Factory.planetSurfaceSlotItemTaken(this.planetSurface, this.planetSurface.options.position[this.options.ground], {
			ground		: this.options.ground,
			level		: 1,
			building	: this.options.building,
			caption		: this.options.caption
		});
		//copy quest data
		item.highlights			= this.highlights;
		item.activeCheckpoints	= this.activeCheckpoints;
		return item;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'enter':
				var level = '';
				if (this.options.type != 'trash' && this.options.type != 'empty')
				{
					level = ' (' + this.options.level + ')';
				}
				this.setHighlight();
				this.planetSurface.tooltip.setText(this.options.caption + level);
				this.planetSurface.tooltip.show();
				break;
			case 'leave':
				this.removeHighlight();
				this.planetSurface.tooltip.hide();
				break;
			case 'context':
				this.planetSurface.contextMenu.update(eventObject.client);
				this.planetSurface.tooltip.hide();
				eventObject.stop();
				break;
			case 'click':
				
				break;
		}
		return true;
	},
	
	/**
	 * show the queue
	 * 
	 * @return void
	 */
	showQueue : function() {
		this.elements.bar.removeClass('hideContainer');
	},
	
	/**
	 * show the queue
	 * 
	 * @return void
	 */
	hideQueue : function() {
		this.elements.bar.addClass('hideContainer');
	},
	
	/**
	 * set the elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('PlanetSurfaceListItem');
		
		this.elements.hover = this.elements.container.getElement('.hover');
		this.elements.view 	= this.elements.container.getElement('.view');
		
		this.elements.bar		= this.elements.container.getElement('.bar');
		this.elements.barInner	= this.elements.bar.getElement('DIV');
		
		this.elements.trigger = this.getClonedTemplate('PlanetSurfaceListTrigger');
		this.elements.trigger.addClass(this.options.type);
		this.elements.trigger.store('this', this);
		
		this.addEvent('mouseenter', this.elements.trigger, $H({
			action : 'enter'
		}));
		this.addEvent('mouseleave', this.elements.trigger, $H({
			action : 'leave'
		}));
		if(!this.planetSurface.planet.options.invasion) { 
			this.addEvent('click', this.elements.trigger, $H({
				action : 'click'
			}));
		}
		this.addEvent('mouseup', this.elements.trigger, $H({
			action : 'mouseup'
		}));
		/*
		this.addEvent('contextmenu', this.elements.trigger, $H({
			action : 'context'
		}));
		*/
		this.elements.trigger.removeClass('hideContainer');
		this.elements.container.removeClass('hideContainer');
		
		this.elements.level = this.getClonedTemplate('PlanetSurfaceLevelItem');
	}
});
Imperion.Interface.PlanetSurfaceSlotItemBuild = new Class({
	Extends : Imperion.Interface.PlanetSurfaceSlotItem,
	
	/**
	 * building active flag
	 * 
	 * @type Boolean
	 */
	active : null,
	
	/**
	 * slot options
	 * 
	 * @var Object
	 */
	options : {
		type 	: SURFACE_SLOT_TYPE_BUILD,
		building: 'UNDEFINED',
		highlight : {
			outline		: '',
			normal 		: 'normal',
			building 	: 'closed' 
		}
	},
	
	/**
	 * prepare the slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(planetSurface, position, options) {
		this.parent(planetSurface, position, options);
		this.setImage(this.planetSurface.options.path.buildings + 'build/' + this.options.building);
	},
	
	/**
	 * set highlight active
	 * 
	 * @returns	{Void}
	 */
	removeHighlight : function() {
		if(!this.active) {
			this.parent();
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		this.parent(eventObject, params);
		//
		switch(action) {
			case 'click':
				if(!this.planetSurface.buildingMode) {
					var sidebar = this.planetSurface.getBootstrap().getModule('Imperion.Interface.Sidebar');
					sidebar.onSurfaceBuildingClick({
						ground : this.options.ground
					});
					if(this.planetSurface.activeItem !== null) {
						this.planetSurface.activeItem.active = false;
						this.planetSurface.activeItem.removeHighlight();
						this.planetSurface.activeItem = null;
					}
					this.active = true;
					this.planetSurface.activeItem = this;
					this.setHighlight();
				}
				return false;
				break;
		}
		return true;
	}
});

Imperion.Interface.PlanetSurfaceSlotItemEmpty = new Class({
	Extends : Imperion.Interface.PlanetSurfaceSlotItem,
	
	/**
	 * slot options
	 * 
	 * @var Object
	 */
	options : {
		type : SURFACE_SLOT_TYPE_EMPTY,
		highlight : {
			outline		: 'free-outline',
			normal 		: 'normal',
			building 	: 'free' 
		}
	},
	
	/**
	 * prepare the slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(planetSurface, position, options) {
		this.parent(planetSurface, position, options);
		var newSeed = this.planetSurface.planet.options.id * 10 + this.options.ground;
		Imperion.Util.PseudoRandom.setNewSeed(newSeed);
		var imageRandom = Imperion.Util.PseudoRandom.rand(1,3);
		
		this.setImage(this.planetSurface.options.path.free + '-' + imageRandom);
		this.options.caption = this.planetSurface.translate('planetsurface__free_slot');
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		this.parent(eventObject, params);
		//
		switch(action) {
			case 'mouseup':
				if(!this.planetSurface.buildingMode) {
					var sidebar = this.planetSurface.getBootstrap().getModule('Imperion.Interface.Sidebar');
					sidebar.tabs.setTabBuildingActive();
					sidebar.tabs.setTabCivilActive();
					sidebar.onTabChanged({
						top : SIDEBAR_TAB_TOP_BUIDLINGS,
						bot : SIDEBAR_TAB_BOT_CIVIL
					});
				}
				break;
		}
		return true;
	}
});
Imperion.Interface.PlanetSurfaceSlotItemTaken = new Class({
	Extends : Imperion.Interface.PlanetSurfaceSlotItem,
	
	/**
	 * building active flag
	 * 
	 * @type Boolean
	 */
	active : null,
	
	/**
	 * slot options
	 * 
	 * @var Object
	 */
	options : {
		type 			: SURFACE_SLOT_TYPE_TAKEN,
		building		: 'UNDEFINED',
		level			: 0,
		highlight 		: {
			outline		: '',
			normal 		: 'normal',
			building 	: 'closed' 
		}
	},
	
	/**
	 * prepare the slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(planetSurface, position, options) {
		this.active = null;
		this.parent(planetSurface, position, options);
		this.setImage(this.planetSurface.options.path.buildings + 'normal/' + this.options.building);
		this.setLevel(this.options.level);
		this.showLevel();
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'TakenSlotActive':
				this.addQuestHighlight(ident, questObj);
				break;
			default:
				this.parent(ident, params, questObj);
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident) {
		switch(ident) {
			case 'TakenSlotActive':
				this.removeQuestHighlight(ident);
				break;
			default:
				this.parent(ident);
				break;
		}
	},
	
	/**
	 * set highlight active
	 * 
	 * @returns	{Void}
	 */
	removeHighlight : function() {
		if(!this.active) {
			this.parent();
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		this.parent(eventObject, params);
		//
		switch(action) {
			case 'click':
				if(!this.planetSurface.buildingMode) {
					var sidebar = this.planetSurface.getBootstrap().getModule('Imperion.Interface.Sidebar');
					sidebar.onSurfaceBuildingClick({
						ground : this.options.ground
					});
					if(this.planetSurface.activeItem !== null) {
						this.planetSurface.activeItem.active = false;
						this.planetSurface.activeItem.removeHighlight();
						this.planetSurface.activeItem = null;
					}
					this.active = true;
					this.planetSurface.activeItem = this;
					this.setHighlight();
				}
				return false;
				break;
		}
		return true;
	}
});
Imperion.Interface.PlanetSurfaceSlotItemTrash = new Class({
	Extends : Imperion.Interface.PlanetSurfaceSlotItem,
	
	Implements : Imperion.Translate,
	
	/**
	 * slot options
	 * 
	 * @var Object
	 */
	options : {
		type : SURFACE_SLOT_TYPE_TRASH,
		highlight : {
			outline		: 'free-outline',
			normal 		: 'normal',
			building 	: 'trash' 
		}
	},
	
	/**
	 * event box for slot activation
	 * 
	 * @var Boolean
	 * 
	 */
	activateSlotEventBox : false,
	
	/**
	 * datahandler
	 * 
	 * @var Object
	 */
	dataHandler : null,
	
	/**
	 * prepare the slot item
	 * 
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 * @param Object position
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(planetSurface, position, options) {
		this.parent(planetSurface, position, options);
		
		this.activateSlotEventBox = false;
		var newSeed = this.planetSurface.planet.options.id * 10 + this.options.ground;
		Imperion.Util.PseudoRandom.setNewSeed(newSeed);
		var imageRandom = Imperion.Util.PseudoRandom.rand(1,4);
		
		this.setImage(this.planetSurface.options.path.trash + '-' + imageRandom);
		this.dataHandler = Imperion.Interface.Sidebar.Factory.createData();
		this.options.caption = this.planetSurface.translate('planetsurface__busy_slot');
	},
	
	/**
	 * Unlock/Cancel event box for slot activation
	 *
	 * @return void
	 */
	showActivateSlotEventBox : function(slotItem) {
		this.activateSlotEventBox = true;
		this.planetSurface.removeCheckpoint('TrashSlotUnlock');
		
		var eventBox = Imperion.Interface.Factory.eventBox();
		eventBox.setEventBox({
			type : 'confirm',
			headline : this.translate('construction__unlock_ground_dialog_header'),
			image : '/images/layout/color-set/global/visuals/event_box/unlockBuildingSlot.jpg',
			content : this.translate('construction__unlock_ground_dialog_text'),
			firstButtonText : this.translate('default__cancel'),
			firstButtonCallback : this.onCancelActivateSlotEventBox.bindNew(this),
			secondButtonText : this.translate('construction__unlock_ground_dialog_button_unlock'),
			secondButtonCallback : this.onConfirmActivateSlotEventBox.bindNew(this)
		});
		eventBox.showEventBox();
	},
	
	/**
	 * 
	 * confirm callback for eventBox action
	 *
	 * @return void
	 */
	onConfirmActivateSlotEventBox : function ()
	{
		this.activateSlotEventBox = false;
		this.dataHandler.requestActivateSlot(this, null, this.activateSlotResponse.bindNew(this));
	},
	
	/**
	 * 
	 * cancel callback for eventBox action
	 *
	 * @return void
	 */
	onCancelActivateSlotEventBox : function ()
	{
		this.activateSlotEventBox = false;
		Imperion.Factory.quest().refresh(true);
	},
	
	/**
	 * response after build request
	 * 
	 * @param Object response
	 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
	 * 
	 * @return void
	 */
	activateSlotResponse : function(response) {
		var rData = response.getResponseData();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			var newItem = this.toEmptyItem();
			this.planetSurface.add(newItem, newItem.options.ground);
		}
	},

	/**
	 * sends request to check if enough population is available
	 */
	checkIfPopulationAvailable : function(){
		Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'index', 'enoughpopulationavailable'), {'ground' : this.options.ground}, this.checkPopulationAvailableCallback.bindNew(this));
	},

	/**
	 * callback for checkIfPopulationAvailable
	 *
	 * @param response
	 */
	checkPopulationAvailableCallback : function(response){
		var rData = response.getResponseData();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}else if(response.jsonDataDefault.data.freePopulation){
			var eventBox = Imperion.Interface.Factory.eventBox();
			eventBox.setEventBox({
				type : 'confirm',
				headline : this.translate('construction__unlock_ground_dialog_header'),
				image : '/images/layout/color-set/global/visuals/event_box/unlockBuildingSlot.jpg',
				content : this.translate('construction__info_population_not_available'),
				firstButtonText : this.translate('default__close'),
				firstButtonCallback : null
			});
			eventBox.showEventBox();
		}else{
			if(!this.planetSurface.buildingMode) {
				this.showActivateSlotEventBox();
				Imperion.Factory.quest().refresh();
			}
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		this.parent(eventObject, params);
		//
		switch(action) {
			case 'click':
				this.checkIfPopulationAvailable();
				return false;
				break;
		}
		return true;
	}
});
Imperion.Interface.Menu.Root = new Class(
	/** @lends Imperion.Interface.Menu.Root.prototype */	
	{
		Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Translate],
		
		/**
		 * menu options
		 * 
		 * @type	Object
		 */
		options : {
		
		},
		
		/**
		 * registered items
		 * 
		 * @type	Object
		 */
		items : null,
		
		/**
		 * prepare the root
		 * 
		 * @class Menu Root Class
		 * 
		 *
		 * @constructs
		 */
		initialize : function() {
			this.items	= {};
			//
			this.loadElements();
		},
		
		/**
		 * add an item
		 * 
		 * @param	{Imperion.Interface.Menu.Item}	item
		 * 
		 * @returns	{Void}
		 */
		addItem : function(item) {
			if(!this.items[item.ident]) {
				this.items[item.ident] = item;
				this.items[item.ident].show();
				this.items[item.ident].elements.container.inject(this.elements.list);
			}
		},
		
		/**
		 * on body click listener
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		onBodyClick : function(params) {
			this.hideMenu();
		},
		
		/**
		 * click listener [Interface]
		 * 
		 * @param	{Imperion.Interface.Menu.Item}	item
		 * 
		 * @returns	{Void}
		 */
		onItemClick : function(item) {
			throw 'METHOD [onItemClick] NOT IMPLEMENT!';
		},
		
		/**
		 * show context menu
		 * 
		 * @returns	{Void}
		 */
		showMenu : function() {
			this.show();
		},
		
		/**
		 * hide context menu
		 * 
		 * @returns	{Void}
		 */
		hideMenu : function () {
			this.hide();
		},
		
		/**
		 * set the position of the context menu
		 * 
		 * @param	{Number}	newX
		 * @param	{Number}	nexY
		 * 
		 * @returns	{Void}
		 */
		setPosition : function(newX, newY) {
			this.elements.container.setStyles({
				top : newY,
				left : newX
			});	
		},
		
		/**
		 * load elements [Interface]
		 * 
		 * @returns	{Void}
		 */
		loadElements : function() {
			throw 'METHOD [loadElements] NOT IMPLEMENT!';
		}
	}
);

Imperion.Interface.Menu.Item = new Class(
	/** @lends Imperion.Interface.Menu.Item.prototype */	
	{
		Implements : [Imperion.Event, Imperion.Util.Class],
		
		/**
		 * options
		 * 
		 * @var Object
		 */
		options : {
			caption : 'UNDEFINED',
			plus	: false
		},
		
		/**
		 * item ident
		 * 
		 * @type	String
		 */
		ident : null,
		
		/**
		 * parent handle
		 * 
		 * @type	Imperion.Interface.Menu.Root
		 */
		handle : null,
		
		/**
		 * prepare the item
		 * 
		 * @class	menu item class
		 * 
		 * @param	{String}						ident
		 * @param	{Imperion.Interface.Menu.Root}	handle
		 * @param	{Object}						options
		 *
		 * @constructs
		 */
		initialize : function(ident, handle, options) {
			//
			this.ident	= ident;
			this.handle	= handle;
			//
			this.setOptions(options);
			//
			this.loadElements();
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * return boolean
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'click':
					//call parent method for event delegation
					this.handle.onItemClick(this);
					break;
			}
		},
		
		/**
		 * load elements
		 * 
		 * @return void
		 */
		loadElements : function() {
			this.elements.container = this.handle.getClonedTemplate('InterfaceMenuItem');
			
			this.elements.link		= this.elements.container.getElement('SPAN');
			this.elements.link.set('text', this.options.caption);
			
			if(this.options.plus) {
				this.elements.container.addClass('plus');
			}
			//add click event
			this.addEvent('click', this.elements.link, $H({
				action : 'click'
			}));
		}
	}
);
/**
 * Factory for Gui Elements
 */
Imperion.Interface.Menu.Factory = new Class.Singleton({
	
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : null,
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			planet : null
		};
	},
	
	/**
	 * create a menu item
	 * 
	 * @param	{String}						ident
	 * @param	{Imperion.Interface.Menu.Root}	handle
	 * @param	{Object}						options
	 * 
	 * @returns	{Imperion.Interface.Menu.Item}
	 */
	item : function(ident, handle, options) {
		return new Imperion.Interface.Menu.Item(ident, handle, options);
	},
	
	/**
	 * return the frame instance
	 *
	 * @returns	{Imperion.Interface.Menu.Planet}
	 */
	planet: function(){
		if(!this.storage.planet) {
			this.storage.planet = new Imperion.Interface.Menu.Planet();
		}
		return this.storage.planet;
	},
	
	/**
	 * return the frame instance
	 *
	 * @returns	{Imperion.Interface.Menu.Player}
	 */
	player: function(){
		if(!this.storage.player) {
			this.storage.player = new Imperion.Interface.Menu.Player();
		}
		return this.storage.player;
	}
});
Imperion.Interface.Menu.Planet = new Class(
	/** @lends Imperion.Interface.Menu.Planet.prototype */
	{
		Extends : Imperion.Interface.Menu.Root,

		/**
		 * bounded location object
		 *
		 * @type	Imperion.Data.Location
		 */
		location : null,

		/**
		 * prepare the root
		 *
		 * @class Summary of attributes and method for all resources
		 *
		 * @constructs
		 */
		initialize : function() {
			this.parent();
			//
			this.location	= null;
			//
			this.addItem(Imperion.Interface.Menu.Factory.item(Imperion.Interface.Menu.Planet.MENU_ITEM_TRANSPORT, this, {
				caption : this.translate('frontend__contextmenu_transport')
			}));
			this.addItem(Imperion.Interface.Menu.Factory.item(Imperion.Interface.Menu.Planet.MENU_ITEM_MAP, this, {
				caption : this.translate('frontend__contextmenu_map')
			}));
		},


		/**
		 * item click listener
		 *
		 * @param	{Imperion.Interface.Menu.Item}	item
		 *
		 * @returns	{Void}
		 */
		onItemClick : function(item) {
			switch(item.ident) {
				case Imperion.Interface.Menu.Planet.MENU_ITEM_TRANSPORT:
					var start = Imperion.Util.Registry.get('planet');

					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('fleetTransport');

					var transport = Imperion.Interface.Dialog.Context.Factory.fleetTransport(dialog, {
						type: this.location.getType(),
						start: start,
						target: this.location
					});
					transport.showContext();
					break;
				case Imperion.Interface.Menu.Planet.MENU_ITEM_MAP:
					switch(this.location.getType()) {
						case LOCATION_TYPE_PLANET:
							window.location = '/map/index/index/stage/ORB/targetPlanetId/' + this.location.getId();
							break;
						case LOCATION_TYPE_COMET:
							window.location = '/map/index/index/stage/ORB/targetCometId/' + this.location.getId();
							break;
					}
					break;
			}
		},

		/**
		 * show context menu
		 *
		 * @param	{Number}	planetId
		 * @param	{String}	type
		 *
		 * @returns	{Void}
		 */
		showMenu : function(planetId, type) {
			this.location = Imperion.Data.Factory.locationByType(type, {
				id: planetId
			});
			this.parent();
			Imperion.Util.Factory.globalEvents().attach('PlanetMenuContext', this);
		},

		/**
		 * hide context menu
		 *
		 * @returns	{Void}
		 */
		hideMenu : function () {
			this.location	= null;
			this.parent();
			Imperion.Util.Factory.globalEvents().detach('PlanetMenuContext');
		},

		/**
		 * load elements
		 *
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.container	= this.getTemplate('InterfaceMenuPlanet');
			this.elements.list		= this.elements.container.getElement('.mc');
		}
	}
);

Imperion.Interface.Menu.Planet.MENU_ITEM_TRANSPORT	= 'PLANET_TRANSPORT';
Imperion.Interface.Menu.Planet.MENU_ITEM_MAP		= 'PLANET_MAP';
Imperion.Interface.Menu.Planet.MENU_ITEM_FAKE		= 'PLANET_FAKE';
Imperion.Interface.Menu.Player = new Class(
	/** @lends Imperion.Interface.Menu.Player.prototype */
	{
		Extends : Imperion.Interface.Menu.Root,

		/**
		 * bounded player id
		 *
		 * @type	Number
		 */
		id : null,

		/**
		 * prepare the root
		 *
		 * @class Summary of attributes and method for all resources
		 *
		 * @constructs
		 */
		initialize : function() {
			this.parent();
			//
			this.id	= null;
			//
			this.addItem(Imperion.Interface.Menu.Factory.item(Imperion.Interface.Menu.Player.MENU_ITEM_PROFIL, this, {
				caption : this.translate('frontend__contextmenu_player_profil')
			}));
			this.addItem(Imperion.Interface.Menu.Factory.item(Imperion.Interface.Menu.Player.MENU_ITEM_MESSAGE, this, {
				caption : this.translate('frontend__contextmenu_message_to_player')
			}));
		},


		/**
		 * item click listener
		 *
		 * @param	{Imperion.Interface.Menu.Item}	item
		 *
		 * @returns	{Void}
		 */
		onItemClick : function(item) {
			switch(item.ident) {
				case Imperion.Interface.Menu.Player.MENU_ITEM_PROFIL:
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('profile_' + this.id);
					var playerprofile = Imperion.Interface.Dialog.Context.Factory.playerprofile(dialog, this.id);
					playerprofile.showContext();
					break;
				case Imperion.Interface.Menu.Player.MENU_ITEM_MESSAGE:
					this.mailHandle = Imperion.Interface.Igm.Factory.handle();
					this.mailHandle.composeId(this.id);
					break;
			}
		},

		/**
		 * show context menu
		 *
		 * @param	{Number}	playerId
		 *
		 * @returns	{Void}
		 */
		showMenu : function(playerId) {
			this.id = playerId;
			this.parent();
			if (playerId == ALIEN_ACOOUNT_ID) {
				this.items.PLAYER_MESSAGE.elements.container.addClass('hideContainer');
			} else {
				this.items.PLAYER_MESSAGE.elements.container.removeClass('hideContainer');
			}
			Imperion.Util.Factory.globalEvents().attach('PlayerMenuContext', this);
		},

		/**
		 * hide context menu
		 *
		 * @returns	{Void}
		 */
		hideMenu : function () {
			this.location	= null;
			this.parent();
			Imperion.Util.Factory.globalEvents().detach('PlayerMenuContext');
		},

		/**
		 * load elements
		 *
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.container	= this.getTemplate('InterfaceMenuPlayer');
			this.elements.list		= this.elements.container.getElement('.mc');
		}
	}
);

Imperion.Interface.Menu.Player.MENU_ITEM_PROFIL		= 'PLAYER_PROFIL';
Imperion.Interface.Menu.Player.MENU_ITEM_MESSAGE	= 'PLAYER_MESSAGE';

/**
 * Factory for Gui Elements
 */
Imperion.Interface.Gui.Factory = new Class.Singleton({

	/**
	 * storage
	 *
	 * @var Object
	 */
	storage : {
		tooltip : null
	},

	/**
	 * prepare the factory
	 *
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			tooltip : null
		};
	},

	/**
	 * return the frame instance
	 *
	 * @return Imperion.Interface.Gui.Tooltip
	 */
	tooltip: function(){
		if(!this.storage.tooltip) {
			this.storage.tooltip = new Imperion.Interface.Gui.Tooltip(Imperion.Util.Factory.globalEvents());
		}
		return this.storage.tooltip;
	},

	/**
	 * return the HtmlTooltip instance
	 *
	 * @return Imperion.Interface.Gui.HtmlTooltip
	 */
	htmltooltip: function(){
		if(!this.storage.htmlTooltip) {
			this.storage.htmlTooltip = new Imperion.Interface.Gui.HtmlTooltip(Imperion.Util.Factory.globalEvents());
		}
		return this.storage.htmlTooltip;
	},

	/**
	 * return the frame instance
	 *
	 * @param	{String}	ident
	 * @param	{Object}	options
	 *
	 * @return Imperion.Interface.Gui.Highlight
	 */
	highlight: function(ident, options) {
		return new Imperion.Interface.Gui.Highlight(ident, options);
	},

	/**
	 * create a slide menu
	 *
	 * @returns	{Imperion.Interface.Gui.SlideMenu}
	 */
	slidemenu : function() {
		return new Imperion.Interface.Gui.SlideMenu();
	},

	/**
	 * create a slide menu item
	 *
	 * @param	{Imperion.Interface.Gui.SlideMenu}	parentSlideMenu
	 * @param	{Element}							domContainer
	 * @param	{Number}							position
	 *
	 * @returns {Imperion.Interface.Gui.SlideMenuItem}
	 */
	slidemenuitem : function(parentSlideMenu, domContainer, position) {
		return new Imperion.Interface.Gui.SlideMenuItem(parentSlideMenu, domContainer, position);
	},

	/**
	 * create a tree menu
	 *
	 * @returns	{Imperion.Interface.Gui.TreeMenu}
	 */
	treeMenu : function() {
		return new Imperion.Interface.Gui.TreeMenu();
	},

	/**
	 * create a tree menu item
	 *
	 * @param	{Imperion.Interface.Gui.TreeMenu}		parentTree
	 * @param	{Imperion.Interface.Gui.TreeMenuNode}	parentNode
	 * @param	{Element}								domContainer
	 *
	 * @returns {Imperion.Interface.Gui.TreeMenuNode}
	 */
	treeMenuNode : function(parentTree, parentNode, domContainer) {
		return new Imperion.Interface.Gui.TreeMenuNode(parentTree, parentNode, domContainer);
	},

	/**
	 * create a tableList
	 *
	 * @returns	{Imperion.Interface.Gui.TableList}
	 */
	tableList : function(element, data, options) {
		return new Imperion.Interface.Gui.TableList(element, data, options);
	},

	/**
	 * create a tableList item
	 *
	 * @returns	{Imperion.Interface.Gui.TableList}
	 */
	tableListItem : function(parentList, element, data) {
		return new Imperion.Interface.Gui.TableListItem(parentList, element, data);
	},
	
	/**
	 * return Gui-Animation instance
	 *
	 * @param	{String}	ident
	 * @param	{Object}	options
	 *
	 * @return Imperion.Interface.Gui.Animation
	 */
	animation: function(element, options) {
		return new Imperion.Interface.Gui.Animation(element, options);
	}
});
Imperion.Interface.Gui.TreeMenu = new Class(
	/** @lends Imperion.Interface.Gui.SlideMenu.prototype */
	{
		Implements : [Imperion.Observable],
		
		/**
		 * options
		 * 
		 * @type	Options
		 */
		options : {
			
		},
		
		/**
		 * active tree node
		 * 
		 * @type 	Imperion.Interface.Gui.TreeMenuNode
		 */
		activeNode : null,
		
		/**
		 * first node
		 * 
		 * @type	Imperion.Interface.Gui.TreeMenuNode
		 */
		firstNode : null,
		
		/**
		 * prepare the slide menu
		 * 
		 * @class Imperion Gui Slidemenu class
		 * 
		 * @constructs
		 */
		initialize : function() {
			//
			this.firstNode		= null;
			this.activeNode		= null;
		},
		
		/**
		 * node click
		 * 
		 * @param	{Imperion.Interface.Gui.TreeMenuNode}	node
		 * 
		 * @returns	{Void}
		 */
		onNodeClick : function(node) {
			if(this.activeNode !== null) {
				this.activeNode.deactivate();
			}
			this.activeNode = node;
			this.activeNode.activate();
			this.notify({
				node : this.activeNode
			}, 'onTreeMenuNodeClick');
		},
		
		/**
		 * toggle node
		 * 
		 * @param	{Imperion.Interface.Gui.TreeMenuNode}	node
		 * 
		 * @returns	{Void}
		 */
		onNodeToggle : function(node) {
			this.notify({
				node : node
			}, 'onToggleTreeNode');
		},
		
		/**
		 * analyse dom container
		 * 
		 * @param	{Element}	treeContainer
		 * 
		 * @returns	{Void}
		 */
		appendTo : function(treeContainer) {
			this.firstNode = Imperion.Interface.Gui.Factory.treeMenuNode(this, null, treeContainer);
		}
	}
);

Imperion.Interface.Gui.TreeMenuNode = new Class(
	/** @lends Imperion.Interface.Gui.TreeMenuNode.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],
		
		/**
		 * current icon
		 * 
		 * @type	String
		 */
		icon : null,
		
		/**
		 * flag if container is visible
		 * 
		 * @type Boolean
		 */
		open : null,
		
		/**
		 * nodes
		 * 
		 * @type	Array
		 */
		nodes	: null,
		
		/**
		 * parent tree node
		 * 
		 * @type Imperion.Interface.Gui.TreeMenuNode
		 */
		parentNode : null,
		
		/**
		 * parent tree
		 * 
		 * @type Imperion.Interface.Gui.TreeMenu
		 */
		parentTree : null,
		
		/**
		 * prepare the tree node 
		 * 
		 * @class Imperion Gui TreeMenuNode class
		 * 
		 * @param	{Imperion.Interface.Gui.SlideMenu}	parentSlideMenu
		 * @param	{Element}							domContainer
		 * 
		 * @constructs
		 */
		initialize : function(parentTree, parentNode, domContainer) {
			//
			this.parentTree			= parentTree;
			this.parentNode			= parentNode;
			this.open				= null;
			//
			this.loadElements(domContainer);
			//scan for child nodes
			this.nodes = this.getChildrenFromElement(this.elements.nodes);
			//check if nodes are found
			if(this.nodes.length > 0) {
				//check if open
				if(this.elements.nodes.hasClass('open')) {
					this.showNodes();
				}
				else {
					this.hideNodes();
				}
			}
			else {
				this.setIcon('noNodes');
				this.elements.container.addClass('empty');
			}
		},
		
		/**
		 * activate node
		 * 
		 * @returns	{Void}
		 */
		activate : function() {
			if(!this.active && this.parentNode !== null) {
				this.elements.link.addClass('active');
				this.active = true;
			}
		},
		
		/**
		 * deactivate node
		 * 
		 * @returns	{Void}
		 */
		deactivate : function() {
			if(this.active && this.parentNode !== null) {
				this.elements.link.removeClass('active');
				this.active = false;
			}
		},
		
		/**
		 * set the current icon
		 * 
		 * @param	{String}	newIcon
		 * 
		 * @returns	{Void}
		 */
		setIcon : function(newIcon) {
			if(this.parentNode !== null) {
				if(this.icon !== null) {
					this.elements.icon.removeClass(this.icon);
				}
				this.icon = newIcon;
				this.elements.icon.addClass(this.icon);
			}
		},
		
		/**
		 * toggle nodes
		 * 
		 * @returns	{Void}
		 */
		toggleNodes : function() {
			if(this.open) {
				this.hideNodes();
			}
			else {
				this.showNodes();
			}
			this.parentTree.onNodeToggle(this);
		},
		
		/**
		 * show nodes
		 * 
		 * @returns	{Void}
		 */
		showNodes : function() {
			if(this.parentNode !== null && (!this.open || this.open === null)) {
				this.elements.nodes.addClass('open');
				this.open = true;
				this.setIcon('collapse');
			}
		},
		
		/**
		 * hide nodes
		 * 
		 * @returns	{Void}
		 */
		hideNodes : function() {
			if(this.parentNode !== null && (this.open || this.open === null)) {
				this.elements.nodes.removeClass('open');
				this.open = false;
				this.setIcon('expand');
			}
		},
		
		/**
		 * get the childrens (scan dom container)
		 * 
		 * @parent	{Element}	container
		 * 
		 * @returns	{Array}
		 */
		getChildrenFromElement : function(container) {
			var nodeArray		= new Array();
			if(container !== undefined) {
				var nodeElements	= container.getChildren();
				var node;
				//
				for(var i = nodeElements.length - 1 ; i >= 0 ; i--) {
					node = Imperion.Interface.Gui.Factory.treeMenuNode(this.parentTree, this, nodeElements[i]);
					nodeArray.push(node);
				}
			}
			return nodeArray;
		},

		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'node_click':
					this.parentTree.onNodeClick(this);
					if(this.nodes.length > 0) {
						this.toggleNodes();
					}
					return false;
					break;
				case 'icon_click':
					if(this.nodes.length > 0) {
						this.toggleNodes();
					}
					break;
			}
		},
		
		/**
		 * load item elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns	{Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;
			this.elements.nodes		= this.elements.container.getChildren('.list')[0];
			//check if first node
			if(this.parentNode !== null) {
				this.elements.link = this.elements.container.getElement('A');
				this.elements.icon = this.elements.container.getElement('IMG');
				
				this.addEvent('click', this.elements.link, $H({
					action : 'node_click'
				}));
				this.addEvent('click', this.elements.icon, $H({
					action : 'icon_click'
				}));
			}
		}
	}
);
Imperion.Interface.Gui.SlideMenu = new Class(
	/** @lends Imperion.Interface.Gui.SlideMenu.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Observable],

		/**
		 * options
		 *
		 * @type	Options
		 */
		options : {
			one : true,
			fx : {
				transition	: Fx.Transitions.Sine.easeIn,
				duration	: 250,
				fps			: 50
			}
		},

		/**
		 * array with items
		 *
		 * @type Array
		 */
		items : null,

		/**
		 * active item
		 *
		 * @type Imperion.Interface.Gui.SlideMenuItem
		 */
		activeItem : null,

		/**
		 * prepare the slide menu
		 *
		 * @class Imperion Gui Slidemenu class
		 *
		 * @constructs
		 */
		initialize : function() {
			//
			this.items		= new Array();
			this.activeItem	= null;
		},

		/**
		 * open an item
		 *
		 * @param	{Imperion.Interface.Gui.SlideMenuItem}	item
		 *
		 * @returns	{Void}
		 */
		openItem : function(item) {
			if(this.options.one) {
				if(this.activeItem !== null && this.activeItem.position !== item.position) {
					this.activeItem.closeContainer();
					this.activeItem = null;
				}
				this.activeItem = item;
			}
			this.notify({
				item : item
			}, 'onSlideMenuToggle');
		},

		/**
		 * opens all items
		 */
		openAllItems : function(){
			for(var i = this.items.length - 1 ; i >= 0 ; i--) {
				this.items[i].openContainer();
			}
		},

		/**
		 * close all items
		 */
		closeAllItems : function(){
			for(var i = this.items.length - 1 ; i >= 0 ; i--) {
				this.items[i].closeContainer();
			}
		},


		/**
		 * close an item
		 *
		 * @param	{Imperion.Interface.Gui.SlideMenuItem}	item
		 *
		 * @returns	{Void}
		 */
		closeItem : function(item) {
			if(this.options.one) {
				this.activeItem = null;
			}
			this.notify({
				item : item
			}, 'onSlideMenuToggle');
		},

		/**
		 *
		 *
		 * @param	{Imperion.Interface.Gui.SlideMenuItem}	item
		 *
		 * @returns	{Void}
		 */
		toggleItemAnimationComplete : function(item) {
			this.notify({
				item : item
			}, 'onSlideMenuToggleComplete');
		},

		/**
		 * append dom elements
		 *
		 * @param	{Element}	domElement
		 *
		 * @returns	{Void}
		 */
		appendTo : function(domElement) {
			domElement.getElements('.element').each(function(ele, position) {
				var newItem = Imperion.Interface.Gui.Factory.slidemenuitem(this, ele, position);
				this.items.push(newItem);
			}, this);
		},

		/**
		 * remove dom elements
		 *
		 * @returns	{Void}
		 */
		detach : function(){
			for(var i = this.items.length-1; i>=0 ; i--){
				delete this.items[i];
			}
			this.items = [];
		}
	}
);

Imperion.Interface.Gui.SlideMenuItem = new Class(
	/** @lends Imperion.Interface.Gui.SlideMenuItem.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * position
		 *
		 * @type Number
		 */
		position : 0,

		/**
		 * flag if container is visible
		 *
		 * @type Boolean
		 */
		open : false,

		/**
		 * parent slide menu
		 *
		 * @type Imperion.Interface.Gui.SlideMenu
		 */
		parentSlideMenu : null,

		/**
		 * content height number
		 *
		 * @type Number
		 */
		height : 0,

		/**
		 * prepare the slide menu item
		 *
		 * @class Imperion Gui Slidemenuitem class
		 *
		 * @param	{Imperion.Interface.Gui.SlideMenu}	parentSlideMenu
		 * @param	{Element}							domContainer
		 * @param	{Number}							position
		 *
		 * @constructs
		 */
		initialize : function(parentSlideMenu, domContainer, position) {
			//
			this.parentSlideMenu	= parentSlideMenu;
			this.position 			= position;
			this.open				= false;
			//
			this.loadElements(domContainer);

			this.height = this.elements.content.getSize().y;
			if(this.height === 0){
				throw 'height is 0. Consider still hidden elements. (e.g. call showContext first)';
			}
			if(!this.elements.content.hasClass('open')) {
				this.elements.content.setStyle('height', 0);
			}
			else {
				this.openContainer();
			}
		},

		/**
		 * open the container
		 *
		 * @returns	{Void}
		 */
		openContainer : function() {
			if(!this.open) {
				this.elements.content.morph({
					height : this.height
				});
				this.open = true;
				this.elements.toggle.addClass('active');
				this.elements.status.removeClass('expand');
				this.elements.status.addClass('collapse');
				this.parentSlideMenu.openItem(this);
			}
		},

		/**
		 * close the container
		 *
		 * @returns	{Void}
		 */
		closeContainer : function() {
			if(this.open) {
				this.elements.content.morph({
					height : 0
				});
				this.open = false;
				this.elements.toggle.removeClass('active');
				this.elements.status.removeClass('collapse');
				this.elements.status.addClass('expand');
				this.parentSlideMenu.closeItem(this);
			}
		},

		/**
		 * toggle animation is complete callback (event)
		 *
		 * @returns	{Void}
		 */
		toggleAnimationComplete : function() {
			this.parentSlideMenu.toggleItemAnimationComplete(this);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'toggle':
					if(this.open) {
						this.closeContainer();
					}
					else {
						this.openContainer();
					}
					break;
			}
		},

		/**
		 * load item elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns	{Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;

			this.elements.toggle	= this.elements.container.getElement('.toggle');
			this.elements.content	= this.elements.container.getElement('.container');
			this.elements.status	= this.elements.container.getElement('.status');

			this.elements.content.set('morph', this.parentSlideMenu.options.fx);
			this.elements.content.get('morph').onComplete = this.toggleAnimationComplete.bindNew(this);

			this.addEvent('click', this.elements.toggle, $H({
				action : 'toggle'
			}));
		}
	}
);
Imperion.Interface.Gui.Highlight = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class],
	
	/**
	 * tooltip options
	 * 
	 * @var Object
	 */
	options : {
		container	: null,
		posOffset	: {
			x : 0,
			y : 0
		},
		rotation	: 'arrowTop'
	},
	
	/**
	 * visible flag
	 * 
	 * @return void
	 */
	visible : false,
	
	/**
	 * fx instance
	 * 
	 * @type Fx.Morph
	 */
	fx : null,
	
	/**
	 * counter for seconds
	 * 
	 * @type	Number
	 */
	nextAnimationIn : 0,
	
	/**
	 * sonar ident
	 * 
	 * @type	String
	 */
	ident : '',
	
	/**
	 * second timer instance
	 * 
	 * @type	Imperion.Util.SecondTimer
	 */
	secondTimer : null,
	
	/**
	 * game layout
	 * 
	 * @type	Element
	 */
	gameLayout : null,
	
	/**
	 * prepare
	 * 
	 * @param	{String}					ident
	 * @param	{Object}					options
	 * 
	 * @return void
	 */
	initialize : function(ident, options) {
		//
		this.visible			= false;
		this.fx					= null;
		this.nextAnimationIn	= null;
		//
		this.ident				= ident;
		this.setOptions(options);
		//
		this.loadElements();
		if(this.options.container !== null) {
			this.elements.container.inject(this.options.container, 'top');
		}
		else {
			this.elements.container.inject(this.gameLayout, 'top');
		}
		this.elements.container.addClass(this.options.rotation);
	},
	
	/**
	 * clean sonar
	 * 
	 * @returns	{Void}
	 */
	clean : function() {
		this.cleanUp();
	},
	
	/**
	 * append over element
	 * 
	 * @param	{Element}	appendElement
	 * 
	 * @returns	{Void}
	 */
	appendOver : function(appendElement) {
		var appendPos;
		if(this.options.container !== null) {
			appendPos = appendElement.getPosition(this.options.container);
		}
		else {
			appendPos = appendElement.getPosition(this.gameLayout);
		}
		var appendDim = appendElement.getSize();
		
		this.elements.container.setPosition({
			x : -21 + this.options.posOffset.x + appendPos.x + appendDim.x / 2,
			y : -21 + this.options.posOffset.y + appendPos.y + appendDim.y / 2
		});
	},
	
	/**
	 * start the animation
	 * 
	 * @returns	{Void}
	 */
	start : function() {
		this.show();
	},
	
	/**
	 * show the tooltip
	 * 
	 * @return void
	 */
	show : function() {
		if(!this.visible) {
			//
			this.elements.container.removeClass('hideContainer');
			//
			this.visible = true;
		}
	},
	
	/**
	 * hide the tooltip
	 * 
	 * @return void
	 */
	hide : function() {
		if(this.visible) {
			//
			this.elements.container.addClass('hideContainer');
			//
			this.visible = false;
		}
	},
	
	/**
	 * load tooltip elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container		= this.getClonedTemplate('InterfaceGuiHighlight');
		this.gameLayout				= this.getTemplate('LayoutGame');
	}
});

Imperion.Interface.Gui.Tooltip = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class],

	/**
	 * visible flag
	 *
	 * @return void
	 */
	visible : false,

	/**
	 * global event class
	 *
	 * @type	Imperion.Util.GlobalEvents
	 */
	globalEvents : null,

	/**
	 * prepare
	 *
	 * @param	{Imperion.Util.GlobalEvents}	globalEvents
	 *
	 * @return void
	 */
	initialize : function(globalEvents) {
		//
		this.globalEvents = globalEvents;
		//
		this.visible = false;
		//
		this.loadElements();
	},

	/**
	 * show the tooltip
	 *
	 * @return void
	 */
	show : function() {
		if(!this.visible) {
			//
			this.globalEvents.attach('GuiTooltip', this);
			this.globalEvents.startMouseMoveListen();
			//
			this.visible = true;
		}
	},

	/**
	 * hide the tooltip
	 *
	 * @return void
	 */
	hide : function() {
		if(this.visible) {
			//
			this.globalEvents.detach('GuiTooltip');
			this.globalEvents.endMouseMoveListen();
			//
			this.elements.container.addClass('hideContainer');
			//
			this.visible = false;
		}
	},

	/**
	 * mouse move
	 *
	 * @param object params
	 *
	 * @return void
	 */
	onMouseMove : function(params) {
		if (this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
		}
		var docSize = document.getSize();
		var tooltipSize = this.elements.container.getSize();
		var mousePos = params.eventObj.client;
		var x = params.eventObj.page.x + 24;
		var y = params.eventObj.page.y + 15;
		if ((mousePos.x + tooltipSize.x + 48) > docSize.x) {
			x = params.eventObj.page.x - tooltipSize.x - 24;
		}
		if ((mousePos.y + tooltipSize.y + 40) > docSize.y) {
			y = params.eventObj.page.y - tooltipSize.y + 15;
		}
		this.elements.container.setPosition({
			x : x,
			y :y
		});
	},

	/**
	 * set tooltip text
	 *
	 * @param String newText
	 */
	setText : function(newText) {
		this.elements.text.set('text', newText);
	},

	/**
	 * Set HTML Content
	 */
	setHtml : function(newContent) {
		if ('object' === typeof(newContent)) {
			this.elements.text.set('html', '');
			newContent.inject(this.elements.text);
		} else {
			this.elements.text.set('html', newContent);
		}
		return this;
	},

	/**
	 * load tooltip elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceGuiTooltip');
		this.elements.text = this.elements.container.getElement('.center');
	}
});
Imperion.Interface.Gui.HtmlTooltip = new Class({
	Extends		: Imperion.Interface.Gui.Tooltip,

	/**
	 * set tooltip text
	 *
	 * @param String newText
	 */
	setText : function(newText) {
		this.elements.content.set('text', newText);
		return this;
	},

	/**
	 * Set HTML Content
	 */
	setHtml : function(newContent) {
		if ('object' === typeof(newContent)) {
			this.elements.content.set('html', '');
			newContent.inject(this.elements.content);
		} else {
			this.elements.content.set('html', newContent);
		}
		return this;
	},

	/**
	 * load tooltip elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceGuiHtmlTooltip');
		this.elements.content = this.elements.container.getElement('.content');
	}
});

Imperion.Interface.Gui.UnitTooltipContent = new Class({

	Implements : [Imperion.Template, Imperion.Util.Class],

	/**
	 * Unit data (ship or turret)
	 *
	 * @type	{Object}
	 */
	unitData : {},

	/**
	 * Unit type (ship or turret)
	 *
	 * @type	string
	 */
	unitType : null,

	/**
	 * Is owner
	 *
	 * @type	boolean
	 */
	isOwner : null,

	/**
	 * prepare
	 *
	 * @param	string		unitType
	 *
	 * @return	{Void}
	 */
	initialize : function(unitType, isOwner) {
		this.unitType	= unitType;
		this.isOwner	= isOwner;

		this.loadElements();
		this.loadUnitData();
		this.renderContent();
	},

	/**
	 * Renders the unitData into the html content
	 *
	 * @return	{Void}
	 */
	renderContent : function() {

		if (this.unitData.name) {
			this.setName(this.unitData.name);
		}

		if (this.unitData.energy) {
			this.setEnergy(this.unitData.energy);
		}

		if (this.unitData.slot && this.unitData.slot.type && this.unitData.slot.name) {
			this.setType(this.unitData.slot.type, this.unitData.slot.name);
		}

		if (this.unitData.basic) {
			this.setBasicElements(this.unitData.basic);
		}

		if (this.unitData.additional) {
			this.setAdditionalElements(this.unitData.additional);
		}

	},

	/**
	 * Loads the unit data
	 *
	 * @return	{Void}
	 */
	loadUnitData : function() {
		this.unitData = Imperion.Util.Factory.unitType().get(this.unitType, this.isOwner);
	},

	/**
	 * Sets the name
	 *
	 * @param	string	name
	 *
	 * @return	{Void}
	 */
	setName : function(name) {
		this.elements.name.set('text', name);
		this.elements.name.removeClass('hideContainer');
	},

	/**
	 * Sets the energy
	 *
	 * @param	string	energy
	 *
	 * @return	{Void}
	 */
	setEnergy : function(energy) {
		this.elements.energy.set('text', this.getUser().formatNumber(energy.toInt()));
		this.elements.energy.removeClass('hideContainer');
	},

	/**
	 * Sets the type
	 *
	 * @param	string	type
	 * @param	string	name
	 *
	 * @return	{Void}
	 */
	setType : function(type, name) {
		this.elements.typeName.set('text', name);
		this.elements.typeIcon.addClass(type);
		this.elements.type.removeClass('hideContainer');
	},

	/**
	 * Sets the basic elements
	 *
	 * @param	{Object}	Basic elements
	 *
	 * @return	{Void}
	 */
	setBasicElements : function(basicElements) {
		var basicElements = new Hash(basicElements);

		basicElements.each(function(basicElementData) {
			var basicElement	= this.elements.elementContainerTemplate.clone();
			var value			= null;

			if (basicElementData.name) {
				basicElement.getElement('.left').set('text', basicElementData.name);
			}

			if (basicElementData.value || basicElementData.value == 0) {
				value = this.getUser().formatNumber(basicElementData.value.toInt());
			}

			if (basicElementData.additionalDescription) {
				value = value + ' (' + basicElementData.additionalDescription + ')';
			}

			if (value) {
				basicElement.getElement('.right').set('text', value);
			}

			basicElement.inject(this.elements.basicElements);

		}.bindNew(this));

		this.elements.basicElements.removeClass('hideContainer');
	},

	/**
	 * Sets the additional elements
	 *
	 * @param	{Object}	Additional elements
	 *
	 * @return	{Void}
	 */
	setAdditionalElements : function(additionalElements) {
		var additionalElements = new Hash(additionalElements);

		additionalElements.each(function(additionalElementData) {

			var additionalElement	= this.elements.elementContainerTemplate.clone();

			if ($type(additionalElementData.value) == 'object') {
				var valueObject			= new Hash(additionalElementData.value);

				valueObject.each(function(value) {
					var valueElement = new Element('div', {
						html: value
					});
					valueElement.inject(additionalElement.getElement('.right'));
				}.bindNew(this).bindNew(additionalElement));
			} else {
				additionalElement.getElement('.right').set('text', additionalElementData.value);
			}

			if (additionalElementData.name) {
				additionalElement.getElement('.left').set('text', additionalElementData.name);
			}

			additionalElement.inject(this.elements.additionalElements);

		}.bindNew(this));

		this.elements.additionalElements.removeClass('hideContainer');
	},

	/**
	 * Gets the unit tooltip content element
	 *
	 * @return {Element}	Unit tooltip content
	 */
	get : function() {
		return this.elements.container;
	},

	/**
	 * Loads the html elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container					= this.getClonedTemplate('UnitTooltipContent');
		this.elements.name						= this.elements.container.getElement('.name');
		this.elements.energy					= this.elements.container.getElement('.energy');
		this.elements.type						= this.elements.container.getElement('.type');
		this.elements.typeName					= this.elements.container.getElement('.type SPAN');
		this.elements.typeIcon					= this.elements.container.getElement('.type .icon');
		this.elements.basicElements				= this.elements.container.getElement('.basicElements');
		this.elements.additionalElements		= this.elements.container.getElement('.additionalElements');
		this.elements.elementContainerTemplate	= this.elements.container.getElement('.elementContainerTemplate').clone();

		this.elements.container.removeClass('hideContainer');
		this.elements.elementContainerTemplate.removeClass('elementContainerTemplate hideContainer');
		this.elements.container.getElement('.elementContainerTemplate').destroy();
	}
});
Imperion.Interface.Gui.TableList = new Class(
	/** @lends Imperion.Interface.Gui.TableList.prototype */
	{
		Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Observable],
		
		/**
		 * options
		 * 
		 * @type	Options
		 */
		options : {

		},
		
		/**
		 * object with items
		 * 
		 * @type Object
		 */
		items : $H(),

		/**
		 * Active Item
		 *
		 */
		activeItem : null,
		
		/**
		 * initializes the TableList
		 * 
		 * @class Imperion Gui TableList class
		 * 
		 * @constructs
		 */
		initialize : function(elements, data, options) {
			this.items = $H();
			var relData = null;
			$A(elements).each(function(element, index) {
				if (undefined === this.items[index]) {
					relData = null;
					if (data.items && data.items[index]) {
						relData = data.items[index];
					}
					this.items[index] = Imperion.Interface.Gui.Factory.tableListItem(this, element, relData);
				}
			}, this);
		},

		/**
		 * notifies every attached module that the listitem has been clicked
		 * @param	{Imperion.Interface.Igm.ListItem}	item
		 */
		onItemClick: function(eventObject, item){
			this.activeItem = item; 
			this.notify($H({item: item, eventObject: eventObject}), 'onItemClick');
		}
	}
);

Imperion.Interface.Gui.TableListItem = new Class(
	/** @lends Imperion.Interface.Gui.TableItem.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * parent slide menu
		 * 
		 * @type Imperion.Interface.Gui.TableList	
		 */
		parentList : null,
		
		/**
		 * prepare the item
		 * 
		 * @class Imperion Gui TableListItem class
		 * 
		 * @param	{Imperion.Interface.Gui.TableList}	parentList
		 * @param	{Element}							domContainer
		 * 
		 * @constructs
		 */
		initialize : function(parentList, domContainer, data) {
			this.parentList	= parentList;
			this.data = data;
			
			this.loadElements(domContainer);
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'list_click':
					this.parentList.onItemClick(eventObject, this);
					break;
			}
		},

		loadElements : function(domContainer) {
			this.elements.container = domContainer;
			this.elements.item = this.elements.container.getElement('.item');
			this.addEvent('click', this.elements.container, $H({
				action : 'list_click'
			}));
		}
	}
);
Imperion.Interface.Gui.Animation = new Class({
	
	/**
	 * animation options
	 * 
	 * @var Object
	 */
	options : {
		morphOptions: {
			duration : 2000,
			transition : Fx.Transitions.Sine.easeOut
			
		},
		fxOptionsFrom: {
			opacity: 1
			
		},
		fxOptionsTo: {
			opacity: 0
		}
	},
	
	/**
	 * animation element
	 * 
	 * @var Object
	 */
	animationElement : null,
	
	/**
	 * pulse active
	 * 
	 * @var Boolean
	 */
	pulseActive : false,
	
	/**
	 * pulsePhase (to | from)
	 * 
	 * @var String
	 */
	pulsePhase : 'to',
	
	/**
	 * prepare
	 * 
	 * @param	{Object}	animationElement
	 * @param	{Object}	options
	 * 
	 * @return void
	 */
	initialize : function(animationElement, options) {
		this.animationElement = animationElement;
		if ($chk(options))
		{
			this.options = options;
		}
		
		this.setMorphFx();
	},
	
	/**
	 * set morph fx options
	 * 
	 * @return void
	 */
	setMorphFx : function() {
		this.animationElement.set('morph', this.options.morphOptions);
	},
	
	/**
	 * get fx options depending on the pulsePhase
	 * 
	 * @return Object
	 */
	getFxOptions : function() {
		
		if (this.pulsePhase == 'to')
		{
			this.pulsePhase = 'from';
			return this.options.fxOptionsTo;
		}
		else
		{
			this.pulsePhase = 'to';
			return this.options.fxOptionsFrom; 
		}
	},
	
	/**
	 * pulsate the animationElement
	 * 
	 * @return void
	 */
	pulse : function() {
		this.pulseActive = true;
		this.morph(this.getFxOptions());
	},
	
	/**
	 * morph the animationElement
	 * 
	 * @param Object fxOptions fx options
	 * @return void
	 */
	morph : function(fxOptions) {
		this.animationElement.morph(fxOptions);
		
		if (this.pulseActive === true)
		{
			this.pulse.delay(this.options.morphOptions.duration, this);
		}
	}
});
Imperion.Interface.Igm.Factory = new Class.Singleton({

	storage : {
		handle  : null,
		mailbox : null
	},

	initialize : function(){
		this.storage = {
			handle  : null,
			mailbox : null
		}
	},

	area : function(type) {
		return new Imperion.Interface.Area('MessageBox-'+type);
	},
	
	handle : function() {
		return new Imperion.Interface.Igm.Handle();
	},

	mailbox : function(handle) {
		return new Imperion.Interface.Igm.Mailbox(handle);
	},

	listOverview : function(handle, params, response, dialog, context) {
		return new Imperion.Interface.Igm.ListOverview(handle, this.dataHandle(), params, response, dialog, context, Imperion.Interface.Gui.Factory.htmltooltip());
	},

	compose : function(handle, params, dialog, context) {
		return new Imperion.Interface.Igm.Compose(handle, params, dialog, context);
	},

	dataHandle : function(){
		return new Imperion.Interface.Igm.Data();
	}
});
Imperion.Interface.Igm.Handle = new Class({
	Implements : [Imperion.Event],
	
	options : {

	},

	mailbox  : null,

	maillist : null,

	area     : null,

	initialize : function() {
		this.mailbox  = null;
		this.maillist = null;
		this.area     = null;
	},

	open : function() {
		if (!this.mailbox) {
			this.mailbox = Imperion.Interface.Igm.Factory.mailbox(this);
		}
		this.mailbox.incoming();
	},

	composeId : function(id) {
		if (!this.mailbox) {
			this.mailbox = Imperion.Interface.Igm.Factory.mailbox(this);
		}
		this.mailbox.composeId(id);
	},
	
	compose : function(name) {
		if (!this.mailbox) {
			this.mailbox = Imperion.Interface.Igm.Factory.mailbox(this);
		}
		this.mailbox.compose(name);
	},

	support : function() {
		if (!this.mailbox) {
			this.mailbox = Imperion.Interface.Igm.Factory.mailbox(this);
		}
		this.mailbox.support(name);
	},

	alliance : function(name) {
		if (!this.mailbox) {
			this.mailbox = Imperion.Interface.Igm.Factory.mailbox(this);
		}
		this.mailbox.alliance(name);
	},

	loadListOverview : function(params, response, dialog, context) {
		this.listOverview = Imperion.Interface.Igm.Factory.listOverview(this, params, response, dialog, context);
		this.area = Imperion.Interface.Igm.Factory.area(response.type);
	}
});
Imperion.Interface.Igm.Data = new Class({
	Implements : [Options],
	
	/**
	 * message url
	 * 
	 * @var String
	 */
	messageUrl : '',

	/**
	 * ally invitation accept url
	 *
	 * @var String
	 */
    allianceInvitationAcceptUrl : '',

	/**
	 * ally invitation reject url
	 *
	 * @var String
	 */
	allianceInvitationRejectUrl : '',

	/**
	 * fleet summary handle
	 * 
	 * @var Imperion.Interface.Igm.Handle
	 */
	handle : null,
	
	/**
	 * prepare the data handler
	 * 
	 * @param Imperion.Interface.Igm.Handle handle
	 * 
	 * @return void
	 */
	initialize : function(handle) {
		//
		this.handle = handle;
		//
		this.messageUrl = Imperion.Util.Helper.url('igm', 'index', 'message');
		this.allianceInvitationAcceptUrl = Imperion.Util.Helper.url('igm', 'index', 'acceptinvitation');
		this.allianceInvitationRejectUrl = Imperion.Util.Helper.url('igm', 'index', 'rejectinvitation');
	},
	
	/**
	 * clean up method
	 * 
	 * @return void
	 */
	clean : function() {
		
	},

	
	/**
	 * request message
	 * 
	 * @param {Object} item
	 * @param {Object} callback
	 * 
	 * @return void
	 */
	requestMessage : function(item, type, callback) {
		Imperion.Util.Request.send(this.messageUrl, {
			id_message  : item.data.id_message,
			type		: type
		}, this.afterRequestMessage.bindNew(this), {
			callback : callback,
			item     : item
		});
	},

	/**
	 * request alliance invitation
	 *
	 * @param {Object} item
	 * @param {Object} callback
	 *
	 * @return void
	 */
	requestAllianceInvitation : function(messageId,accepted, callback) {
		var invitationUrl = null;
		if(accepted){
			invitationUrl = this.allianceInvitationAcceptUrl;
		}else{
			invitationUrl = this.allianceInvitationRejectUrl;
		}
		Imperion.Util.Request.send(invitationUrl, {
			id_message  : messageId,
			accepted	: accepted
		},callback);
	},

	/**
	 * callback for IGM
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParam
	 * 
	 * @return void
	 */
	afterRequestMessage : function(response, requestParam) {
		requestParam.callback(requestParam.item, response);
	}
});
Imperion.Interface.Igm.Mailbox = new Class({
	Implements : [],

	options : {

	},

	handle : null,

	dialog : null,

	context : {
		incoming : null,
		outgoing : null,
		archive  : null,
		compose  : null
	},

	initialize : function(handle) {
		this.handle  = handle;
		this.dialog  = Imperion.Interface.Dialog.Factory.handle().getDialog('igm');
		this.context = {
			incoming : Imperion.Interface.Dialog.Context.Factory.mailbox(this.dialog, handle, 'incoming'),
			outgoing : Imperion.Interface.Dialog.Context.Factory.mailbox(this.dialog, handle, 'outgoing'),
			archive  : Imperion.Interface.Dialog.Context.Factory.mailbox(this.dialog, handle, 'archive'),
			compose  : Imperion.Interface.Dialog.Context.Factory.compose(this.dialog, handle, this)
		};
	},

	incoming : function() {
		this.context.incoming.showContext();
	},

	composeId : function(id) {
		this.context.compose.showContext(null, {recipientid: id});
	},
	
	compose : function(name) {
		this.context.compose.showContext(null, {recipient: name});
	},

	support : function(name) {
		this.context.compose.showContext(null, {recipient: name, filter: 'support'});
	},

	alliance : function(name) {
		this.context.compose.showContext(null, {recipient: name, filter: 'alliance'});
	}
});
Imperion.Interface.Igm.ListOverview = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Observable, Imperion.Translate],

	handle  : null,

	datahandle : null,

	context : null,

	scrollbar : null,

	markUrl : null,

	type: null,

	htmltooltip: null,

	options : {

	},

	/**
	 * Initializes IGM ListOverview
	 *
	 * @constructs
	 */
	initialize : function(handle, datahandle, params, response, dialog, context, htmltooltip) {
		this.handle = handle;
		this.datahandle = datahandle;
		this.dialog = dialog;
		this.context = context;
		this.loadElements(context);
		this.markUrl = this.elements.form.action;
		this.type = response.type;
		this.elements.type.value = response.type;
		this.htmltooltip = htmltooltip;

		var entries = this.elements.entries.getElements('li');

		this.list = Imperion.Interface.Gui.Factory.tableList(entries, response, {});
		this.list.attach('Inbox', this);
	},

	/**
	 * Called when a ListItem is clicked
	 *
	 * @param {Object} params
	 */
	onItemClick : function(params) {
		this.list.items.each(function(item) {
			item.elements.container.removeClass('active');
		});
		this.datahandle.requestMessage(params.item, this.type, this.updateMessage.bindNew(this));
	},

	/**
	 * Callback for a clicked Item
	 *
	 * @param {Object} item
	 * @param {Object} response
	 */
	updateMessage : function(item, response) {
		var data = response.getResponseData();
		if(data.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : data.error
			}).showEventBox();
			this.context.requestRunning = false;
			return;
		}

		item.elements.container.addClass('active');
		var isAllianceInvitation = item.elements.container.hasClass('ALLIANCE_INVITATION');
		var isAlreadyInAlliance  = item.elements.container.hasClass('allianceMember');

		if (!isAllianceInvitation && ('incoming' === this.type   || 'archive' === this.type)) {
			this.elements.replyButton.removeClass('disabled');
		}else{
			this.elements.replyButton.addClass('disabled');
		}

		if(this.type !== 'outgoing' && isAllianceInvitation){
			if(isAlreadyInAlliance){
				this.elements.messageButtonAccept.addClass('disabled');
			}
			this.elements.messageButtons.removeClass('hideContainer');
			this.elements.messageScrollbar.addClass('withButtons');
			this.elements.messageContainer.addClass('withButtons');
		}else{
			this.elements.messageButtons.addClass('hideContainer');
			this.elements.messageScrollbar.removeClass('withButtons');
			this.elements.messageContainer.removeClass('withButtons');
		}

		if (data.read) {
			item.elements.container.removeClass('new').addClass('old');
		}

		this.handle.area.setContent(response);

		if (this.messageScrollbar) {
			this.messageScrollbar.clean();
			delete this.messageScrollbar;
		}

		this.messageScrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.messageScrollbar, {});
		//
		this.messageScrollbar.attachTo(this.elements.messageContainer, this.elements.message);

	},

	/**
	 * Checks/Unchecks all Items
	 *
	 * @param {String} 	key			The Key to check
	 * @param {Bool}	checked		The state
	 */
	toggleMessages : function(key, checked) {
		if (this.elements.messageToggle.checked) {
			this.elements.container.getElements('span.'+key).addClass('checked');
		} else {
			this.elements.container.getElements('span.'+key).removeClass('checked');
		}
		this.elements.container.getElements('input.message').each(function(element, index){
			element.checked = this.elements.messageToggle.checked;
		}, this)
	},

	/**
	 * Checks/Unchecks all Items
	 *
	 * @param {String} 	key			The Key to check
	 * @param {Bool}	checked		The state
	 */
	afterSubmit : function(response) {
		var responseData = response.getResponseData();
		if(responseData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : responseData.error
			}).showEventBox();
			this.context.requestRunning = false;
		} else {
			this.context.afterLoadUrl(response);
		}
	},

	/**
	 * Generic eventHandler
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		switch(action) {
			case 'toggleMessages':
				var key     = params.get('key');
				var checked = params.get('checked');
				this.toggleMessages(key, checked);
				break;
			case 'reply':
				if (this.list.activeItem && ('incoming' === this.type || 'archive' === this.type) && !this.elements.replyButton.hasClass('disabled')) {
					this.dialog.contexts.compose.showContext('/igm/index/compose', {
						id_message : this.list.activeItem.data.id_message
					});
				}
				break;
			case 'accept':
				this.datahandle.requestAllianceInvitation(this.list.activeItem.data.id_message,true, this.afterSubmit.bindNew(this));
				break;
			case 'reject':
				this.datahandle.requestAllianceInvitation(this.list.activeItem.data.id_message,false, this.afterSubmit.bindNew(this));
				break;
			case 'show_accept_disabled_tooltip':
				if(this.elements.messageButtonAccept.hasClass('disabled')){
					this.htmltooltip.setText(this.translate('alliance__error_account_already_in_alliance'));
					this.htmltooltip.show();
				}
				break;
			case 'hide_accept_disabled_tooltip':
				if(this.elements.messageButtonAccept.hasClass('disabled')){
					this.htmltooltip.hide();
				}
				break;
			case 'archive':
			case 'read':
			case 'delete':
				this.elements.form.action = this.markUrl + '-' + action;
				this.context.submitForm(this.elements.form, this.afterSubmit.bindNew(this));
				break;
		}
		return false;
	},

	loadElements : function(context) {
		this.elements.container = context.elements.container;
		this.elements.scrollbar = this.elements.container.getElement('.premium .bar');
		this.elements.entries   = this.elements.container.getElement('.entries');

		this.elements.form = this.elements.container.getElement('form');
		this.elements.type = this.elements.container.getElement('.type');

		this.elements.messageContainer 		= this.elements.container.getElement('.message .txt');
		this.elements.message 				= this.elements.messageContainer.getElement('.thread');
		this.elements.messageScrollbar 		= this.elements.container.getElement('.message .bar');
		this.elements.messageButtons 		= this.elements.container.getElement('.messageButtons');
		this.elements.messageButtonAccept 	= this.elements.messageButtons.getElement('.accept');
		this.elements.messageButtonReject 	= this.elements.messageButtons.getElement('.reject');

		this.addEvent('click', this.elements.messageButtonAccept, $H({
			action : 'accept'
		}));

		this.addEvent('mouseenter', this.elements.messageButtonAccept, $H({
			action	: 'show_accept_disabled_tooltip'
		}));

		this.addEvent('mouseleave', this.elements.messageButtonAccept, $H({
			action : 'hide_accept_disabled_tooltip'
		}));

		this.addEvent('click', this.elements.messageButtonReject , $H({
			action : 'reject'
		}));

		this.elements.archive = this.elements.container.getElement('.archive');
		this.addEvent('click', this.elements.archive, $H({
			action : 'archive'
		}));

		this.elements.read = this.elements.container.getElement('.read');
		this.addEvent('click', this.elements.read, $H({
			action : 'read'
		}));

		this.elements.deleteButton = this.elements.container.getElement('.delete');
		this.addEvent('click', this.elements.deleteButton, $H({
			action : 'delete'
		}));

		this.elements.replyButton = this.elements.container.getElement('.reply');
		this.addEvent('click', this.elements.replyButton, $H({
			action : 'reply'
		}));

		this.elements.messageToggle = this.elements.container.getElement('.toggleAllMessages');
		this.addEvent('click', this.elements.messageToggle, $H({
			action  : 'toggleMessages',
			key     : 'id_message',
			checked : this.elements.messageToggle.checked
		}));
	}
});

Imperion.Interface.Igm.Compose = new Class({
	Implements : [Imperion.Util.Class, Imperion.Event],

	context : null,

	form : null,

	options : {

	},

	initialize : function(params, response, dialog, context) {
		this.dialog  = dialog;
		this.context = context;
		this.mailbox = params.mailbox;
		this.loadElements(context);

		switch(response.form) {
			case 'support':
				this.form = Imperion.Interface.Igm.Form.Factory.support(this.dialog, this.context, this.mailbox);
				break;
			case 'buddylist':
				this.form = Imperion.Interface.Igm.Form.Factory.buddylist(this.dialog, this.context, this.mailbox);
				break;
			case 'alliance':
				this.form = Imperion.Interface.Igm.Form.Factory.player(this.dialog, this.context, this.mailbox);
				this.form.elements.message.focus();
				break;
			case 'player':
			default:
				this.form = Imperion.Interface.Igm.Form.Factory.player(this.dialog, this.context, this.mailbox);
				break;
		}
	},

	clean : function() {},

	/**
	 * Generic eventHandler
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		switch(action) {
			case '-':
				break;
		}
		return false;
	},

	loadElements : function(context) {
		this.elements.container = context.elements.container;
	}
});
Imperion.Interface.Igm.Form.Factory = new Class.Singleton({

	storage : {
	},

	initialize : function() {
	},

	player : function(dialog, context, mailbox) {
		return new Imperion.Interface.Igm.Form.Player(dialog, context, mailbox);
	},

	support : function(dialog, context, mailbox) {
		return new Imperion.Interface.Igm.Form.Support(dialog, context, mailbox);
	},

	buddylist : function(dialog, context, mailbox) {
		return new Imperion.Interface.Igm.Form.Buddylist(dialog, context, mailbox);
	}
});
Imperion.Interface.Igm.Form.Root = new Class(
	/** @lends Imperion.Interface.Igm.Form.Root.prototype */
	{
		Implements : [Imperion.Event, Imperion.Util.Class],
		
		/**
		 * IGM Form Class
		 * 
		 * @class Root Class for IGM Formulars
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(dialog, context, mailbox) {
			this.dialog  = dialog;
			this.context = context;
			this.mailbox = mailbox;
		},

		callback: function(response) {
			var responseData = response.getResponseData();
			if(responseData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : responseData.error
				}).showEventBox();
			} else {
				
			}
		},
		
		/**
		 * retrieve form data
		 * 
		 * @returns	{Object}
		 */
		getFormData : function(form) {
			if (!form) {
				return
			}
			var data = form.toQueryString().parseQueryString();
			return data;
		},

		sendData : function(url, data, callback) {
			this.context.loadUrl(url, data, callback);
		},

		initEditor : function () {
			//this.elements.editor = this.elements.container.getElement('#editor');
			//this.elements.editor.contentDocument.designMode = 'On';
		}
	}
);
Imperion.Interface.Igm.Form.Player = new Class(
	/** @lends Imperion.Interface.Igm.Form.Player.prototype */
	{
		Extends : Imperion.Interface.Igm.Form.Root,

		/**
		 * Account Settings Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Account settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.SlideMenu}				slideMenu		the slide menu
		 *
		 * @constructs
		 */
		initialize : function(dialog, context, mailbox) {
			this.parent(dialog, context, mailbox);
			this.loadElements(context.elements.container);

			this.initEditor();
		},

		callback: function(response) {
			var responseData = response.getResponseData();
			if(responseData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : responseData.error
				}).showEventBox();
			} else {
				this.dialog.contexts.mailboxoutgoing.showContext();
			}
			this.context.requestRunning = false;
		},

		clean: function() {

		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'submitForm':
					var data   = this.getFormData(this.elements.playerForm),
						status = this.sendData(this.elements.playerForm.action, data, this.callback.bindNew(this));
					break;
			}
			return false;
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;
			this.elements.submitButton = this.elements.container.getElement('.submit');

			this.addEvent('click', this.elements.submitButton, $H({
				action : 'submitForm'
			}));

			this.elements.playerForm = this.elements.container.getElement('form');
			this.elements.message	 = this.elements.playerForm.getElement('.message');
		}
	}
);
Imperion.Interface.Igm.Form.Support = new Class(
	/** @lends Imperion.Interface.Igm.Form.Support.prototype */
	{
		Extends : Imperion.Interface.Igm.Form.Root,
		

		/**
		 *
		 * Formular data 
		 * 
		 * {Object}
		 */
		data : $H(), 

		/**
		 * Support Form
		 *
		 * @augments	Imperion.Interface.Igm.Form.Root
		 *
		 * @param		{Imperion.Interface.Dialog.Root}				dialog		parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Compose}		context		parent context
		 * @param		{Imperion.Interface.Igm.Mailbox}				mailbox		the mailbox
		 *
		 * @constructs
		 */
		initialize : function(dialog, context, mailbox) {
			this.parent(dialog, context, mailbox);
			this.loadElements(context.elements.container);
		},

		callback: function(response) {
			var responseData = response.getResponseData();
			if(responseData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : responseData.error
				}).showEventBox();
			} else {
				this.dialog.contexts.mailboxoutgoing.showContext();
			}
		},

		showElements : function(root) {
			this.elements.subSelection.each(function(el) {
				var matched = false;
				var selectors = root.split("_");
				selectors.each(function(sel) {
					if (RegExp(sel).test(el.className) && !matched) {
						el.removeClass('hideContainer');
						if (el.getElement('select')) {
							el.getElement('select').addClass('question');
						}
						matched = true;
					} else if(!matched) {
						el.addClass('hideContainer');
						if (el.getElement('select')) {
							el.getElement('select').removeClass('question');
						}
					}
				});
			});
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'submitForm':
					this.data = $H(this.getFormData(this.elements.supportForm));
					this.data.extend({
						subject   : [
							$$('.recipient span.checked')[0]?$$('.recipient span.checked')[0].getNext('input').value:'',
							$$('.question').get('value').join(" - ")
						].join(" - ")
					});
					status = this.sendData(this.elements.supportForm.action, this.data, this.callback.bindNew(this));
					break;
				case 'click_item':
				case 'change_item':
					var item = params.get('item');
					var trigger = '';
					var root = '';

					switch(item.tagName) {
						case 'SELECT':
							trigger = item.options[item.selectedIndex].className;
							break;
						case 'INPUT':
							trigger = item.className;
							break;
					}

					if (/root\[.*\]/.test(trigger)) {
						root = /root\[(.*)\]/.exec(trigger)[1];
						this.showElements(root);
					}
					break;
			}
			return false;
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;
			this.elements.submitButton = this.elements.container.getElement('.submit');
			this.elements.supportForm = this.elements.container.getElement('form');

			this.elements.subSelection = this.elements.container.getElements('div.game, div.rules, div.plus, div.payment, div.phone');

			this.addEvent('click', this.elements.submitButton, $H({
				action : 'submitForm'
			}));

			this.elements.formElements = this.elements.container.getElements('input[type=text], input[type=radio], input[type=checkbox], select');
			
			this.elements.formElements.each(function(item) {
				if ('INPUT' == item.tagName) {
					this.addEvent('click', item, $H({
						item   : item,
						action : 'change_item'
					}));
				} else if('SELECT' == item.tagName) {
					this.addEvent('change', item, $H({
						item   : item,
						action : 'change_item'
					}));
				}
			}, this);
		}
	}
);
 Imperion.Interface.Igm.Form.Buddylist = new Class(
	/** @lends Imperion.Interface.Igm.Form.Buddylist.prototype */
	{
		Extends : Imperion.Interface.Igm.Form.Root,
		
		/**
		 * Account Settings Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Account settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.SlideMenu}				slideMenu		the slide menu
		 *
		 * @constructs
		 */
		initialize : function(dialog, context, mailbox) {
			this.parent(dialog, context, mailbox);
			this.loadElements(context.elements.container);
		},

		callme: function(response) {
			var responseData = response.getResponseData();
			if(responseData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : responseData.error
				}).showEventBox();
			} else {
				this.dialog.contexts.mailboxoutgoing.showContext();
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'submitForm':
					var data   = this.getFormData(this.elements.buddyForm),
						status = this.sendData(this.elements.buddyForm.action, data, this.callme.bindNew(this));
					break;
			}
			return false;
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;
			this.elements.submitButton = this.elements.container.getElement('.submit');

			this.addEvent('click', this.elements.submitButton, $H({
				action : 'submitForm'
			}));

			this.elements.buddyForm = this.elements.container.getElement('form');
		}
	}	
);
Imperion.Interface.Infobox.Root = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class],

	/**
	 * infobox default options
	 *
	 * see \imperion\frontend\public\css\imperion\interface\infobox\root.css
	 *
	 * @type Object
	 */
	options : {
		defaultTop	: 10,
		defaultLeft	: 10
	},

	/**
	 * infobox handle
	 *
	 * @var Imperion.Interface.Infobox.Handle
	 */
	infoboxHandle : null,

	/**
	 * prepare
	 *
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 *
	 * @return void
	 */
	initialize : function(infoboxHandle) {
		this.infoboxHandle = infoboxHandle;
		//
		this.loadElements();
	},

	/**
	 * show the info box
	 *
	 * @return void
	 */
	showInfobox : function() {
		this.elements.container.inject(this.infoboxHandle.elements.content);
		this.show();
		this.infoboxHandle.show();
	},

	/**
	 * hide the info box
	 *
	 * @return void
	 */
	hideInfobox : function() {
		this.elements.container.dispose();
		this.hide();
		this.infoboxHandle.hide();
		this.resetInfoboxPosition();
		this.resetInfoboxWidth();
	},

	/**
	 * Sets the Default Infobox top and left position
	 */
	resetInfoboxPosition : function(){
		this.setInfoboxPosition(this.options.defaultTop,this.options.defaultLeft);
	},

	/**
	 * Sets the container position
	 * @param top
	 * @param left
	 */
	setInfoboxPosition : function(top,left){
		this.infoboxHandle.elements.container.setPosition({
			x : left,
			y : top
		});
	},

	/**
	 * Resets the specified content width
	 */
	resetInfoboxWidth: function(){
		this.infoboxHandle.elements.content.setStyle('width', null);
	},

	/**
	 * Sets the content width
	 * @param width
	 */
	setInfoboxWidth : function(width){
		this.infoboxHandle.elements.content.setStyle('width', width);
	}
});
Imperion.Interface.Infobox.Building = new Class({
	Extends : Imperion.Interface.Infobox.Root,
	
	/**
	 * prepare
	 * 
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 * 
	 * @return void
	 */
	initialize : function(infoboxHandle) {
		this.parent(infoboxHandle);
	},
	
	/**
	 * update the infobox
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	update : function(params) {
		$splat(['metal', 'crystal', 'tritium', 'energy', 'desc', 'headline']).each(function(prop) {
			if(params[prop] !== undefined) {
				this.elements[prop].set('html', this.infoboxHandle.user.formatNumber(params[prop]));
			}
		}, this);
		if(params['zeks'] !== undefined) {
			this.elements.crystal.addClass('hideContainer');
			this.elements.zeks.removeClass('hideContainer');
			this.elements.zeks.set('text', this.infoboxHandle.user.formatNumber(params['zeks']));
		}
		else {
			this.elements.crystal.removeClass('hideContainer');
			this.elements.zeks.addClass('hideContainer');
		}
		if(params['time'] !== undefined) {
			this.elements.time.set('text', this.infoboxHandle.user.formatDuration(params['time']));
		}
		for(var i = 0 ; i < 5 ; i++) {
			if(params['dependency'][i] !== undefined) {
				this.elements.dependency.text[i].set('text', params['dependency'][i]);
				this.elements.dependency.container[i].removeClass('hideContainer');
			}
			else {
				this.elements.dependency.container[i].addClass('hideContainer');
			}
		}
		if(params['dependency'].length > 0) {
			this.elements.dependency.headline.removeClass('hideContainer');
		}
		else {
			this.elements.dependency.headline.addClass('hideContainer');
		}
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InfoboxBuilding');
		
		this.elements.headline = this.elements.container.getElement('H1');
		this.elements.metal = this.elements.container.getElement('.metal');
		this.elements.crystal = this.elements.container.getElement('.crystal');
		this.elements.tritium = this.elements.container.getElement('.tritium');
		this.elements.zeks = this.elements.container.getElement('.zeks');
		this.elements.energy = this.elements.container.getElement('.energy');
		this.elements.time = this.elements.container.getElement('.time');
		this.elements.desc = this.elements.container.getElement('P');
		
		this.elements.dependency = {};
		this.elements.dependency.headline = this.elements.container.getElement('H2');
		this.elements.dependency.container = this.elements.container.getElements('.dependency LI');
		this.elements.dependency.text = this.elements.container.getElements('.dependency SPAN');
	}
});
Imperion.Interface.Infobox.BuildingInside = new Class({
	Extends:Imperion.Interface.Infobox.Root,

	/**
	 * prepare
	 *
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 *
	 * @return void
	 */
	initialize:function (infoboxHandle) {
		this.parent(infoboxHandle);
	},

	/**
	 * update the infobox
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	update:function (params) {
		this.elements.container = params;
	},

	/**
	 * load elements
	 *
	 * @return void
	 */
	loadElements:function () {
	}
});
Imperion.Interface.Infobox.Ship = new Class({
	Extends : Imperion.Interface.Infobox.Root,
	
	/**
	 * prepare
	 * 
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 * 
	 * @return void
	 */
	initialize : function(infoboxHandle) {
		this.parent(infoboxHandle);
	},
	
	/**
	 * update the infobox
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	update : function(params) {
		$splat(['metal', 'crystal', 'tritium', 'energy', 'desc', 'headline']).each(function(prop) {
			if(params[prop] !== undefined) {
				this.elements[prop].set('text', this.infoboxHandle.user.formatNumber(params[prop]));
			}
		}, this);
		if(params['zek'] !== undefined) {
			this.elements.crystal.addClass('hideContainer');
			this.elements.zeks.removeClass('hideContainer');
			this.elements.zeks.set('text', this.infoboxHandle.user.formatNumber(params['zek']));
		}
		else {
			this.elements.crystal.removeClass('hideContainer');
			this.elements.zeks.addClass('hideContainer');
		}
		if(params['time'] !== undefined) {
			this.elements.time.set('text', this.infoboxHandle.user.formatDuration(Math.max(1, Math.floor(params['time']))));
		}
		for(var i = 0 ; i < 5 ; i++) {
			if(params['dependency'][i] !== undefined) {
				this.elements.dependency.text[i].set('text', params['dependency'][i]);
				this.elements.dependency.container[i].removeClass('hideContainer');
			}
			else {
				this.elements.dependency.container[i].addClass('hideContainer');
			}
		}
		if(params['dependency'].length > 0) {
			this.elements.dependency.headline.removeClass('hideContainer');
		}
		else {
			this.elements.dependency.headline.addClass('hideContainer');
		}
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InfoboxShip');
		
		this.elements.headline = this.elements.container.getElement('H1');
		this.elements.metal = this.elements.container.getElement('.metal');
		this.elements.crystal = this.elements.container.getElement('.crystal');
		this.elements.tritium = this.elements.container.getElement('.tritium');
		this.elements.zeks = this.elements.container.getElement('.zeks');
		this.elements.energy = this.elements.container.getElement('.energy');
		this.elements.time = this.elements.container.getElement('.time');
		this.elements.desc = this.elements.container.getElement('P');
		
		this.elements.dependency = {};
		this.elements.dependency.headline = this.elements.container.getElement('H2');
		this.elements.dependency.container = this.elements.container.getElements('.dependency LI');
		this.elements.dependency.text = this.elements.container.getElements('.dependency SPAN');
	}
});
Imperion.Interface.Infobox.Turret = new Class({
	Extends : Imperion.Interface.Infobox.Root,
	
	/**
	 * prepare
	 * 
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 * 
	 * @return void
	 */
	initialize : function(infoboxHandle) {
		this.parent(infoboxHandle);
	},
	
	/**
	 * update the infobox
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	update : function(params) {
		$splat(['metal', 'crystal', 'tritium', 'energy', 'desc', 'headline']).each(function(prop) {
			if(params[prop] !== undefined) {
				this.elements[prop].set('text', this.infoboxHandle.user.formatNumber(params[prop]));
			}
		}, this);
		if(params['zeks'] !== undefined) {
			this.elements.crystal.addClass('hideContainer');
			this.elements.zeks.removeClass('hideContainer');
			this.elements.zeks.set('text', this.infoboxHandle.user.formatNumber(params['zeks']));
		}
		else {
			this.elements.crystal.removeClass('hideContainer');
			this.elements.zeks.addClass('hideContainer');
		}
		if(params['time'] !== undefined) {
			this.elements.time.set('text', this.infoboxHandle.user.formatDuration(Math.max(1, Math.floor(params['time']))));
		}
		for(var i = 0 ; i < 5 ; i++) {
			if(params['dependency'][i] !== undefined) {
				this.elements.dependency.text[i].set('text', params['dependency'][i]);
				this.elements.dependency.container[i].removeClass('hideContainer');
			}
			else {
				this.elements.dependency.container[i].addClass('hideContainer');
			}
		}
		if(params['dependency'].length > 0) {
			this.elements.dependency.headline.removeClass('hideContainer');
		}
		else {
			this.elements.dependency.headline.addClass('hideContainer');
		}
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InfoboxTurret');
		
		this.elements.headline = this.elements.container.getElement('H1');
		this.elements.metal = this.elements.container.getElement('.metal');
		this.elements.crystal = this.elements.container.getElement('.crystal');
		this.elements.tritium = this.elements.container.getElement('.tritium');
		this.elements.zeks = this.elements.container.getElement('.zeks');
		this.elements.energy = this.elements.container.getElement('.energy');
		this.elements.time = this.elements.container.getElement('.time');
		this.elements.desc = this.elements.container.getElement('P');
		
		this.elements.dependency = {};
		this.elements.dependency.headline = this.elements.container.getElement('H2');
		this.elements.dependency.container = this.elements.container.getElements('.dependency LI');
		this.elements.dependency.text = this.elements.container.getElements('.dependency SPAN');
	}
});
/**
 * Factory for Infobox handles
 */
Imperion.Interface.Infobox.Factory = new Class.Singleton({
	
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : {
		building	: null,
		buildingInside	: null,
		ship		: null,
		turret   	: null,
		handle 		: null,
		mapLegend	: null,
		fleetList	: {
			FLEET_LIST_TYPE_INCOMING : null,
			FLEET_LIST_TYPE_OUTGOING : null,
			FLEET_LIST_TYPE_ORBITAL : null,
			FLEET_LIST_TYPE_WORKING : null
		},
		resource : {
			metal 	: null,
			crystal : null,
			tritium : null,
			research : null,
			production : null,
			energy : null
		}
	},
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			building	: null,
			buildingInside	: null,
			ship		: null,
			turret   	: null,
			handle 		: null,
			mapLegend	: null,
			fleetList	: {
				FLEET_LIST_TYPE_INCOMING : null,
				FLEET_LIST_TYPE_OUTGOING : null,
				FLEET_LIST_TYPE_ORBITAL : null,
				FLEET_LIST_TYPE_WORKING : null
			},
			resource : {
				metal 	: null,
				crystal : null,
				tritium : null,
				research : null,
				production : null,
				energy : null
			}
		};
	},
	
	/**
	 * return the infobox handle
	 *
	 * @return Imperion.Interface.Infobox.Handle
	 */
	handle: function(){
		if(!this.storage.handle) {
			this.storage.handle = new Imperion.Interface.Infobox.Handle();
		}
		return this.storage.handle;
	},
	
	/**
	 * return the building infobox
	 *
	 * @return Imperion.Interface.Infobox.Building
	 */
	building : function(){
		if(!this.storage.building) {
			this.storage.building = new Imperion.Interface.Infobox.Building(this.handle());
		}
		return this.storage.building;
	},
	
	/**
	 * return the ship infobox
	 *
	 * @return Imperion.Interface.Infobox.Ship
	 */
	ship : function(){
		if(!this.storage.ship) {
			this.storage.ship = new Imperion.Interface.Infobox.Ship(this.handle());
		}
		return this.storage.ship;
	},
	
	/**
	 * return the turret infobox
	 *
	 * @return Imperion.Interface.Infobox.Turret
	 */
	turret : function(){
		if(!this.storage.turret) {
			this.storage.turret = new Imperion.Interface.Infobox.Turret(this.handle());
		}
		return this.storage.turret;
	},
	
	/**
	 * map legend infobox
	 * 
	 * @return Imperion.Interface.Infobox.MapLegend
	 */
	mapLegend : function(){
		if(!this.storage.mapLegend) {
			this.storage.mapLegend = new Imperion.Interface.Infobox.MapLegend(this.handle());
		}
		return this.storage.mapLegend;
	},

	/**
	 * fleet list
	 * 
	 * @param {String} listType
	 * 
	 * @type Imperion.Interface.Infobox.FleetList
	 */
	fleetList : function(listType) {
		if(!this.storage.fleetList[listType]) {
			this.storage.fleetList[listType] = new Imperion.Interface.Infobox.FleetList(listType, this.handle());
		}
		return this.storage.fleetList[listType];
	},

	/**
	 * building inside
	 *
	 *
	 * @type Imperion.Interface.Infobox.BuildingInside
	 */
	buildingInside : function(listType) {
		if(!this.storage.buildingInside) {
			this.storage.buildingInside = new Imperion.Interface.Infobox.BuildingInside(this.handle());
		}
		return this.storage.buildingInside;
	},
	
	/**
	 * resource infoboxen
	 * 
	 * @param {String} resourceType
	 * 
	 * @type Imperion.Interface.Infobox.Resource
	 */
	resource : function(resourceType) {
		if(!this.storage.resource[resourceType]) {
			this.storage.resource[resourceType] = new Imperion.Interface.Infobox.Resource(resourceType, this.handle());
		}
		return this.storage.resource[resourceType];
	}
});
Imperion.Interface.Infobox.FleetList = new Class({
	Extends : Imperion.Interface.Infobox.Root,
	
	/**
	 * type of list
	 * 
	 * @type {String}
	 */
	type : '',
	
	/**
	 * prepare
	 * 
	 * @param {String} listType
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 * 
	 * @return void
	 */
	initialize : function(listType, infoboxHandle) {
		this.type = listType;
		this.parent(infoboxHandle);
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InfoboxFleetList_' + this.type);
	}
});
Imperion.Interface.Infobox.Handle = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template],
	
	/**
	 * prepare the handle
	 * 
	 * @return void
	 */
	initialize : function() {
		//set user
		this.setUser(Imperion.Util.Registry.get('user'));
		//
		this.loadElements();
	},
	
	/**
	 * set content
	 * 
	 * @param Element infoboxContent
	 * 
	 * @return void
	 */
	setContent : function(infoboxContent) {
		
	},
	
	/**
	 * load the elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('Infobox');
		this.elements.content = this.elements.container.getElement('.mc');
	}
});
Imperion.Interface.Infobox.MapLegend = new Class({
	Extends : Imperion.Interface.Infobox.Root,
	
	/**
	 * prepare
	 * 
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 * 
	 * @return void
	 */
	initialize : function(infoboxHandle) {
		this.parent(infoboxHandle);
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InfoboxMapLegend');
	}
});
Imperion.Interface.Infobox.Resource = new Class({
	Extends : Imperion.Interface.Infobox.Root,
	
	/**
	 * type of infobox
	 * 
	 * @type {String}
	 */
	type : '',
	
	/**
	 * prepare
	 * 
	 * @param {String} resourceType
	 * @param Imperion.Interface.Infobox.Handle infoboxHandle
	 * 
	 * @return void
	 */
	initialize : function(resourceType, infoboxHandle) {
		this.type = resourceType;
		this.parent(infoboxHandle);
	},
	
	/**
	 * update
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns {Void}
	 */
	update : function(params) {
		var user = this.getUser();
		$H(params).each(function(value, key) {
			var updateElement = this.elements.container.getElement('.update_' + key);
			updateElement.set('text', user.formatNumber(value));
		}, this);
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InfoboxResource_' + this.type);
	}
});
Imperion.Interface.Module.Root = new Class(
	/** @lends Imperion.Interface.Module.Root.prototype */
	{
		Implements : [Imperion.Event, Imperion.Util.Class],
		/**
		 * parent dialog
		 * 
		 * @type	Imperion.Interface.Dialog.Default
		 */
		parentDialog : null,
		
		/**
		 * parent context
		 * 
		 * @type	Imperion.Interface.Dialog.Context.Account
		 */
		parentContext : null,

		/**
		 * data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * Account Class
		 * 
		 * @class Handle the account prefs
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.parentDialog	= parentDialog;
			this.parentContext	= parentContext;
			this.data = data;
			//
			this.loadElements(this.parentContext.elements.container);
			//
			this.setUser(this.getUser());
		},
		
		/**
		 * clean module
		 * 
		 * @returns {Void}
		 */
		clean : function() {
			this.cleanUp();
		},
		
		/**
		 * retrieve form data
		 * 
		 * @returns	{Object}
		 */
		getFormData : function() {
			var data = this.elements.container.toQueryString().parseQueryString();
			return data;
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;
		}
	}	
);
Imperion.Interface.Module.Factory = new Class.Singleton(
	/** @lends Imperion.Interface.Modules.Factory.prototype */
	{
		/**
		 * prepare the factory
		 *
		 * @class Imperion Module Factory
		 *
		 * @constructs
		 */
		initialize : function() {

		},

		/**
		 * create the account module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Account}
		 */
		account : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Account(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.slidemenu());
		},

		/**
		 * create forum index module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Forum.Index}
		 */
		forumIndex : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Forum.Index(params, data, parentDialog, parentContext);
		},

		/**
		 * create forum thread module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Forum.Thread}
		 */
		forumThread : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Forum.Thread(params, data, parentDialog, parentContext);
		},

		/**
		 * create alliance index screen (join / create alliance)
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Alliance.Index}
		 */
		allianceIndex : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Alliance.Index(params, data, parentDialog, parentContext);
		},

		/**
		 * create alliance profile screen
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Alliance.Profile}
		 */
		allianceProfile : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Alliance.Profile(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create the annexion module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Annexion}
		 */
		annexion : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Annexion(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip(), Imperion.Interface.Gui.Factory.htmltooltip());
		},

		/**
		 * create the simulator module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Simulator}
		 */
		simulator : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Simulator(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create the research lab module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Account}
		 */
		researchlab : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.ResearchLab(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.slidemenu());
		},

		/**
		 * create the change password module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Password}
		 */
		password : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Password(params, data, parentDialog, parentContext);
		},

		/**
		 * create the edit profile module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.EditProfile}
		 */
		editprofile : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.EditProfile(params, data, parentDialog, parentContext);
		},

		/**
		 * create the player profile module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.PlayerProfile}
		 */
		playerprofile : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.PlayerProfile(params, data, parentDialog, parentContext);
		},

		/**
		 * create the report module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Report}
		 */
		report : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Report(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create a report detail module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Report.ReportDetail}
		 */
		reportDetail : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Report.ReportDetail(params, data, parentDialog, parentContext);
		},

		/**
		 * create the stream report module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Stream.Report}
		 */
		streamReport : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Stream.Report(params, data, parentDialog, parentContext);
		},

		/**
		 * create the stream report starred module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Stream.ReportStarred}
		 */
		streamReportStarred : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Stream.ReportStarred(params, data, parentDialog, parentContext);
		},

		/**
		 * create the stream report story module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Stream.ReportStory}
		 */
		streamReportStory : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Stream.ReportStory(params, data, parentDialog, parentContext);
		},

		/**
		 * create the payment / plus module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.PaymentPlus}
		 */
		paymentPlus : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.PaymentPlus(params, data, parentDialog, parentContext);
		},

		/**
		 * create the help module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Help}
		 */
		help : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Help(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.treeMenu(), Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create the hangar module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Hangar}
		 */
		hangar : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Hangar(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create a hangar slot instance
		 *
		 * @param	{Element}							container
		 * @param	{Imperion.Interface.Module.Hangar}	hangar
		 * @param	{Object}							options
		 *
		 * @returns	{Imperion.Interface.Module.HangarSlot}
		 */
		hangarSlot : function(container, hangar, options) {
			return new Imperion.Interface.Module.HangarSlot(container, hangar, options);
		},

		/**
		 * create the recycle module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Recycle}
		 */
		recycle : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Recycle(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip(), Imperion.Util.Factory.secondTimer());
		},

		/**
		 * create a recylce slot instance
		 *
		 * @param	{Element}								container
		 * @param	{Imperion.Interface.Module.Recycle}		recycle
		 * @param	{Object}								options
		 *
		 * @returns	{Imperion.Interface.Module.RecycleSlot}
		 */
		recycleSlot : function(container, recycle, options) {
			return new Imperion.Interface.Module.RecycleSlot(container, recycle, options);
		},

		/**
		 * create the weaponfactory module
		 *
		 * @param	{Object}										params			params for
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.WeaponFactory}
		 */
		weaponfactory : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.WeaponFactory(
				params,
				data,
				parentDialog,
				parentContext,
				Imperion.Interface.Gui.Factory.tooltip(),
				Imperion.Factory.bootstrap().getModule('Imperion.Queue.TurretRepair')
			);
		},

		/**
		 * create a weaponfactory queue entry
		 *
		 * @param	{Element}									container
		 * @param	{Imperion.Interface.Module.WeaponFactory}	weaponFactory
		 * @param	{Imperion.QueueItem}						queueItem
		 *
		 * @returns	{Imperion.Interface.Module.WeaponFactorySlot}
		 */
		weaponFactorySlot : function(container, weaponFactory, queueItem) {
			return new Imperion.Interface.Module.WeaponFactorySlot(container, weaponFactory, queueItem);
		},

		/**
		 * create the NPC module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.NPC}
		 */
		npc : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.NPC(params, data, parentDialog, parentContext, {
				metal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
				crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
				tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium')
			});
		},

		/**
		 * create endgame victory screen
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Endgame.Victory}
		 */
		endgameVictory : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Endgame.Victory(params, data, parentDialog, parentContext);
		},

		/**
		 * create endgame screen
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Screen}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Endgame.Screen}
		 */
		endgameScreen : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Endgame.Screen(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create admiral techtree
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Admiral.Techtree}
		 */
		admiralTechtree : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Admiral.Techtree(params, data, parentDialog, parentContext,Imperion.Interface.Gui.Factory.htmltooltip());
		},

		/**
		 * create resources overview
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.Overview.Resources}
		 */
		resourcesOverview : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.Overview.Resources(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		},

		/**
		 * create playerStatistics module
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @returns {Imperion.Interface.Module.EditProfile}
		 */
		playerStatistics : function(params, data, parentDialog, parentContext) {
			return new Imperion.Interface.Module.PlayerStatistics(params, data, parentDialog, parentContext, Imperion.Interface.Gui.Factory.tooltip());
		}
	}
);
Imperion.Interface.Module.Account = new Class(
	/** @lends Imperion.Interface.Module.Account.prototype */
	{
		Extends : Imperion.Interface.Module.Root,
		/**
		 * slide menu
		 * 
		 * @type	Imperion.Interface.Gui.SlideMenu
		 */
		slideMenu : null,
		
		/**
		 * Account Settings Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Account settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.SlideMenu}				slideMenu		the slide menu
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, slideMenu) {
			this.parent(params, data, parentDialog, parentContext);
			//
			this.slideMenu		= slideMenu;
			//append dom elements to slide menu
			this.slideMenu.appendTo(this.parentContext.elements.container);
		},
				
		/**
		 * send request to update account informations
		 * 
		 * @returns {Void}
		 */
		requestSave : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('account', 'settings', 'update'), this.getFormData(), this.afterRequestSave.bindNew(this));
		},
		
		/**
		 * callback after save request
		 * 
		 * @params	{Object} params
		 * 
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
				case 'cancel_sitter':
					var sitter = params.get('sitter');
					
					break;
				case 'add_sitter_change':
					var sitterNr = params.get('sitter');
					var text = this.elements.sitter[sitterNr].input.get('value');
					if(text == '') {
						if(sitterNr === 1) {
							this.elements.sitter[2].fieldset.addClass('hideContainer');
							this.elements.sitter[2].input.set('value', '');
							this.elements.sitter[2].label.set('text', this.elements.sitter[2].org);
						}
						this.elements.sitter[sitterNr].label.set('text', this.elements.sitter[sitterNr].org);
					}
					else {
						if(sitterNr === 1) {
							this.elements.sitter[2].fieldset.removeClass('hideContainer');
						}
						this.elements.sitter[sitterNr].label.set('text', this.elements.sitter[sitterNr].input.get('value'));
					}
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.sitter = {};
			
			$splat([1,2]).each(function(sitterNr) {
				var cancel	= this.elements.container.getElement('.cancel' + sitterNr);
				var input	= this.elements.container.getElement('INPUT[name="sitter\[name'+sitterNr+'\]"]');
				this.elements.sitter[sitterNr] = {
					label : this.elements.container.getElement('.headlineSitter' + sitterNr)
				};
				this.elements.sitter[sitterNr].org = this.elements.sitter[sitterNr].label.get('text');
				if(cancel) {
					this.elements.sitter[sitterNr].cancel = cancel;
					this.addEvent('click', this.elements.sitter[sitterNr].cancel, $H({
						action : 'cancel_sitter',
						sitter : sitterNr
					}));
				}
				if(input) {
					this.elements.sitter[sitterNr].fieldset = input.getParent();
					this.elements.sitter[sitterNr].input = input;
					this.addEvent('change', this.elements.sitter[sitterNr].input, $H({
						action : 'add_sitter_change',
						sitter : sitterNr
					}));
					this.addEvent('keyup', this.elements.sitter[sitterNr].input, $H({
						action : 'add_sitter_change',
						sitter : sitterNr
					}));
				}
			}, this);
			
			this.elements.save	= this.elements.container.getElement('.save');
			this.addEvent('click', this.elements.save, $H({
				action : 'save_form'
			}));
		}
	}	
);
Imperion.Interface.Module.Annexion = new Class(
	/** @lends Imperion.Interface.Module.Annexion.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		/**
		 * summary data
		 *
		 * @type	Object
		 */
		summaryData	: null,

		/**
		 * planet data
		 *
		 * @type	Object
		 */
		planetData	: null,

		/**
		 * scroll bar
		 *
		 * @type	Imperion.Interface.Tools.Scrollbar
		 */
		scrollBar : null,

		/**
		 * tooltip handle
		 *
		 * @type Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,

		/**
		 * html tooltip handle
		 *
		 * @type Imperion.Interface.Gui.HtmlTooltip
		 */
		htmlTooltip: null,

		/**
		 * selected planet pos
		 *
		 * @type	Number
		 */
		selectedPlanetPos : null,

		/**
		 * current view
		 *
		 * @type	String
		 */
		currentView : null,

		/**
		 * Annexion Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Annexion settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip, htmlTooltip) {
			this.tooltip = tooltip;
			this.parent(params, data, parentDialog, parentContext);
			//
			this.summaryData		= data.summary;
			this.planetData			= data.planets;
			this.selectedPlanetPos	= null;

			this.htmlTooltip	= htmlTooltip;

			this.setUser(this.getUser());

			//check if details or summary has to be shown
			if(data.info !== null) {
				this.showPlanetInfo(data.info);

				this.selectedPlanetPos = this.getPositionByPlanetId(data.info.id);
				this.elements.planets[this.selectedPlanetPos].getElement('A').addClass('active');
			}
			else {
				this.showSummary(this.summaryData);
			}
		},

		/**
		 * show planet informations
		 *
		 * @param	{Object}	data
		 *
		 * @return	void
		 */
		showPlanetInfo : function(data) {
			this.setBonuses(data);
			this.showResources(data.resources.metal, data.resources.crystal, data.resources.tritium);
			//
			this.elements.galaxyIcon.removeClass('galaxyIcon_1');
			this.elements.galaxyIcon.removeClass('galaxyIcon_2');
			this.elements.galaxyIcon.addClass('galaxyIcon_' + data.galaxy);
			//
			this.elements.headlinePlanet.getElement('SPAN').set('text', data.name);
			this.elements.headlinePlanet.removeClass('hideContainer');
			this.elements.headlineSummary.addClass('hideContainer');
			//
			this.elements.distance.set('text', data.distance);
			//
			if(data.incoming && data.incoming === 'bad') {
				this.elements.buttonIncoming.removeClass('disabled').addClass('bad');
			}
			else if(data.incoming) {
				this.elements.buttonIncoming.removeClass('disabled').removeClass('bad');
			}
			else {
				this.elements.buttonIncoming.addClass('disabled');
			}
			//
			if(data.deployed) {
				this.elements.buttonDeployed.removeClass('disabled');
			}
			else {
				this.elements.buttonDeployed.addClass('disabled');
			}

			this.showFleet(data.fleet);

			for(var i = this.elements.extraInfo.length - 1 ; i >= 0 ; i--) {
				this.elements.extraInfo[i].removeClass('hideContainer');
			}

			this.currentView = 'PlanetInfo';
		},

		/**
		 * show summary
		 *
		 * @param	{Object}	data
		 *
		 * @returns	{Void}
		 */
		showSummary : function(data) {
			this.showResources(data.resources.metal, data.resources.crystal, data.resources.tritium);

			this.elements.headlineSummary.removeClass('hideContainer');
			this.elements.headlinePlanet.addClass('hideContainer');

			for(var i = this.elements.extraInfo.length - 1 ; i >= 0 ; i--) {
				this.elements.extraInfo[i].addClass('hideContainer');
			}
			this.showFleet(data.fleet);

			this.currentView = 'Summary';
		},

		/**
		 * update show the fleet
		 *
		 * @param	{Object}	fleet
		 */
		showFleet : function(fleet) {
			this.elements.ships.items.each(function(item, type) {
				if(fleet[type] && fleet[type] > 0) {
					item.getElement('p').set('text', this.user.formatNumber(fleet[type]));
					item.removeClass('hideContainer');
				}
				else {
					item.removeClass('addContainer');
				}
			}, this);

			if(this.scrollBar !== null) {
				this.scrollBar.clean();
				delete this.scrollBar;
			}
			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.ships.bar, {});
			this.scrollBar.attachTo(this.elements.ships.container, this.elements.ships.list);
		},

		/**
		 * show / update resources
		 *
		 * @param	{Number}	metal
		 * @param	{Number}	crystal
		 * @paramn	{Number}	tritium
		 *
		 * @returns	{Void}
		 */
		showResources : function(metal, crystal, tritium) {
			this.elements.resources.container.removeClass('hideContainer');
			this.elements.resources.metal.set('text', this.user.formatNumber(metal));
			this.elements.resources.crystal.set('text', this.user.formatNumber(crystal));
			this.elements.resources.tritium.set('text', this.user.formatNumber(tritium));

		},

		setBonuses : function(info) {
			this.elements.bonuses.bonusSystem.getElement('span').set('text', 0);
			this.elements.bonuses.bonusSpecies.getElement('span').set('text', 0);
			this.elements.bonuses.bonusDaysAnnexed.getElement('span').set('text', 0);
			this.elements.bonuses.bonusSystem.addClass('hideContainer');
			this.elements.bonuses.bonusSpecies.addClass('hideContainer');
			this.elements.bonuses.bonusDaysAnnexed.addClass('hideContainer');

			var hasBonus = false;
			this.elements.bonuses.container.removeClass('hasBonus');
			if (typeof info.bonusSystem != undefined && info.bonusSystem) {
				this.elements.bonuses.bonusSystem.removeClass('hideContainer');
				this.elements.bonuses.bonusSystem.getElement('span').set('text', Math.round(info.bonusSystem * 100));
				hasBonus = true;
			}
			if (typeof info.bonusSpecies != undefined && info.bonusSpecies) {
				this.elements.bonuses.bonusSpecies.removeClass('hideContainer');
				this.elements.bonuses.bonusSpecies.getElement('span').set('text', Math.round(info.bonusSpecies * 100));
				hasBonus = true;
			}
			if (typeof info.bonusDaysAnnexed != undefined && info.bonusDaysAnnexed) {
				this.elements.bonuses.bonusDaysAnnexed.removeClass('hideContainer');
				this.elements.bonuses.bonusDaysAnnexed.getElement('span').set('text', Math.round(info.bonusDaysAnnexed * 100));
				hasBonus = true;
			}
			if (hasBonus) {
				this.elements.bonuses.container.addClass('hasBonus');
			}
		},

		/**
		 * hide resources
		 *
		 * @returns	{Void}
		 */
		hideResources : function() {
			this.elements.resources.container.addClass('hideContainer');
		},

		/**
		 * request new planet data
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		requestPlanetData : function(planetData) {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('annexion', 'index', 'info'), {
				info : planetData.id_planet_annexed
			}, this.afterRequestPlanetData.bindNew(this));
		},

		/**
		 * callback after request new planet info data
		 *
		 * @params	{Object} params
		 *
		 * @returns {Void}
		 */
		afterRequestPlanetData : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.showPlanetInfo(rData.info);
			}
		},

		/**
		 * change source
		 *
		 * @param	{Number}	newSourceId
		 * @param	{Number}	newAnnexedId
		 *
		 * @returns	{Void}
		 */
		changeSource : function(newSourceId, newAnnexedId) {
			var params = {
				source : newSourceId
			};
			if(newAnnexedId) {
				params.info = newAnnexedId;
			}
			this.parentContext.loadUrl(null, params, null);
		},

		/**
		 * change the delivery planet
		 *
		 * @param	{Object}	newPlanetData
		 * @param	{Number}	newDeliveryId
		 *
		 * @returns	{Void}
		 */
		changeDeliveryPlanet : function(newPlanetData, newDeliveryId) {
			if(newPlanetData.id_planet_source !== newDeliveryId) {
				var params	 = {
					annexed : newPlanetData.id_planet_annexed,
					source	: newDeliveryId
				};
				this.parentContext.loadUrl(Imperion.Util.Helper.url('annexion', 'index', 'delivery'), params, null);
			}
		},

		/**
		 * set planet active
		 *
		 * @param	{Number}	pos
		 *
		 * @returns	{Void}
		 */
		updateFromElement : function(pos) {
			if(this.selectedPlanetPos !== null && this.selectedPlanetPos === pos) {
				this.unsetActivePlanet();
				this.showSummary(this.summaryData);
			}
			else {
				var sourceId	= this.elements.changeSource.get('value').toInt();
				var newData		= this.planetData[pos];

				this.unsetActivePlanet();
				this.selectedPlanetPos	= pos;

				//check for source change
				if(sourceId !== newData.id_planet_source) {
					this.changeSource(newData.id_planet_source, newData.id_planet_annexed);
				}
				else {
					this.requestPlanetData(newData);
				}
				this.elements.planets[this.selectedPlanetPos].getElement('A').addClass('active');
			}
		},

		/**
		 * unset active planet
		 *
		 * @returns	{Void}
		 */
		unsetActivePlanet : function() {
			if(this.selectedPlanetPos !== null) {
				this.elements.planets[this.selectedPlanetPos].getElement('A').removeClass('active');
				this.selectedPlanetPos = null;
			}
		},

		/**
		 * get pos by planet id
		 *
		 * @param	{Number}	planetId
		 *
		 * @returns	{Number}
		 */
		getPositionByPlanetId : function(planetId) {
			for(var i = this.planetData.length - 1 ; i >= 0 ; i--) {
				if(this.planetData[i].id_planet_annexed == planetId) {
					return i;
				}
			}
			return 0;
		},

		/**
		 * toggle delivery
		 *
		 * @returns	{Void}
		 */
		enableDelivery : function() {
			this.elements.deliveryContainer.removeClass('disabled');
		},

		/**
		 * toggle delivery
		 *
		 * @returns	{Void}
		 */
		disableDelivery : function() {
			this.elements.deliveryContainer.addClass('disabled');
		},

		/**
		 * show the fleet summary dialog and give type of listing
		 *
		 * @param	 {String}	listType
		 *
		 * @returns	{Void}
		 */
		showFleetSummaryDialog : function(listType) {
			var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('fleetSummary');
			var fleetSummary = Imperion.Interface.Dialog.Context.Factory.fleetSummary(listType + '_annexed', dialog, this.planetData[this.selectedPlanetPos].id_planet_annexed);
			fleetSummary.showContext();
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'show_incoming_fleets':
					var checkEle = $(eventObject.target);
					if(!checkEle.hasClass('disabled')) {
						this.showFleetSummaryDialog('incoming');
					}
					break;
				case 'show_deployed_fleets':
					var checkEle = $(eventObject.target);
					if(!checkEle.hasClass('disabled')) {
						this.showFleetSummaryDialog('working');
					}
					break;
				case 'show_planet_info':
					var pos = params.get('pos');
					this.updateFromElement(pos);
					eventObject.stop();
					break;
				case 'show_planet_context':
					var pos = params.get('pos');
					this.showPlanetContextMenu(eventObject, this.planetData[pos].id_planet_annexed);
					eventObject.stop();
					break;
				case 'show_planet_headline_context':
					this.showPlanetContextMenu(eventObject, this.planetData[this.selectedPlanetPos].id_planet_annexed);
					eventObject.stop();
					break;
				case 'change_source_planet':
					var newId = this.elements.changeSource.get('value');
					//check if 'Select Planet' was selected
					if(newId > 0) {
						this.changeSource(newId);
					}
					break;
				case 'show_help':
					var shipType = params.get('type');
					this.showHelpDialog('SHIP', shipType);
					break;
				case 'show_tooltip_annexation':
					if (this.elements.bonuses.container.hasClass('hasBonus')) {
						this.htmlTooltip.setHtml(this.elements.bonuses.container.get('html'));
						this.htmlTooltip.show();
					}
					break;
				case 'hide_tooltip_annexation':
					this.htmlTooltip.hide();
					break;
				case 'show_tooltip':
				case 'show_incoming_tooltip':
				case 'show_deployed_tooltip':
					this.tooltip.setText(params.get('text'));
					this.tooltip.show();
					break;
				case 'hide_incoming_tooltip':
				case 'hide_deployed_tooltip':
				case 'hide_tooltip':
					this.tooltip.hide();
					break;
				case 'click_map':
					if(this.currentView === 'PlanetInfo') {
						this.setBonuses({});
						this.showSummary(this.summaryData);
						this.unsetActivePlanet();
					}
					break;
				case 'activate_delivery':
					// this.enableDelivery();
					break;
				case 'deactivate_delivery':
					// this.disableDelivery();
					break;
				case 'change_delivery':
					var sourceId	= this.elements.changeSource.get('value');
					var deliverId	= this.elements.deliverySelect.get('value');
					//check if change is need
					if(sourceId != deliverId && this.selectedPlanetPos !== null && this.planetData[this.selectedPlanetPos]) {
						this.changeDeliveryPlanet(this.planetData[this.selectedPlanetPos], deliverId);
					}
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.map			= this.elements.container.getElement('.annexionMap');
			this.addEvent('click', this.elements.map, $H({
				action : 'click_map'
			}));


			this.elements.changeSource	= this.elements.container.getElement('.selectedPlanet SELECT');
			this.addEvent('change', this.elements.changeSource, $H({
				action	 : 'change_source_planet'
			}));
			//
			this.elements.resources		= {
				container : this.elements.container.getElement('.resources')
			};
			this.elements.resources.metal	= this.elements.resources.container.getElement('.rMetal');
			this.elements.resources.crystal	= this.elements.resources.container.getElement('.rCrystal');
			this.elements.resources.tritium	= this.elements.resources.container.getElement('.rTritium');

			this.elements.bonuses 		= {
				container : this.elements.container.getElement('.bonuses')
			};
			this.elements.bonuses.bonusSystem = this.elements.bonuses.container.getElement('.bonusSystem');
			this.elements.bonuses.bonusDaysAnnexed = this.elements.bonuses.container.getElement('.bonusDaysAnnexed');
			this.elements.bonuses.bonusSpecies = this.elements.bonuses.container.getElement('.bonusSpecies');
			//
			this.elements.deliveryContainer	= this.elements.container.getElement('.delivery');
			this.elements.deliverySpan		= this.elements.deliveryContainer.getElement('.UI-Select');
			this.elements.deliverySelect	= this.elements.deliveryContainer.getElement('SELECT');
			this.addEvent('click', this.elements.deliverySpan, $H({
				action	: 'activate_delivery'
			}));
			this.addEvent('blur', this.elements.deliverySelect, $H({
				action	: 'deactivate_delivery'
			}));
			this.addEvent('change', this.elements.deliverySelect, $H({
				action	: 'change_delivery'
			}));
			//
			this.elements.distance			= this.elements.container.getElement('.distance');
			//
			this.elements.buttonManage		= this.elements.container.getElement('.manageFleet');
			this.elements.buttonIncoming	= this.elements.container.getElement('.incoming');
			this.elements.buttonDeployed	= this.elements.container.getElement('.deployed');
			this.addEvent('click', this.elements.buttonIncoming, $H({
				action : 'show_incoming_fleets'
			}));
			this.addEvent('click', this.elements.buttonManage, $H({
				action : 'show_deployed_fleets'
			}));
			this.addEvent('click', this.elements.buttonDeployed, $H({
				action : 'show_deployed_fleets'
			}));
			this.addEvent('mouseenter', this.elements.buttonIncoming, $H({
				action	: 'show_incoming_tooltip',
				text	: this.elements.buttonIncoming.get('text')
			}));
			this.addEvent('mouseleave', this.elements.buttonIncoming, $H({
				action : 'hide_incoming_tooltip'
			}));
			this.addEvent('mouseenter', this.elements.buttonDeployed, $H({
				action : 'show_deployed_tooltip',
				text	: this.elements.buttonDeployed.get('text')
			}));
			this.addEvent('mouseleave', this.elements.buttonDeployed, $H({
				action : 'hide_deployed_tooltip'
			}));
			this.addEvent('mouseenter', this.elements.resources.container, $H({
				action : 'show_tooltip_annexation'
			}));
			this.addEvent('mouseleave', this.elements.resources.container, $H({
				action : 'hide_tooltip_annexation'
			}));
			//
			this.elements.headlineSummary	= this.elements.container.getElement('.headlineSummary');
			this.elements.headlinePlanet	= this.elements.container.getElement('.headlinePlanet');
			this.elements.galaxyIcon		= this.elements.headlinePlanet.getElement('IMG');
			//
			this.addEvent('contextmenu', this.elements.headlinePlanet, $H({
				action : 'show_planet_headline_context'
			}));
			//
			this.elements.extraInfo			= this.elements.container.getElements('.extraInfo');
			//
			this.elements.ships				= {
				container	:	this.elements.container.getElement('.fleet')
			};
			var items = this.elements.ships.container.getElements('LI');
			this.elements.ships.items = $H({});
			for(var i = items.length - 1 ; i >= 0 ; i--) {
				var link = items[i].getElement('A');
				var shipType = items[i].getProperty('class').replace('hideContainer ', '');
				this.elements.ships.items.set(shipType, items[i]);
				this.addEvent('click', link, $H({
					action	: 'show_help',
					type	: shipType
				}));
				var span = link.getElement('SPAN');
				this.addEvent('mouseenter', link, $H({
					action	: 'show_tooltip',
					text	: span.get('text')
				}));
				this.addEvent('mouseleave', link, $H({
					action	: 'hide_tooltip'
				}));
			}
			this.elements.ships.list		= this.elements.ships.container.getElement('UL');
			this.elements.ships.bar			= this.elements.ships.container.getElement('.bar');
			//
			this.elements.planets			= this.elements.container.getElement('.annexionMap').getElements('.annexItem');
			for(var i = this.elements.planets.length - 1 ; i >= 0 ; i--) {
				//this.elements.planets[i]
				this.addEvent('click', this.elements.planets[i], $H({
					action	: 'show_planet_info',
					pos		: i
				}));
				this.addEvent('contextmenu', this.elements.planets[i], $H({
					action	: 'show_planet_context',
					pos		: i
				}));
			}
		}
	}
);
Imperion.Interface.Module.Hangar = new Class(
	/** @lends Imperion.Interface.Module.Hangar.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		/**
		 * scroll bar
		 *
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,

		/**
		 * slots
		 *
		 * @type	Array
		 */
		slots	: null,

		/**
		 * tooltip handle
		 *
		 * @type	Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,

		/**
		 * max capacity of hangar
		 *
		 * @type	Number
		 */
		capacity : 0,

		/**
		 * orbit sum
		 *
		 * @type	Number
		 */
		orbit : 0,

		/**
		 * hidden sum
		 *
		 * @type	Number
		 */
		hidden : 0,

		/**
		 * Building content hangar Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle hangar settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.Tooltip}				tooltip
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip) {
			this.parent(params, data, parentDialog, parentContext);
			//
			this.capacity = this.data.capacity;
			//
			this.tooltip = tooltip;
			//scrollbar
			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll.bar, {});
			//
			this.scrollBar.attachTo(this.elements.scroll.outer, this.elements.scroll.inner);
			//
			this.slots = [];
			//init slots
			for(var i = 0 ; i < this.data.slots.length ; i++) {
				this.slots[i] = Imperion.Interface.Module.Factory.hangarSlot(this.elements.slots[i], this, this.data.slots[i]);
			}
			//
			this.updateSpace();
			//
			this.elements.save.addClass('disabled');
		},

		/**
		 * update space
		 *
		 * @returns	{Void}
		 */
		updateSpace : function() {
			this.orbit	= this.getAllEnteredOrbitShips();
			this.hidden	= this.getAllEnteredHiddenShips();

			this.elements.used.set('text', this.user.formatNumber(this.hidden));

			if(this.hidden > 0) {
				this.elements.undo.removeClass('disabled');
			}
			else {
				this.elements.undo.addClass('disabled');
			}

			if(this.hidden > this.capacity) {
				this.elements.bar.addClass('error');
				this.elements.barInner.setStyle('width',  '100%');
			}
			else {
				var percent = (this.hidden * 100) / this.capacity;
				this.elements.barInner.setStyle('width',  percent + '%');
				this.elements.bar.removeClass('error');
			}
			if(this.elements.save.hasClass('disabled')) {
				this.elements.save.removeClass('disabled');
			}
		},

		/**
		 * get all orbit ships
		 *
		 * @returns	{Number}
		 */
		getAllEnteredOrbitShips : function() {
			var sum = 0;
			for(var i = this.slots.length - 1 ; i >= 0 ; i--) {
				sum += this.slots[i].orbit;
			}
			return sum;
		},

		/**
		 * get all hidden ships
		 *
		 * @returns	{Number}
		 */
		getAllEnteredHiddenShips : function() {
			var sum = 0;
			for(var i = this.slots.length - 1 ; i >= 0 ; i--) {
				sum += this.slots[i].hidden;
			}
			return sum;
		},

		/**
		 * send request to update account informations
		 *
		 * @returns {Void}
		 */
		requestSave : function() {
			var data = this.elements.container.toQueryString().parseQueryString();
			Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'hangar', 'bunker'), data, this.afterRequestSave.bindNew(this));
		},

		/**
		 * callback after save request
		 *
		 * @params	{Object} params
		 *
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},

		/**
		 * undo changes
		 *
		 * @returns	{Void}
		 */
		undo : function() {
			for(var i = this.slots.length - 1 ; i >= 0 ; i--) {
				this.slots[i].updateSlider(0);
				this.slots[i].setShips(this.slots[i].maxAmount, 0);
			}
			this.updateSpace();
			this.elements.undo.addClass('disabled');
			if(this.elements.save.hasClass('disabled')) {
				this.elements.save.removeClass('disabled');
			}
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save':
					if(!this.elements.save.hasClass('disabled')) {
						this.requestSave();
					}
					break;
				case 'undo':
					if(!this.elements.undo.hasClass('disabled')) {
						this.undo();
					}
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.form			= this.elements.container.getElement('FORM');
			this.elements.save			= this.elements.container.getElement('.save');

			this.addEvent('click', this.elements.save , $H({
				action : 'save'
			}));

			this.elements.undo			= this.elements.container.getElement('.undo');

			this.addEvent('click', this.elements.undo , $H({
				action : 'undo'
			}));

			this.elements.scroll		= {};
			this.elements.scroll.bar	= this.elements.container.getElement('.scrollBar');
			this.elements.scroll.outer	= this.elements.container.getElement('.contentContainer');
			this.elements.scroll.inner	= this.elements.container.getElement('.scrollContainer');

			this.elements.slots			= this.elements.container.getElements('.template');

			this.elements.used			= this.elements.container.getElement('.used');
			this.elements.capacity		= this.elements.container.getElement('.capacity');

			this.elements.bar			= this.elements.container.getElement('.Imperion-Interface-Gui-Bar');
			this.elements.barInner		= this.elements.bar.getElement('DIV');
		}
	}
);

Imperion.Interface.Module.HangarSlot = new Class(
	/** @lends Imperion.Interface.Module.HangarSlot.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * slot options
		 *
		 * @type	Object
		 */
		options		: {
			type	: 'UNDEFINED',
			space	: 0
		},

		/**
		 * scroll bar
		 *
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		slider : null,

		/**
		 * parent hangar
		 *
		 * @type	Imperion.Interface.Module.Hangar
		 */
		hangar : null,

		/**
		 * type of ship
		 *
		 * @type	String
		 */
		type : null,

		/**
		 * amount of ships at orbit
		 *
		 * @type	Number
		 */
		orbit : null,

		/**
		 * amount of ships hidden in hangar
		 *
		 * @type	Number
		 */
		hidden : null,

		/**
		 * max
		 *
		 * @type	Number
		 */
		maxAmount	: 0,

		/**
		 * Building content hangar Class
		 *
		 * @param	{Element}							container
		 * @param	{Imperion.Interface.Module.Hangar}	hangar
		 * @param	{Object}							options
		 *
		 * @constructs
		 */
		initialize : function(container, hangar, options) {
			//
			this.hangar	= hangar;
			//
			this.options.type	= options.type;
			this.options.space	= options.space;
			//
			this.loadElements(container);
			//
			this.maxAmount		= options.orbit.toInt() + options.hidden.toInt();
			//
			this.slider = Imperion.Interface.Tools.Factory.sliderWithButtons(this.elements.slider, {
				dir			: 'horizontal',
				length		: 200,
				range		: [0, this.maxAmount],
				initialStep	: options.hidden.toInt(),
				update		: this.sliderMoved.bindNew(this)
			});
			this.slider.dragKnob();
		},

		/**
		 * set ships for input and update slider
		 *
		 * @param	{Number}	orbit
		 * @param	{Number}	hidden
		 *
		 * @returns	{Void}
		 */
		setShips : function(orbit, hidden) {
			this.orbit	= orbit;
			this.hidden	= hidden;

			this.elements.orbit.amount.set('value', this.orbit);
			this.elements.hidden.amount.set('value', this.hidden);
		},

		/**
		 * update the slider
		 *
		 * @param	{Number}	orbit
		 *
		 * @returns	{Void}
		 */
		updateSlider : function(orbit) {
			this.slider.set(orbit);
			this.slider.dragKnob();
		},

		/**
		 * listener for slider move, evaluate slider and update view
		 *
		 * @param	{Number}	step
		 *
		 * @returns {void}
		 */
		sliderMoved : function(step) {
			var relper	= step / this.maxAmount;
			var sel		= Math.round(this.maxAmount * relper);
			this.setShips(this.maxAmount - sel, sel);
			this.hangar.updateSpace();
		},

		/**
		 * retrieves value from orbit input
		 *
		 * @returns	{Number}
		 */
		getOrbitValueInput : function() {
			return Imperion.Util.Factory.filter().filterInteger(this.elements.orbit.amount.get('value'), null);
		},

		/**
		 * retrieves value from orbit input
		 *
		 * @returns	{Number}
		 */
		getHiddenValueInput : function() {
			return Imperion.Util.Factory.filter().filterInteger(this.elements.hidden.amount.get('value'), null);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
				case 'show_tooltip':
					this.hangar.tooltip.setText(params.get('cap'));
					this.hangar.tooltip.show();
					break;
				case 'hide_tooltip':
					this.hangar.tooltip.hide();
					break;
				case 'show_help':
					this.showHelpDialog('SHIP', this.options.type);
					break;
				case 'change_orbit':
					var orbit = this.getOrbitValueInput();
					if(orbit !== null) {
						orbit = orbit < 0 ? 0 : orbit;
						orbit = orbit > this.maxAmount ? this.maxAmount : orbit;
						this.updateSlider(this.maxAmount - orbit);
						this.setShips(orbit, this.maxAmount - orbit);
						this.hangar.updateSpace();
					}
					else {
						this.elements.orbit.amount.set('value', '');
					}
					break;
				case 'change_hidden':
					var hidden = this.getHiddenValueInput();
					if(hidden !== null) {
						hidden = hidden < 0 ? 0 : hidden;
						hidden = hidden > this.maxAmount ? this.maxAmount : hidden;
						this.updateSlider(hidden);
						this.setShips(this.maxAmount - hidden, hidden);
						this.hangar.updateSpace();
					}
					else {
						this.elements.hidden.amount.set('value', '');
					}
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container	= container;
			this.elements.slider	= this.elements.container.getElement('.Imperion-Interface-Gui-Slider');

			this.elements.orbit		= {
				help	: this.elements.container.getElement('.contLeft SPAN'),
				amount	: this.elements.container.getElement('.contLeft INPUT')
			};
			this.elements.hidden	= {
				help	: this.elements.container.getElement('.contRight SPAN'),
				amount	: this.elements.container.getElement('.contRight INPUT')
			};

			this.addEvent('keyup', this.elements.orbit.amount, $H({
				action : 'change_orbit'
			}));
			this.addEvent('blur', this.elements.orbit.amount, $H({
				action : 'change_orbit'
			}));

			this.addEvent('keyup', this.elements.hidden.amount, $H({
				action : 'change_hidden'
			}));
			this.addEvent('blur', this.elements.hidden.amount, $H({
				action : 'change_hidden'
			}));

			this.addEvent('mouseenter', this.elements.orbit.help, $H({
				action	: 'show_tooltip',
				cap		: this.elements.orbit.help.get('text')
			}));
			this.addEvent('mouseleave', this.elements.orbit.help, $H({
				action	: 'hide_tooltip'
			}));
			this.addEvent('click', this.elements.orbit.help, $H({
				action	: 'show_help'
			}));
			this.addEvent('mouseenter', this.elements.hidden.help, $H({
				action	: 'show_tooltip',
				cap		: this.elements.hidden.help.get('text')
			}));
			this.addEvent('mouseleave', this.elements.hidden.help, $H({
				action	: 'hide_tooltip'
			}));
			this.addEvent('click', this.elements.hidden.help, $H({
				action	: 'show_help'
			}));
		}
	}
);

Imperion.Interface.Module.Recycle = new Class(
	/** @lends Imperion.Interface.Module.Recycle.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		/**
		 * scroll bar
		 *
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,

		/**
		 * slots
		 *
		 * @type	Array
		 */
		slots : null,

		/**
		 * tooltip handle
		 *
		 * @type	Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,

		/**
		 * is xen
		 *
		 * @type	Boolean
		 */
		isXen : false,

		/**
		 * factor
		 *
		 * @type	Number
		 */
		factor : 1,

		/**
		 * production
		 *
		 * @type	Number
		 */
		production : 0,

		/**
		 * recycle duration
		 *
		 * @type	Number
		 */
		duration : 0,

		/**
		 * recycle running
		 *
		 * @type	Number
		 */
		running : 0,

		/**
		 * second timer
		 *
		 * @type	Imperion.Util.SecondTimer
		 */
		secondTimer : null,

		/**
		 * recycle type
		 *
		 * @type 	String
		 */
		recycleType : null,

		/**
		 * Building content recycle Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle recycle settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.Tooltip}				tooltip
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip, secondTimer) {
			//
			this.tooltip		= tooltip;
			this.secondTimer	= secondTimer;
			this.isXen			= false;
			this.recycleType	= params.type;
			//
			this.parent(params, data, parentDialog, parentContext);
			//
			this.factor			= new Number(this.data.factor);
			this.production		= new Number(this.data.production) / 60 / 60;
			//scrollbar
			this.scrollBar		= Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll.bar, {});
			//
			this.scrollBar.attachTo(this.elements.scroll.outer, this.elements.scroll.inner);
			//
			this.slots = [];
			//init slots
			for(var i = 0 ; i < this.data.slots.length ; i++) {
				this.slots[i] 	= Imperion.Interface.Module.Factory.recycleSlot(this.elements.slots[i], this, this.data.slots[i], this.production, this.computedDuration);
			}
			//set time
			if(this.data.duration > 0) {
				this.elements.queue.bar.getParent().removeClass('disabled');
				this.duration	= this.data.duration.toInt();
				this.running	= this.data.running.toInt();
				this.secondTimer.attach('Recycle_' + this.recycleType, this);
				this.timerStep({});
			}
		},

		/**
		 * clean up
		 *
		 * @returns	{Void}
		 */
		clean : function() {
			this.secondTimer.detach('Recycle_' + this.recycleType);
			this.scrollBar.clean();
			for(var i = this.slots.length - 1 ; i >= 0 ; i--) {
				this.slots[i].clean();
				delete this.slots[i];
			}
			this.parent();
		},

		/**
		 * listener for timer step
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		timerStep : function(params) {
			if(this.duration - this.running >= 0) {
				var remaining = this.duration - this.running;

				var percent = 100 - ((remaining * 100) / this.duration);
				this.elements.queue.time.set('text', this.user.formatDuration(remaining));
				this.elements.queue.bar.setStyle('width', percent + '%');
				this.running++;
			}
			else {
				this.secondTimer.detach('Recycle_' + this.recycleType);
				this.elements.queue.bar.getParent().addClass('disabled');
				if(this.isXen) {
					this.elements.production.zek.set('text', 0);
					Imperion.Factory.bootstrap().update({
						method	: 'fleetoverview',
						params	: {
							methods : []
						}
					});
				}
				else {
					this.elements.production.metal.set('text', 0);
					this.elements.production.crystal.set('text', 0);
					this.elements.production.tritium.set('text', 0);
					Imperion.Factory.bootstrap().update({
						method	: 'commodities',
						params	: {
							methods : []
						}
					});
				}
			}
		},

		/**
		 * update all
		 *
		 * @returns	{Void}
		 */
		updateAll : function() {
			var res = {
				metal	: 0,
				crystal	: 0,
				tritium	: 0,
				energy	: 0,
				zek		: 0
			};
			var slot;
			for(var i = this.slots.length - 1 ; i >= 0 ; i--) {
				slot = this.slots[i];
				res.metal	+= slot.units * slot.options.res.metal		* this.factor;
				res.crystal	+= slot.units * slot.options.res.crystal	* this.factor;
				res.tritium	+= slot.units * slot.options.res.tritium	* this.factor;
				res.zek		+= slot.units * slot.options.res.zek * this.factor;
				res.energy	+= slot.units * slot.options.res.energy;
			}
			this.elements.resources.energy.set('text', this.user.formatNumber(Math.floor(res.energy)));
			var duration = 0;
			if(this.isXen) {
				this.elements.resources.zek.set('text', this.user.formatNumber(Math.floor(res.zek)));
				duration = res.zek / this.production;
			}
			else {
				this.elements.resources.metal.set('text', this.user.formatNumber(Math.floor(res.metal)));
				this.elements.resources.crystal.set('text', this.user.formatNumber(Math.floor(res.crystal)));
				this.elements.resources.tritium.set('text', this.user.formatNumber(Math.floor(res.tritium)));
				duration = (res.metal + res.crystal + res.tritium) / this.production;
			}
			if(duration <= 0) {
				this.elements.resources.duration.set('text', this.user.formatDuration(0));
			}
			else {
				this.elements.resources.duration.set('text', this.user.formatDuration(Math.max(1, Math.floor(duration))));
			}
		},

		/**
		 * send request to update account informations
		 *
		 * @returns {Void}
		 */
		requestSave : function() {
			var data = this.elements.container.toQueryString().parseQueryString();
			Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'special', 'recycle'), data, this.afterRequestSave.bindNew(this));
		},

		/**
		 * callback after save request
		 *
		 * @params	{Object} params
		 *
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'send_rec':
					this.requestSave();
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.form					= this.elements.container.getElement('FORM');
			//
			this.elements.scroll				= {};
			this.elements.scroll.bar			= this.elements.container.getElement('.scrollBar');
			this.elements.scroll.outer			= this.elements.container.getElement('.scrollOuter');
			this.elements.scroll.inner			= this.elements.container.getElement('.scrollInner');
			//
			this.elements.slots					= this.elements.container.getElements('.row');
			//
			this.elements.resources				= {};
			this.elements.resources.container	= this.elements.container.getElement('.resource');
			var zek								= this.elements.resources.container.getElement('.zek .right');

			if(zek) {
				this.isXen						= true;
				this.elements.resources.zek		= zek;
			}
			else {
				this.isXen						= false;
				this.elements.resources.metal	= this.elements.resources.container.getElement('.metal .right');
				this.elements.resources.crystal	= this.elements.resources.container.getElement('.crystal .right');
				this.elements.resources.tritium	= this.elements.resources.container.getElement('.tritium .right');
			}
			this.elements.resources.energy		= this.elements.container.getElement('.energy .right');
			this.elements.resources.duration	= this.elements.container.getElement('.duration .right');
			//
			this.elements.recycle				= this.elements.container.getElement('.Imperion-Interface-Gui-Button');
			this.addEvent('click', this.elements.recycle, $H({
				action	: 'send_rec'
			}));
			//
			this.elements.production			= {};
			this.elements.production.container	= this.elements.container.getElement('.production');
			//
			if(this.isXen) {
				this.elements.production.zek	= this.elements.production.container.getElement('.zek .right');
			}
			else {
				this.elements.production.metal	= this.elements.production.container.getElement('.metal .right');
				this.elements.production.crystal= this.elements.production.container.getElement('.crystal .right');
				this.elements.production.tritium= this.elements.production.container.getElement('.tritium .right');
			}

			this.elements.queue					= {};
			this.elements.queue.container		= this.elements.container.getElement('.queueTime');

			this.elements.queue.time			= this.elements.queue.container.getElement('.time .right');
			this.elements.queue.bar				= this.elements.queue.container.getElement('.bar');
		}
	}
);

Imperion.Interface.Module.RecycleSlot = new Class(
	/** @lends Imperion.Interface.Module.RecycleSlot.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * options
		 *
		 * @type	Object
		 */
		options : {
			type	: 'UNDEFINED',
			amount	: 0,
			res		: {
				metal	: 0,
				crystal	: 0,
				tritium	: 0,
				energy	: 0,
				zek		: 0
			}
		},

		/**
		 * parent recycle
		 *
		 * @type	Imperion.Interface.Module.Recycle
		 */
		recycle : null,

		/**
		 * scroll bar
		 *
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		slider : null,

		/**
		 * amount of entered units
		 *
		 * @type	Number
		 */
		units : 0,

		/**
		 * Building content shipyard slot Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle shipyard slot
		 *
		 * @param		{Element}								container
		 * @param		{Imperion.Interface.Module.Recycle}		recycle
		 * @param		{Object}								options
		 *
		 * @constructs
		 */
		initialize : function(container, recycle, options) {
			//
			this.recycle		= recycle;
			this.units			= 0;
			//
			this.setOptions(options);
			//
			this.loadElements(container);
			//
			this.slider = Imperion.Interface.Tools.Factory.sliderWithButtons(this.elements.slider, {
				dir			: 'horizontal',
				length		: 200,
				range		: [0, this.options.amount],
				initialStep	: 0,
				update		: this.sliderMoved.bindNew(this)
			});
		},

		/**
		 * clean up
		 *
		 * @returns	{Void}
		 */
		clean : function() {
			this.cleanUp();
			this.slider.clean();
			delete this.slider;
		},

		/**
		 * listener for slider move, evaluate slider and update view
		 *
		 * @param	{Number}	step
		 *
		 * @returns {void}
		 */
		sliderMoved : function(step) {
			var relper	= step / this.options.amount;
			var sel		= Math.round(this.options.amount * relper);
			this.setUnits(sel);
		},

		/**
		 * set amount of units
		 *
		 * @param	{Number}	newAmount
		 *
		 * @returns	{Void}
		 */
		setUnits : function(newAmount) {
			var resourcesMax = MAX_QUEUE_DURATION * this.recycle.production;
			var recycle = this.recycle;
			var self = this;
			this.recycle.slots.each(function(slot, index){
				if (slot != self) {
					resourcesMax -= (slot.options.res.metal + slot.options.res.crystal + slot.options.res.tritium + slot.options.res.zek) * slot.units * recycle.factor;
				}
			});

			resourcesMax = Math.max(0, resourcesMax);
			var maxUnits = Math.max(0, Math.floor(resourcesMax / (this.recycle.factor * (this.options.res.metal + this.options.res.crystal + this.options.res.tritium  + this.options.res.zek))));
			if (newAmount > maxUnits) {
				newAmount = maxUnits;
			}

			if (this.slider) {
				this.slider.set(newAmount);
			}
			this.units = newAmount;
			this.elements.input.set('value', newAmount);
			this.recycle.updateAll();
		},

		/**
		 * retrieves value from input
		 *
		 * @returns	{Number}
		 */
		getRecValueInput : function() {
			return Imperion.Util.Factory.filter().filterInteger(this.elements.input.get('value'), null);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save':
					this.requestSave();
					break;
				case 'show_tooltip':
					this.recycle.tooltip.setText(params.get('cap'));
					this.recycle.tooltip.show();
					break;
				case 'hide_tooltip':
					this.recycle.tooltip.hide();
					break;
				case 'show_help':
					switch(this.recycle.recycleType) {
						case RECYCLE_TYPE_TURRET:
							this.showHelpDialog('TURRET', this.options.type);
							break;
						case RECYCLE_TYPE_SHIP:
							this.showHelpDialog('SHIP', this.options.type);
							break;
					}
					break;
				case 'change_rec':
					var rec = this.getRecValueInput();
					if(rec !== null) {
						rec = rec < 0 ? 0 : rec;
						rec = rec > this.options.amount ? this.options.amount : rec;
						this.slider.set(rec);
						this.slider.dragKnob();
						this.setUnits(rec);
					}
					else {
						this.elements.input.set('value', '');
					}
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;

			this.elements.slider	= this.elements.container.getElement('.Imperion-Interface-Gui-Slider');

			this.elements.help		= this.elements.container.getElement('.Imperion-Interface-Items-Unit');
			this.addEvent('mouseenter', this.elements.help, $H({
				action	: 'show_tooltip',
				cap		: this.elements.help.get('text')
			}));
			this.addEvent('mouseleave', this.elements.help, $H({
				action	: 'hide_tooltip'
			}));
			this.addEvent('click', this.elements.help, $H({
				action	: 'show_help'
			}));

			this.elements.input		= this.elements.container.getElement('.UI-InputText');

			this.addEvent('keyup', this.elements.input, $H({
				action : 'change_rec'
			}));
			this.addEvent('blur', this.elements.input, $H({
				action : 'change_rec'
			}));
		}
	}
);


Imperion.Interface.Module.WeaponFactory = new Class(
	/** @lends Imperion.Interface.Module.WeaponFactory.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		/**
		 * tooltip handle
		 *
		 * @type	Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,

		/**
		 * turret repair queue
		 *
		 * @type	Imperion.Queue
		 */
		repairQueue : null,

		/**
		 * slots
		 *
		 * @type	Object
		 */
		slots : null,

		/**
		 * Building content WeaponFactory Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle WeaponFactory settings javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.Tooltip}				tooltip
		 * @param		{Imperion.Queue}								turretRepairQueue
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip, turretRepairQueue) {
			this.parent(params, data, parentDialog, parentContext);
			//
			this.tooltip		= tooltip;
			this.repairQueue	= turretRepairQueue;
			this.repairQueue.attach('ModuleWeaponFactory', this);

			this.repairQueue.update(this.data);

			//init slots
			this.slots = {};
			this.repairQueue.items.each(function(item, key) {
				this.slots[key] = Imperion.Interface.Module.Factory.weaponFactorySlot(
					this.getSlotTemplate(),
					this,
					item
				);
			}.bindNew(this));
			//scrollbar
			this.scrollBar		= Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll.bar, {});
			//
			this.scrollBar.attachTo(this.elements.scroll.outer, this.elements.scroll.inner);
		},

		/**
		 * clean module
		 *
		 * @returns	{Void}
		 */
		clean : function() {
			//
			this.repairQueue.detach('ModuleWeaponFactory');
			//
			this.parent();
		},

		/**
		 * listener for repair queue if item is finish
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		onFinishItem : function(params) {
			if(!this.slots[params.key]) {
				throw '//ERROR TURRET QUEUE ITEM KEY NOT SET';
			}
			this.slots[params.key].clean();
			//refresh scrollbar only if need
			if(this.repairQueue.items.getLength() > 6) {
				//refresh scrollbar
				if(this.scrollBar !== null) {
					this.scrollBar.clean();
					delete this.scrollBar;
				}
				//
				this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll.bar, {});
				//
				this.scrollBar.attachTo(this.elements.scroll.outer, this.elements.scroll.inner);
			}
		},

		/**
		 * listener on activate item
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		onActivateItem : function(params) {
			if(!this.slots[params.key]) {
				throw '//ERROR TURRET QUEUE ITEM KEY NOT SET';
			}
			this.slots[params.key].activate();
		},

		/**
		 * get slot template
		 *
		 * @returns	{Element}
		 */
		getSlotTemplate : function() {
			return this.elements.slot.clone();
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			//
			this.elements.scroll				= {};
			this.elements.scroll.bar			= this.elements.container.getElement('.scrollBar');
			this.elements.scroll.outer			= this.elements.container.getElement('.scrollOuter');
			this.elements.scroll.inner			= this.elements.container.getElement('.scrollInner');
			//
			this.elements.slot					= this.elements.container.getElement('.template');
		}
	}
);

Imperion.Interface.Module.WeaponFactorySlot = new Class(
	/** @lends Imperion.Interface.Module.WeaponFactorySlot.prototype */
	{
		Implements : [Imperion.Event, Imperion.Util.Class],
		/**
		 * parent weapon factory
		 *
		 * @type	Imperion.Interface.Module.WeaponFactory
		 */
		weaponFactory : null,

		/**
		 * queue item instance from global handle
		 *
		 * @type	Imperion.QueueItem
		 */
		queueItem : null,

		/**
		 * current amount
		 *
		 * @type	Number
		 */
		amount : 0,

		/**
		 * percent cache
		 *
		 * @type	Number
		 */
		percent : null,

		/**
		 * Building content WeaponFactory Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle WeaponFactory settings javascript
		 *
		 * @param		{Element}									container
		 * @param		{Imperion.Interface.Module.WeaponFactory}	weaponFactory
		 * @param		{Imperion.QueueItem}						queueItem
		 *
		 * @constructs
		 */
		initialize : function(container, weaponFactory, queueItem) {
			//
			this.weaponFactory	= weaponFactory;
			this.queueItem		= queueItem;
			//
			this.loadElements(container);
			//set type
			this.setIcon(this.queueItem.data.type);
			//check if item is running
			if(this.queueItem.running > 0) {
				this.activate();
			}
			//
			this.updateSlot(this.queueItem.getPercent(), this.queueItem.getRemainTime(), this.queueItem.getRemainAmount());
			//
			this.show();
			//
			this.elements.container.inject(this.weaponFactory.elements.scroll.inner, 'bottom');
		},

		/**
		 * clean the slot
		 *
		 * @returns	{Void}
		 */
		clean : function() {
			this.queueItem.detach('WeaponFactorySlot');
			//
			this.cleanUp();
		},

		/**
		 * activate item
		 *
		 * @returns	{Void}
		 */
		activate : function() {
			this.queueItem.attach('WeaponFactorySlot', this);
			this.elements.container.removeClass('queued');
			this.elements.container.addClass('active');
		},

		/**
		 * on step listener for queue item
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		onStep : function(params) {
			this.updateSlot(params.percent, params.remain, params.amount);
		},

		/**
		 * update slot info
		 *
		 * @param	{Number}	percent
		 * @param	{Number}	remain
		 * @param	{Number}	amount
		 *
		 * @returns	{Void}
		 */
		updateSlot : function(percent, remain, amount) {
			if(this.percent !== percent) {
				this.elements.bar.setStyle('width', percent + '%');
				this.percent = percent;
			}
			this.elements.time.set('text', this.weaponFactory.user.formatDuration(Math.max(1, Math.floor(remain))));
			//
			if(this.amount !== amount) {
				this.elements.amount.set('text', amount);
				this.amount = amount;
			}
		},

		/**
		 * set the item type
		 *
		 * @param	{String}	type
		 *
		 * @returns	{Void}
		 */
		setIcon : function(type) {
			this.elements.icon.addClass('ICON_SMALL_' + type);
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container = container;
			this.elements.icon 		= this.elements.container.getElement('.icon');
			this.elements.bar		= this.elements.container.getElement('.bar');
			this.elements.time		= this.elements.container.getElement('.time');
			this.elements.amount	= this.elements.container.getElement('.amount');
		}
	}
);
Imperion.Interface.Module.Help = new Class(
	/** @lends Imperion.Interface.Module.Help.prototype */
	{
		Extends : Imperion.Interface.Module.Root,
		
		/**
		 * options
		 * 
		 * @type	Object
		 */
		options : {
			fx	: {
				duration	: 250,
				transition	: Fx.Transitions.quad
			}
		},
		
		/**
		 * current dialog state
		 * 
		 * @type String
		 */
		dialogState : null,
		
		/**
		 * fx instances
		 * 
		 * @type	Fx.Morph
		 */
		fx : null,
		
		/**
		 * tree menu
		 * 
		 * @type	Imerion.Interface:Gui.TreeMenu
		 */
		treeMenu : null,
		
		/**
		 * content area
		 * 
		 * @type Imperion.Interface.Area
		 */
		contentArea : null,
		
		/**
		 * scroll bar center
		 * 
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollBarCenter : null,
		
		/**
		 * scroll bar right
		 * 
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollBarRight : null,
		
		/**
		 * tooltip handle
		 * 
		 * @type Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,
		
		/**
		 * Help Center Module
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Help Module
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.TreeMenu}				treeMenu		tree menu
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, treeMenu, tooltip) {
			//
			this.fx				= null;
			//
			this.parent(params, data, parentDialog, parentContext);
			//
			this.setDialogState(params.size && params.size === 'SMALL' ? 'SMALL' : 'BIG');
			//
			this.treeMenu		= treeMenu;
			this.treeMenu.appendTo(this.elements.center.tree);
			this.treeMenu.attach('help', this);
			//
			this.tooltip		= tooltip;
			//
			this.contentArea	= Imperion.Interface.Factory.dynamicArea('helpContent', this.elements.right.content);
			this.contentArea.setDestroyCallback(this.cleanContentArea.bindNew(this));
			//
			this.refreshScrollBarCenter();
			this.refreshScrollBarRight();
			//
			this.checkTooltips();
		},

		/**
		 * update scrollbar center
		 * 
		 * @returns void
		 */
		refreshScrollBarCenter : function() {
			if(this.scrollBarCenter !== null) {
				this.scrollBarCenter.clean();
				delete this.scrollBarCenter;
			}
			//
			this.scrollBarCenter = Imperion.Interface.Tools.Factory.scrollbar(this.elements.center.bar, {});
			//
			this.scrollBarCenter.attachTo(this.elements.center.content, this.elements.center.tree);
		},
		
		/**
		 * update scrollbar right
		 * 
		 * @returns void
		 */
		refreshScrollBarRight : function() {
			if(this.scrollBarRight !== null) {
				this.scrollBarRight.clean();
				delete this.scrollBarRight;
			}
			//
			this.scrollBarRight = Imperion.Interface.Tools.Factory.scrollbar(this.elements.right.bar, {});
			//
			this.scrollBarRight.attachTo(this.elements.right.scroll, this.elements.right.content);
		},
		
		/**
		 * listener for tree menu node click
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		onTreeMenuNodeClick : function(params) {
			var url = params.node.elements.link.get('href');
			if(url !== '#') {
				Imperion.Util.Request.send(url, {}, this.afterRequestContent.bindNew(this));
			}
			else {
				params.node.deactivate();
				this.treeMenu.activeNode = null;
			}
		},
		
		/**
		 * listener for expand collapse tree node
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		onToggleTreeNode : function(params) {
			this.refreshScrollBarCenter();
		},
		
		/**
		 * after request new content
		 * 
		 * @params	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestContent : function(response, test) {
			this.contentArea.setContent(response);
			this.checkTooltips();
			this.refreshScrollBarRight();
		},
		
		/**
		 * check for tooltips
		 * 
		 * @returns	{Void}
		 */
		checkTooltips : function() {
			var tooltipElements = this.contentArea.elements.container.getElements('.tooltip');
			
			$splat(tooltipElements).each(function(tooltip) {
				this.addEvent('mouseenter', tooltip, $H({
					action	: 'show_tooltip',
					text	: tooltip.get('text') 
				}));
				this.addEvent('mouseleave', tooltip, $H({
					action	: 'hide_tooltip'
				}));
			}, this);
		},
		
		/**
		 * clean the content
		 * 
		 * @returns	{Void}
		 */
		cleanContentArea : function() {
			
		},
		
		/**
		 * toggle dialog width
		 * 
		 * @returns	{Void}
		 */
		toggleDialogWidth : function() {
			if(this.dialogState === 'BIG') {
				this.fx.start({
					width : 660
				});
				this.dialogState = 'SMALL';
			}
			else if(this.dialogState === 'SMALL') {
				this.fx.start({
					width : 936
				});
				this.dialogState = 'BIG';
			}
		},
		
		/**
		 * set dialog state
		 * 
		 * @param	{String}	newState
		 * 
		 * @returns	{Void}
		 */
		setDialogState : function(newState) {
			switch(newState) {
				case 'BIG':
					this.parentDialog.elements.wrap.setStyle('width', 936);
					this.dialogState = newState;
					break;
				case 'SMALL':
					this.parentDialog.elements.wrap.setStyle('width', 660);
					this.dialogState = newState;
					break;
				default:
					throw '//ERROR HANDLING: Imperion.Interface.Module.Help : STATE ' + newState + ' NOT DEFINED';
					break;
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'toggle_tree':
					this.toggleDialogWidth();
					break;
				case 'show_tooltip':
					this.tooltip.setText(params.get('text'));
					this.tooltip.show();
					break;
				case 'hide_tooltip':
					this.tooltip.hide();
					break;
				case 'show_supportForm':
					this.mailHandle = Imperion.Interface.Igm.Factory.handle();
					this.mailHandle.support();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.toggle	= this.elements.container.getElement('.toggle');
			
			this.addEvent('click', this.elements.toggle, $H({
				action : 'toggle_tree'
			}));
			
			this.elements.content	= this.elements.container.getElement('.content');
			
			this.elements.center			= {};
			this.elements.center.container	= this.elements.container.getElement('.center');
			this.elements.center.content	= this.elements.center.container.getElement('.scrollContent');
			this.elements.center.bar		= this.elements.center.container.getElement('.scrollBar');
			this.elements.center.tree		= this.elements.center.content.getElement('.Imperion-Interface-Gui-TreeMenu');
			
			this.elements.right				= {};
			this.elements.right.container	= this.elements.container.getElement('.right');
			this.elements.right.scroll		= this.elements.right.container.getElement('.scrollContent');
			this.elements.right.bar			= this.elements.right.container.getElement('.scrollBar');
			this.elements.right.content		= this.elements.right.scroll.getElement('.content');

			this.elements.supportLink		= this.elements.container.getElement('.supportLink');
			this.addEvent('click', this.elements.supportLink, $H({
				action : 'show_supportForm'
			}));
			
			this.fx = new Fx.Morph(this.parentDialog.elements.wrap, this.options.fx);
		}
	}	
);
Imperion.Interface.Module.PlayerProfile = new Class(
	/** @lends Imperion.Interface.Module.PlayerProfile */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : [Imperion.Translate, Imperion.Template],

		/**
		 * description scrollbar
		 * 
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		descScrollbar : null,
		
		/**
		 * planet list scrollbar
		 * 
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		listScrollbar : null,

		/**
		 * id of the account
		 */
		profilePlayerId : null,

		/**
		 * Change Password Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle edit profile dialog
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Tools.ScrollBar}			descScrollbar	player description scrollbar
		 * @param		{Imperion.Interface.Tools.ScrollBar}			listScrollbar	planet list scrollbar
		 *
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, descScrollbar, listScrollbar) {
			if (params.accountId != ALIEN_ACOOUNT_ID) {
				this.parent(params, data, parentDialog, parentContext);
				this.profilePlayerId = params.accountId;
				this.parentContext.tooltip = Imperion.Interface.Gui.Factory.htmltooltip();
				//
				this.descScrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.desc.scroll);
				this.descScrollbar.attachTo(this.elements.desc.outer, this.elements.desc.content);
				//
				this.listScrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.list.scroll);
				this.listScrollbar.attachTo(this.elements.list.outer, this.elements.list.content);
			}
		},

		/**
		 * show invite confirmation Box
		 *
		 * @returns {void}
		 */
		showInvitationEventBox : function() {
			var eventBoxData = {
				type : 'confirm',
				headline : this.elements.invitePlayerConfirmHeadline.get('text'),
				content : this.elements.invitePlayerConfirmText.get('text'),
				image : undefined,
				firstButtonText :  this.translate('default__yes'),
				firstButtonCallback : this.doInvite.bindNew(this),
				secondButtonText :  this.translate('default__no')
			};

			var eventBox = Imperion.Interface.Factory.eventBox();
			eventBox.setEventBox(eventBoxData);
			eventBox.showEventBox();
		},

		/**
		 * send invite player request to backend
		 */
		doInvite : function(){
			if(!this.requestRunning) {
				this.requestRunning = true;
				Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'invite'), {'recipientId': this.profilePlayerId}, this.afterInviteToAlliance.bindNew(this));
			}
		},

		/**
		 * callback for invite player to alliance
		 *
		 * @paran	{Imperion.Util.Response}	response
		 *
		 * @returns	{Void}
		 */
        afterInviteToAlliance : function(response) {
			var rData = response.getResponseData();
			if(rData.error && rData.error !== '') {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}else{
				this.elements.addAllianceButton.addClass('disabled');
			}
			this.requestRunning = false;
		},

		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
				case 'click_edit':
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('change profile');
					var editprofile = Imperion.Interface.Dialog.Context.Factory.editprofile(dialog);
					editprofile.showContext();
					this.parentDialog.closeDialog();
					break;
				case 'click_buddy':
					//console.log('click_buddy');
					break;
				case 'click_igm':
					this.mailHandle = Imperion.Interface.Igm.Factory.handle();
					this.mailHandle.compose(this.data.name);
					break;
				case 'click_ally':
					if(!this.elements.addAllianceButton.hasClass('disabled')){
						this.showInvitationEventBox();
					}
					break;
				case 'show_tooltip':
					this.parentContext.tooltip.setText(params.get('text'));
					this.parentContext.tooltip.elements.content.setStyle('width','auto');
					this.parentContext.tooltip.show();
					break;
				case 'hide_tooltip':
					this.parentContext.tooltip.hide();
					break;
				case 'show_tooltip_alliance':
					if(this.elements.addAllianceButton.hasClass('disabled')){
						params.get('disabledElement').removeClass('hideContainer');
						this.parentContext.tooltip.setHtml(params.get('disabledElement'));
					}else{
						this.parentContext.tooltip.setText(params.get('enabledText'));
						this.parentContext.tooltip.elements.content.setStyle('width','auto');
					}
					this.parentContext.tooltip.show();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.desc = {
				outer	: this.elements.container.getElement('.playerDescOuter'),
				content	: this.elements.container.getElement('.playerDescContent'),
				scroll	: this.elements.container.getElement('.playerDescScroll')
			};

			this.elements.list = {
				outer	: this.elements.container.getElement('.planetListOuter'),
				content	: this.elements.container.getElement('.planetListContent'),
				scroll	: this.elements.container.getElement('.planetListScroll')
			};

			this.elements.invitePlayerConfirmHeadline = this.elements.container.getElement('.confirmationHeadline');
			this.elements.invitePlayerConfirmText 	  = this.elements.container.getElement('.confirmationText');

			this.elements.disabledTooltip			  = this.elements.container.getElement('.tooltipDisabled');

			this.elements.addAllianceButton			  = this.elements.container.getElement('.addAlly').parentElement;

			this.addEvent('mouseenter', this.elements.addAllianceButton	, $H({
				action		 : 'show_tooltip_alliance',
				enabledText	 : this.elements.addAllianceButton.getElement('.tooltipEnabled').get('text'),
				disabledElement : this.elements.disabledTooltip
			}));

			this.addEvent('mouseleave', this.elements.addAllianceButton	, $H({
				action	: 'hide_tooltip'
			}));

			this.addEvent('click', this.elements.addAllianceButton	, $H({
				action	: 'click_ally'
			}));

			this.elements.button = {};

			$H({
				edit	: '.edit',
				buddy	: '.addBuddylist',
				igm		: '.sendMessage'
			}).each(function(selector, button) {
				var domEle = this.elements.container.getElement(selector);

				if(domEle) {
					this.addEvent('click', domEle, $H({
						action : 'click_' + button
					}));

					this.addEvent('mouseenter', domEle, $H({
						action : 'show_tooltip',
						text   : domEle.get('text').trim()
					}));

					this.addEvent('mouseleave', domEle, $H({
						action : 'hide_tooltip'
					}));
				}
			} , this);
		}
	}	
);
Imperion.Interface.Module.EditProfile = new Class(
	/** @lends Imperion.Interface.Module.EditProfile */
	{
		Extends : Imperion.Interface.Module.Root,
		/**
		 * Change Password Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle edit profile dialog
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.parent(params, data, parentDialog, parentContext);
		},
				
		/**
		 * send request to update account informations
		 * 
		 * @returns {Void}
		 */
		requestSave : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('account', 'profile', 'save'), this.getFormData(), this.afterRequestSave.bindNew(this));
		},
		
		/**
		 * callback after save request
		 * 
		 * @params	{Object} params
		 * 
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.save		= this.elements.container.getElement('.save');
			this.addEvent('click', this.elements.save, $H({
				action : 'save_form'
			}));
		}
	}	
);
Imperion.Interface.Module.Password = new Class(
	/** @lends Imperion.Interface.Module.Password */
	{
		Extends : Imperion.Interface.Module.Root,
		/**
		 * Change Password Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle change password
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.parent(params, data, parentDialog, parentContext);
		},
				
		/**
		 * send request to update account informations
		 * 
		 * @returns {Void}
		 */
		requestSave : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('account', 'settings', 'update'), this.getFormData(), this.afterRequestSave.bindNew(this));
		},
		
		/**
		 * callback after save request
		 * 
		 * @params	{Object} params
		 * 
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.save		= this.elements.container.getElement('.save');
			this.addEvent('click', this.elements.save, $H({
				action : 'save_form'
			}));
		}
	}	
);
Imperion.Interface.Module.ResearchLab = new Class(
	/** @lends Imperion.Interface.Module.Account.prototype */
	{
		Extends : Imperion.Interface.Module.Root,
		
		Implements : [Imperion.Util.Checkpoint],
		
		/**
		 * slide menu
		 * 
		 * @type	Imperion.Interface.Gui.SlideMenu
		 */
		slideMenu : null,
		
		/**
		 * Research Lab Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle ResearchLab javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.SlideMenu}				slideMenu		the slide menu
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, slideMenu) {
			this.parent(params, data, parentDialog, parentContext);
			//
			this.slideMenu		= slideMenu;
			//append dom elements to slide menu
			this.slideMenu.appendTo(this.parentContext.elements.container);
			this.slideMenu.attach('researchLab', this);
		},
			
		/**
		 * check if checkpoint is resolved
		 * 
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'ResearchCategory':
					return this.categoryOpen(params.category);
					break;
				default:
					throw 'Imperion.Interface.Module.ResearchLab ident not exist';
					break;
			}
		},
		
		/**
		 * activate checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 * 
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'ResearchCategory':
					var cont = this.parentContext.elements.container.getElement('.category_' + params.category);
					//var catEle = this.parentContext.elements.container.getElement('.category_' + params.category).getElement('H1');
					this.removeCheckpointHighlight(ident);
					var highlight = this.getCheckpointHighlight(ident, {
						container 	: cont,
						posOffset	: {
							x : -480,
							y : -1
						},
						rotation	: 'arrowRight'
					});
					highlight.appendOver(cont.getElement('H1'));
					highlight.start();
					this.setCheckpointActive(ident, questObj);
					break;
				default:
					throw 'Imperion.Interface.Module.ResearchLab ident not exist';
					break;
			}
		},
		
		/**
		 * remove checkpoint
		 * 
		 * @param	{String}			ident
		 * @param	{Boolean}			refreshQuests
		 * 
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			refreshQuests = refreshQuests === undefined ? true : refreshQuests;
			switch(ident) {
				case 'ResearchCategory':
					var questObj = this.getCheckpointActive(ident);
					if(questObj !== null) {
						this.unsetCheckpointActive(ident);
						this.removeCheckpointHighlight(ident);
					}
					break;
				default:
					throw 'Imperion.Interface.Module.ResearchLab ident not exist';
					break;
			}
		},
		
		/**
		 * slide menu state change
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		onSlideMenuToggle : function(params) {
			Imperion.Factory.quest().refresh(true);
		},
		
		/**
		 * category open
		 *
		 * @param	{String}	category
		 * 
		 * @returns	{Boolean}
		 */
		categoryOpen : function(category) {
			if(this.slideMenu.activeItem !== null) {
				if(this.slideMenu.activeItem.elements.container.hasClass('category_' + category)) {
					return true;
				}
			}
			return false;
		},
		
		/**
		 * send request to update account informations
		 * 
		 * @returns {Void}
		 */
		requestSave : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('account', 'settings', 'update'), this.getFormData(), this.afterRequestSave.bindNew(this));
		},
		
		/**
		 * callback after save request
		 * 
		 * @params	{Object} params
		 * 
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
				case 'show_help':
					this.showHelpDialog(params.unitType, params.get('type'));
					eventObject.preventDefault();
					new Event(eventObject).stop();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.links = this.elements.container.getElements('.helpLinks');
			
			for(var i = this.elements.links.length - 1 ; i >= 0 ; i--) {
				this.addEvent('click', this.elements.links[i], $H({
					action	: 'show_help',
					type	: this.elements.links[i].href.split('#')[1],
					unitType: this.elements.links[i].getProperty('researchType')
				}));
			}

			/*
			this.elements.save	= this.elements.container.getElement('.save');
			this.addEvent('click', this.elements.save, $H({
				action : 'save_form'
			}));
			*/
		}
	}	
);
/*
var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('npc');
var npcContent = Imperion.Interface.Dialog.Context.Factory.npc(dialog, {
	required	: {
		metal	: 0,
		crystal	: 0,
		tritium	: 0
	},
	ratio		: {
		metal	: 1,
		crystal	: 1,
		tritium	: 1
	}
});
npcContent.showContext();
*/
Imperion.Interface.Module.NPC = new Class(
	/** @lends Imperion.Interface.Module.NPC.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		/**
		 * options
		 * 
		 * @type	Object
		 */
		options : {
			knob 		: {
				side	: 19,
				half	: 9
			},
			height		: 98,
			width		: 114,
			point 		: {
				top		: {
					x	: 57,
					y	: 98
				},
				left	: {
					x	: 0,
					y	: 0
				},
				right	: {
					x	: 114,
					y	: 0
				}
			}
		},
				
		/**
		 * the drag class
		 * 
		 * @type Drag.Move
		 */
		dragInstance : null,
		
		/**
		 * stock resources
		 * 
		 * @type	Object
		 */
		stock : {
			metal	: 0,
			crystal	: 0,
			tritium	: 0
		},
		
		/**
		 * trading ratio
		 * 
		 * @type	Object
		 */
		ratio : {
			metal	: 1,
			crystal	: 1,
			tritium	: 1
		},

		/**
		 * required
		 * 
		 * @type	Object
		 */
		required : {
			metal	: 0,
			crystal	: 0,
			tritium	: 0
		},
		
		/**
		 * amount entered resources
		 * 
		 * @type	Object
		 */
		trade : {
			metal	: 0,
			crystal	: 0,
			tritium	: 0
		},
		
		/**
		 * resource counter [metal, crystal, tritium]
		 * 
		 * @type	Object
		 */
		resourceCounter : null,
		
		/**
		 * NPC Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle NPC javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Object}										resourceCounter	
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, resourceCounter) {
			this.parent(params, data, parentDialog, parentContext);
			this.setUser(this.getUser());
			//
			this.resourceCounter = resourceCounter;
			//
			this._update(params);
			this.setKnobPosition();
		},

		/**
		 * update the instance
		 * 
		 * @param	{Object}	required
		 * @param	{Object}	ratio
		 * 
		 * @returns	{Void}
		 */
		update : function(required, ratio) {
			//
			this.setStock(RESOURCE_TYPE_METAL,		this.resourceCounter.metal.storage);
			this.setStock(RESOURCE_TYPE_CRYSTAL,	this.resourceCounter.crystal.storage);
			this.setStock(RESOURCE_TYPE_TRITIUM,	this.resourceCounter.tritium.storage);
			//
			this.setRequired(RESOURCE_TYPE_METAL,	required.metal);
			this.setRequired(RESOURCE_TYPE_CRYSTAL,	required.crystal);
			this.setRequired(RESOURCE_TYPE_TRITIUM,	required.tritium);
			//
			this.setRatio(RESOURCE_TYPE_METAL,		ratio.metal);
			this.setRatio(RESOURCE_TYPE_CRYSTAL,	ratio.crystal);
			this.setRatio(RESOURCE_TYPE_TRITIUM,	ratio.tritium);
			//
			this.updateTradeResources();
		},
		
		
		/**
		 * object wrapper for server request
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	 {Void}
		 */
		_update : function(params) {
			this.update({
				metal	: params.required.metal.toInt(),
				crystal	: params.required.crystal.toInt(),
				tritium	: params.required.tritium.toInt()
			}, {
				metal	: params.ratio.metal.toInt(),
				crystal	: params.ratio.crystal.toInt(),
				tritium	: params.ratio.tritium.toInt()
			});
		},
			
		/**
		 * update the center box
		 * 
		 * @returns	{Void}
		 */
		updateCenterBox : function() {
			var totalStock = this.getTotalStock();
			var totalTrade = this.getTotalTrade();
			
			if(totalTrade > totalStock) {
				this.elements.bar.addClass('error');
				this.elements.barAmount.setStyle('width', '100%');
			}
			else {
				var perc = totalTrade * 100 / totalStock;
				this.elements.bar.removeClass('error');
				this.elements.barAmount.setStyle('width', perc + '%');
			}
			
			this.elements.trade.rest.set('text', this.user.formatNumber(totalStock - totalTrade));
			this.elements.stock.total.set('text', this.user.formatNumber(totalStock));
		},
		
		/**
		 * update the trade resource input boxes
		 * 
		 * @returns	{Void}
		 */
		updateTradeResources : function() {
			//calculate percentages
			var ratioTotal		= this.getTotalRatio();
			var pMetal			= this.ratio.metal		/ ratioTotal;
			var pCrystal		= this.ratio.crystal	/ ratioTotal;
			var pTritium		= this.ratio.tritium	/ ratioTotal;

			this.setRatio(RESOURCE_TYPE_METAL,		pMetal);
			this.setRatio(RESOURCE_TYPE_CRYSTAL,	pCrystal);
			this.setRatio(RESOURCE_TYPE_TRITIUM,	pTritium);
			
			//calculate resource distribution not rounded
			var stockTotal		= this.getTotalStock(); 
			var newMetal 		= stockTotal * pMetal;
			var newCrystal 		= stockTotal * pCrystal;
			var newTritium 		= stockTotal * pTritium;
			
			//round (floor) resource
			var roundMetal		= newMetal.toInt();
			var roundCrystal	= newCrystal.toInt();
			var roundTritium	= newTritium.toInt();
			
			//calculate rest
			var roundSum		= roundMetal + roundCrystal + roundTritium; 
			var resRest			= stockTotal - roundSum;
			
			//distribute rest with priority
			var nextRes = RESOURCE_TYPE_METAL;
			while(resRest > 0) {
				if(nextRes === RESOURCE_TYPE_METAL) {
					nextRes = RESOURCE_TYPE_CRYSTAL;
					if(this.ratio.metal > 0) {
						roundMetal++;
						resRest--;
						continue;
					}
				}
				if(nextRes === RESOURCE_TYPE_CRYSTAL) {
					nextRes = RESOURCE_TYPE_TRITIUM;
					if(this.ratio.crystal > 0) {
						roundCrystal++;
						resRest--;
						continue;
					}
				}
				if(nextRes === RESOURCE_TYPE_TRITIUM) {
					nextRes = RESOURCE_TYPE_METAL;
					if(this.ratio.tritium > 0) {
						roundTritium++;
						resRest--;
						continue;
					}
				}
			}
			//update inputs
			this.setTrade(RESOURCE_TYPE_METAL,		roundMetal);
			this.setTrade(RESOURCE_TYPE_CRYSTAL,	roundCrystal);
			this.setTrade(RESOURCE_TYPE_TRITIUM,	roundTritium);
			//update center box
			this.updateCenterBox();
		},

		/**
		 * set the trade input
		 * 
		 * @param	{String}	resource
		 * @param	{Number}	amount
		 * 
		 * @returns	{Void}
		 */
		setTrade : function(resource, amount) {
			this.trade[resource] = amount;
			
			if(amount < this.required[resource]) {
				this.elements.required[resource].addClass('notFulfilled');
			}
			else {
				this.elements.required[resource].removeClass('notFulfilled');
			}
			this.elements.trade[resource].set('value', amount);
		},
		
		/**
		 * get the total trade amount
		 * 
		 * @returns	{Void}
		 */
		getTotalTrade : function() {
			return this.trade.metal + this.trade.crystal + this.trade.tritium;
		},
		
		/**
		 * get entered trade value and filter to positive integer
		 * 
		 * @param	{String}	resource
		 * @param	{Number}	defaultAmount
		 * 
		 * @returns	{Void}
		 */
		getFilteredTradeFromInput : function(resource, defaultAmount) {
			var val		= this.elements.trade[resource].get('value');
			if(!val) {
				val = '0';
			}
			var filter	= Imperion.Util.Factory.filter();
			return filter.filterInteger(val, defaultAmount);
		},
		
		/**
		 * get total amoun in stock
		 * 
		 * @returns	{Number}
		 */
		getTotalStock : function() {
			return this.stock.metal + this.stock.crystal + this.stock.tritium;
		},
		
		/**
		 * set the stock of a resource
		 * 
		 * @param	{String}	resource
		 * @param	{Number}	stock
		 * 
		 * @returns	{Void}
		 */
		setStock : function(resource, stock) {
			this.stock[resource] = stock;
			this.elements.stock[resource].set('text', this.user.formatNumber(stock));
		},
		
		/**
		 * get total ratio
		 * 
		 * @returns	{Number}
		 */
		getTotalRatio : function() {
			return this.ratio.metal + this.ratio.crystal + this.ratio.tritium;
		},

		/**
		 * set ratio of resource
		 * 
		 * @param	{String}	resource
		 * @param	{Number}	ratio
		 * 
		 * @returns	{Void}
		 */
		setRatio : function(resource, ratio) {
			this.ratio[resource] = ratio;
		},
		
		/**
		 * set required resource
		 * 
		 * @param	{String}	resource
		 * @param	{Number}	amount
		 * 
		 * @returns	{Void}
		 */
		setRequired : function(resource, amount) {
			if(this.required[resource] !== amount) {
				this.required[resource] = amount;
				if(amount > 0) {
					this.elements.required[resource].set('text', this.user.formatNumber(amount));
				}
				else {
					this.elements.required[resource].set('text', '-');
				}
			}
		},
		
		/**
		 * send request to update account informations
		 * 
		 * @returns {Void}
		 */
		requestSave : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('plus', 'spend', 'npctrade'), {
				resources : this.trade
			}, this.afterRequestSave.bindNew(this));
		},
		
		/**
		 * callback after save request
		 * 
		 * @params	{Object} params
		 * 
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},

		/**
		 * calculate cross product
		 * 
		 * @param	{Object}	vectorA
		 * @param	{Object}	vectorB
		 * 
		 * @return	{Number}
		 */
		crossProduct : function(vectorA, vectorB) {
			return vectorA.x * vectorB.x + vectorA.y * vectorB.y;
		},
		
		/**
		 * project point on line and return projected point
		 * 
		 * @param	{Object}	pointStart
		 * @param	{Object}	pointEnd
		 * @param	{Object}	pointProject
		 * 
		 * @returns	{Object}	pointOnLine
		 */
		projectPointOnLine : function(pointStart, pointEnd, pointProject) {
			var lineLength = {
				x : pointEnd.x - pointStart.x,
				y : pointEnd.y - pointStart.y
			};
			var numer = this.crossProduct({
				x : pointProject.x - pointStart.x,
				y : pointProject.y - pointStart.y
			}, lineLength);
			var denom = this.crossProduct(lineLength, lineLength);
			return {
				x : pointStart.x + (numer / denom) * lineLength.x,
				y : pointStart.y + (numer / denom) * lineLength.y
			};
		},
		
		/**
		 * calculate distance vector from point to line
		 * 
		 * @param	{Object}	pointStart
		 * @param	{Object}	pointEnd
		 * @param	{Object}	point
		 * 
		 * @returns	{Object}	distance
		 */
		distancePointToLine : function(pointStart, pointEnd, point) {
			var projectedPoint = this.projectPointOnLine(pointStart, pointEnd, point);
			return {
				x : point.x - projectedPoint.x,
				y : point.y - projectedPoint.y
			};
		},
		
		/**
		 * calculate distance from point to top-right side
		 * 
		 * @param	{Object}	point
		 * 
		 * @returns	{Void}
		 */
		getDistanceToTopRight : function(point, offset) {
			var sideVector = this.distancePointToLine(this.options.point.right, this.options.point.top, point);
			return Math.sqrt(sideVector.x * sideVector.x + sideVector.y * sideVector.y);
		},
		
		/**
		 * calculate distance from point to top-right side
		 * 
		 * @param	{Object}	point
		 * 
		 * @returns	{Void}
		 */
		getDistanceToLeftTop : function(point, offset) {
			var sideVector = this.distancePointToLine(this.options.point.top, this.options.point.left, point);
			return Math.sqrt(sideVector.x * sideVector.x + sideVector.y * sideVector.y);
		},
		
		/**
		 * calculate distance from point to top-right side
		 * 
		 * @param	{Object}	point
		 * 
		 * @returns	{Void}
		 */
		getDistanceToLeftRight : function(point) {
			var sideVector = this.distancePointToLine(this.options.point.left, this.options.point.right, point);
			return sideVector.y;
		},
		
		/**
		 * correct point from top to left
		 * 
		 * @param	{Object}	point
		 * 
		 * @returns	{Void}
		 */
		correctPointTopLeft : function(point) {
			var sideVector = this.distancePointToLine(this.options.point.top, this.options.point.left, point);
			
			if(sideVector.x <= 0 && sideVector.y >= 0) {
				point.x = point.x - sideVector.x + (sideVector.y * 0.5773502691896257);
			}
			return point;
		},
		
		/**
		 * correct point from top to right
		 * 
		 * @param	{Object}	point
		 * 
		 * @returns	{Void}
		 */
		correctPointTopRight : function(point) {
			var sideVector = this.distancePointToLine(this.options.point.top, this.options.point.right, point);
			
			if(sideVector.x >= 0 && sideVector.y >= 0) {
				point.x = point.x - sideVector.x - (sideVector.y * 0.5773502691896257);
			}
			return point;
		},
		
		/**
		 * handle knob movement
		 * 
		 * @param	{Element}	dragElement
		 * @param	{Event}		dragEvent
		 * 
		 * @returns	{Void}
		 */
		handleDrag : function(dragElement, dragEvent) {
			var pos = dragElement.getPosition(this.elements.inner);
			
			var orginalPoint = {
				x : pos.x + this.options.knob.half,
				y : this.options.height - pos.y - this.options.knob.half
			};
			
			var point = {
				x : pos.x + this.options.knob.half,
				y : this.options.height - pos.y - this.options.knob.half
			};
			//correct knob
			if(point.x > this.options.width)	{ point.x = this.options.width; }
			if(point.y > this.options.height)	{ point.y = this.options.height; }
			if(point.x < 0)						{ point.x = 0; }
			if(point.y < 0)						{ point.y = 0; }
			
			point = this.correctPointTopLeft(point);
			point = this.correctPointTopRight(point);

			if(orginalPoint.x !== point.x || orginalPoint.y !== point.y) {
				this.elements.knob.setPosition({
					x : point.x - this.options.knob.half,
					y : this.options.height - point.y - this.options.knob.half
				});
			}
			
			//calculate percentage
			var dLeftTop	= Math.floor(this.getDistanceToLeftTop(point));
			var dTopRight	= Math.floor(this.getDistanceToTopRight(point));
			var dLeftRight	= Math.floor(this.getDistanceToLeftRight(point));

			this.setRatio(RESOURCE_TYPE_METAL,		dLeftRight	/ this.options.height);
			this.setRatio(RESOURCE_TYPE_CRYSTAL,	dTopRight	/ this.options.height);
			this.setRatio(RESOURCE_TYPE_TRITIUM,	dLeftTop	/ this.options.height);
			
			this.updateTradeResources();
		},

		/**
		 * Sets the inital Knob Position
		 *
		 * the triangular is spanned by the two vectors options.point.top and options.point.right.
		 * multiplying these vectors with the resource ratios and addition of the resulting vectors
		 * leads to the vector identifying the knob position in the triangular
 		 */
		setKnobPosition : function(){
			var v1Ratio = {x : this.options.point.top.x * this.ratio[RESOURCE_TYPE_METAL], y : this.options.point.top.y * this.ratio[RESOURCE_TYPE_METAL]};
			var v2Ratio = {x : this.options.point.right.x * this.ratio[RESOURCE_TYPE_TRITIUM], y : this.options.point.right.y * this.ratio[RESOURCE_TYPE_TRITIUM]};

			var resultVector = {x : v1Ratio.x + v2Ratio.x , y : v1Ratio.y + v2Ratio.y};

			var newKnobPosition = {
				x : resultVector.x - (this.options.knob.half),
				y : this.options.height - resultVector.y - (this.options.knob.half)
			};

			this.elements.knob.setPosition(newKnobPosition);
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'save_form':
					this.requestSave();
					break;
				case 'set_required_to_input':
					var resource	= params.get('res');
					this.setTrade(resource, this.required[resource]);
					this.updateCenterBox();
					break;
				case 'change_trade_resource':
					var resource	= params.get('res');
					var amount		= this.getFilteredTradeFromInput(resource, this.trade[resource]);
					this.setTrade(resource, amount);
					this.updateCenterBox();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			this.elements.inner		= this.elements.container.getElement('.area');
			this.elements.knob		= this.elements.container.getElement('.knob');

			this.dragInstance = new Drag(this.elements.knob, {
				onDrag	: this.handleDrag.bindNew(this),
				snap	: 0
			});
			
			this.elements.bar		= this.elements.container.getElement('.Imperion-Interface-Gui-Bar');
			this.elements.barAmount	= this.elements.bar.getElement('DIV'); 
			
			this.elements.stock = {
				metal	: this.elements.container.getElement('.currentResources .dspMetal SPAN'),
				crystal	: this.elements.container.getElement('.currentResources .dspCrystal SPAN'),
				tritium	: this.elements.container.getElement('.currentResources .dspTritium SPAN'),
				total	: this.elements.container.getElement('.amountResources H2')
			};
			
			this.elements.trade = {
				metal	: this.elements.container.getElement('.finalResources .dspMetal INPUT'),
				crystal	: this.elements.container.getElement('.finalResources .dspCrystal INPUT'),
				tritium	: this.elements.container.getElement('.finalResources .dspTritium INPUT'),
				rest	: this.elements.container.getElement('.restTrade')
			};
			
			this.elements.required = {
				metal	: this.elements.container.getElement('.finalResources .dspMetal SPAN'),
				crystal	: this.elements.container.getElement('.finalResources .dspCrystal SPAN'),
				tritium	: this.elements.container.getElement('.finalResources .dspTritium SPAN')
			};
			
			this.addEvent('click', this.elements.required.metal, $H({
				action	: 'set_required_to_input',
				res		: RESOURCE_TYPE_METAL
			}));
			this.addEvent('click', this.elements.required.crystal, $H({
				action	: 'set_required_to_input',
				res		: RESOURCE_TYPE_CRYSTAL
			}));
			this.addEvent('click', this.elements.required.tritium, $H({
				action	: 'set_required_to_input',
				res		: RESOURCE_TYPE_TRITIUM
			}));
			
			this.addEvent('change', this.elements.trade.metal, $H({
				action	: 'change_trade_resource',
				res		: RESOURCE_TYPE_METAL
			}));
			this.addEvent('keyup', this.elements.trade.metal, $H({
				action	: 'change_trade_resource',
				res		: RESOURCE_TYPE_METAL
			}));
			this.addEvent('change', this.elements.trade.crystal, $H({
				action	: 'change_trade_resource',
				res		: RESOURCE_TYPE_CRYSTAL
			}));
			this.addEvent('keyup', this.elements.trade.crystal, $H({
				action	: 'change_trade_resource',
				res		: RESOURCE_TYPE_CRYSTAL
			}));
			this.addEvent('change', this.elements.trade.tritium, $H({
				action	: 'change_trade_resource',
				res		: RESOURCE_TYPE_TRITIUM
			}));
			this.addEvent('keyup', this.elements.trade.tritium, $H({
				action	: 'change_trade_resource',
				res		: RESOURCE_TYPE_TRITIUM
			}));
			
			this.elements.save	= this.elements.container.getElement('.save');
			this.addEvent('click', this.elements.save, $H({
				action : 'save_form'
			}));
		}
	}	
);

Imperion.Interface.Module.PaymentPlus = new Class(
	/** @lends Imperion.Interface.Module.PaymentPlus.prototype */
	{
		Extends : Imperion.Interface.Module.Root,
		
		/**
		 * context type
		 * 
		 * @type	String
		 */
		contextType : null,
		
		/**
		 * Payment / Plus Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle payment / plus javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			//
			this.contextType = params.type;
			//
			this.parent(params, data, parentDialog, parentContext);
		},


		initializeScrollbars : function(container) {
			var bar 	= container.getElement('.bar');
				entries = container.getElement('.entries');
				list 	= container.getElement('.entries ul');
			
			var scrollbar = Imperion.Interface.Tools.Factory.scrollbar(bar, {});
				scrollbar.attachTo(entries, list);
		},
				
		/**
		 * update the context with language parameter
		 * 
		 * @returns {Void}
		 */
		changeLanguage : function() {
			var newLang = this.elements.language.get('value');
		
			this.parentContext.loadUrl(null, {
				language : newLang
			}, null);
		},

		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'change_language':
					this.changeLanguage();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.language = this.elements.container.getElement('.productLanguage');

			if (this.elements.language) {
				this.addEvent('change', this.elements.language, $H({
					action : 'change_language'
				}));
			}

			this.elements.activeOrders		= this.elements.container.getElement('.activeOrders');
			if (this.elements.activeOrders) {
				this.initializeScrollbars(this.elements.activeOrders);
			}

			this.elements.purchaseHistory	= this.elements.container.getElement('.purchaseHistory');
			if (this.elements.purchaseHistory) {
				this.initializeScrollbars(this.elements.purchaseHistory);
			}
		}
	}
);
Imperion.Interface.Module.PlayerStatistics = new Class(
	/** @lends Imperion.Interface.Module.PlayerProfile */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : [Imperion.Translate, Imperion.Template],


		/**
		 * Change Password Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle edit profile dialog
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.Tooltip}				toolTip			tooltip
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, toolTip) {
			this.parent(params, data, parentDialog, parentContext);
			this.tooltip = toolTip;
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			var el = params.get('el');
			//
			switch(action) {
				case 'statistics_row_mouse_enter':
					var filter = el.getProperty('filter');
					var points = el.getProperty('points');
					if (filter == 'admiral') {


						this.tooltip.setHtml("<font class='statistic_admiral_tooltip_experience'>"+Imperion.Translate.translate('statistic__experience_points')+':</font> '+points);
						this.tooltip.show();
					}
					break;
				case 'statistics_row_mouse_leave':
					this.tooltip.hide();
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			var els = document.getElements('.playerStatistics li.clearfix');
			$splat(els).each(function(el) {
				this.addEvent('mouseenter', el, $H({
					action	: 'statistics_row_mouse_enter',
					el : el
				}));
				this.addEvent('mouseleave', el, $H({
					action	: 'statistics_row_mouse_leave'
				}))
			}.bindNew(this));

		}
	}
);


Imperion.Interface.Module.Forum.Index = new Class(
	/** @lends Imperion.Interface.Module.Forum.Index.prototype */
	{
		Extends : Imperion.Interface.Module.Root,
				
		/**
		 * new thread open flag
		 * 
		 * @type	Boolean
		 */
		threadBoxOpen : null,
		
		/**
		 * fleet combat simulator Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		forum index handle javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			//
			this.threadBoxOpen = null;
			//
			this.parent(params, data, parentDialog, parentContext);
		},
				
		/**
		 * show thread box
		 * 
		 * @returns	{Void}
		 */
		showNewThreadBox : function() {
			if(!this.threadBoxOpen || this.threadBoxOpen === null) {
				this.elements.toggle.content.morph({
					height	: 172
				});
				this.elements.toggle.state.addClass('close');
				this.elements.toggle.subject.focus();
				this.threadBoxOpen = true;
			}
		},
		
		/**
		 * hide thread box
		 * 
		 * @returns	{Void}
		 */
		hideNewThreadBox : function() {
			if(this.threadBoxOpen || this.threadBoxOpen === null) {
				this.elements.toggle.content.morph({
					height	: 0
				});
				this.elements.toggle.state.removeClass('close');
				this.threadBoxOpen = false;
			}
		},
		
		/**
		 * toggle thread box
		 * 
		 * @returns	{Void}
		 */
		toggleNewThreadBox : function() {
			if(this.threadBoxOpen) {
				this.hideNewThreadBox();
			}
			else {
				this.showNewThreadBox();
			}
		},
		
		/**
		 * retrieve form data
		 * 
		 * @returns	{Object}
		 */
		getFormData : function() {
			return this.elements.form.toQueryString().parseQueryString();
		},

		/**
		 * after request new thread
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestNewThread : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentContext.loadUrl();
				var dialog		= Imperion.Interface.Dialog.Factory.handle().getDialog('thread' + rData.id_thread);
				var thread		= Imperion.Interface.Dialog.Context.Factory.forumThread(dialog, rData.id_thread);
				thread.showContext();
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'toggle_new_thread':
					this.toggleNewThreadBox();
					break;
				case 'new_thread':
					if (!this.elements.submit.hasClass('disabled')) {
						Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'newthread'), this.getFormData(), this.afterRequestNewThread.bindNew(this));
					}
					new Event(eventObject).stop();
					return false;
					break;
				case 'check_input_contents':
					if ($chk(this.elements.textarea.value) && $chk(this.elements.subject.value) && this.elements.subject.value.length >= ALLIANCE_FORUM_MIN_SUBJECT_LENGTH)
					{
						this.elements.submit.removeClass('disabled');
					}
					else
					{
						this.elements.submit.addClass('disabled');
					}
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.toggle	= {
				click	: this.elements.container.getElement('.toggleArea'),
				content	: this.elements.container.getElement('.toggleContent'),
				state	: this.elements.container.getElement('.arrow'),
				subject	: this.elements.container.getElement('.subject')
			};

			this.addEvent('click', this.elements.toggle.click, $H({
				action	: 'toggle_new_thread'
			}));
			
			this.elements.toggle.content.set('morph', {
				duration	: 250,
				transition	: 'linear'
			});
			//
			this.elements.form		= this.elements.container.getElement('.formFields');
			this.addEvent('submit', this.elements.form, $H({
				action	: 'new_thread'
			}));
			this.elements.submit	= this.elements.container.getElement('.newThread');
			this.addEvent('click', this.elements.submit, $H({
				action 	: 'new_thread'
			}));

			this.elements.textarea = this.elements.form.getElement('textarea');
			this.addEvent('keydown', this.elements.textarea, $H({
				action 	: 'check_input_contents'
			}));
			this.addEvent('keyup', this.elements.textarea, $H({
				action 	: 'check_input_contents'
			}));

			this.elements.subject = this.elements.form.getElement('.UI-InputText');
			this.addEvent('keydown', this.elements.subject, $H({
				action 	: 'check_input_contents'
			}));
			this.addEvent('keyup', this.elements.subject, $H({
				action 	: 'check_input_contents'
			}));
		}
	}	
);
Imperion.Interface.Module.Forum.Thread = new Class(
	/** @lends Imperion.Interface.Module.Forum.Thread.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : Imperion.Translate,
			
		/**
		 * scroll bar
		 * 
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,
		
		/**
		 * fleet combat simulator Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		forum thread handle javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.parent(params, data, parentDialog, parentContext);
			//scrollbar
			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll.bar, {});
			//
			this.scrollBar.attachTo(this.elements.scroll.outer, this.elements.scroll.inner);
			if (data.scrollToBottom == true) {
				this.scrollBar.scrollToBottom();
			}
		},
		
		/**
		 * show post box
		 * 
		 * @returns	{Void}
		 */
		showNewPostBox : function() {
			if(!this.postBoxOpen || this.postBoxOpen === null) {
				this.elements.toggle.content.morph({
					height	: 128
				});
				this.elements.toggle.state.addClass('close');
				this.elements.toggle.text.focus();
				this.postBoxOpen = true;
			}
		},
		
		/**
		 * hide post box
		 * 
		 * @returns	{Void}
		 */
		hideNewPostBox : function() {
			if(this.postBoxOpen || this.postBoxOpen === null) {
				this.elements.toggle.content.morph({
					height	: 0
				});
				this.elements.toggle.state.removeClass('close');
				this.postBoxOpen = false;
			}
		},
		
		/**
		 * toggle thread box
		 * 
		 * @returns	{Void}
		 */
		toggleNewPostBox : function() {
			if(this.postBoxOpen) {
				this.hideNewPostBox();
			}
			else {
				this.showNewPostBox();
			}
		},
		
		/**
		 * after request new post
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestNewPost : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.refreshForumDialog();
				this.parentContext.options.params.page				= rData.page;
				this.parentContext.options.params.scrollToBottom	= true;
				this.parentContext.loadUrl();
			}
		},
		
		/**
		 * after delete thread
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestDeleteThread : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
			this.refreshForumDialog();
		},

		/**
		 * after delete post
		 *
		 * @param	{Imperion.Util.Response}	response
		 *
		 * @returns	{Void}
		 */
		afterRequestDeletePost : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.refreshForumDialog();
				if ($chk(rData.close))
				{
					this.parentDialog.closeDialog();
				}
				else
				{
					this.parentContext.options.params.page = rData.page;
					this.parentContext.loadUrl();
				}
			}
		},

		refreshForumDialog : function() {
			if (Imperion.Interface.Dialog.Factory.handle().dialogExist('alliance_profile'))
			{
				var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_profile');
				dialog.setDoNotFocusOnShowDialog(true);
				var forum = Imperion.Interface.Dialog.Context.Factory.forumIndex(dialog, 1);
				forum.showContext();
			}
		},

		deleteThread : function(id) {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'deletethread'), {
				id_thread : id
			}, this.afterRequestDeleteThread.bindNew(this));
		},

		deletePost : function(id) {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'deletepost'), {
				id_post : id,
				page : this.getFormData().post.page
			}, this.afterRequestDeletePost.bindNew(this));
		},

		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'toggle_new_post':
					this.toggleNewPostBox();
					break;
				case 'show_delete':
					var index = params.get('index');
					if(this.elements.deleteButtons[index]) {
						this.elements.deleteButtons[index].removeClass('hideContainer');
					}
					break;
				case 'hide_delete':
					var index = params.get('index');
					if(this.elements.deleteButtons[index]) {
						this.elements.deleteButtons[index].addClass('hideContainer');
					}
					break;
				case 'new_post':
					if (!this.elements.submit.hasClass('disabled')) {
						Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'newpost'), this.getFormData(), this.afterRequestNewPost.bindNew(this));
					}
					new Event(eventObject).stop();
					return false;
					break;
				case 'delete_thread':
					var id = params.get('id');
					var eventBoxData = {
						type : 'confirm',
						headline : null,
						content : this.translate('alliance__forum_delete_thread'),
						firstButtonText : this.translate('default__abort'),
						firstButtonCallback : null,
						secondButtonText : this.translate('default__confirm'),
						secondButtonCallback : this.deleteThread.bindNew(this, id)
					};
					var eventBox = Imperion.Interface.Factory.eventBox();
					eventBox.setEventBox(eventBoxData);
					eventBox.showEventBox();
					new Event(eventObject).stop();
					return false;
					break;
				case 'delete_post':
					var id = params.get('id');
					var eventBoxData = {
						type : 'confirm',
						headline : null,
						content : this.translate('alliance__forum_delete_post'),
						firstButtonText : this.translate('default__abort'),
						firstButtonCallback : null,
						secondButtonText : this.translate('default__confirm'),
						secondButtonCallback : this.deletePost.bindNew(this, id)
					};
					var eventBox = Imperion.Interface.Factory.eventBox();
					eventBox.setEventBox(eventBoxData);
					eventBox.showEventBox();
					new Event(eventObject).stop();
					return false;
					break;
				case 'check_textarea_content':
					if ($chk(this.elements.textarea.value))
					{
						this.elements.submit.removeClass('disabled');
					}
					else
					{
						this.elements.submit.addClass('disabled');
					}
					break;
			}

		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.scroll = {
				bar		: this.elements.container.getElement('.scrollBar'),
				outer	: this.elements.container.getElement('.scrollOuter'),
				inner	: this.elements.container.getElement('.scrollContent')
			};
			
			this.elements.toggle	= {
				click	: this.elements.container.getElement('.toggleArea'),
				content	: this.elements.container.getElement('.toggleContent'),
				state	: this.elements.container.getElement('.arrow'),
				text	: this.elements.container.getElement('textarea')
			};
			
			this.addEvent('click', this.elements.toggle.click, $H({
				action	: 'toggle_new_post'
			}));
			
			this.elements.toggle.content.set('morph', {
				duration	: 250,
				transition	: 'linear'
			});
			
			this.elements.deleteButtons = this.elements.container.getElements('.delete');
			this.elements.deleteParents	= [];
			for(var i = this.elements.deleteButtons.length - 1 ; i >= 0 ; i--) {
				this.elements.deleteParents[i] = this.elements.deleteButtons[i].getParent();
				this.addEvent('mouseenter', this.elements.deleteParents[i], $H({
					action	: 'show_delete',
					index	: i
				}));
				this.addEvent('mouseleave', this.elements.deleteParents[i], $H({
					action	: 'hide_delete',
					index	: i
				}));
				if(this.elements.deleteButtons[i].hasClass('deleteThread')) {
					this.elements.deleteButtons[i].removeEvents();
					this.addEvent('click', this.elements.deleteButtons[i], $H({
						action	: 'delete_thread',
						id		: this.elements.deleteButtons[i].name
					}));
				} else {
					this.elements.deleteButtons[i].removeEvents();
					this.addEvent('click', this.elements.deleteButtons[i], $H({
						action	: 'delete_post',
						id		: this.elements.deleteButtons[i].name
					}));
				}
			}

			this.elements.form		= this.elements.container.getElement('.formFields');
			this.addEvent('submit', this.elements.form, $H({
				action	: 'new_post'
			}));
			this.elements.submit	= this.elements.container.getElement('.newPost');
			this.addEvent('click', this.elements.submit, $H({
				action 	: 'new_post'
			}));
			this.elements.textarea = this.elements.form.getElement('textarea');
			this.addEvent('keydown', this.elements.textarea, $H({
				action 	: 'check_textarea_content'
			}));
			this.addEvent('keyup', this.elements.textarea, $H({
				action 	: 'check_textarea_content'
			}));
		}
	}	
);
Imperion.Interface.Module.Overview.Resources = new Class(
	/** @lends Imperion.Interface.Overview.Resources.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : Imperion.Translate,

		/**
		 * tooltip for the resources
		 */
		tooltip : null,

		/**
		 * Resources Overview
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Resources Overview
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip) {
			this.parent(params, data, parentDialog, parentContext);
			this.tooltip = tooltip;
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');
			switch(action) {
				case 'show_tooltip_metal':
					this.tooltip.setText(this.translate('uiframe__production_metal'));
					this.tooltip.show();
					break;
				case 'hide_tooltip_metal':
					this.tooltip.hide();
					break;
				case 'show_tooltip_crystal':
					this.tooltip.setText(this.translate('uiframe__production_crystal'));
					this.tooltip.show();
					break;
				case 'hide_tooltip_crystal':
					this.tooltip.hide();
					break;
				case 'show_tooltip_tritium':
					this.tooltip.setText(this.translate('uiframe__production_tritium'));
					this.tooltip.show();
					break;
				case 'hide_tooltip_tritium':
					this.tooltip.hide();
					break;
			}
		},

		/**
		 * called after closing the dialog
		 */
		clean : function(){
			this.htmlTooltip.hide();
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.resourcesOverview = this.elements.container.getElement('.Imperion-Interface-Module-Overview-Resources');

			this.elements.iconMetal   = this.elements.resourcesOverview.getElement('.metal').getElement('.icon');
			this.elements.iconCrystal = this.elements.resourcesOverview.getElement('.crystal').getElement('.icon');
			this.elements.iconTritium = this.elements.resourcesOverview.getElement('.tritium').getElement('.icon');

			this.addEvent('mouseover', this.elements.iconMetal  , $H({
				action : 'show_tooltip_metal'
			}));

			this.addEvent('mouseleave', this.elements.iconMetal  , $H({
				action : 'hide_tooltip_metal'
			}));

			this.addEvent('mouseover', this.elements.iconCrystal  , $H({
				action : 'show_tooltip_crystal'
			}));

			this.addEvent('mouseleave', this.elements.iconCrystal  , $H({
				action : 'hide_tooltip_crystal'
			}));

			this.addEvent('mouseover', this.elements.iconTritium  , $H({
				action : 'show_tooltip_tritium'
			}));

			this.addEvent('mouseleave', this.elements.iconTritium  , $H({
				action : 'hide_tooltip_tritium'
			}));

		}
	}
);
Imperion.Interface.Module.Stream.Index = new Class(
	/** @lends Imperion.Interface.Module.Stream.Index */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : Imperion.Template,

		/**
		 * Unread stream elements
		 *
		 * @type	integer
		 */
		unreadCount : 0,

		/**
		 * Stream elements
		 *
		 * @type	integer
		 */
		streamElementCount : 0,

		/**
		 * Current displayed stream elements
		 *
		 * @type integer
		 */
		currentDisplayedCount : 0,

		/**
		 * Controller for the load more request
		 *
		 * @type	string
		 */
		loadMoreController : 'stream',

		/**
		 * Action for the load more request
		 *
		 * @type	string
		 */
		loadMoreAction : 'load-more',

		/**
		 * Action for the on close dialog request
		 *
		 * @type	string
		 */
		onCloseDialogAction : 'on-close-dialog',

		/**
		 * Filter for the load more request
		 *
		 * @type	string
		 */
		loadMoreFilter : null,

		/**
		 * Scroll bar
		 *
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,

		/**
		 * Active filter
		 *
		 * @type	String
		 */
		activeFilter : null,

		/**
		 * timestamp of the oldest Report, for 'load more' Action
		 */
		oldestReport : 0,

		/**
		 * Exclude these ids on "load more"
		 *
		 * @type	array
		 */
		excludeIds : [],

		/**
		 * Stream report class
		 *
		 * @param	{Object}										params			params for module
		 * @param	{Object}										data			data from response
		 * @param	{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param	{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.parent(params, data, parentDialog, parentContext);

			parentDialog.attach('reportStreamModule', this);

			if (data.unreadCount !== undefined) {
				this.unreadCount = data.unreadCount;
			}

			if (data.streamElementCount !== undefined) {
				this.streamElementCount = data.streamElementCount;
			}

			if (data.streamElementCount !== undefined) {
				this.activeFilter = data.activeFilter;
			}

			this.oldestReport = data.oldestReportTimestamp;

			this.renderStream(data.streamElements);
		},

		/**
		 * mark all reports as read on closing the dialog
		 */
		onCleanUp : function(){
			Imperion.Util.Request.send(Imperion.Util.Helper.url('stream', this.loadMoreController, this.onCloseDialogAction),{},this.afterCleanUpRequest.bindNew(this));
		},

		/**
		 * empty Method nothing to do after close Stream reports
		 */
		afterCleanUpRequest : function(){},

		/**
		 * Renders the stream
		 *
		 * @param	{Object}	rawStreamElements
		 * @return	{Void}
		 */
		renderStream : function(rawStreamElements) {
			var htmlRenderedStreamElement = null;
			if (rawStreamElements != undefined) {
				rawStreamElements.each(function(data) {

					htmlRenderedStreamElement = this.getStreamElementHtmlRendered(data);
					htmlRenderedStreamElement.inject(this.elements.container);
					this.parentContext.parseHtml(htmlRenderedStreamElement);

					this.currentDisplayedCount ++;
					this.unreadCount --;

					this.setExcludes(data);

				}.bindNew(this));
			}

			this.refreshScrollBar();
			this.refreshLoadMoreButton();
		},

		/**
		 * @param	{Object}	data	stream element data object
		 * @return	{Void}
		 */
		setExcludes: function(data) {},

		/**
		 * Get rendered stream element
		 *
		 * @param	{Object}	data	stream element data object
		 * @return	{Element}
		 */
		getStreamElement : function(data) {
			var streamElement = new Imperion.Interface.Module.Stream.Element(data);
			return streamElement.get();
		},

		/**
		 * Refreshes the scroll bar
		 *
		 * @return {Void}
		 */
		refreshScrollBar : function() {
			if (this.scrollBar) {
				this.scrollBar.clean();
				delete this.scrollBar;
			}

			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollBar, {});
			this.scrollBar.attachTo(this.elements.scrollContainer, this.elements.scrollContent);
		},

		/**
		 * After request append stream elements
		 *
		 * @param	{Imperion.Util.Response}	response
		 * @returns	{Void}
		 */
		afterRequestAppendStreamElements : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.oldestReport = rData.oldestReportTimestamp;
				this.renderStream(rData.streamElements);
			}
		},

		/**
		 * Refreshes the load more button
		 *
		 * @return	{Void}
		 */
		refreshLoadMoreButton : function() {
			if (this.streamElementCount <= this.currentDisplayedCount) {
				this.elements.loadMore.addClass('disabled');
			}

			if (this.unreadCount > 0) {
				this.elements.unreadCount.set('text', this.unreadCount)
			} else {
				this.elements.unread.addClass('hideContainer');
			}
		},

		/**
		 * Load more stream elements
		 *
		 * @return {Void}
		 */
		loadMoreStreamElements : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('stream', this.loadMoreController, this.loadMoreAction), {
				oldestReport		: this.oldestReport,
				filter				: this.activeFilter,
				loadMoreFilter		: this.loadMoreFilter,
				excludeIds			: this.excludeIds
			}, this.afterRequestAppendStreamElements.bindNew(this));
		},

		/**
		 * Main event handler
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');

			switch(action) {
				case 'loadMore':
					if (this.streamElementCount > this.currentDisplayedCount) {
						this.loadMoreStreamElements();
					}
					eventObject.stop();
					break;
				case 'filterButton':
					var filter = params.get('filter');
					this.parentContext.loadUrl(null, {
						filter: filter
					});
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.container					= container.getElement('.streamElements');
			this.elements.filterContainer			= container.getElement('.filterContainer');
			this.elements.loadMore					= container.getElement('.loadMore');
			this.elements.scrollContainer			= container.getElement('.scrollContainer');
			this.elements.scrollContent				= container.getElement('.scrollContent');
			this.elements.scrollBar					= container.getElement('.scrollBar');
			this.elements.unread					= this.elements.loadMore.getElement('.unread');
			this.elements.unreadCount				= this.elements.unread.getElement('.count');

			if (this.elements.filterContainer != undefined) {
				this.elements.filterContainer.getElements('.filterButton').each(function(element) {
					this.addEvent('click', element, $H({
						action	: 'filterButton',
						filter	: element.get('id')
					}));
				}.bindNew(this));
			}

			this.addEvent('click', this.elements.loadMore, $H({
				action	: 'loadMore'
			}));
		}
	}
);
Imperion.Interface.Module.Stream.Report = new Class(
	/** @lends Imperion.Interface.Module.Stream.Report */
	{
		Extends : Imperion.Interface.Module.Stream.Index,

		/**
		 * Controller for the load more request
		 *
		 * @type	string
		 */
		loadMoreController : 'report',

		/**
		 * @param	{Object}	data	stream element data object
		 * @return	{Void}
		 */
		setExcludes: function(data) {
			if (this.oldestReport == data.dateCreated) {
				var index = this.excludeIds.length;
				this.excludeIds[index] = data.reportId;
			}
		},

		/**
		 * Get rendered stream element
		 *
		 * @param	{Object}	data
		 * @return	{Element}
		 */
		getStreamElementHtmlRendered : function(data) {
			return this.getStreamElement(data).get();
		},

		/**
		 * Get rendered stream element
		 *
		 * @param	{Object}	data
		 * @return	{Element}
		 */
		getStreamElement : function(data) {
			var elementReportClass = Imperion.Interface.Module.Stream.ReportMapping.getElementReportClassForType(data.template);
			return new elementReportClass(data);
		}
	}
);
Imperion.Interface.Module.Stream.ReportStarred = new Class(
	/** @lends Imperion.Interface.Module.Stream.ReportStarred */
	{
		Extends : Imperion.Interface.Module.Stream.Report,

		/**
		 * Filter for the load more request
		 *
		 * @type	string
		 */
		loadMoreFilter : 'isStarred'
	}
);
Imperion.Interface.Module.Stream.ReportStory = new Class(
	/** @lends Imperion.Interface.Module.Stream.ReportStory */
	{
		Extends : Imperion.Interface.Module.Stream.Report,

		/**
		 * Filter for the load more request
		 *
		 * @type	string
		 */
		loadMoreFilter : 'isStory'
	}
);
Imperion.Interface.Module.Stream.Element = new Class(
	/** @lends Imperion.Interface.Module.Stream.Index */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : [Imperion.Util.Class, Imperion.Template],

		/**
		 * {Object}		data
		 */
		data : {},

		/**
		 * Integer		isRead
		 */
		isRead : false,

		/**
		 * Integer		isStarred
		 */
		isStarred : false,

		/**
		 * Controller for the star request
		 *
		 * @type	string
		 */
		starController : 'stream',

		/**
		 * Action for the star request
		 *
		 * @type	string
		 */
		starAction : 'toggle-star',

		/**
		 *
		 * Stream element id
		 *
		 * @type	integer
		 */
		id : 0,

		/**
		 * Stream element class
		 *
		 * @param	{Object}	data
		 *
		 * @constructs
		 */
		initialize : function(data) {
			this.data		= data;
			this.isRead		= data.isRead;
			this.isStarred	= data.isStarred;

			this.loadElements();
			this.setId();

			if (this.isRead == true && this.isStarred == false) {
				this.setReadStyle();
			}
		},

		/**
		 * Sets the read stream element style
		 *
		 * @return	{Void}
		 */
		setReadStyle : function() {},

		/**
		 * Unsets the read stream element style
		 *
		 * @return	{Void}
		 */
		unsetReadStyle : function() {},

		/**
		 * Sets the stream element id
		 *
		 * @return	{Void}
		 */
		setId : function() {
			this.id = this.data.streamElementId;
		},

		/**
		 * Get HTML rendered and parsed stream element
		 *
		 * @return	{Element}
		 */
		get : function() {
			return this.elements.container;
		},

		/**
		 * Stream element mouse over effect
		 */
		mouseEnterEffect : function() {},

		/**
		 * Stream element mouse leave effect
		 */
		mouseLeaveEffect : function() {},


		/**
		 * After request set the star / unstar style
		 *
		 * @param	{Imperion.Util.Response}	response
		 * @returns	{Void}
		 */
		afterRequestToggleStar : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				if (rData.isStarred == true) {
					this.elements.star.addClass('selected');
					this.isStarred = true;
					this.unsetReadStyle();
				} else {
					this.elements.star.removeClass('selected');
					this.isStarred = false;
					if (this.isRead == true) {
						this.setReadStyle();
					}
				}
			}
		},

		/**
		 * Stream element toggle star
		 */
		toggleStar : function() {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('stream', this.starController, this.starAction), {
				streamElementId : this.id
			}, this.afterRequestToggleStar.bindNew(this));
		},

		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');

			switch(action) {
				case 'mouseEnterEffect':
					this.mouseEnterEffect();
					break;
				case 'mouseLeaveEffect':
					this.mouseLeaveEffect();
					break;
				case 'toggleStar':
					this.toggleStar();
					eventObject.stop();
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @returns {Void}
		 */
		loadElements : function() {
			this.elements.container	= this.getClonedTemplate(this.data.template);
			this.elements.star		= this.elements.container.getElement('.star');

			this.addEvent('mouseenter', this.elements.container, $H({
				action : 'mouseEnterEffect'
			}));

			this.addEvent('mouseleave', this.elements.container, $H({
				action : 'mouseLeaveEffect'
			}));

			if (this.elements.star) {
				this.addEvent('click', this.elements.star, $H({
					action : 'toggleStar'
				}));
			}
		}
	}
);
Imperion.Interface.Module.Stream.ElementReport = new Class(
	/** @lends Imperion.Interface.Module.Stream.Index */
	{
		Extends : Imperion.Interface.Module.Stream.Element,

		/**
		 * Controller for the star request
		 *
		 * @type	string
		 */
		starController : 'report',

		/**
		 * Used if element report has a timer inside, to track the remaining time
		 */
		remainingTime : null,

		/**
		 * Standard element opacity
		 */
		elementOpacity : 1,

		/**
		 * Is read element opacity
		 */
		isReadOpacity : 0.6,

		/**
		 * timer for e.g. countdown
		 */
		secondTimer : null,

		/**
		 * flag to indicate if this element is in reportDetail view
		 */
		isReportDetail : false,

		initialize : function(data) {
			this.parent(data);
			this.secondTimer = Imperion.Util.Factory.secondTimer();
		},

		/**
		 * disables the mouseover Effects.
		 * used for stream report detail view.
		 */
		enableReportDetailMode : function(){
			this.isReportDetail = true;
		},

		/**
		 * Sets the stream element id
		 *
		 * @return	{Void}
		 */
		setId : function() {
			this.id = this.data.reportId;
		},

		/**
		 * Stream element mouse over effect
		 */
		mouseEnterEffect : function() {
			if(this.isReportDetail == false) {
				this.elements.container.set('morph', {
					duration:		300,
					transition:		Fx.Transitions.Quad.easeOut
				});
				this.elements.container.morph({
					opacity:				1,
					'background-color':		'#012A47',
					border:					'1px solid #0099E6'
				});
			}
		},

		/**
		 * Stream element mouse leave effect
		 */
		mouseLeaveEffect : function() {
			if(this.isReportDetail == false) {
				var newOpacity = this.elementOpacity;

				if (this.isRead == true && this.isStarred == false) {
					newOpacity = this.isReadOpacity;
				}

				this.elements.container.set('morph', {
					duration:		300,
					transition:		Fx.Transitions.Quad.easeOut
				});

				this.elements.container.morph({
					opacity:				newOpacity,
					'background-color':		'#011C2F',
					border:					'1px solid #004B73'
				});
			}
		},

		/**
		 * Sets the read stream element style
		 *
		 * @return	{Void}
		 */
		setReadStyle : function() {
			this.elements.container.set('opacity', this.isReadOpacity);
		},

		/**
		 * Unsets the read stream element style
		 *
		 * @return	{Void}
		 */
		unsetReadStyle : function() {
			this.elements.container.set('opacity', this.elementOpacity);
		},

		setHeadlineText : function(text){
			this.elements.container.getElement('.headline').getElement('.text').set('text', text);
		},

		setHeadlineDate : function(date){
			this.elements.container.getElement('.headline').getElement('.date').set('text', date);
		},

		setInfoText : function(text){
			this.elements.container.getElement('.infoText').set('html', text);
		},

		setInfoBlockText : function(text){
			this.elements.container.getElement('.infoBlock').removeClass('hideContainer');
			this.elements.container.getElement('.infoBlock').getElement('.text').set('text', text);
		},

		setInfoBlockValue : function(value, infoBlockIsCountdown){
			this.elements.container.infoBlockCountdown = this.elements.container.getElement('.infoBlock').getElement('.value');
			if(infoBlockIsCountdown){
				this.remainingTime = value;
				var timerId = 'elementReport' + this.id;
				if(this.isReportDetail){
					timerId += 'detail';
				}
				this.secondTimer.attach(timerId, this);
				this.elements.container.infoBlockCountdown.set('text', this.getUser().formatDuration(value));
			}else{
				this.elements.container.infoBlockCountdown.set('text', value);
			}
		},

		timerStep : function(timerObj) {
			this.elements.container.infoBlockCountdown.set('text', this.getUser().formatDuration(this.remainingTime));
			this.remainingTime--;
			if(this.remainingTime < 0) {
				var timerId = 'elementReport'+this.id;
				if(this.isReportDetail){
					timerId += 'detail';
				}
				this.secondTimer.detach(timerId);
			}
		},

		setExperience : function(experience){
			this.elements.container.getElement('.experience').removeClass('hideContainer');
			this.elements.container.getElement('.experience').getElement('.text').set('text',experience);
		},

		setStoryImage : function(storyImage){
			this.elements.container.getElement('.storyImage').set('src', storyImage + '.jpg');
		},

		setImage : function(image){
			this.elements.container.getElement('.reportImage').set('src', image + '.jpg');
		},

		setStarred : function(starred){
			if(starred){
				this.elements.container.getElement('.headline').getElement('.star').addClass('selected');
			}
		},

		setReportTypeIcon : function(reportTypeIcon) {
			this.elements.container.getElement('.reportTypeIcon').set('src', reportTypeIcon + '.png');
		},

		setReportBars : function(_meBefore, _meAfter, _enemyBefore, _enemyAfter, _supportBefore, _supportAfter){
			var meBefore = Math.ceil(_meBefore * 100);
			var meAfter = Math.ceil(_meAfter * 100);
			var meComplete = meBefore + meAfter;
			if (meComplete > 100) {
				meAfter = 100 - meBefore;
			}
			var enemyBefore = Math.ceil(_enemyBefore * 100);
			var enemyAfter = Math.ceil(_enemyAfter * 100);
			if (enemyAfter + enemyAfter > 100) {
				enemyAfter = 100 - enemyBefore;
			}
			var supportBefore = Math.ceil(_supportBefore * 100);
			var supportAfter = Math.ceil(_supportAfter * 100);
			if (supportAfter && supportBefore + supportAfter + meComplete > 100) {
				supportAfter = 100 - meComplete - supportBefore;
			}

			this.elements.container.getElement('.fightOverview').removeClass('hideContainer');
			this.elements.container.getElement('.meBars').getElement('.beforeFight').setStyle('width',meBefore +'%');
			this.elements.container.getElement('.meBars').getElement('.afterFight').setStyle('width', meAfter +'%');
			this.elements.container.getElement('.meBars').getElement('.supportBeforeFight').setStyle('width', supportBefore +'%');
			this.elements.container.getElement('.meBars').getElement('.supportAfterFight').setStyle('width', supportAfter +'%');
			this.elements.container.getElement('.enemyBars').getElement('.beforeFight').setStyle('width', enemyBefore +'%');
			this.elements.container.getElement('.enemyBars').getElement('.afterFight').setStyle('width', enemyAfter +'%');
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			this.parent(eventObject,params);

			var action = params.get('action');
			switch(action) {
				case 'showReportDetails':
					if(!this.isReportDetail && !eventObject.target.match('a')) {
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('reportDetail'+this.id);
						var isStoryReport = this.data['template'] == 'StreamReportType3' ? true : false;
						if(isStoryReport){
							var reportDetail = Imperion.Interface.Dialog.Context.Factory.reportStory(dialog, this.id);
						}else{
							if(this.data.infoBlockIsCountdown){
								this.data.infoBlockValue = this.remainingTime;
							}
							var reportDetail = Imperion.Interface.Dialog.Context.Factory.reportDetail(dialog, this.id, this.data);
						}
						reportDetail.showContext();
					}
					break;
				case 'show_dialog' :
					var dialogId  = params.get('dialogId'),
						contextId = params.get('contextId'),
						entityId  = params.get('entityId') || '',
						dialog    = null,
						context   = null;

					eventObject.stop();

					dialog  = Imperion.Interface.Dialog.Factory.handle().getDialog(dialogId + entityId);

					if(contextId !== 'allianceProfile'){
						context = Imperion.Interface.Dialog.Context.Factory.getContextByType(contextId, dialog, entityId);
						context.showContext();
					}else{
						if(this.getUser().getAllianceId() == entityId){
							var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_profile');
							var profile = Imperion.Interface.Dialog.Context.Factory.allianceProfile(dialog, this.getUser().getAllianceId(),true);
							var forum = Imperion.Interface.Dialog.Context.Factory.forumIndex(dialog,1);
							profile.showContext();
						}else{
							context = Imperion.Interface.Dialog.Context.Factory.getContextByType(contextId, dialog, entityId);
							context.showContext();
						}
					}
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @returns {Void}
		 */
		loadElements : function() {
			this.parent();
			this.elements.container.removeClass('hideContainer');

			this.addEvent('click', this.elements.container, $H({
				action : 'showReportDetails'
			}));
		}
	}
);
Imperion.Interface.Module.Stream.ReportMapping = new Class.Singleton(
{
		getElementReportClassForType : function(type){
			var elementReportClass;
			switch (type) {
				case 'StreamReportType1':
					elementReportClass = Imperion.Interface.Module.Stream.ElementReportType1;
					break;
				case 'StreamReportType3':
					elementReportClass = Imperion.Interface.Module.Stream.ElementReportType3;
					break;
				case 'StreamReportType4':
					elementReportClass = Imperion.Interface.Module.Stream.ElementReportType4;
					break;
			}
			return elementReportClass;
		}
}
);
Imperion.Interface.Module.Stream.ElementReportType1 = new Class(
	/** @lends Imperion.Interface.Module.Stream.Index */
	{
		Extends : Imperion.Interface.Module.Stream.ElementReport,

		/**
		 * Get HTML rendered and parsed stream element
		 *
		 * @return	{Element}
		 */
		get : function() {
			// set data from this.data
			this.setHeadlineText(this.data.headlineText);
			this.setHeadlineDate(this.data.headlineDate);
			this.setInfoText(this.data.infoText);
			this.setImage(this.data.image);

			if (this.data.infoBlock) {
				this.setInfoBlockText(this.data.infoBlock.text);
				this.setInfoBlockValue(this.data.infoBlock.value, this.data.infoBlock.isCountdown);
			}
			this.setStarred(this.data.isStarred);
			this.setReportTypeIcon(this.data.reportTypeIcon);

			if (typeof this.data.meBarPercentBefore != 'undefined' || typeof this.data.enemyBarPercentBefore != 'undefined' || typeof this.data.supportBarPercentBefore != 'undefined') {
				this.setReportBars(this.data.meBarPercentBefore, this.data.meBarPercentAfter, this.data.enemyBarPercentBefore, this.data.enemyBarPercentAfter, this.data.supportBarPercentBefore, this.data.supportBarPercentAfter);
			}

			if (this.data.admiralXp) {
				this.setExperience(this.data.admiralXp);
			}

			return this.elements.container;
		}
	}
);
Imperion.Interface.Module.Stream.ElementReportType3 = new Class(
	/** @lends Imperion.Interface.Module.Stream.Index */
	{
		Extends : Imperion.Interface.Module.Stream.ElementReport,

		/**
		 * Get HTML rendered and parsed stream element
		 *
		 * @return	{Element}
		 */
		get : function() {
			// set data from this.data
			this.setHeadlineText(this.data.headlineText);
			this.setStoryImage(this.data.storyImage);

			return this.elements.container;
		}
	}
);
Imperion.Interface.Module.Stream.ElementReportType4 = new Class(
	/** @lends Imperion.Interface.Module.Stream.Index */
	{
		Extends : Imperion.Interface.Module.Stream.ElementReport,

		/**
		 * Get HTML rendered and parsed stream element
		 *
		 * @return	{Element}
		 */
		get : function() {
			// set data from this.data
			this.setHeadlineText(this.data.headlineText);
			this.setHeadlineDate(this.data.headlineDate);
			this.setInfoText(this.data.infoText);
			this.setStarred(this.data.isStarred);
			this.setReportTypeIcon(this.data.reportTypeIcon);

			return this.elements.container;
		}
	}
);
Imperion.Interface.Module.Stream.Report = new Class(
	/** @lends Imperion.Interface.Module.Stream.Report */
	{
		Extends : Imperion.Interface.Module.Stream.Index,

		/**
		 * Controller for the load more request
		 *
		 * @type	string
		 */
		loadMoreController : 'report',

		/**
		 * @param	{Object}	data	stream element data object
		 * @return	{Void}
		 */
		setExcludes: function(data) {
			if (this.oldestReport == data.dateCreated) {
				var index = this.excludeIds.length;
				this.excludeIds[index] = data.reportId;
			}
		},

		/**
		 * Get rendered stream element
		 *
		 * @param	{Object}	data
		 * @return	{Element}
		 */
		getStreamElementHtmlRendered : function(data) {
			return this.getStreamElement(data).get();
		},

		/**
		 * Get rendered stream element
		 *
		 * @param	{Object}	data
		 * @return	{Element}
		 */
		getStreamElement : function(data) {
			var elementReportClass = Imperion.Interface.Module.Stream.ReportMapping.getElementReportClassForType(data.template);
			return new elementReportClass(data);
		}
	}
);
Imperion.Interface.Module.Stream.ReportStarred = new Class(
	/** @lends Imperion.Interface.Module.Stream.ReportStarred */
	{
		Extends : Imperion.Interface.Module.Stream.Report,

		/**
		 * Filter for the load more request
		 *
		 * @type	string
		 */
		loadMoreFilter : 'isStarred'
	}
);
Imperion.Interface.Module.Stream.ReportStory = new Class(
	/** @lends Imperion.Interface.Module.Stream.ReportStory */
	{
		Extends : Imperion.Interface.Module.Stream.Report,

		/**
		 * Filter for the load more request
		 *
		 * @type	string
		 */
		loadMoreFilter : 'isStory'
	}
);
Imperion.Interface.Module.Report.ReportDetail = new Class(
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : Imperion.Translate,

		/**
		 * the data of the corresponding elementReport
		 */
		elementReportData : null,

		/**
		 * Scroll bar
		 *
		 * @type	Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,

		/**
		 * tooltip for the navigation buttons
		 */
		tooltip : null,

		/**
		 * slideMenu for Battle Details
		 */
		slideMenu : null,

		/**
		 * ReportDetail class
		 *
		 * @param	{Object}	data
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.elementReportData = params.elementReportData;
			this.parent(params, data, parentDialog, parentContext);

			this.tooltip 	= Imperion.Interface.Gui.Factory.htmltooltip();
			this.slideMenu	= Imperion.Interface.Gui.Factory.slidemenu();
			this.slideMenu.options.one = false;
			this.slideMenu.appendTo(this.parentContext.elements.container);
			this.slideMenu.attach('reportDetail'+this.elementReportData['reportId'], this);

			if(this.elementReportData && this.elements.scrollBar){
				this.refreshScrollBar();
			}
		},

		/**
		 * Refreshes the scroll bar
		 *
		 * @return {Void}
		 */
		refreshScrollBar : function() {
			if (this.scrollBar) {
				this.scrollBar.clean();
				delete this.scrollBar;
			}

			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollBar, {});
			this.scrollBar.attachTo(this.elements.scrollContainer, this.elements.scrollContent);
		},

		/**
		 * slide menu state change
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		onSlideMenuToggle : function(params) {
			var status = params.item.elements.status.get('text');
			var newStatus = '-';
			if(status == '-'){
				newStatus = '+';
			}
			params.item.elements.status.set('text',newStatus);
		},

		/**
		 * slide menu state change complete
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		onSlideMenuToggleComplete : function(params){
			if(!this.scrollBar.slider){
				this.scrollBar.refreshScrollbarSize();
			}else{
				var currStep = this.scrollBar.slider.step;
				var oldFull = this.scrollBar.slider.full;

				this.scrollBar.disable();
				this.scrollBar.refreshScrollbarSize();
				this.scrollBar.enable();

				var newFull = this.scrollBar.slider.full;

				var absolutValue = oldFull * (currStep / 100);
				var newPercent = 100 * (absolutValue / newFull);

				this.scrollBar.step(newPercent);
				this.scrollBar.slider.set(newPercent);
			}
			var scrollOffset = this.scrollBar.refreshScrollbarSize();
			if(scrollOffset.offset == 0){
				this.scrollBar.scrollToTop();
			}
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');
			switch(action) {
				case 'scrollToTop' :
					this.scrollBar.scrollToTop();
					break;
				case 'show_tooltip':
					this.tooltip.setText(params.get('text'));
					this.tooltip.show();
					break;
				case 'hide_tooltip':
					this.tooltip.hide();
					break;
				case 'show_unittype_tooltip':
					var unitTooltipContent = new Imperion.Interface.Gui.UnitTooltipContent(params.get('type'), params.get('isOwner'));
					this.tooltip.setHtml(unitTooltipContent.get());
					this.tooltip.show();
					break;
				case 'expandAll' :
					this.slideMenu.openAllItems();
					break;
				case 'collapseAll' :
					this.slideMenu.closeAllItems();
					break;
				case 'show_status_tooltip':
					var el = params.get('el');
					if (el.hasClass('expand')) {
						this.tooltip.setText(this.translate('streamreportdetail__expand_slot'))
					} else {
						this.tooltip.setText(this.translate('streamreportdetail__collapse_slot'))
					}
					this.tooltip.show();
					break;
				case 'hide_status_tooltip':
					this.tooltip.hide();
					break;
			}
		},

		addTooltipEvents : function (el) {
			this.addEvent('mouseenter', el, $H({
				action	: 'show_status_tooltip',
				el		: el
			}));
			this.addEvent('mouseleave', el, $H({
				action	: 'hide_status_tooltip'
			}));
			this.addEvent('click', el, $H({
				action	: 'hide_status_tooltip'
			}));
		},

		/**
		 * load dom elements
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.elements.container	= container.getElement('.Imperion-Interface-Module-ReportDetail');

			var elementReportClass = Imperion.Interface.Module.Stream.ReportMapping.getElementReportClassForType(this.elementReportData.template);
			var streamElement = new elementReportClass(this.elementReportData);
			streamElement.isRead = false;
			streamElement.unsetReadStyle();
			streamElement.enableReportDetailMode();
			var element = streamElement.get();
			this.parentContext.parseHtml(element);
			element.inject(this.elements.container, 'top');

			this.elements.scrollContainer		= this.elements.container.getElement('.scrollContainer');
			this.elements.scrollContent			= this.elements.container.getElement('.scrollContent');
			this.elements.scrollBar				= this.elements.container.getElement('.scrollBar');

			this.elements.scrollToTopButtons	= this.elements.container.getElements('.scrollToTop');
			this.elements.expandAllButton		= this.elements.container.getElement('.expandAll');
			this.elements.collapseAllButton		= this.elements.container.getElement('.collapseAll');

			this.elements.expandCollapseButtons	= this.elements.container.getElements('.status');

			$splat(this.elements.expandCollapseButtons).each(function(el) {
				this.addTooltipEvents(el);
			}.bindNew(this));


			$splat(this.elements.scrollToTopButtons).each(function(scrollToTopButton) {
				this.addEvent('click', scrollToTopButton, $H({
					action	: 'scrollToTop'
				}));
				this.addEvent('mouseenter', scrollToTopButton, $H({
					action	: 'show_tooltip',
					text 	: this.translate('streamreportdetail__scroll_to_top')
				}));
				this.addEvent('mouseleave', scrollToTopButton, $H({
					action	: 'hide_tooltip'
				}));
			}, this);

			this.addEvent('click', this.elements.expandAllButton, $H({
				action	: 'expandAll'
			}));
			this.addEvent('mouseenter', this.elements.expandAllButton, $H({
				action	: 'show_tooltip',
				text 	: this.translate('streamreportdetail__expand_all')
			}));
			this.addEvent('mouseleave', this.elements.expandAllButton, $H({
				action	: 'hide_tooltip'
			}));

			this.addEvent('click', this.elements.collapseAllButton, $H({
				action	: 'collapseAll'
			}));
			this.addEvent('mouseenter', this.elements.collapseAllButton, $H({
				action	: 'show_tooltip',
				text 	: this.translate('streamreportdetail__collapse_all')
			}));
			this.addEvent('mouseleave', this.elements.collapseAllButton, $H({
				action	: 'hide_tooltip'
			}));

			this.elements.container.getElements('.item.unit').each(function(element) {
				var type = element.getElement('SPAN').get('class');
				if (type != 'TITAN_SHIELD') {
					this.addEvent('mouseenter', element, $H({
						action	: 'show_unittype_tooltip',
						type	: type,
						isOwner	: element.hasClass('isOwner')
					}));
					this.addEvent('mouseleave', element, $H({
						action	: 'hide_tooltip'
					}));
				}
			}.bindNew(this));
		}
	}
);
Imperion.Interface.Module.Endgame.Victory = new Class(
	{
		Extends : Imperion.Interface.Module.Root,
		
		/**
		 * scroll bar
		 * 
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,
		
		/**
		 * Endgame Victory class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Endgame Victory javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			this.parent(params, data, parentDialog, parentContext);
			this.refreshScrollBar();
		},
		
		/**
		 * refresh scrollbar
		 * 
		 * @returns {Void}
		 */
		refreshScrollBar: function() {
			if(this.scrollBar !== null) {
				this.scrollBar.clean();
				delete this.scrollBar;
			}
			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.bar, {});
			this.scrollBar.attachTo(this.elements.scroll, this.elements.content);
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			
			this.elements.scroll	= this.elements.container.getElement('.scrollContent');
			this.elements.bar		= this.elements.scroll.getElement('.scrollBar');
			this.elements.content	= this.elements.scroll.getElement('.content');
		}
	}	
);
Imperion.Interface.Module.Endgame.Screen = new Class(
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : Imperion.Translate,
		
		/**
		 * scroll bar
		 * 
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,

		/**
		 * Current displayed page
		 *
		 * @integer
		 */
		page : null,

		/**
		 * @type	{Imperion.Interface.Gui.Tooltip}
		 */
		tooltip : null,

		/**
		 * Endgame Victory class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Endgame Screen javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Screen}		parentContext	parent context
		 * @param		{Imperion.Interface.Gui.Tooltip}				tooltip
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip) {
			this.parent(params, data, parentDialog, parentContext);

			this.page		= data.page;
			this.tooltip	= tooltip;

			this.refreshScrollBar();
		},
		
		/**
		 * refresh scrollbar
		 * 
		 * @returns {Void}
		 */
		refreshScrollBar: function() {
			if(this.scrollBar !== null) {
				this.scrollBar.clean();
				delete this.scrollBar;
			}
			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll.bar, {});
			this.scrollBar.attachTo(this.elements.scroll.container, this.elements.scroll.content);
		},

		/**
		 * Requests the details for a selected alliance
		 *
		 * @param	int	id_alliance
		 *
		 * @returns	{Void}
		 */
		selectAlliance: function(id_alliance) {
			this.parentContext.loadUrl(Imperion.Util.Helper.url('endgame', 'index', 'screen'), {
				id_alliance		: id_alliance,
				page			: this.page
			});
		},

		/**
		 * Generic eventHandler
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');

			switch(action) {
				case 'select_alliance':
					var id_alliance = params.get('id_alliance');
					this.selectAlliance(id_alliance);
					break;

				case 'show_expected_winners_tooltip':
					this.tooltip.setText(this.translate('endgame__screen_expected_winners'));
					this.tooltip.show();
					break;

				case 'show_own_alliance_tooltip':
					this.tooltip.setText(this.translate('endgame__screen_own_alliance'));
					this.tooltip.show();
					break;

				case 'show_power_building_level_tooltip':
					this.tooltip.setText(this.translate('endgame__screen_power_building_level'));
					this.tooltip.show();
					break;

				case 'hide_tooltip':
					this.tooltip.hide();
					break;
			}
		},

		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.scroll = {};
			this.elements.scroll.container	= this.elements.container.getElement('.alienHomeworlds');
			this.elements.scroll.bar		= this.elements.scroll.container.getElement('.scrollBar');
			this.elements.scroll.content	= this.elements.scroll.container.getElement('.scrollContent');

			this.elements.container.getElement('.Imperion-Interface-Gui-RankingList .listBody').getElements('li').each(function(element) {
				this.addEvent('click', element, $H({
					action		: 'select_alliance',
					id_alliance	: element.id
				}));
			}.bindNew(this));


			this.addEvent('mouseover', this.elements.container.getElement('.Imperion-Interface-Gui-RankingList .expectedWinners'), $H({
				action		: 'show_expected_winners_tooltip'
			}));
			this.addEvent('mouseout', this.elements.container.getElement('.Imperion-Interface-Gui-RankingList .expectedWinners'), $H({
				action		: 'hide_tooltip'
			}));

			this.addEvent('mouseover', this.elements.container.getElement('.Imperion-Interface-Gui-RankingList .ownAlliance'), $H({
				action		: 'show_own_alliance_tooltip'
			}));
			this.addEvent('mouseout', this.elements.container.getElement('.Imperion-Interface-Gui-RankingList .ownAlliance'), $H({
				action		: 'hide_tooltip'
			}));

			this.elements.container.getElements('.alienHomeworlds .level').each(function(element) {
				this.addEvent('mouseover', element, $H({
					action		: 'show_power_building_level_tooltip'
				}));
				this.addEvent('mouseout', element, $H({
					action		: 'hide_tooltip'
				}));
			}.bindNew(this));
		}
	}	
);
Imperion.Interface.Module.Admiral.Techtree = new Class(
	/** @lends Imperion.Interface.Module.Admiral.Techtree.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		/**
		 * scroll bar
		 *
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollBar : null,

		/**
		 * the currentSkills i.e. the skills status after the last 'apply'
		 */
		currentSkills : null,

		/**
		 * if the user distributes skillpoints without apply,
		 * these changed skills are reflected here
		 */
		liveSkills : null,

		skillDependencies : null,

		/**
		 * the currentAvailableSkillpoints i.e. the currentAvailableSkillpoints after the last 'apply'
		 */
		currentAvailableSkillpoints : null,

		/**
		 * the live Available Skillpoints, will be resetted to the current Available Skillpoints, after 'clear'
		 */
		liveAvailableSkillpoints : null,

		/**
		 * storage for currently binded click events on a skillButton
		 *
		 * @var array
		 */
		currentlyBindedMouseClick : [],

		/**
		 * storage for currently binded mouseEnter Events
		 *
		 * @var array
		 */
		currentlyBindedMouseEnter : [],

		/**
		 * storage for currently binded mouseEnter Events
		 *
		 * @var array
		 */
		currentlyBindedMouseLeave : [],

		/**
		 * caches fulfilled Prerequisites, just for Performance
		 * is cleared after a reskill and clear
		 */
		fulfilledPrerequisites : [],

		/**
		 * tooltip for the skills
		 */
		htmlTooltip : null,

		/**
		 * Admiral Techtree
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		Handle Admiral Techtree
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, htmlTooltip) {
			this.parent(params, data, parentDialog, parentContext);
			this.htmlTooltip = htmlTooltip;
			this.initSkillData(data);

			this.refreshScrollBar();
			this.checkPrerequisites();
			this.elements.techtree.removeClass('hideContainer');
		},

		/**
		 * sets the initial Skill Data and clones it for the liveSkillData
		 *
		 * @param skillData
		 */
		initSkillData : function(skillData){
			this.currentSkills = skillData.skills;
			this.currentAvailableSkillpoints = skillData.skillPoints;
			this.initSkillLiveData();
			//this.initDependencyData();
		},

		/**
		 * inits the liveSkills
		 * clones the current Skill data
		 */
		initSkillLiveData : function(){
			//In EcmaScript5 could use Object.create(obj), dont know which browser support it.
			//so this Json Way to clone the object.
			this.liveSkills =  JSON.parse(JSON.stringify(this.currentSkills));
			this.liveAvailableSkillpoints = this.currentAvailableSkillpoints;
			this.setAvailableSkillPointsTo(this.liveAvailableSkillpoints);
		},

		/**
		 * sets and formats the available SkillPoints
		 * @param number
		 */
		setAvailableSkillPointsTo :function(number){
			this.elements.availableSkillPoints.set('text',Imperion.Util.Format.trailingZeroes(number));
		},

		/**
		 * initializes the dependencies array.
		 * the "opposite" of the prerequisites array
		 */
		initDependencyData : function(){
			this.skillDependencies = {};
			for(var i = this.liveSkills.length-1; i >= 0; i--) {
				var skill = this.liveSkills[i];
				var prerequisites = skill.prerequisites;
				if(!Imperion.Util.ObjectHelper.isObjectEmpty(prerequisites)){
					for(var j = prerequisites.length-1; j >= 0; j--) {
						var prequisiteSkillId = prerequisites[j];

						var dependencyArray = this.skillDependencies[prequisiteSkillId];
						if(dependencyArray){
							dependencyArray.push(i);
						}else{
							dependencyArray = [];
							dependencyArray.push(i);
							this.skillDependencies[prequisiteSkillId] = dependencyArray;
						}
					}
				}
			}
			console.dir(this.skillDependencies);
		},

		/**
		 * refresh scrollbar
		 *
		 * @returns {Void}
		 */
		refreshScrollBar: function() {
			if(this.scrollBar !== null) {
				this.scrollBar.clean();
				delete this.scrollBar;
			}
			this.scrollBar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.bar, {});
			this.scrollBar.attachTo(this.elements.scroll, this.elements.content);
			this.scrollBar.disable();
		},


		/**
		 * resets the distributed skill points
		 * dont confuse with reskill (the plus feature)
		 */
		clearSkills : function(){
			this.initSkillLiveData();
			this.reset();
			this.checkPrerequisites();
			this.disableButtons();
		},

		/**
		 * reseet skill Data
		 *
		 */
		clearData : function(){
			for(var i=this.data.skills.length-1; i>=0;i--) {
				var skill = this.data.skills[i];
				skill.currentLevel = 0;
			}
		},

		/**
		 * resets the complete tree to the 'Status Quo' i.e. the data after last apply
		 */
		reset : function(){
			for(var i=this.elements.skillButtons.length-1; i>=0;i--) {
				var skillButton = this.elements.skillButtons[i];
				//removeAllClickEvents
				if(this.currentlyBindedMouseClick[i]){
					this.removeEvent('click',skillButton,this.currentlyBindedMouseClick[i]);
				}
				//removeAllMouseEnterEvents
				if(this.currentlyBindedMouseEnter[i]){
					this.removeEvent('mouseenter',skillButton,this.currentlyBindedMouseEnter[i]);
				}
				//removeAllMouseLeaveEvents
				if(this.currentlyBindedMouseEnter[i]){
					this.removeEvent('mouseleave',skillButton,this.currentlyBindedMouseLeave[i]);
				}
				//disableAllButtons
				if(!skillButton.hasClass('disabled')){
					skillButton.addClass('disabled');
					this.setBlockedState(this.elements.buttonStates[i],skillButton.getElement('.skillLevel'));
				}
				//resetAllSkillPoints
				var skillId = skillButton.getProperty('skillid');
				skillButton.getElement('.skillLevel').set('text',this.liveSkills[skillId].currentLevel);
				//resetAvailableSkillPoints
				this.setAvailableSkillPointsTo(this.liveAvailableSkillpoints);
			}
			this.clearData();
			this.currentlyBindedMouseClick = [];
			this.currentlyBindedMouseEnter = [];
			this.currentlyBindedMouseLeave = [];
			this.fulfilledPrerequisites = [];
			this.elements.allTooltips = this.elements.container.getElement('.Imperion-Interface-Admiral-Techtree-Tooltip').clone();
		},

		/**
		 * checks the prerequisites for skills and enables/disables skills if necessary
		 */
		checkPrerequisites : function(){
			for(var i=this.elements.skillButtons.length-1; i >= 0; i--) {
				var skillButton = this.elements.skillButtons[i];
				var skillId = skillButton.getProperty('skillId');
				var liveSkill = this.liveSkills[skillId];
				if(this.isPrerequisiteFulfilled(liveSkill.prerequisites,this.liveSkills,skillId)){
					if(!this.currentlyBindedMouseClick[skillId]){
						this.addClickEventForButton(skillButton,skillId);
						this.addMouseEnterForButton(skillButton,skillId);
						skillButton.removeClass('disabled');
					}
					if(liveSkill.currentLevel > 0){
						try {
							skillButton.getElement('.techtreeStates');
							this.setEnabledWithPointsState(skillButton.getElement('.techtreeStates'),skillButton.getElement('.skillLevel'), liveSkill.currentLevel, liveSkill.maxLevel);
						} catch (err) {

						}


					}else if(liveSkill.currentLevel === 0){
						this.setEnabledState(skillButton.getElement('.techtreeStates'),skillButton.getElement('.skillLevel'));
					}
					this.updateTooltip(skillId,liveSkill,true);
				}else{
					this.addMouseEnterForButton(skillButton,skillId);
					this.updateTooltip(skillId,liveSkill,false);
				}
			}
		},

		/**
		 * @params	{Array} prerequisites -  the prerequisites for a skill
		 * @params  {Array} skills - all skills to check if a prerequisite is fulfilled
		 *
		 * @returns {Boolean}
		 */
		isPrerequisiteFulfilled : function(prerequisites, skills, skillId){
			if(this.fulfilledPrerequisites[skillId]){
				return this.fulfilledPrerequisites[skillId];
			}

			if(!Imperion.Util.ObjectHelper.isObjectEmpty(prerequisites)){
				for(var i=prerequisites.length-1; i>=0; i--) {
					var prequisiteSkillId = prerequisites[i];
					if(skills[prequisiteSkillId].currentLevel <= 0){
						this.fulfilledPrerequisites[skillId] = false;
						return false;
					}
				}
			}
			this.fulfilledPrerequisites[skillId] = true;
			return true;
		},

		setBlockedState : function(stateFrameElement,skillLevelElement){
			stateFrameElement.set('class','techtreeStates ICON_FRAME_STATE_LOCKED');
			skillLevelElement.addClass('hideContainer');
		},

		setEnabledState : function(stateFrameElement,skillLevelElement){
			stateFrameElement.set('class','techtreeStates ICON_FRAME_STATE_ENABLED');
			skillLevelElement.removeClass('hideContainer');
		},

		setEnabledWithPointsState : function(stateFrameElement,skillLevelElement, currentLevel, maxLevel){
			if (currentLevel < maxLevel) {
				stateFrameElement.set('class','techtreeStates ICON_FRAME_STATE_ENABLED_WITH_POINTS');
			} else {
				if (stateFrameElement.hasClass('techtreeStates ICON_FRAME_STATE_ENABLED_WITH_POINTS')) {
					stateFrameElement.removeClass('techtreeStates ICON_FRAME_STATE_ENABLED_WITH_POINTS')
					stateFrameElement.addClass('techtreeStates ICON_FRAME_STATE_LOCKED')
				}
			}
			skillLevelElement.removeClass('hideContainer');
		},

		/**
		 * Adds a click Event to a SkillButton Element
		 *
		 * @param skillButton
		 */
		addClickEventForButton : function(skillButton,skillId){
			if(!this.currentlyBindedMouseClick[skillId]){
				this.currentlyBindedMouseClick[skillId] = this.addEvent('click', skillButton, $H({
					action	: 'click',
					skill	: skillButton
				}));
			}
		},

		addMouseEnterForButton : function(skillButton,skillId){
			if(!this.currentlyBindedMouseEnter[skillId]){
				this.currentlyBindedMouseEnter[skillId] = this.addEvent('mouseenter', skillButton, $H({
					action	: 'show_tooltip',
					skillId : skillId
				}));

				this.currentlyBindedMouseLeave[skillId] = this.addEvent('mouseleave', skillButton, $H({
					action	: 'hide_tooltip',
					skillId : skillId
				}));
			}
		},

		/**
		 * callback after save request
		 *
		 * @params	{Object} params
		 *
		 * @returns {Void}
		 */
		afterRequestSave : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
			}
		},

		/**
		 * callback after reskill request
		 *
		 * @params	{Object} params
		 *
		 * @returns {Void}
		 */
		afterRequestReskill : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.initSkillData(rData);
				this.clearSkills();
				this.elements.plus.addClass('disabled')
			}
		},

		/**
		 * send request to apply the skill changes
		 *
		 * @returns {Void}
		 */
		requestSave : function(skillData) {
			var skillsToSave = this.prepareDataBeforeSaveSkills();
			Imperion.Util.Request.send(Imperion.Util.Helper.url('admiral', 'index', 'saveskills'), {skillData:skillsToSave}, this.afterRequestSave.bindNew(this));
		},

		/**
		 * send only the currentLevels of the skills.
		 */
		prepareDataBeforeSaveSkills : function(){
			var skillsToSave = [];
			for(var i=this.liveSkills.length-1; i>=0; i--) {
				skillsToSave[i] = {};
				skillsToSave[i].currentLevel = this.liveSkills[i].currentLevel;
			}
			return skillsToSave;
		},

		/**
		 * Skill Element in the Techtree was clicked
		 *
		 * @param skillElement
		 */
		skillClicked : function(skillElement){
			var skillId = skillElement.getProperty('skillid');
			var liveSkill = this.liveSkills[skillId];

			if(this.liveAvailableSkillpoints > 0 && (liveSkill.currentLevel+1) <= liveSkill.maxLevel){
				this.liveAvailableSkillpoints--;
				liveSkill.currentLevel++;
				skillElement.getElement('.skillLevel').set('text',liveSkill.currentLevel);
				//evtl. Farbe bei MaxLevel ändern
				this.setAvailableSkillPointsTo(this.liveAvailableSkillpoints);
				//just need to check prerequisites, when new Level is 1
				//killed if because of updateTooltip, find other way
//				if(liveSkill.currentLevel === 1){
				this.checkPrerequisites();
//				}

				skillButton = this.elements.skillButtons[skillId];

				this.setEnabledWithPointsState(skillButton.getElement('.techtreeStates'),skillButton.getElement('.skillLevel'), liveSkill.currentLevel, liveSkill.maxLevel);
				this.enableButtons();
				this.prepareTooltip(skillId);
			}

		},

		/**
		 * Disables the apply and clear button
		 */
		enableButtons : function(){
			this.elements.save.removeClass('disabled');
			this.elements.clear.removeClass('disabled');
		},

		/**
		 * Enables the apply and clear button
		 */
		disableButtons : function(){
			this.elements.save.addClass('disabled');
			this.elements.clear.addClass('disabled');
		},

		/**
		 * Updates a tooltip
		 *
		 * @param skillId id of the skill which should be updated
		 */
		updateTooltip : function(skillId, liveSkill, prerequisitesFulfilled){
			var skillTooltip = this.getSkillTooltipById(skillId);

			if(!prerequisitesFulfilled){
				skillTooltip.getElement('.prerequisites').removeClass('hideContainer');
				skillTooltip.getElement('.levelHeadline').addClass('hideContainer');
			}else{
				skillTooltip.getElement('.prerequisites').addClass('hideContainer');
				skillTooltip.getElement('.levelHeadline').removeClass('hideContainer');


				//show CurrentLevel only if level greater than 0
				//hmm tooltip will only be updated if a skill point is distributed, so ist should be at least 1
				//-> delete this if
				if(liveSkill.currentLevel > 0){
					skillTooltip.getElement('.currentLevel').removeClass('hideContainer');
				}

				if(liveSkill.currentLevel >= liveSkill.maxLevel){
					skillTooltip.getElement('.nextLevel').addClass('hideContainer');
					this.updateTooltipLastLine(skillTooltip,'maxLevelDescription');
				}else{
					this.updateTooltipLastLine(skillTooltip,'enabledDescription');
				}

				if(liveSkill.currentLevel == 0){
					skillTooltip.getElement('.currentLevel').addClass('hideContainer');
					skillTooltip.getElement('.nextLevel').removeClass('hideContainer');
				}

				var currentLevelBonus = liveSkill.bonus[liveSkill.currentLevel-1];
				var nextLevelBonus 	  = liveSkill.bonus[liveSkill.currentLevel];

				skillTooltip.getElement('.bonusCurrentLevel').set('text',currentLevelBonus);
				skillTooltip.getElement('.bonusNextLevel').set('text',nextLevelBonus);

				skillTooltip.getElement('.currlevel').set('text',liveSkill.currentLevel);
			}
		},

		/**
		 * Updates the last line in a tooltip:
		 * - Click to add an Ability Point
		 * - No way to put points here Dude
		 * - Max Skill Level reached
		 *
		 * @param skillTooltip
		 * @param goalDescription this className will be shown, all others get a hideContainer
		 */
		updateTooltipLastLine : function(skillTooltip,goalDescription){
			var lastLineElements = skillTooltip.getElements('.tooltipLastLine');
			var children = lastLineElements.getChildren()[0];
			for(var i=children.length-1; i >= 0; i--) {
				if(children[i].hasClass(goalDescription)){
					children[i].removeClass('hideContainer');
				}else{
					children[i].addClass('hideContainer');
				}
			}
		},

		/**
		 * handle Plus Feature reskill Button
		 */
		reskill : function(){
			if (!this.elements.plus.hasClass('disabled')) {
				Imperion.Util.Request.send(Imperion.Util.Helper.url('admiral', 'index', 'reskill'), {}, this.afterRequestReskill.bindNew(this));
			}
		},

		/**
		 * update the tooltip immediately after click.
		 */
		prepareTooltip :function(skillId){
			var skillTooltip = this.getClonedSkillTooltipById(skillId);
			skillTooltip.removeClass('hideContainer');
			this.htmlTooltip.setHtml(skillTooltip);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			var action = params.get('action');
			switch(action) {
				case 'save':
					if(!this.elements.save.hasClass('disabled')){
						this.requestSave();
					}
					break;
				case 'click':
					this.skillClicked(params.get('skill'));
					break;
				case 'clear':
					if(!this.elements.clear.hasClass('disabled')){
						this.clearSkills();
					}
					break;
				case 'plus':
					this.reskill();
					break;
				case 'show_tooltip':
					this.prepareTooltip(params.get('skillId'));
					this.htmlTooltip.show();
					break;
				case 'hide_tooltip':
					this.htmlTooltip.hide();
					break;
			}
		},

		/**
		 * called after closing the dialog
		 */
		clean : function(){
			this.htmlTooltip.hide();
		},

		getSkillTooltipById : function(skillId){
			return this.elements.allTooltips.getElement('.Tooltip-Skill-'+skillId);
			//evtl. nutzen bei Performance Problemen
			//return this.elements.allTooltips.children[skillId];
		},

		getClonedSkillTooltipById : function(skillId){
			return this.getSkillTooltipById(skillId).clone();
			//evtl. nutzen bei Performance Problemen
			//return this.getSkillTooltipById(skillId).clone();
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.techtree = this.elements.container.getElement('.Imperion-Interface-Module-Admiral-Techtree');

			this.elements.scroll	= this.elements.techtree.getElement('.scrollContent');
			this.elements.bar		= this.elements.scroll.getElement('.scrollBar');
			this.elements.content	= this.elements.scroll.getElement('.content');

			this.elements.availableSkillPoints = this.elements.techtree.getElement('.big');

			this.elements.save		= this.elements.techtree.getElement('.apply');
			this.addEvent('click', this.elements.save, $H({
				action : 'save'
			}));

			this.elements.clear		= this.elements.techtree.getElement('.clear');
			this.addEvent('click', this.elements.clear, $H({
				action : 'clear'
			}));

			this.elements.plus		= this.elements.techtree.getElement('.plus');
			this.addEvent('click', this.elements.plus, $H({
				action : 'plus'
			}));

			this.elements.skillButtons = this.elements.techtree.getElements('.techtreeButtons');
			this.elements.buttonStates = this.elements.techtree.getElements('.techtreeStates');

			this.elements.allTooltips = this.elements.container.getElement('.Imperion-Interface-Admiral-Techtree-Tooltip').clone();
		}
	}
);
Imperion.Interface.Module.Alliance.Index = new Class(
	/** @lends Imperion.Interface.Module.Alliance.Index.prototype */
	{
		Extends : Imperion.Interface.Module.Root,
		
		/**
		 * flag if create form is visible
		 * 
		 * @type	Boolean
		 */
		allianceCreateFormVisible : false,
		
		/**
		 * fx for choose container
		 * 
		 * @type	Fx.Morph
		 */
		chooseFX : null,
		
		/**
		 * fx for create container
		 * 
		 * @type	Fx.Moprh
		 */
		createFX : null,
		
		/**
		 * error fx
		 * 
		 * @type	Fx.Morph
		 */
		errorFX : null,
		
		/**
		 * timeout pointer for name
		 * 
		 * @type	Function
		 */
		timeoutName : null,
		
		/**
		 * timeout pointer for tag
		 * 
		 * @type	Function
		 */
		timeoutTag : null,
		
		/**
		 * ajax request running flag
		 * 
		 * @type	Boolean
		 */
		requestRunning : false,
		
		/**
		 * alliance index Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		alliance index handle javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext) {
			//
			this.parent(params, data, parentDialog, parentContext);
			//
			this.allianceCreateFormVisible	= false;
			this.requestRunning				= false;
		},
		
		/**
		 * clean module
		 * 
		 * @returns	{Void}
		 */
		clean : function() {
			this.parent();
		},
		
		/**
		 * show the alliance create form
		 * 
		 * @returns	{Void}
		 */
		showCreateForm : function() {
			if(!this.allianceCreateFormVisible) {
				this.elements.create.container.removeClass('hideContainer');
				this.elements.outer.setStyle('height', this.elements.create.container.getElement('.content').getDimensions().height + 120);
				this.chooseFX.start({
					opacity : 0
				});
				this.createFX.start({
					opacity : 1
				});
			}
		},
		
		/**
		 * fx create form complete callback
		 * 
		 *  @returns	{Void}
		 */
		createFxComplete : function() {
			this.elements.create.container.getElement('.bottom').removeClass('hideContainer');
		},
		
		/**
		 * show error
		 * 
		 * @param	{String}	error
		 * @param	{String}	field
		 * 
		 * @returns	{Void}
		 */
		showError : function(error, field) {
			var create = this.elements.create[field];
			var dimensions = create.getDimensions();
			var oldtext = create.get('text');
			if(dimensions.y === 0) {
				create.set('text', error);
				create.removeClass('hideContainer');
				create.morph({height : 23, borderWidth : 1});
			}else if(oldtext !== error){
				create.set('text', error);
			}
		},
		
		/**
		 * hide error
		 * 
		 * @param	{String}	field
		 * 
		 * @returns	{Void}
		 */
		hideError : function(field) {
			if(this.elements.create[field].getDimensions().y > 0) {
				this.elements.create[field].addClass('hideContainer');
				this.elements.create[field].setStyles({height : 0, borderWidth : 0});
			}
		},
				
		/**
		 * check input from alliance name
		 * 
		 * @returns	{Void}
		 */
		checkName : function() {
			var value = this.elements.create.name.get('value');
			Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'checkalliancename'), {
				name : value
			}, this.afterCheckName.bindNew(this));
		},
		
		/**
		 * callback after checkname request is send
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterCheckName : function(response) {
			var rData = response.getResponseData();
			if(rData.error && rData.error !== '') {
				this.showError(rData.error, 'errorName');
				this.elements.create.labelName.removeClass('valid');
				this.elements.create.labelName.addClass('invalid');
			}
			else {
				this.hideError('errorName');
				this.elements.create.labelName.removeClass('invalid');
				this.elements.create.labelName.addClass('valid');
			}
			this.checkSubmitPossible();
		},
		
		/**
		 * check input from alliance tag
		 * 
		 * @returns	{Void}
		 */
		checkTag : function() {
			var value = this.elements.create.tag.get('value');
			Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'checkalliancetag'), {
				name : value
			}, this.afterCheckTag.bindNew(this));
		},
		
		/**
		 * callback after checkTag request is send
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterCheckTag : function(response) {
			var rData = response.getResponseData();
			if(rData.error && rData.error !== '') {
				this.showError(rData.error, 'errorTag');
				this.elements.create.labelTag.removeClass('valid');
				this.elements.create.labelTag.addClass('invalid');
			}
			else {
				this.hideError('errorTag');
				this.elements.create.labelTag.removeClass('invalid');
				this.elements.create.labelTag.addClass('valid');
			}
			this.checkSubmitPossible();
		},
		
		/**
		 * check if request could be send
		 * 
		 * @returns	{Void}
		 */
		checkSubmitPossible : function() {
			var test1 = this.elements.create.labelName.hasClass('valid');
			var test2 = this.elements.create.labelTag.hasClass('valid');
			
			if(test1 && test2) {
				this.elements.create.send.removeClass('disabled');
			}
			else {
				this.elements.create.send.addClass('disabled');
			}
		},
		
		/**
		 * add new alliance
		 * 
		 * @param	{String}	name
		 * @param	{String}	tag
		 * 
		 * @returns	{Void}
		 */
		addNewAlliance : function(name, tag) {
			if(!this.requestRunning) {
				this.requestRunning = true;
				Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', 'Founding'), {
					name	: name,
					tag		: tag
				}, this.afterAddNewAlliance.bindNew(this));
			}
		},
		
		/**
		 * callback for adding new alliance
		 * 
		 * @paran	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
        afterAddNewAlliance : function(response) {
			var rData = response.getResponseData();
			if(rData.error && rData.error !== '') {
				this.checkName();
				this.checkTag();
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.parentDialog.closeDialog();
				this.getUser().setAllianceId(rData.allianceId);
				var allianceDialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_profile');
				var allianceProfile = Imperion.Interface.Dialog.Context.Factory.allianceProfile(allianceDialog, rData.allianceId);
				var forum = Imperion.Interface.Dialog.Context.Factory.forumIndex(allianceDialog, 1);
				allianceProfile.showContext();
			}
			this.requestRunning = false;
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'found_alliance':
					this.showCreateForm();
					break;
				case 'join_alliance':
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('rankingList');
					var playerStatistics = Imperion.Interface.Dialog.Context.Factory.playerStatistics(dialog, 'alliance');
					playerStatistics.showContext();
					break;
				case 'send_create':
					clearTimeout(this.timeoutName);
					clearTimeout(this.timeoutTag);
					if(!this.elements.create.send.hasClass('disabled')) {
						this.addNewAlliance(this.elements.create.name.get('value'), this.elements.create.tag.get('value'));
					}
					new Event(eventObject).stop();
					return false;
					break;
				case 'check_name':
					clearTimeout(this.timeoutName);
					this.timeoutName	= this.checkName.delay(300, this);
					break;
				case 'check_tag':
					clearTimeout(this.timeoutTag);
					this.timeoutTag		= this.checkTag.delay(300, this);
					break;
			}
		},
		
		/**
		 * load dom elements
		 * 
		 * @param	{Element}	container
		 * 
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);
			this.elements.outer	= this.elements.container.getElement('.Imperion-Interface-Module-Alliance-Global');
			this.elements.choose = {
				container	: this.elements.container.getElement('.Imperion-Interface-Module-Alliance-Choice')
			};
			this.elements.choose.buttonFound	= this.elements.choose.container.getElement('.found');
			this.elements.choose.buttonJoin		= this.elements.choose.container.getElement('.join');

			if(!this.elements.choose.buttonFound.hasClass('disabled')) {
				this.addEvent('click', this.elements.choose.buttonFound, $H({
					action : 'found_alliance'
				}));
			}
			if(!this.elements.choose.buttonJoin.hasClass('disabled')) {
				this.addEvent('click', this.elements.choose.buttonJoin, $H({
					action : 'join_alliance'
				}));
			}
			
			this.elements.create = {
				container	: this.elements.container.getElement('.Imperion-Interface-Module-Alliance-Create')
			};
			this.elements.create.send	= this.elements.container.getElement('.Imperion-Interface-Gui-Button');
			
			this.elements.create.name		= this.elements.create.container.getElement('.inputName');
			this.elements.create.labelName	= this.elements.create.name.getParent(); 
			this.elements.create.errorName	= this.elements.container.getElement('.errorName');
			this.elements.create.tag		= this.elements.create.container.getElement('.inputTag');
			this.elements.create.labelTag	= this.elements.create.tag.getParent();
			this.elements.create.errorTag	= this.elements.container.getElement('.errorTag');
			
			this.elements.create.container.setStyle('opacity', 0);
			//set morph
			this.chooseFX	= new Fx.Morph(this.elements.choose.container, {
				duration : 300,
				fps : 30,
				transition : Fx.Transitions.Quad
			});
			this.createFX	= new Fx.Morph(this.elements.create.container, {
				duration : 300,
				fps : 30,
				transition : Fx.Transitions.Quad
			});
			this.createFX.onComplete = this.createFxComplete.bindNew(this);
			//set events
			this.addEvent('click', this.elements.create.send, $H({
				action : 'send_create'
			}));
			this.addEvent('keyup', this.elements.create.name, $H({
				action	: 'check_name'
			}));
			this.addEvent('blur', this.elements.create.name, $H({
				action	: 'check_name'
			}));
			this.addEvent('keyup', this.elements.create.tag, $H({
				action	: 'check_tag'
			}));
			this.addEvent('blur', this.elements.create.tag, $H({
				action	: 'check_tag'
			}));
			/*
			this.errorFX	= new Fx.Morph(this.elements.create.error, {
				duration : 300,
				fps : 30,
				transition : Fx.Transitions.Quad
			});
			*/
		}
	}	
);
Imperion.Interface.Module.Alliance.Profile = new Class(
	/** @lends Imperion.Interface.Module.Alliance.Profile.prototype */
	{
		Extends : Imperion.Interface.Module.Root,

		Implements : Imperion.Translate,

		/**
		 * scroll lists
		 *
		 * @type	Array
		 */
		scrollLists : ['List', 'Desc'],

		/**
		 * scroll bar
		 *
		 * @type	Object|Imperion.Interface.Tools.ScrollBar
		 */
		scrollBars : null,

		/**
		 * ajax request running flag
		 *
		 * @type	Boolean
		 */
		requestRunning : false,

		/**
		 * is alliance leader
		 *
		 * @type	Boolean
		 */
		isLeader : null,

		/**
		 * leader Name; used to send an igm to this player
		 *
		 * @type	Boolean
		 */
		leaderName : null,

		/**
		 * is alliance member
		 *
		 * @type	Boolean
		 */
		isMember : null,

		/**
		 * currently highlight item
		 *
		 * @type	Number
		 */
		currentActiveItem : null,
		
		/**
		 * description edit mode 
		 * 
		 * @type	Boolean
		 */
		descriptionEditMode : false,

		/**
		 * alliance profile Class
		 *
		 * @augments	Imperion.Interface.Module.Root
		 * @class		alliance profile handle javascript
		 *
		 * @param		{Object}										params			params for module
		 * @param		{Object}										data			data from response
		 * @param		{Imperion.Interface.Dialog.Root}				parentDialog	parent dialog
		 * @param		{Imperion.Interface.Dialog.Context.Account}		parentContext	parent context
		 *
		 * @constructs
		 */
		initialize : function(params, data, parentDialog, parentContext, tooltip) {
			this.isLeader						= data.isLeader;
			this.leaderName						= data.leaderName;
			this.isMember						= data.isMember;
			//
			this.parent(params, data, parentDialog, parentContext);
			//
			this.requestRunning				= false;
			this.scrollBars					= {};
			this.currentActiveItem			= null;
			this.tooltip					= tooltip;
			
			//init scroll bars
			this.refreshScrollBar();
		},

		/**
		 * clean module
		 *
		 * @returns	{Void}
		 */
		clean : function() {
			this.parent();
		},
		
		/**
		 * refresh scrollbar
		 *
		 * @returns {Void}
		 */
		refreshScrollBar: function(scrollList) {
			for(var i = this.scrollLists.length - 1 ; i >= 0 ; i--)
			{
				if (scrollList === undefined || scrollList === this.scrollLists[i])
				{
					if(this.scrollBars[this.scrollLists[i]] !== null && this.scrollBars[this.scrollLists[i]] !== undefined)
					{
						this.scrollBars[this.scrollLists[i]].clean();
						delete this.scrollBars[this.scrollLists[i]];
					}
					this.scrollBars[this.scrollLists[i]]		= Imperion.Interface.Tools.Factory.scrollbar(this.elements.scroll[this.scrollLists[i]].bar, {});
					this.scrollBars[this.scrollLists[i]].attachTo(this.elements.scroll[this.scrollLists[i]].outer, this.elements.scroll[this.scrollLists[i]].inner);
				}
			}
		},

		/**
		 * show admin menu
		 *
		 * @param	{Number}	itemId
		 *
		 * @returns	{Void}
		 */
		showAdminMenu : function(itemId) {
			if(this.currentActiveItem !== null) {
				this.hideAdminMenu();
			}
			this.currentActiveItem = itemId;
			this.elements.list[this.currentActiveItem].panel.removeClass('hideContainer');
		},

		/**
		 * hide active admin menu
		 *
		 * @returns	{Void}
		 */
		hideAdminMenu : function() {
			this.elements.list[this.currentActiveItem].panel.addClass('hideContainer');
			this.currentActiveItem = null;
		},

		/**
		 * show invite confirmation Box
		 *
		 * @returns {void}
		 */
		showAllianceEventBox : function(headline, text, playerId, callback, firstButtonText, secondButtonText) {
			if (!$chk(firstButtonText)) {
				var firstButtonText = this.translate('default__no');
			}
			if (!$chk(secondButtonText)) {
				var secondButtonText = this.translate('default__yes');
			}
			var eventBoxData = {
				type : 'confirm',
				headline : headline,
				content : text,
				image : undefined,
				firstButtonText :  firstButtonText,
				firstButtonCallback : null,
				secondButtonText :  secondButtonText,
				secondButtonCallback : callback.bindNew(this,playerId)
			};

			var eventBox = Imperion.Interface.Factory.eventBox();
			eventBox.setEventBox(eventBoxData);
			eventBox.showEventBox();
		},

		/**
		 * callback to refresh the whole dialog
		 *
		 * @paran	{Imperion.Util.Response}	response
		 *
		 * @returns	{Void}
		 */
		refreshWholeDialog : function(response) {
			var rData = response.getResponseData();
			if(rData.error && rData.error !== '') {
				this.handleErrorResponse(rData);
			}else {
				this.parentContext.loadUrl();
			}
			this.requestRunning = false;
		},

		/**
		 * callback for leave and dissolve alliance
		 *
		 * @paran	{Imperion.Util.Response}	response
		 *
		 * @returns	{Void}
		 */
		afterAllianceLeaveRequest : function(response) {
			var rData = response.getResponseData();
			if(rData.error && rData.error !== '') {
				this.handleErrorResponse(rData);
			}else {
				this.parentDialog.closeDialog();
				this.getUser().setAllianceId(0);
			}
			this.requestRunning = false;
		},
		
		/**
		 * shows eventBox if error occured
		 *
		 * @param rData
		 */
		handleErrorResponse : function(rData){
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		},

		/**
		 * handles leaving the alliance
		 *
		 * @returns	{Void}
		 */
		leaveAlliance : function(){
			if (this.elements.leaveButtonLink.hasClass('dissolve')) {
				this.showAllianceEventBox(null,this.translate('alliance__confirmation_dialog_dissolve_text'),null,this.doLeaveAlliance,this.translate('default__cancel'), this.translate('alliance__confirmation_dialog_dissolve_button'));
			} else {
				this.showAllianceEventBox(null,this.translate('alliance__confirmation_dialog_leave_text'),null,this.doLeaveAlliance,this.translate('default__cancel'),this.translate('alliance__confirmation_dialog_leave_alliance'));
			}
		},

		/**
		 * handles removing a player from the alliance
		 *
		 * @param integer accountId
		 *
		 * @returns	{Void}
		 */
		removePlayer : function(accountId){
			this.showAllianceEventBox(this.translate('alliance__confirmation_dialog_remove_member_headline'), this.translate('alliance__confirmation_dialog_remove_member_text'), accountId, this.doRemovePlayer);
		},

		/**
		 * handles removing a pending player from the alliance
		 *
		 * @param integer accountId
		 *
		 * @returns	{Void}
		 */
		removePendingPlayer : function(accountId){
			this.showAllianceEventBox(this.translate('alliance__confirmation_dialog_remove_invited_headline'), this.translate('alliance__confirmation_dialog_remove_invited_text'), accountId, this.doRemovePendingPlayer);
		},

		/**
		 * changes the leader of the alliance
		 *
		 * @param deleteButtonElement clicked element
		 */
		changeLeader : function(makeLeaderButtonElement){
			var playerId = makeLeaderButtonElement.get('playerId');
			this.showAllianceEventBox(this.translate('alliance__confirmation_dialog_change_leader_headline'),this.translate('alliance__confirmation_dialog_change_leader_text'),playerId,this.doChangeLeader);
		},

		/**
		 * remove player
		 */
		doRemovePlayer : function(){
			this.sendAllianceRequest('removefromalliance',{'playerId': arguments[0]},this.refreshWholeDialog);
		},

		/**
		 * remove pending player
		 */
		doRemovePendingPlayer : function(){
			this.sendAllianceRequest('removependingfromalliance',{'playerId': arguments[0]},this.refreshWholeDialog);
		},

		/**
		 * send leave alliance request
		 */
		doLeaveAlliance : function(){
			this.sendAllianceRequest('leavealliance',{},this.afterAllianceLeaveRequest);
		},

		/**
		 * send change leader request
		 */
		doChangeLeader : function(){
			this.sendAllianceRequest('changeleader',{'newLeaderId' : arguments[0]},this.refreshWholeDialog);
		},

		/**
		 * send request to backend
		 *
		 * @param action controllerActionName
		 * @param params post parameter
		 * @param callback method which is called after request is finished
		 */
		sendAllianceRequest : function(action, params, callback){
			if(!this.requestRunning) {
				this.requestRunning = true;
				Imperion.Util.Request.send(Imperion.Util.Helper.url('alliance', 'index', action), params, callback.bindNew(this));
			}
		},

		/**
		 * starts the edit mode
		 * 
		 * @return void
		 */
		startDescriptionEditMode : function() {
			this.descriptionEditMode = true;
			
			var descContent = this.elements.description.cleanDesc.get('html');
			this.elements.description.textarea.set('value', descContent);
			
			this.elements.description.scrollContainer.addClass('hideContainer');
			this.elements.description.editButton.addClass('hideContainer');
			this.elements.description.container.addClass('editMode');
			this.elements.description.modeDescription.addClass('hideContainer');
			this.elements.description.acceptButton.removeClass('hideContainer');
			this.elements.description.discardButton.removeClass('hideContainer');
			this.elements.description.textarea.removeClass('hideContainer');
			this.elements.description.modeEdit.removeClass('hideContainer');
			
			this.elements.description.textarea.focus();
		},
		
		/**
		 * leaves the edit mode
		 * 
		 * @return void
		 */
		leaveDescriptionEditMode : function() {
			this.descriptionEditMode = false;
			
			this.elements.description.scrollContainer.removeClass('hideContainer');
			this.elements.description.editButton.removeClass('hideContainer');
			this.elements.description.container.removeClass('editMode');
			this.elements.description.modeDescription.removeClass('hideContainer');
			this.elements.description.acceptButton.addClass('hideContainer');
			this.elements.description.discardButton.addClass('hideContainer');
			this.elements.description.textarea.addClass('hideContainer');
			this.elements.description.modeEdit.addClass('hideContainer');
		},
		
		/**
		 * discard new description
		 * 
		 * @return void
		 */
		discardDescription : function() {
			this.leaveDescriptionEditMode();
		},
		
		/**
		 * accept new description
		 *  
		 * @return void
		 */
		acceptDescription : function() {
			var descTextarea = this.elements.description.textarea.get('value');
			this.sendAllianceRequest('savedescription', {'description' : descTextarea}, this.refreshWholeDialog);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			switch(action) {
				case 'show_admin_menu':
					this.showAdminMenu(params.get('listItem'));
					break;
				case 'hide_admin_menu':
					this.hideAdminMenu(params.get('listItem'));
					break;
				case 'click_admin_button':
					break;
				case 'show_edit_description':
					if (this.descriptionEditMode === false)
					{
						this.elements.description.editButton.removeClass('hideContainer');
					}
					break;
				case 'hide_edit_description':
					if (this.descriptionEditMode === false)
					{
						this.elements.description.editButton.addClass('hideContainer');
					}
					break;
				case 'start_description_edit_mode':
					this.startDescriptionEditMode();
					break;
				case 'accept_description':
					this.acceptDescription();
					break;
				case 'discard_description':
					this.discardDescription();
					break;
				case 'leave_alliance':
					if (!this.elements.leaveButtonLink.hasClass('disabled')) {
						this.leaveAlliance();
					} else {
						eventObject.stop();
					}
					break;
				case 'join_alliance':
					this.mailHandle = Imperion.Interface.Igm.Factory.handle();
					this.mailHandle.alliance(this.leaderName);
					break;
				case 'remove_player':
					this.removePlayer(eventObject.target.get('playerId'));
					break;
				case 'remove_pending_player':
					this.removePendingPlayer(eventObject.target.get('playerId'));
					break;
				case 'change_leader':
					this.changeLeader(eventObject.target);
					break;
				case 'show_leave_tooltip':
					this.tooltip.setText(this.translate('alliance__leader_cant_leave_alliance_with_members'));
					this.tooltip.show();
					break;
				case 'hide_leave_tooltip':
					this.tooltip.hide();
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @param	{Element}	container
		 *
		 * @returns {Void}
		 */
		loadElements : function(container) {
			this.parent(container);

			this.elements.scroll = {};
			for(var i = this.scrollLists.length - 1 ; i >= 0 ; i--) {
				this.elements.scroll[this.scrollLists[i]]	= {
					bar		: this.elements.container.getElement('.scroll'+this.scrollLists[i]+'Bar'),
					inner	: this.elements.container.getElement('.scroll'+this.scrollLists[i]+'Inner'),
					outer	: this.elements.container.getElement('.scroll'+this.scrollLists[i]+'Outer')
				};
			}
			//if leader, load list elements
			if(this.isLeader) {
				this.elements.description = {};
				this.elements.description.container			= this.elements.container.getElement('.descriptionBox');
				this.elements.description.scrollContainer	= this.elements.description.container.getElement('.scrollContainer');
				this.elements.description.cleanDesc			= this.elements.description.scrollContainer.getElement('.cleanDesc');
				this.elements.description.textarea			= this.elements.description.container.getElement('textarea');
				this.elements.description.panel				= this.elements.description.container.getElement('.adminPanel');
				this.elements.description.modeEdit			= this.elements.description.panel.getElement('.mode.edit');
				this.elements.description.modeDescription	= this.elements.description.panel.getElement('.mode.description');
				this.elements.description.editButton		= this.elements.description.panel.getElement('UL .edit');
				this.elements.description.acceptButton		= this.elements.description.panel.getElement('UL .accept');
				this.elements.description.discardButton		= this.elements.description.panel.getElement('UL .discard');
				this.addEvent('mouseenter', this.elements.description.container, $H({action : 'show_edit_description'}));
				this.addEvent('mouseleave', this.elements.description.container, $H({action : 'hide_edit_description'}));
				this.addEvent('click', this.elements.description.editButton, $H({action : 'start_description_edit_mode'}));
				this.addEvent('click', this.elements.description.acceptButton, $H({action : 'accept_description'}));
				this.addEvent('click', this.elements.description.discardButton, $H({action : 'discard_description'}));
				//load table elements
				this.elements.list	= [];
				var listItems		= this.elements.container.getElements('.adminRow');
				for(var i = listItems.length - 1 ; i >= 0 ; i--) {
					this.elements.list[i] = {
						container	: listItems[i],
						panel		: listItems[i].getElement('.adminPanel')
					};
					this.addEvent('mouseenter', this.elements.list[i].container , $H({
						action		: 'show_admin_menu',
						listItem	: i
					}));
					this.addEvent('click', this.elements.list[i].container.getElement('.delete.remove') , $H({
						action		: 'remove_player'
					}));
					this.addEvent('click', this.elements.list[i].container.getElement('.delete.pending') , $H({
						action		: 'remove_pending_player'
					}));
					this.addEvent('click', this.elements.list[i].container.getElement('.leader') , $H({
						action		: 'change_leader'
					}));
					this.addEvent('mouseleave', this.elements.list[i].container , $H({
						action		: 'hide_admin_menu',
						listItem	: i
					}));
				}
			}

			if(this.isMember){
				this.elements.leaveButton		= this.elements.container.getElement('.leaveButton');
				this.elements.leaveButtonLink	= this.elements.leaveButton.getElement('a');
				this.addEvent('click', this.elements.leaveButton, $H({action : 'leave_alliance'}));
				if (this.isLeader && this.elements.leaveButtonLink.hasClass('disabled')) {
					this.addEvent('mouseenter', this.elements.leaveButton, $H({action : 'show_leave_tooltip'}));
					this.addEvent('mouseleave', this.elements.leaveButton, $H({action : 'hide_leave_tooltip'}));
				}
			}else{
				this.elements.joinButton = this.elements.container.getElement('.joinButton');
				this.addEvent('click', this.elements.joinButton, $H({action : 'join_alliance'}));
			}
		}
	}
);
Imperion.Interface.Sidebar.Content = new Class({
	
	/**
	 * area
	 * 
	 * @var Imperion.Interface.Area
	 */
	area : null,
	
	/**
	 * loadedModule loaded module
	 * 
	 * @var mixed
	 */
	loadedModule : null,
	
	/**
	 * parent sidebar
	 * 
	 * @var mperion.Interface.Sidebar.Handle
	 */
	parentSidebar : null,
	
	/**
	 * prepare the sidebar content handle
	 * 
	 * @param Imperion.Interface.Sidebar.Handle parentSidebar
	 * 
	 * @return void
	 */
	initialize : function(parentSidebar) {
		//
		this.parentSidebar = parentSidebar;
		//
		this.loadedModule = null;
		//set content area
		this.area = Imperion.Interface.Factory.area('SidebarContent');
		this.area.setDestroyCallback(this.clean.bindNew(this));
	},
	
	/**
	 * callback after request
	 * 
	 * @param Imperion.util.Response response
	 * @param Function module
	 * 
	 * @return void
	 */
	loadModule : function(response, createMethod) {
		this.area.setContent(response);
		this.loadedModule = createMethod(response.getResponseData());
		this.loadedModule.attach('loadedModule', this.parentSidebar);
	},
	
	/**
	 * clean the content
	 * 
	 * @return void
	 */
	clean : function() {
		if(this.loadedModule) {
			if(!this.loadedModule.clean) {
				throw '//ERROR HANDLING NO CLEAN METHOD ON MODULE -> MUST HAVE';
			}
			this.loadedModule.clean();
			delete this.loadedModule;
			this.loadedModule = null;
		}
	}
});
/**
 * Factory for Gui Elements
 */
Imperion.Interface.Sidebar.Factory = new Class.Singleton({
	
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : {
		content : null,
		data	: {
			root		: null,
			building	: null,
			innerview	: null,
			ship 		: null,
			turret 		: null
		},
		handle	: null,
		grid 	: null,
		tabs 	: null
	},
	
	/**
	 * prepare the factory
	 *
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			content : null,				
			data	: {
				root		: null,
				building	: null,
				innerview	: null,
				ship 		: null,
				turret 		: null
			},				
			handle	: null,
			grid 	: null,
			tabs 	: null
		};
	},
	
	/**
	 * return the handle instance
	 *
	 * @param	{Object}	preload
	 *
	 * @return Imperion.Interface.Sidebar.Handle
	 */
	handle : function(preload) {
		if(!this.storage.handle) {
			this.storage.handle = new Imperion.Interface.Sidebar.Handle(this.grid(), this.tabs(), {
				building : this.dataBuilding(),
				innerview : this.dataInnerview(),
				ship : this.dataShip(),
				turret : this.dataTurret()
			}, Imperion.Factory.registry().get('user'), preload);
		}
		return this.storage.handle;
	},
	
	/**
	 * return the grid instance
	 *
	 * @return Imperion.Interface.Sidebar.Grid
	 */
	grid: function() {
		if(!this.storage.grid) {
			this.storage.grid = new Imperion.Interface.Sidebar.Grid();
		}
		return this.storage.grid;
	},
	
	/**
	 * create an instance from grid item
	 * 
	 * @param Imperion.Interface.Sidebar.Grid parentGrid
	 * @param Object options
	 * 
	 * @return Imperion.Interface.Sidebar.GridItem
	 */
	gridItem : function(parentGrid, options) {
		return new Imperion.Interface.Sidebar.GridItem(parentGrid, options);
	},
	
	/**
	 * return the tabs instance
	 *
	 * @return Imperion.Interface.Sidebar.Tabs
	 */
	tabs: function() {
		if(!this.storage.tabs) {
			this.storage.tabs = new Imperion.Interface.Sidebar.Tabs(Imperion.Interface.Gui.Factory.tooltip());
		}
		return this.storage.tabs;
	},
	
	/**
	 * instance from data building
	 * 
	 * @type Imperion.Interface.Sidebar.Data.Building
	 */
	dataBuilding : function() {
		if(!this.storage.data.building) {
			this.storage.data.building = new Imperion.Interface.Sidebar.Data.Building();
		}
		return this.storage.data.building;
	},
	
	/**
	 * instance from data ship
	 * 
	 * @type Imperion.Interface.Sidebar.Data.Ship
	 */
	dataShip : function() {
		if(!this.storage.data.ship) {
			this.storage.data.ship = new Imperion.Interface.Sidebar.Data.Ship();
		}
		return this.storage.data.ship;
	},
	
	/**
	 * instance from data turret
	 * 
	 * @type Imperion.Interface.Sidebar.Data.Turret
	 */
	dataTurret : function() {
		if(!this.storage.data.turret) {
			this.storage.data.turret = new Imperion.Interface.Sidebar.Data.Turret();
		}
		return this.storage.data.turret;
	},
	
	/**
	 * instance from data building
	 * 
	 * @type Imperion.Interface.Sidebar.Data.InnerView
	 */
	dataInnerview : function() {
		if(!this.storage.data.innerview) {
			this.storage.data.innerview = new Imperion.Interface.Sidebar.Data.InnerView();
		}
		return this.storage.data.innerview;
	},
	
	/**
	 * return the content handle instance
	 *
	 * @param Imperion.Interface.Sidebar.Handle parentSidebar
	 *
	 * @return Imperion.Interface.Sidebar.Content
	 */
	content: function(parentSidebar) {
		if(!this.storage.content) {
			this.storage.content = new Imperion.Interface.Sidebar.Content(parentSidebar);
		}
		return this.storage.content;
	},
	
	/**
	 * building inner view
	 * 
	 * @param {Object} buildingData
	 * 
	 * @type Imperion.Interface.Sidebar.Building
	 */
	innerview : function(buildingData) {
		return new Imperion.Interface.Sidebar.InnerView(buildingData, this.handle(), {
			metal 	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
			crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
			tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium'),
			energy	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Energy')
		}, Imperion.Interface.Factory.planetSurface(), Imperion.Interface.Gui.Factory.tooltip(),
		Imperion.Interface.Infobox.Factory.buildingInside());
	},
	
	/**
	 * create data
	 * 
	 * @return Imperion.Interface.Sidebar.Create.Data
	 */
	createData : function() {
		return new Imperion.Interface.Sidebar.Create.Data();
	},
	
	/**
	 * return a create building instance
	 * 
	 * @return Object responseData
	 * 
	 * @return Imperion.Interface.Sidebar.Create.Building
	 */
	createBuilding : function(responseData) {
		return new Imperion.Interface.Sidebar.Create.Building(responseData, {
			metal	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
			crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
			tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium'),
			energy	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Energy')
		}, this.handle(), Imperion.Interface.Gui.Factory.tooltip(),Imperion.Interface.Factory.planetSurface());
	},
	
	/**
	 * return a create ship instance
	 * 
	 * @return Object responseData
	 * 
	 * @return Imperion.Interface.Sidebar.Create.Ship
	 */
	createShip : function(responseData) {
		return new Imperion.Interface.Sidebar.Create.Unit(UNIT_TYPE_SHIP, responseData, {
			metal	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
			crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
			tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium'),
			energy	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Energy')
		}, this.handle(), Imperion.Interface.Gui.Factory.tooltip(), Imperion.Util.Factory.globalEvents());
	},
	
	/**
	 * return a create turret instance
	 * 
	 * @return Object responseData
	 * 
	 * @return Imperion.Interface.Sidebar.Create.Turret
	 */
	createTurret : function(responseData) {
		return new Imperion.Interface.Sidebar.Create.Unit(UNIT_TYPE_TURRET, responseData, {
			metal	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
			crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
			tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium'),
			energy	: Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Energy')
		}, this.handle(), Imperion.Interface.Gui.Factory.tooltip(), Imperion.Util.Factory.globalEvents());
	},
	
	/**
	 * return the create building drag instance
	 * 
	 * @param Element ghost
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Create.Building parentHandle
	 * 
	 * @return Imperion.Interface.Sidebar.Create.BuildingDrag
	 */
	createBuildingDrag : function(ghost, options, parentHandle) {
		return new Imperion.Interface.Sidebar.Create.BuildingDrag(ghost, options, parentHandle);
	},
	
	/**
	 * queue data
	 * 
	 * @return Imperion.Interface.Sidebar.Create.Data
	 */
	queueData : function() {
		return new Imperion.Interface.Sidebar.Queue.Data();
	},
	
	/**
	 * return a queue building instance
	 * 
	 * @param Object responseData
	 * 
	 * @return Imperion.Interface.Sidebar.Queue.Building
	 */
	queueBuilding : function(responseData) {
		return new Imperion.Interface.Sidebar.Queue.Building(responseData, this.handle(), Imperion.Util.Factory.secondTimer(), Imperion.Interface.Factory.planetSurface(), Imperion.Interface.Gui.Factory.tooltip());
	},
	
	/**
	 * return a queue ship instance
	 * 
	 * @param Object responseData
	 * 
	 * @return Imperion.Interface.Sidebar.Queue.Ship
	 */
	queueShip : function(responseData) {
		return new Imperion.Interface.Sidebar.Queue.Ship(responseData, this.handle(), Imperion.Util.Factory.secondTimer(), Imperion.Interface.Factory.planetSurface());
	},
	
	/**
	 * return a queue turret instance
	 * 
	 * @param Object responseData
	 * 
	 * @return Imperion.Interface.Sidebar.Queue.Turret
	 */
	queueTurret : function(responseData) {
		return new Imperion.Interface.Sidebar.Queue.Turret(responseData, this.handle(), Imperion.Util.Factory.secondTimer(), Imperion.Interface.Factory.planetSurface());
	},
	
	/**
	 * return an instance from queue building item
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Building parentHandle
	 * @param int position
	 * 
	 * @return Imperion.Interface.Sidebar.Queue.BuildingItem
	 */
	queueBuildingItem : function(options, parentHandle, position) {
		return new Imperion.Interface.Sidebar.Queue.BuildingItem(options, parentHandle, position);
	},
	
	/**
	 * return an instance from queue ship item
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Ship parentHandle
	 * @param int position
	 * 
	 * @return Imperion.Interface.Sidebar.Queue.ShipItem
	 */
	queueShipItem : function(options, parentHandle, position) {
		return new Imperion.Interface.Sidebar.Queue.ShipItem(options, parentHandle, position);
	},
	
	/**
	 * return an instance from queue turret item
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Turret parentHandle
	 * @param int position
	 * 
	 * @return Imperion.Interface.Sidebar.Queue.TurretItem
	 */
	queueTurretItem : function(options, parentHandle, position) {
		return new Imperion.Interface.Sidebar.Queue.TurretItem(options, parentHandle, position);
	},
	
	/**
	 * create a map planet list instance
	 * 
	 * @return Imperion.Interface.Sidebar.Map.PlanetList
	 */
	mapPlanetList : function() {
		return new Imperion.Interface.Sidebar.Map.PlanetList();
	},
	
	/**
	 * create a map planet list item
	 * 
	 * @param Imperion.Interface.Sidebar.Map.PlanetList parentList
	 * 
	 * @return Imperion.Interface.Sidebar.Map.PlanetListItem 
	 */
	mapPlanetListItem : function(parentList) {
		return new Imperion.Interface.Sidebar.Map.PlanetListItem(parentList);
	},
	
	/**
	 * create a map galaxy list instance
	 * 
	 * @return Imperion.Interface.Sidebar.Map.GalaxyList
	 */
	mapGalaxyList : function() {
		return new Imperion.Interface.Sidebar.Map.GalaxyList();
	},
	
	/**
	 * get building by type#
	 * 
	 * @param	{String}								buildingType
	 * @param	{Object}								specialData
	 * @param	{Imperion.Interface.Sidebar.Innerview}	innerview
	 * 
	 * @returns	{Imperion.Interface.Sidebar.Buildings.*}
	 */
	buildingByType : function(buildingType, specialData, innerview) {
		switch(buildingType) {
			case 'SHIELD_GENERATOR':
				specialData.counter.template = false;
				return new Imperion.Interface.Sidebar.Buildings.ShieldGenerator(specialData, innerview, Imperion.Interface.Resource.Factory.counter(specialData.counter, RESOURCE_TYPE_SHIELD));
				break;
			case 'HANGAR':
				return new Imperion.Interface.Sidebar.Buildings.Hangar(specialData, innerview);
				break;
			case 'ARMS_FACTORY':
				return new Imperion.Interface.Sidebar.Buildings.ArmsFactory(
					specialData, 
					innerview, 
					Imperion.Factory.bootstrap().getModule('Imperion.Interface.Surface.Turrets')
				);
				break;
			case 'RESOURCE_CACHE':
				return new Imperion.Interface.Sidebar.Buildings.ResourceCache(specialData, innerview, {
					metal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
					crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
					tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium')
				}, Imperion.Util.Factory.secondTimer());
				break;
		}
	}
});
Imperion.Interface.Sidebar.Handle = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Module, Imperion.Util.Checkpoint],

	/**
	 * the grid
	 *
	 * @var Imperion.Interface.Sidebar.Grid
	 */
	grid : null,

	/**
	 * the tabs
	 *
	 * @var Imperion.Interface.Sidebar.Tabs
	 */
	tabs : null,

	/**
	 * data handler
	 *
	 * @var {Object}
	 */
	data : null,

	/**
	 * preload data
	 *
	 * @type Object
	 */
	preload : null,

	/**
	 * content handle
	 *
	 * @type Imperion.Interface.Sidebar.Content
	 */
	content : null,

	/**
	 * grid visible flag
	 *
	 * @type Boolean
	 */
	gridVisible : true,

	/**
	 * request running flag
	 *
	 * @type	Boolean
	 */
	requestRunning : false,

	/**
	 * prepare the handle
	 *
	 * @param Imperion.Interface.Sidebar.Grid grid
	 * @param Imperion.Interface.Sidebar.Tabs tabs
	 * @param {Object} data
	 * @param Imperion.Data.User currentUser
	 * @param	{Object}	preload
	 *
	 * @return void
	 */
	initialize : function(grid, tabs, data, currentUser, preload) {
		//
		this.grid = grid;
		this.grid.attach('handle', this);
		//
		this.tabs = tabs;
		this.tabs.attach('handle', this);
		//
		this.data = data;
		this.preload = preload;
		this.setUser(currentUser);
		//
		this.content = Imperion.Interface.Sidebar.Factory.content(this);
		this.requestRunning = false;
		//
		this.loadElements();
		//
		this.tabs.setTabBuildingActive();
		this.tabs.setTabCivilActive();
		//
		/*
		this.onTabChanged({
			top : SIDEBAR_TAB_TOP_BUIDLINGS,
			bot : SIDEBAR_TAB_BOT_CIVIL
		});
		*/
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'TabShowBuilding':
			case 'TabShowShips':
			case 'TabShowCivil':
			case 'TabShowMilitary':
				if(this.gridVisible) {
					return this.tabs.isCheckpointResolved(ident, params, questObj);
				}
				return false;
				break;
			case 'GridItemActive':
				if(this.gridVisible) {
					return this.grid.isCheckpointResolved(ident, params, questObj);
				}
				return false;
				break;
			case 'InnerViewClose':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.InnerView') {
					return false;
				}
				return true;
				break;
			case 'CreateBuildingStart':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Building') {
					return this.content.loadedModule.isCheckpointResolved(ident, params, questObj);
				}
				return true;
				break;
			case 'EnterShipAmount':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Unit' && this.content.loadedModule.options.unit === UNIT_TYPE_SHIP) {
					return this.content.loadedModule.isCheckpointResolved(ident, params, questObj);
				}
				return true;
				break;
			case 'CreateShipsBuildStart':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Unit' && this.content.loadedModule.options.unit === UNIT_TYPE_SHIP) {
					return this.content.loadedModule.isCheckpointResolved(ident, params, questObj);
				}
				return true;
				break;
			case 'InnerViewUpgrade':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.InnerView') {
					return this.content.loadedModule.isCheckpointResolved(ident, params, questObj);
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Handle ident not exist : ' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'TabShowBuilding':
			case 'TabShowShips':
			case 'TabShowCivil':
			case 'TabShowMilitary':
				this.tabs.activateCheckpoint(ident, params, questObj);
				break;
			case 'GridItemActive':
				this.grid.activateCheckpoint(ident, params, questObj);
				break;
			case 'InnerViewClose':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset : {
						x : 30
					},
					rotation	: 'arrowLeft'
				});
				highlight.appendOver(this.content.loadedModule.elements.close);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'CreateBuildingStart':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Building') {
					this.content.loadedModule.activateCheckpoint(ident, params, questObj);
				}
				break;
			case 'EnterShipAmount':
				this.content.loadedModule.activateCheckpoint(ident, params, questObj);
				break;
			case 'CreateShipsBuildStart':
				this.content.loadedModule.activateCheckpoint(ident, params, questObj);
				break;
			case 'InnerViewUpgrade':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.InnerView') {
					this.content.loadedModule.activateCheckpoint(ident, params, questObj);
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Handle ident not exist : ' + ident;
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'TabShowBuilding':
			case 'TabShowShips':
			case 'TabShowCivil':
			case 'TabShowMilitary':
				this.tabs.removeCheckpoint(ident);
				break;
			case 'GridItemActive':
				this.grid.removeCheckpoint(ident);
				break;
			case 'InnerViewClose':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			case 'CreateBuildingStart':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Building') {
					this.content.loadedModule.removeCheckpoint(ident, refreshQuests);
				}
				break;
			case 'EnterShipAmount':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Unit' && this.content.loadedModule.options.unit === UNIT_TYPE_SHIP) {
					this.content.loadedModule.removeCheckpoint(ident, refreshQuests);
				}
				break;
			case 'CreateShipsBuildStart':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.Create.Unit' && this.content.loadedModule.options.unit === UNIT_TYPE_SHIP) {
					this.content.loadedModule.removeCheckpoint(ident, refreshQuests);
				}
				break;
			case 'InnerViewUpgrade':
				if(this.content.loadedModule && this.content.loadedModule.className && this.content.loadedModule.className === 'Imperion.Interface.Sidebar.InnerView') {
					this.content.loadedModule.removeCheckpoint(ident, refreshQuests);
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Handle ident not exist : ' + ident;
				break;
		}
	},

	/**
	 * update queue / grid manual
	 *
	 * @param	{Object}	preloadData
	 *
	 * @returns	{Void}
	 */
	updateGridQueue : function(preloadData) {
		this.grid.updateBuildings(preloadData.grid);
		this.content.loadModule(Imperion.Util.Factory.responseDummy(preloadData, this.getTemplate('InterfaceSidebarQueue')), Imperion.Interface.Sidebar.Factory.queueBuilding.bindNew(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * close innerview
	 *
	 * @param	{Object}	params
	 *
	 * @returns {void}
	 */
	onCloseInnerview : function(params) {
		//check for active checkpoint
		this.removeCheckpoint('InnerViewClose');
		//
		this.showGrid();
		this.content.clean();
		//
		this.tabs.setTabBuildingActive();
		this.tabs.setTabCivilActive();
		this.onTabChanged({
			top : SIDEBAR_TAB_TOP_BUIDLINGS,
			bot : SIDEBAR_TAB_BOT_CIVIL
		});
	},

	/**
	 * listener for abort building from queue
	 *
	 * @param	{Object}	params
	 *
	 * @returns	{Void}
	 */
	onAbortBuilding : function(params) {
		this.updateQueueGrid(params.response);
		this.content.loadModule(params.response, Imperion.Interface.Sidebar.Factory.queueBuilding.bindNew(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * finish building listener
	 *
	 * @params Object params
	 *
	 * @return void
	 */
	onFinishBuilding : function(params) {
		this.grid.activeItem.deactivate();
		this.content.loadModule(params.response, Imperion.Interface.Sidebar.Factory.queueBuilding.bindNew(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * listener after building upgrade is finish
	 *
	 * @params {Object} params
	 *
	 * @type void
	 */
	onFinishUpgradeDowngrade : function(params) {
		this.showGrid();
		if(this.grid.activeItem !== null) {
			this.grid.activeItem.deactivate();
		}
		var rData = params.response.getResponseData();
		this.tabs.setTabBuildingActive();
		if(rData.category == SIDEBAR_TAB_BOT_CIVIL) {
			this.tabs.setTabCivilActive();
		}
		else {
			this.tabs.setTabMilitaryActive();
		}
		this.grid.updateBuildings(rData.buildings);
		this.content.loadModule(params.response, Imperion.Interface.Sidebar.Factory.queueBuilding.bindNew(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * finish ship listener
	 *
	 * @params Object params
	 *
	 * @return void
	 */
	shipFinish : function(params) {
		this.grid.activeItem.deactivate();
		this.content.loadModule(params.response, Imperion.Interface.Sidebar.Factory.queueShip.bindNew(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * finish turret listener
	 *
	 * @params Object params
	 *
	 * @return void
	 */
	turretFinish : function(params) {
		this.grid.activeItem.deactivate();
		this.content.loadModule(params.response, Imperion.Interface.Sidebar.Factory.queueTurret.bindNew(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * onBuildingItemClick
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onBuildingItemClick : function(params) {
		this.data.building.requestCreateData(params.id, this.content.loadModule.bindNew(this.content), Imperion.Interface.Sidebar.Factory.createBuilding.bind(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * onShipItemClick
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onShipItemClick : function(params) {
		this.data.ship.requestCreateData(params.id, this.content.loadModule.bindNew(this.content), Imperion.Interface.Sidebar.Factory.createShip.bind(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * onTurretItemClick
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onTurretItemClick : function(params) {
		this.data.turret.requestCreateData(params.id, this.content.loadModule.bindNew(this.content), Imperion.Interface.Sidebar.Factory.createTurret.bind(Imperion.Interface.Sidebar.Factory));
	},

	/**
	 * update grid / queue
	 *
	 * @param Imperion.Util.Response response
	 *
	 * @return void
	 */
	updateQueueGrid : function(response) {
		var rData = response.getResponseData();
		switch(this.tabs.activeTop) {
			case SIDEBAR_TAB_TOP_BUIDLINGS :
				this.grid.updateBuildings(rData.buildings);
				this.content.loadModule(response, Imperion.Interface.Sidebar.Factory.queueBuilding.bindNew(Imperion.Interface.Sidebar.Factory));
				break;
			case SIDEBAR_TAB_TOP_SHIPS :
				this.grid.updateShips(rData.ships);
				this.content.loadModule(response, Imperion.Interface.Sidebar.Factory.queueShip.bindNew(Imperion.Interface.Sidebar.Factory));
				break;
			case SIDEBAR_TAB_TOP_TURRETS :
				this.grid.updateTurrets(rData.turrets);
				this.content.loadModule(response, Imperion.Interface.Sidebar.Factory.queueTurret.bindNew(Imperion.Interface.Sidebar.Factory));
				break;
		}
	},

	/**
	 * listener for tab change
	 *
	 * @param Object params
	 *
	 * @return void
	 *
	 */
	onTabChanged : function(params) {
		if(this.grid.activeItem !== null) {
			this.grid.activeItem.deactivate();
		}
		switch(params.top) {
			case SIDEBAR_TAB_TOP_BUIDLINGS:
				if (!this.gridVisible) {
					this.onCloseInnerview();
				} else {
					this.data.building.requestQueueGridData(params.bot, this.updateQueueGrid.bindNew(this));
				}
				break;
			case SIDEBAR_TAB_TOP_SHIPS:
				this.data.ship.requestQueueGridData(params.bot, this.updateQueueGrid.bindNew(this));
				break;
			case SIDEBAR_TAB_TOP_TURRETS:
				this.data.turret.requestQueueGridData(params.bot, this.updateQueueGrid.bindNew(this));
				break;
		}
	},

	/**
	 * refresh sidebar from backend
	 *
	 * @param	{Object}	params
	 *
	 * @returns	{Void}
	 */
	_refresh : function(params) {
		if(params.tab && params.tab === this.tabs.activeTop){
			this.onTabChanged({'top':this.tabs.activeTop ,'bot':this.tabs.activeBot});
		}
		if (this.content.loadedModule && this.content.loadedModule.className &&
			this.content.loadedModule.className === 'Imperion.Interface.Sidebar.InnerView' && typeof params.refreshInnerView != 'undefined') {
			this.data.innerview.requestInnerView(this.content.loadedModule.data.ground,  this.showInnerView.bindNew(this));
		}
	},

	/**
	 * on building click on surface listener
	 *
	 * @params {Object} params
	 *
	 * @type void
	 */
	onSurfaceBuildingClick : function(params) {
		if(!this.requestRunning) {
			this.requestRunning = true;
			this.data.innerview.requestInnerView(params.ground, this.showInnerView.bindNew(this));
		}
	},

	/**
	 * show inner view
	 *
	 * @param Imperion.Util.Response response
	 *
	 * @type void
	 */
	showInnerView : function(response) {
		this.requestRunning = false;
		var rData = response.getResponseData();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			this.hideGrid();
			this.content.loadModule(response, Imperion.Interface.Sidebar.Factory.innerview.bindNew(Imperion.Interface.Sidebar.Factory));
		}
	},

	/**
	 * show grid
	 *
	 * @type void
	 */
	showGrid : function() {
		if(this.elements.grid.hasClass('hideContainer')) {
			this.elements.grid.removeClass('hideContainer');
			this.gridVisible = true;
		}
	},

	/**
	 * hide grid
	 *
	 * @type void
	 */
	hideGrid : function() {
		if(!this.elements.grid.hasClass('hideContainer')) {
			this.elements.grid.addClass('hideContainer');
			this.gridVisible = false;
		}
	},

	/**
	 * load sidebar elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.grid = this.getTemplate('SidebarGridContainer');
	}
});
var SIDEBAR_GRID_TYPE_UNDEFINED = 'undefined';
var SIDEBAR_GRID_TYPE_BUILDING 	= 'building';
var SIDEBAR_GRID_TYPE_SHIP 		= 'ship';
var SIDEBAR_GRID_TYPE_TURRET 	= 'turret';

Imperion.Interface.Sidebar.Grid = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Observable],
	/**
	 * options for building list
	 * 
	 * @var Object
	 */
	options : {
		width : 4,
		height : 3,
		type : SIDEBAR_GRID_TYPE_UNDEFINED
	},
	
	/**
	 * active item
	 * 
	 * @var Imperion.Interface.Sidebar.GridItem
	 */
	activeItem : null,
	
	/**
	 * items
	 * 
	 * @var array
	 */
	items : null,
	
	/**
	 * quest items
	 * 
	 * @type 	Array
	 */
	questItems : null,
	
	/**
	 * prepare object
	 */
	initialize : function() {
		//
		this.setUser(Imperion.Util.Registry.get('user'));
		//
		this.activeItem = null;
		this.questItems = null;
		//load html elements
		this.loadElements();
		//add items
		this.items = new Array(this.options.width * this.options.height);
		var item, counter = 0;
		for(var y = 1 ; y <= this.options.height ; y++) {
			for(var x = 1 ; x <= this.options.width ; x++) {
				item = Imperion.Interface.Sidebar.Factory.gridItem(this, {
					x : x,
					y : y,
					position : counter
				});
				this.items[counter] = item;
				counter++;
			}
		}
	},
	
	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'GridItemActive':
				for(var i = 0 ; i < params.items.length ; i++) {
					if(this.items[params.items[i].position].isCheckpointResolved(ident, params.items[i], questObj)) {
						return true;
					}
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Handle ident not exist';
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'GridItemActive':
				for(var i = 0 ; i < params.items.length ; i++) {
					var para = params.items[i];
					para.pos = i;
					this.items[params.items[i].position].activateCheckpoint(ident, para, questObj);
				}
				this.questItems = params.items;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Handle ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident) {
		switch(ident) {
			case 'GridItemActive':
				if(this.questItems !== null) {
					for(var i = 0 ; i < this.questItems.length ; i++) {
						this.items[this.questItems[i].position].removeCheckpoint(ident);
					}
					this.questItems = null;
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Handle ident not exist';
				break;
		}
	},	
	
	/**
	 * click on a item
	 * 
	 * @param Imperion.Interface.Sidebar.GridItem item
	 * 
	 * @return void
	 */
	itemClick : function(item) {
		switch(this.options.type) {
			case SIDEBAR_GRID_TYPE_BUILDING:
				this.notify({
					id : item.options.id
				}, 'onBuildingItemClick');
				break;
			case SIDEBAR_GRID_TYPE_SHIP:
				this.notify({
					id : item.options.id
				}, 'onShipItemClick');
				break;
			case SIDEBAR_GRID_TYPE_TURRET:
				this.notify({
					id : item.options.id
				}, 'onTurretItemClick');
				break;
		}
	},
	
	/**
	 * set the grid type
	 * 
	 * @param String gridType
	 * 
	 * @return void
	 */
	setType : function(gridType) {
		this.options.type = gridType;
	},
	
	/**
	 * update the grid with buildings
	 * 
	 * @param Object buildingList
	 * 
	 * @return void
	 */
	updateBuildings : function(buildingList) {
		//set grid type
		this.setType(SIDEBAR_GRID_TYPE_BUILDING);
		//update items
		for(var i = 0 ; i < this.items.length ; i++) {
			this.items[i].reset();
			if(buildingList[i]) {
				this.items[i].setId(buildingList[i].type);
				this.items[i].setTooltip(buildingList[i].tooltip, Imperion.Interface.Infobox.Factory.building());
				if(buildingList[i].allowed) {
					this.items[i].enable();
				}
				else {
					this.items[i].disable();
				}
			}
			/*
			else {
				this.items[i].reset();
			}
			*/
		}
	},
	
	/**
	 * update the grid with ships
	 * 
	 * @param Object shipList
	 * 
	 * @return void
	 */
	updateShips : function(shipList) {
		//set grid type
		this.setType(SIDEBAR_GRID_TYPE_SHIP);
		//update items
		for(var i = 0 ; i < this.items.length ; i++) {
			this.items[i].reset();
			if(shipList[i]) {
				this.items[i].setId(shipList[i].type);
				this.items[i].setTooltip(shipList[i].tooltip, Imperion.Interface.Infobox.Factory.ship());
				if(shipList[i].allowed) {
					this.items[i].enable();
				}
				else {
					this.items[i].disable();
				}
			}
			/*
			else {
				this.items[i].reset();
			}
			*/
		}
	},
	
	/**
	 * update the grid with turrets
	 * 
	 * @param Object turretList
	 * 
	 * @return void
	 */
	updateTurrets : function(turretList) {
		//set grid type
		this.setType(SIDEBAR_GRID_TYPE_TURRET);
		//update items
		for(var i = 0 ; i < this.items.length ; i++) {
			this.items[i].reset();
			if(turretList[i]) {
				this.items[i].setId(turretList[i].type);
				this.items[i].setTooltip(turretList[i].tooltip, Imperion.Interface.Infobox.Factory.turret());
				if(turretList[i].allowed) {
					this.items[i].enable();
				}
				else {
					this.items[i].disable();
				}
			}
			/*
			else {
				this.items[i].reset();
			}
			*/
		}
	},
	
	/**
	 * reset the grid
	 * 
	 * @return void
	 */
	resetGrid : function() {
		for(var i = 0 ; i < this.items.length ; i++) {
			this.items[i].reset();
		}
	},
	
	/**
	 * load all elements belong to grid
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('SidebarGrid');
	}
});

Imperion.Interface.Sidebar.GridItem = new Class({
	Implements : [Imperion.Util.Class, Imperion.Event, Imperion.Util.Checkpoint],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		x : 1,
		y : 1,
		id : '',
		position : 0,
		enabled : true,
		activate : false,
		infobox : {}
	},
	
	/**
	 * active flag
	 * 
	 * @type	Boolean
	 */
	activeFlag : false,
	
	classPrefix : '',
	
	/**
	 * parent grid instance
	 * 
	 * @var Imperion.Interface.Sidebar.Grid
	 */
	parentGrid : null,
	
	/**
	 * infobox handle
	 * 
	 * @var Imperion.Interface.Infobox.Root
	 */
	infoboxHandle : null,
	
	/**
	 * prepare the item
	 *
	 * @param Imperion.Interface.Sidebar.Grid parentGrid
	 * 
	 * @return void
	 */
	initialize : function(parentGrid, options) {
		//
		this.infoboxHandle	= null;
		this.activeFlag		= false;
		//
		this.setOptions(options);
		//
		this.parentGrid = parentGrid;
		//
		this.loadElements();
	},
	
	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'GridItemActive':
				if(this.activeFlag && params.type == this.options.id) {
					return true;
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.GridItem ident not exist';
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'GridItemActive':
				var highlight = this.getCheckpointHighlight(ident + this.options.position, {
					posOffset	: {
						y : -25
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident + this.options.position, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.GridItem ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident) {
		switch(ident) {
			case 'GridItemActive':
				var questObj = this.getCheckpointActive(ident + this.options.position);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident + this.options.position);
					this.removeCheckpointHighlight(ident + this.options.position);
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.GridItem ident not exist';
				break;
		}
	},	
	
	/**
	 * set the id from the item (include class for container)
	 * 
	 * @param String newID
	 * 
	 * @return void
	 */
	setId : function(newID) {
		if ('building' == this.parentGrid.options.type) {
			this.classPrefix = this.parentGrid.user.options.kind +'_';
		} else {
			this.classPrefix = '';
		};
		
		//remove old class
		if(this.options.id !== '') {
			this.elements.container.removeClass('ICON_' + this.classPrefix + this.options.id);	
		}
		this.elements.container.addClass('ICON_' + this.classPrefix + newID);
		this.options.id = newID;
	},
	
	/**
	 * set the infobox data
	 * 
	 * @param Object infoboxData
	 * @param Imperion.Interface.Infobox.Root infoboxHandle
	 * 
	 * @return void
	 */
	setTooltip : function(infoboxData, infoboxHandle) {
		this.options.infobox = infoboxData;
		this.infoboxHandle = infoboxHandle;
	},
	
	/**
	 * activate the item
	 * 
	 * @return void
	 */
	activate : function() {
		if(this.parentGrid.activeItem !== null) {
			this.parentGrid.activeItem.deactivate();
		}
		this.elements.container.addClass('active');
		this.parentGrid.activeItem = this;
		
		this.activeFlag = true;
		//
		this.parentGrid.removeCheckpoint('GridItemActive');
	},
	
	/**
	 * deactivate the item
	 * 
	 * @return void
	 */
	deactivate : function() {
		this.elements.container.removeClass('active');
		this.parentGrid.activeItem = null;
		
		this.activeFlag = false;
	},
	
	/**
	 * enabled the item
	 * 
	 * @return void
	 */
	enable : function() {
		if(!this.options.enabled) {
			this.elements.container.removeClass('disabled');
			this.options.enabled = true;
		}
	},
	
	/**
	 * enabled the item
	 * 
	 * @return void
	 */
	disable : function() {
		if(this.options.enabled) {
			this.elements.container.addClass('disabled');
			this.options.enabled = false;
		}
	},
	
	/**
	 * reset the item
	 * 
	 * @return void
	 */
	reset : function() {
		//remove old class
		if(this.options.id !== '') {
			this.elements.container.removeClass('ICON_' + this.classPrefix + this.options.id);	
			this.options.id = '';
		}
		//
		if(this.infoboxHandle !== null) {
			this.infoboxHandle.hideInfobox();
			this.infoboxHandle = null;
		}
		this.options.infobox = {};
		//
		this.disable();
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click_item':
				if(this.options.enabled) {
					this.activate();
					this.parentGrid.itemClick(this);
				}
				break;
			case 'mouse_enter':
				if(this.options.id !== '') {
					this.infoboxHandle.update(this.options.infobox);
					this.infoboxHandle.showInfobox();
				}
				break;
			case 'mouse_leave':
				if(this.options.id !== '') {
					this.infoboxHandle.hideInfobox();
				}
				break;
		}
		return true;
	},
	
	/**
	 * load item elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.parentGrid.elements.container.getElement('.r' + this.options.y + '.c' + this.options.x);
		
		if(this.elements.container.hasClass('disabled')) {
			this.options.enabled = false;
		}
		
		this.addEvent('click', this.elements.container, $H({
			action : 'click_item'
		}));
		
		this.addEvent('mouseenter', this.elements.container, $H({
			action : 'mouse_enter'
		}));
		this.addEvent('mouseleave', this.elements.container, $H({
			action : 'mouse_leave'
		}));
	}
});
Imperion.Interface.Sidebar.InnerView = new Class(
	/** @lends Imperion.Interface.Sidebar.InnerView.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Observable, Imperion.Event, Imperion.Util.Checkpoint, Imperion.Translate],

		/**
		 * options
		 *
		 * @type Object
		 */
		options : {
			special : {
				'SHIELD_GENERATOR'			: true,
				'ARMS_FACTORY'				: true,
				'RESOURCE_CACHE'			: true,
				'HANGAR'			: true
			}
		},

		/**
		 * class name
		 *
		 * @type	String
		 */
		className : 'Imperion.Interface.Sidebar.InnerView',

		/**
		 * building data
		 *
		 * @type {Object}
		 */
		data : null,

		/**
		 * sidebar
		 *
		 * @type Imperion.Interface.Sidebar.Handle
		 */
		parentHandle : null,

		/**
		 * resource counter
		 *
		 * @type {Object}
		 */
		resources : null,

		/**
		 * planet surface handle
		 *
		 * @type Imperion.Interface.PlanetSurface
		 */
		planetSurface : null,

		/**
		 * upgrade running flag
		 *
		 * @type	Boolean
		 */
		upgradeRunning : false,

		/**
		 * check res
		 *
		 * @type {Object}
		 */
		checkRes : {
			metal	: false,
			crystal : false,
			tritium : false,
			energy	: false
		},

		/**
		 * class for additional building functions
		 *
		 * @type Imperion.Interface.Sidebar.Buildings.*
		 */
		specialBuilding : null,

		/**
		 * tooltip
		 *
		 * @type	Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,

		/**
		 * buildingInsideInfobox
		 *
		 * @type	Imperion.Interface.Infobox.Handle
		 */
		buildingInsideInfobox : null,

		/**
		 * initialize
		 *
		 * @param	{Object}							buildingData
		 * @param	{Imperion.Interface.Sidebar.Handle} parentHandle
		 * @param	{Object}							resourceCounter
		 * @param	{Imperion.Interface.PlanetSurface}	planetSurface
		 * @param	{Imperion.Interface.Gui.Tooltip}	tooltip
		 *
		 * @constructor
		 */
		initialize : function(buildingData, parentHandle, resourceCounter, planetSurface, tooltip, buildingInsideInfobox) {
			//
			this.tooltip = tooltip;
			this.buildingInsideInfobox = buildingInsideInfobox;
			this.data = buildingData;
			this.upgradeRunning = false;
			this.parentHandle = parentHandle;
			this.resources = resourceCounter;
			this.planetSurface = planetSurface;
			this.planetSurface.attach('innerview', this);
			//
			this.loadElements();
			//
			this.setResources({
				metal	: this.data.upgrade.metal,
				crystal	: this.data.upgrade.crystal,
				tritium	: this.data.upgrade.tritium,
				energy  : this.data.upgrade.energy,
				time	: this.data.upgrade.time
			});
			if(this.data.special !== undefined && this.options.special[this.data.type]) {
				this.specialBuilding = Imperion.Interface.Sidebar.Factory.buildingByType(this.data.type, this.data.special, this);
			}
			else {
				this.specialBuilding = null;
			}
		},

		/**
		 * check if checkpoint is resolved
		 *
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'InnerViewUpgrade':
					if(params.types[this.data.type] && this.upgradeRunning) {
						return true;
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Handle ident not exist : ' + ident;
					break;
			}
		},

		/**
		 * activate checkpoint
		 *
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'InnerViewUpgrade':
					//add top highlight
					var highlight = this.getCheckpointHighlight(ident + '_top', {
						posOffset	: {
							x : 33
						},
						rotation	: 'arrowLeft'
					});
					highlight.appendOver(this.elements.upgrade.top);
					highlight.start();
					this.setCheckpointActive(ident + '_top', questObj);
					//add bot highlight
					var highlight = this.getCheckpointHighlight(ident + '_bot', {
						posOffset	: {
							y : 30
						}
					});
					highlight.appendOver(this.elements.upgrade.bot);
					highlight.start();
					this.setCheckpointActive(ident + '_bot', questObj);
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Innerview ident not exist : ' + ident;
					break;
			}
		},

		/**
		 * remove checkpoint
		 *
		 * @param	{String}			ident
		 * @param	{Boolean}			refreshQuests
		 *
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			refreshQuests = refreshQuests === undefined ? true : refreshQuests;
			switch(ident) {
				case 'InnerViewUpgrade':
					var questObj = this.getCheckpointActive(ident + '_top');
					if(questObj !== null) {
						this.unsetCheckpointActive(ident + '_top');
						this.removeCheckpointHighlight(ident + '_top');
						this.unsetCheckpointActive(ident + '_bot');
						this.removeCheckpointHighlight(ident + '_bot');
						if(refreshQuests) {
							questObj.refresh();
						}
					}
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Innerview ident not exist : ' + ident;
					break;
			}
		},

		/**
		 * clean method
		 *
		 * @type void
		 */
		clean : function() {
			//check if special building is registered
			if(this.specialBuilding !== null) {
				if(this.specialBuilding.clean === undefined) {
					throw '//ERROR HANDLING - clean up method not defined';
				}
				this.specialBuilding.clean();
			}
			this.removeCheckpoint('InnerViewUpgrade', false);
			this.planetSurface.detach('innerview');
			this.cleanUp();
		},

		/**
		 * surface click listener
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		onSurfaceClick : function() {
			this.notify({
			}, 'onCloseInnerview');
		},

		/**
		 * set resources
		 *
		 * @param {Object} res
		 *
		 * @type void
		 */
		setResources : function(res) {
			this.setMetal(res.metal);
			this.setCrystal(res.crystal);
			this.setTritium(res.tritium);
			this.setEnergy(res.energy);
			this.setTime(res.time);
		},

		/**
		 * set metal
		 *
		 * @param {Number} newMetal
		 *
		 * @type void
		 */
		setMetal : function(newMetal) {
			this.resources.metal.attach('InnerView', this);
			this.elements.metal.set('text', this.parentHandle.user.formatNumber(newMetal));
			if(newMetal > this.resources.metal.storage) {
				this.elements.metal.removeClass('disabled');
				this.elements.npc.metal.removeClass('disabled');
				this.checkRes.metal = true;
				this.disableUpgrade();
			}
		},

		/**
		 * resource counter metal listener
		 *
		 * @param {Object} params
		 *
		 * @type void
		 */
		metalResourceChanged : function(params) {
			if(this.data.upgrade.metal <= params.resourceCounter.storage) {
				this.elements.metal.addClass('disabled');
				this.elements.npc.metal.addClass('disabled');
				//this.resources.metal.detach('InnerView');
				this.checkRes.metal = false;
				this.enableUpgrade();
			}
			else {
				this.elements.metal.removeClass('disabled');
				this.elements.npc.metal.removeClass('disabled');
			}
		},

		/**
		 * set crystal
		 *
		 * @param {Number} newCrystal
		 *
		 * @type void
		 */
		setCrystal : function(newCrystal) {
			this.resources.crystal.attach('InnerView', this);
			this.elements.crystal.set('text', this.parentHandle.user.formatNumber(newCrystal));
			if(newCrystal > this.resources.crystal.storage) {
				this.elements.crystal.removeClass('disabled');
				this.elements.npc.crystal.removeClass('disabled');
				this.checkRes.crystal = true;
				this.disableUpgrade();
			}
		},

		/**
		 * resource counter crystal listener
		 *
		 * @param {Object} params
		 *
		 * @type void
		 */
		crystalResourceChanged : function(params) {
			if(this.data.upgrade.crystal <= params.resourceCounter.storage) {
				this.elements.crystal.addClass('disabled');
				this.elements.npc.crystal.addClass('disabled');
				//this.resources.crystal.detach('InnerView');
				this.checkRes.crystal = false;
				this.enableUpgrade();
			}
			else {
				this.elements.crystal.removeClass('disabled');
				this.elements.npc.crystal.removeClass('disabled');
			}
		},

		/**
		 * set tritium
		 *
		 * @param {Number} newTritium
		 *
		 * @type void
		 */
		setTritium : function(newTritium) {
			this.resources.tritium.attach('InnerView', this);
			this.elements.tritium.set('text', this.parentHandle.user.formatNumber(newTritium));
			if(newTritium > this.resources.tritium.storage) {
				this.elements.tritium.removeClass('disabled');
				this.elements.npc.tritium.removeClass('disabled');
				this.checkRes.tritium = true;
				this.disableUpgrade();
			}
		},

		/**
		 * resource counter tritium listener
		 *
		 * @param {Object} params
		 *
		 * @type void
		 */
		tritiumResourceChanged : function(params) {
			if(this.data.upgrade.tritium <= params.resourceCounter.storage) {
				this.elements.tritium.addClass('disabled');
				this.elements.npc.tritium.addClass('disabled');
				//this.resources.tritium.detach('InnerView');
				this.checkRes.tritium = false;
				this.enableUpgrade();
			}
			else {
				this.elements.tritium.removeClass('disabled');
				this.elements.npc.tritium.removeClass('disabled');
			}
		},

		/**
		 * set energy
		 *
		 * @param {Number} newEnergy
		 *
		 * @type void
		 */
		setEnergy : function(newEnergy) {
			this.resources.energy.attach('InnerView', this);
			this.elements.energy.set('text', this.parentHandle.user.formatNumber(newEnergy));
			if(newEnergy > this.resources.energy.storage && newEnergy > 0) {
				this.elements.energy.removeClass('disabled');
				this.checkRes.energy = true;
				this.disableUpgrade();
			}
		},

		/**
		 * resource energy change listener
		 *
		 * @param {Object} params
		 *
		 * @type void
		 */
		energyResourceChanged : function(params) {
			if(this.data.upgrade.energy <= params.resourceCounter.storage) {
				this.elements.energy.addClass('disabled');
				//this.resources.energy.detach('InnerView');
				this.checkRes.energy = false;
				this.enableUpgrade();
			}
			else {
				this.elements.energy.removeClass('disabled');
			}
		},

		/**
		 * set time
		 *
		 * @param {Number} newTime
		 *
		 * @type void
		 */
		setTime : function(newTime) {
			this.elements.time.set('text', this.parentHandle.user.formatDuration(newTime));
		},

		/**
		 * check if player can upgrade building
		 *
		 * @type void
		 */
		canUpgrade : function() {
			if(this.data.upgradeable) {
				if(!this.checkRes.metal && !this.checkRes.crystal && !this.checkRes.tritium && !this.checkRes.energy && this.data.level.toInt() < 50 && !this.upgradeRunning) {
					return true;
				}
			}
			return false;
		},

		/**
		 * enable upgrade options
		 *
		 * @type void
		 */
		enableUpgrade : function() {
			if(this.canUpgrade()) {
				this.elements.upgrade.top.removeClass('disabled');
				this.elements.upgrade.bot.removeClass('disabled');
			}
		},

		/**
		 * disable upgrade options
		 *
		 * @type void
		 */
		disableUpgrade : function() {
			if(!this.canUpgrade()) {
				this.elements.upgrade.top.addClass('disabled');
				this.elements.upgrade.bot.addClass('disabled');
			}
		},

		/**
		 * upgrade building
		 *
		 * @type void
		 */
		doUpgrade : function() {
			if(!this.upgradeRunning) {
				this.upgradeRunning = true;
				this.parentHandle.data.innerview.requestUpgradeBuilding(this.data.ground, this.afterUpgradeRequest.bindNew(this));
			}
		},

		/**
		 * callback after request upgrade
		 *
		 * @param Imperion.Util.Response response
		 *
		 * @type void
		 */
		afterUpgradeRequest : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.removeCheckpoint('InnerViewUpgrade', true);
				this.planetSurface.updateQueue(rData.queue);
				this.planetSurface.deactiveActiveItem();
				this.notify({
					response : response
				}, 'onFinishUpgradeDowngrade');
			}
			this.upgradeRunning = false;
		},

		/**
		 * check if player can downgrade building
		 *
		 * @type void
		 */
		canDowngrade : function() {
			return true;
		},

		/**
		 * downgrade building
		 *
		 * @type void
		 */
		doDowngrade : function() {
			this.parentHandle.data.innerview.requestDowngradeBuilding(this.data.ground, this.afterDowngradeRequest.bindNew(this));
		},

		/**
		 * show downgrade eventBox
		 *
		 * @returns {void}
		 */
		showDowngradeEventBox : function() {
			var eventBoxData = {
				type : 'confirm', // confirm or error
				headline : this.translate('building__innerview_demolish_a_building_eventbox_headline'),
				content : this.translate('building__innerview_demolish_a_building_eventbox'),
				image : '/images/layout/color-set/global/visuals/event_box/breakDownBuildings.jpg',
				firstButtonText : this.translate('default__yes'),
				firstButtonCallback : this.doDowngrade.bindNew(this),
				secondButtonText : this.translate('default__no')
			};

			var eventBox = Imperion.Interface.Factory.eventBox();
			eventBox.setEventBox(eventBoxData);
			eventBox.showEventBox();
		},

		/**
		 * callback after request downgrade
		 *
		 * @param Imperion.Util.Response response
		 *
		 * @type void
		 */
		afterDowngradeRequest : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				this.planetSurface.updateQueue(rData.queue);
				this.notify({
					response : response
				}, 'onFinishUpgradeDowngrade');
			}
		},

		/**
		 * show npc dialog
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		showNPC : function(params) {
			var dialog	= Imperion.Interface.Dialog.Factory.handle().getDialog('npc');
			var npc		= Imperion.Interface.Dialog.Context.Factory.npc(dialog, {
				required	: {
					metal	: this.data.upgrade.metal,
					crystal	: this.data.upgrade.crystal,
					tritium	: this.data.upgrade.tritium
				},
				ratio		: {
					metal	: this.data.upgrade.metal,
					crystal	: this.data.upgrade.crystal,
					tritium	: this.data.upgrade.tritium
				}
			});
			npc.showContext();
		},

		/**
		 * show the help dialog
		 *
		 * @returns	{Void}
		 */
		showHelp : function() {
			this.showHelpDialog('BUILDING', this.data.type);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'upgrade':
					if(this.canUpgrade()) {
						this.doUpgrade();
					}
					break;
				case 'downgrade':
					if(this.canDowngrade()) {
						this.showDowngradeEventBox();
					}
					break;
				case 'close':
					this.notify({
					}, 'onCloseInnerview');
					this.planetSurface.deactiveActiveItem();
					break;
				case 'show_npc':
					this.showNPC();
					break;
				case 'show_help':
					this.showHelp();
					break;
				case 'show_npc_tooltip':
					this.tooltip.setText(this.translate('construction__credit_feature_npc_trade'));
					this.tooltip.show();
					break;
				case 'hide_npc_tooltip':
					this.tooltip.hide();
					break;
				case 'show_building_infobox':
					this.buildingInsideInfobox.update(this.elements.buildingInfobox);
					this.buildingInsideInfobox.setInfoboxPosition(232,10);
					this.buildingInsideInfobox.showInfobox();

					break;
				case 'hide_building_infobox':
					this.buildingInsideInfobox.hideInfobox();
					break;
				case 'show_special':
					var ele = this.elements.specialButtons[params.get('pos')];
					if(ele.hasClass('hangarButton')) {
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('hangar');
						var hangar = Imperion.Interface.Dialog.Context.Factory.hangar(dialog);
						hangar.showContext();
					}
					else if(ele.hasClass('shipRecycling')) {
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('shipyard');
						var shipyard = Imperion.Interface.Dialog.Context.Factory.recycle(dialog, RECYCLE_TYPE_SHIP);
						shipyard.showContext();
					}
					else if(ele.hasClass('weaponFactory')) {
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('weaponfactory');
						var weaponfactory = Imperion.Interface.Dialog.Context.Factory.weaponfactory(dialog);
						var recycle = Imperion.Interface.Dialog.Context.Factory.recycle(dialog, RECYCLE_TYPE_TURRET);
						weaponfactory.showContext();
					}
					else if(ele.hasClass('researchLab')) {
						var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('research');
						var research = Imperion.Interface.Dialog.Context.Factory.research(dialog);
						research.showContext();
					}
					break;
				case 'show_admiral_tooltip':
					if (this.elements.upgrade.bot.hasClass('admiralLevel')) {
						this.tooltip.setHtml(this.translate('construction__improve_admiral_skill'));
						this.tooltip.show();
					}
					break;
				case 'hide_admiral_tooltip':
					if (this.elements.upgrade.bot.hasClass('admiralLevel')) {
						this.tooltip.hide();
					}
					break;
			}
		},

		/**
		 * load dom elements
		 *
		 * @type void
		 */
		loadElements : function() {
			this.elements.container = this.parentHandle.content.area.elements.container.getElement('.Imperion-Interface-Building');
			this.elements.close		= this.elements.container.getElement('.close');
			this.addEvent('click', this.elements.close, $H({
				action : 'close'
			}));

			this.elements.buildingInfo		= this.elements.container.getElement('.insideBuildingInfobox');
			this.elements.buildingInfobox	= this.elements.container.getElement('.Imperion-Interface-Infobox-BuildingInside');

			if (this.elements.buildingInfobox) {
				this.addEvent('mouseenter', this.elements.buildingInfo, $H({
					action : 'show_building_infobox'
				}));
				this.addEvent('mouseleave', this.elements.buildingInfo, $H({
					action : 'hide_building_infobox'
				}));
			}

			this.elements.npc		= this.elements.container.getElement('.npcButton');
			this.addEvent('click', this.elements.npc, $H({
				action : 'show_npc'
			}));

			this.addEvent('mouseenter', this.elements.npc, $H({
				action : 'show_npc_tooltip'
			}));
			this.addEvent('mouseleave', this.elements.npc, $H({
				action : 'hide_npc_tooltip'
			}));

			this.elements.image		= this.elements.container.getElement('IMG');
			this.addEvent('click', this.elements.image, $H({
				action : 'show_help'
			}));

			//resources
			this.elements.metal = this.elements.container.getElement('.dspMetal');
			this.elements.crystal = this.elements.container.getElement('.dspCrystal');
			this.elements.tritium = this.elements.container.getElement('.dspTritium');
			this.elements.energy = this.elements.container.getElement('.energy');
			this.elements.time = this.elements.container.getElement('.time');
			//npc
			this.elements.npc = {
				metal	: this.elements.container.getElement('.npcMetal'),
				crystal	: this.elements.container.getElement('.npcCrystal'),
				tritium	: this.elements.container.getElement('.npcTritium')
			};
			//upgrade buttons
			this.elements.upgrade = {
				top : this.elements.container.getElement('.upgradeTop'),
				bot : this.elements.container.getElement('.upgradeBot')
			};
			this.addEvent('click', this.elements.upgrade.top, $H({ action : 'upgrade' }));
			this.addEvent('click', this.elements.upgrade.bot, $H({ action : 'upgrade' }));
			this.addEvent('mouseenter', this.elements.upgrade.bot, $H({
				action : 'show_admiral_tooltip'
			}));
			this.addEvent('mouseleave', this.elements.upgrade.bot, $H({
				action : 'hide_admiral_tooltip'
			}));
			//downgrade button
			this.elements.downgrade = this.elements.container.getElement('.downgrade');
			if (!this.elements.downgrade.hasClass('disabled')) {
				this.addEvent('click', this.elements.downgrade, $H({ action : 'downgrade'}));
			}
			//check dialog buttons
			this.elements.specialButtons	= this.elements.container.getElements('.specialButtons');
			//
			for(var i = this.elements.specialButtons.length - 1 ; i >= 0 ; i--) {
				if (!this.elements.specialButtons[i].hasClass('disabled')) {
					this.addEvent('click', this.elements.specialButtons[i], $H({
						action	: 'show_special',
						pos		: i
					}));
				}
			}
		}
	}
);

Imperion.Interface.Sidebar.Tabs = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Observable, Imperion.Util.Checkpoint],
	
	/**
	 * options for tabs
	 * 
	 * @var Object
	 */
	options : {
		defaultTop : SIDEBAR_TAB_TOP_BUIDLINGS,
		defaultBot : SIDEBAR_TAB_BOT_CIVIL
	},
	
	/**
	 * current active tab top
	 * 
	 * @var String
	 */
	activeTop : '',
	
	/**
	 * current active tab bot
	 * 
	 * @var String
	 */
	activeBot : '',
	
	/**
	 * tooltip handle
	 * 
	 * @type Imperion.Interface.Gui.Tooltip
	 */
	tooltipHandle : null,
	
	/**
	 * prepare object
	 * 
	 * @param	{Imperion.Interface.Gui.Tooltip}	tooltipHandle
	 * 
	 * @return void 
	 */
	initialize : function(tooltipHandle) {
		//
		this.tooltipHandle = tooltipHandle;
		//
		this.activeTop = '';
		this.activeBot = '';
		//
		
		//load html elements
		this.loadElements();
		//
		
	},
	
	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'TabShowBuilding':
				if(this.activeTop !== SIDEBAR_TAB_TOP_BUIDLINGS) {
					return false;
				}
				return true;
			case 'TabShowShips':
				if(this.activeTop !== SIDEBAR_TAB_TOP_SHIPS) {
					return false;
				}
				return true;
				break;
			case 'TabShowCivil':
				if(this.activeBot !== SIDEBAR_TAB_BOT_CIVIL) {
					return false;
				}
				return true;
			case 'TabShowMilitary':
				if(this.activeBot !== SIDEBAR_TAB_BOT_MILITARY) {
					return false;
				}
				return true;
			default:
				throw 'Imperion.Interface.Sidebar.Tabs ident not exist';
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'TabShowBuilding':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						x : -50
					},
					rotation	: 'arrowRight'
				});
				highlight.appendOver(this.elements.top.buildings);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'TabShowShips':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						y : -30
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.top.ships);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'TabShowCivil':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						x : -67
					},
					rotation	: 'arrowRight'
				});
				highlight.appendOver(this.elements.bot.civil);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'TabShowMilitary':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						x : 67
					},
					rotation	: 'arrowLeft'
				});
				highlight.appendOver(this.elements.bot.military);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Tabs ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident) {
		switch(ident) {
			case 'TabShowBuilding':
			case 'TabShowShips':
			case 'TabShowCivil':
			case 'TabShowMilitary':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Tabs ident not exist';
				break;
		}
	},
	
	/**
	 * active building tab
	 * 
	 * @type void
	 */
	setTabBuildingActive : function() {
		this.enableCivil();
		//remove other
		this.elements.top.ships.removeClass('active');
		this.elements.top.turrets.removeClass('active');
		//add active class
		this.elements.top.buildings.addClass('active');
		//
		this.activeTop = SIDEBAR_TAB_TOP_BUIDLINGS;
		//remove checkpoint
		this.removeCheckpoint('TabShowBuilding');
	},
	
	/**
	 * activate buildings
	 * 
	 * @return void
	 */
	activateBuildings : function() {
		this.setTabBuildingActive();
		//
		this.switchBotTab(this.activeBot === '' ? this.options.defaultBot : this.activeBot);
	},
	
	/**
	 * active ship tab
	 * 
	 * @type void
	 */
	setTabShipActive : function() {
		this.enableCivil();
		//remove other
		this.elements.top.turrets.removeClass('active');
		this.elements.top.buildings.removeClass('active');
		//add active class
		this.elements.top.ships.addClass('active');
		//
		this.activeTop = SIDEBAR_TAB_TOP_SHIPS;
		//
		this.removeCheckpoint('TabShowShips');
	},
	
	/**
	 * activate ships
	 * 
	 * @return void
	 */
	activateShips : function() {
		this.setTabShipActive();
		//
		this.switchBotTab(this.activeBot === '' ? this.options.defaultBot : this.activeBot);
	},
	
	/**
	 * active turret tab
	 * 
	 * @type void
	 */
	setTabTurretActive : function() {
		this.disableCivil();
		//remove other
		this.elements.top.ships.removeClass('active');
		this.elements.top.buildings.removeClass('active');
		//add active class
		this.elements.top.turrets.addClass('active');
		//
		this.activeTop = SIDEBAR_TAB_TOP_TURRETS;
	},
	
	/**
	 * activate turrets
	 * 
	 * @return void
	 */
	activateTurrets : function() {
		this.setTabTurretActive();
		//
		this.switchBotTab(this.activeBot === '' ? this.options.defaultBot : this.activeBot);
	},
	
	/**
	 * switch bot tab if top tab is changed
	 * 
	 * @param String botTabType
	 * 
	 * @return void
	 */
	switchBotTab : function(newBotTab) {
		if (SIDEBAR_TAB_TOP_TURRETS == this.activeTop) {
			newBotTab = SIDEBAR_TAB_BOT_MILITARY;
			this.disableCivil();
		} else  {
			this.enableCivil();
		}
		
		switch(newBotTab) {
			case SIDEBAR_TAB_BOT_CIVIL:
				this.activateCivil();
				break;
			case SIDEBAR_TAB_BOT_MILITARY:
				this.activateMilitary();
				break;
		}
	},
	
	/**
	 * set civil tab active
	 * 
	 * @type void
	 */
	setTabCivilActive : function() {
		//remove other
		this.elements.bot.military.removeClass('active');
		//add active class
		this.elements.bot.civil.addClass('active');
		//
		this.activeBot = SIDEBAR_TAB_BOT_CIVIL;
		//remove checkpoint
		this.removeCheckpoint('TabShowCivil');
	},
	
	/**
	 * activate civil filter
	 * 
	 * @return void
	 */
	activateCivil : function() {
		//
		this.setTabCivilActive();
		//
		if(this.activeTop === '') {
			this.activeTop = this.options.defaultTop;
		}
		//
		this.notify({
			top : this.activeTop,
			bot : SIDEBAR_TAB_BOT_CIVIL
		}, 'onTabChanged');
	},
	
	enableCivil : function() {
		this.elements.bot.civil.removeClass('disabled');
	},
	
	disableCivil : function() {
		this.elements.bot.civil.addClass('disabled');
	},
	
	/**
	 * set military tab active
	 * 
	 * @type void
	 */
	setTabMilitaryActive : function() {
		//remove other
		this.elements.bot.civil.removeClass('active');
		//add active class
		this.elements.bot.military.addClass('active');
		//
		this.activeBot = SIDEBAR_TAB_BOT_MILITARY;
		//
		this.removeCheckpoint('TabShowMilitary');
	},
	
	/**
	 * activate military filter
	 * 
	 * @return void
	 */
	activateMilitary : function() {
		this.setTabMilitaryActive();
		//
		if(this.activeTop === '') {
			this.activeTop = this.options.defaultTop;
		}
		//
		this.notify({
			top : this.activeTop === '' ? this.options.defaultTop : this.activeTop,
			bot : SIDEBAR_TAB_BOT_MILITARY
		}, 'onTabChanged');
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'show_buildings':
					this.activateBuildings();
				break;
			case 'show_ships':
					this.activateShips();
				break;
			case 'show_turrets':
					this.activateTurrets();
				break;
			case 'show_civil':
				if (this.activeTop != SIDEBAR_TAB_TOP_TURRETS) {
					this.activateCivil();
				}
				break;
			case 'show_military':
					this.activateMilitary();
				break;
			case 'show_tooltip':
				var section = params.get('section');
				if(this.elements.top[section]) {
					this.tooltipHandle.setText(params.get('text'));
					this.tooltipHandle.show();
				}
				break;
			case 'hide_tooltip':
				this.tooltipHandle.hide();
				break;
		}
		return true;
	},
	
	
	/**
	 * load all elements belong to grid
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.top = {};
		this.elements.top.container = this.getTemplate('SidebarTabsTop');
		this.elements.top.buildings = this.elements.top.container.getElement('.buildings');
		this.addEvent('click', this.elements.top.buildings, $H({
			action : 'show_buildings'
		}));
		
		this.elements.top.ships 	= this.elements.top.container.getElement('.ships');
		this.addEvent('click', this.elements.top.ships, $H({
			action : 'show_ships'
		}));
		
		this.elements.top.turrets 	= this.elements.top.container.getElement('.turrets');
		this.addEvent('click', this.elements.top.turrets, $H({
			action : 'show_turrets'
		}));
		
		$splat(['buildings', 'ships', 'turrets']).each(function(type) {
			var text = this.elements.top[type].getProperty('title');
			if(text !== '') {
				this.addEvent('mouseenter', this.elements.top[type], $H({
					action	: 'show_tooltip',
					text	: text,
					section	: type
				}));
				this.addEvent('mouseleave', this.elements.top[type], $H({
					action : 'hide_tooltip',
					section: type
				}));
				this.elements.top[type].removeProperty('title');
			}
		}, this);
		
		this.elements.bot = {};
		this.elements.bot.container = this.getTemplate('SidebarTabsBottom');
		this.elements.bot.civil		= this.elements.bot.container.getElement('.civil');
		this.addEvent('click', this.elements.bot.civil, $H({
			action : 'show_civil'
		}));
		
		this.elements.bot.military	= this.elements.bot.container.getElement('.military');
		this.addEvent('click', this.elements.bot.military, $H({
			action : 'show_military'
		}));
	}
});

Imperion.Interface.Sidebar.Buildings.ShieldGenerator = new Class(
	/** @lends Imperion.Interface.Sidebar.InnerView.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * shield on / off flag
		 * 
		 * @type Boolean
		 */
		shieldActive : null,
		
		/**
		 * parent inner view class
		 * 
		 * @type	Imperion.Interface.Sidebar.Innerview
		 */
		innerview : null,
		
		/**
		 * special building data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * resource counter
		 * 
		 * @type	Imperion.Interface.Resource.Counter
		 */
		counter : null,
		
		/**
		 * prepare the shield generator class
		 * 
		 * @class handles all extra functions for shield generator eg. toggle on / off and counter for shield points
		 * 
		 * @param	{Object}								specialData
		 * @param	{Imperion.Interface.Sidebar.InnerView}	innerview
		 * @param	{Imperion.Interface.Resource.Counter}	counter
		 *
		 * @constructs
		 */
		initialize : function(specialData, innerview, counter) {
			this.data		= specialData;
			this.innerview	= innerview;
			this.counter	= counter;
			this.counter.attach('ShieldGenerator', this);

			this.loadElements(this.innerview.elements.container);
			
			this.setCapacity(this.counter.capacity);
			this.setStorage(this.counter.storage);
			if(this.data.active) {
				this.shieldOn();
			}
			else {
				this.shieldOff();
			}
		},
		
		/**
		 * clean method
		 * 
		 * @returns	{Void}
		 */
		clean : function() {
			this.counter.detach('ShieldGenerator');
			this.counter.clean();
			this.counter = null;
			this.cleanUp();
		},
		
		/**
		 * turn shield on
		 * 
		 * @returns {Void}
		 */
		shieldOn : function() {
			this.shieldActive = true;
			this.elements.button.removeClass('off');
			this.elements.button.addClass('on');
			this.elements.labelOff.addClass('hideContainer');
			this.elements.labelOn.removeClass('hideContainer');
		},
		
		/**
		 * turn shield off
		 * 
		 * @returns {Void}
		 */
		shieldOff : function() {
			this.shieldActive = false;
			this.elements.button.removeClass('on');
			this.elements.button.addClass('off');
			this.elements.labelOn.addClass('hideContainer');
			this.elements.labelOff.removeClass('hideContainer');
		},
		
		/**
		 * update shield hit point capacity
		 * 
		 * @param	{Number}	newCapacity
		 * 
		 * @returns	{Void}
		 */
		setCapacity : function(newCapacity) {
			this.elements.capacity.set('text', this.getUser().formatNumber(newCapacity));
		},
		
		/**
		 * update shield hit point storage
		 * 
		 * @param	{Number}	newStorage
		 * 
		 * @returns	{Void}
		 */
		setStorage : function(newStorage) {
			this.elements.bar.setStyle('width', newStorage * 100 / this.counter.capacity + '%');
			this.elements.storage.set('text', this.getUser().formatNumber(newStorage));
		},
		
		/**
		 * resource listener change
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		shieldResourceChanged : function(params) {
			this.setStorage(params.resourceCounter.storage);
		},
		
		/**
		 * transfer new shield status to server
		 * 
		 * @param	{String}	shieldState
		 * 
		 * @returns	{Void}
		 */
		requestShield : function(shieldState) {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'special', 'shield'), {
				state : shieldState
			}, this.afterRequestShield.bindNew(this));
		},
		
		/**
		 * callback after shield state was changed
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestShield : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				if(rData.newState == 'on') {
					this.shieldOn();
				}
				else {
					this.shieldOff();
				}
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'toggle_shield':
					if(this.shieldActive) {
						this.requestShield('off');
					}
					else {
						this.requestShield('on');
					}
					break;
			}
		},
		
		/**
		 * load elements
		 * 
		 * @param	{Element}	parentContainer
		 * 
		 * @returns {Void}
		 */
		loadElements : function(parentContainer) {
			this.elements.container = parentContainer.getElement('.extra');
			
			this.elements.button = this.elements.container.getElement('A.button');
			
			this.addEvent('click', this.elements.button, $H({
				action : 'toggle_shield'
			}));
			
			this.elements.bar = this.elements.container.getElement('.bar');
			
			this.elements.labelOn	= this.elements.container.getElement('SPAN.on');
			this.elements.labelOff	= this.elements.container.getElement('SPAN.off');
			
			this.elements.storage 	= this.elements.container.getElement('.storage');
			this.elements.capacity 	= this.elements.container.getElement('.capacity');
		}
	}
);
Imperion.Interface.Sidebar.Buildings.ArmsFactory = new Class(
	/** @lends Imperion.Interface.Sidebar.Buildings.ArmsFactory.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * turrets on / off flag
		 * 
		 * @type Boolean
		 */
		turretsActive : null,
		
		/**
		 * parent inner view class
		 * 
		 * @type	Imperion.Interface.Sidebar.Innerview
		 */
		innerview : null,
		
		/**
		 * surface turrets handler
		 * 
		 * @type	Imperion.Interface.Surface.Turrets
		 */
		surfaceTurrets : null,
		
		/**
		 * special building data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * prepare the turrets generator class
		 * 
		 * @class handles all extra functions for turrets eg. toggle on / off
		 * 
		 * @param	{Object}								specialData
		 * @param	{Imperion.Interface.Sidebar.InnerView}	innerview
		 * @param	{Imperion.Interface.Surface.Turrets}	surfaceTurrets
		 *
		 * @constructs
		 */
		initialize : function(specialData, innerview, surfaceTurrets) {
			this.data			= specialData;
			this.innerview		= innerview;
			this.surfaceTurrets	= surfaceTurrets;
			
			this.loadElements(this.innerview.elements.container);
			
			if(this.data.active) {
				this.turretsOn();
			}
			else {
				this.turretsOff();
			}
		},
		
		/**
		 * clean method
		 * 
		 * @returns	{Void}
		 */
		clean : function() {
			this.cleanUp();
		},
		
		/**
		 * turn turrets on
		 * 
		 * @returns {Void}
		 */
		turretsOn : function() {
			this.turretsActive = true;
			this.elements.button.removeClass('off');
			this.elements.button.addClass('on');
			this.elements.labelOff.addClass('hideContainer');
			this.elements.labelOn.removeClass('hideContainer');
			this.surfaceTurrets.changeState(TURRET_STATE_ORBITAL);
		},
		
		/**
		 * turn turrets off
		 * 
		 * @returns {Void}
		 */
		turretsOff : function() {
			this.turretsActive = false;
			this.elements.button.removeClass('on');
			this.elements.button.addClass('off');
			this.elements.labelOn.addClass('hideContainer');
			this.elements.labelOff.removeClass('hideContainer');
			this.surfaceTurrets.changeState(TURRET_STATE_HIDDEN);
		},
		
		/**
		 * transfer new turret status to server
		 * 
		 * @param	{String}	turretsState
		 * 
		 * @returns	{Void}
		 */
		requestTurrets : function(turretsState) {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'special', 'turrets'), {
				state : turretsState
			}, this.afterRequestTurrets.bindNew(this));
		},
		
		/**
		 * callback after turrets state was changed
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestTurrets : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				if(rData.newState == 'on') {
					this.turretsOn();
				}
				else {
					this.turretsOff();
				}
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'toggle_turrets':
					if(this.turretsActive) {
						this.requestTurrets('off');
					}
					else {
						this.requestTurrets('on');
					}
					break;
			}
		},
		
		/**
		 * load elements
		 * 
		 * @param	{Element}	parentContainer
		 * 
		 * @returns {Void}
		 */
		loadElements : function(parentContainer) {
			this.elements.container = parentContainer.getElement('.extra');
			
			this.elements.button = this.elements.container.getElement('A.button');
			
			this.addEvent('click', this.elements.button, $H({
				action : 'toggle_turrets'
			}));
			
			this.elements.labelOn	= this.elements.container.getElement('SPAN.on');
			this.elements.labelOff	= this.elements.container.getElement('SPAN.off');
		}
	}
);
Imperion.Interface.Sidebar.Buildings.Hangar = new Class(
	/** @lends Imperion.Interface.Sidebar.Buildings.Hangar.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],

		/**
		 * hide on / off flag
		 * 
		 * @type Boolean
		 */
		hideActive : null,
		
		/**
		 * parent inner view class
		 * 
		 * @type	Imperion.Interface.Sidebar.Innerview
		 */
		innerview : null,
				
		/**
		 * special building data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * prepare the turrets generator class
		 * 
		 * @class handles all extra functions for turrets eg. toggle on / off
		 * 
		 * @param	{Object}								specialData
		 * @param	{Imperion.Interface.Sidebar.InnerView}	innerview
		 *
		 * @constructs
		 */
		initialize : function(specialData, innerview) {
			this.data			= specialData;
			this.innerview		= innerview;
			
			this.loadElements(this.innerview.elements.container);
			
			if(this.data.active) {
				this.hideOn();
			}
			else {
				this.hideOff();
			}
		},
		
		/**
		 * clean method
		 * 
		 * @returns	{Void}
		 */
		clean : function() {
			this.cleanUp();
		},
		
		/**
		 * turn turrets on
		 * 
		 * @returns {Void}
		 */
		hideOn : function() {
			this.hideActive = true;
			this.elements.button.removeClass('off');
			this.elements.button.addClass('on');
			this.elements.labelOff.addClass('hideContainer');
			this.elements.labelOn.removeClass('hideContainer');
		},
		
		/**
		 * turn turrets off
		 * 
		 * @returns {Void}
		 */
		hideOff : function() {
			this.hideActive = false;
			this.elements.button.removeClass('on');
			this.elements.button.addClass('off');
			this.elements.labelOn.addClass('hideContainer');
			this.elements.labelOff.removeClass('hideContainer');
		},
		
		/**
		 * transfer new hide status to server
		 * 
		 * @param	{String}	hideState
		 * 
		 * @returns	{Void}
		 */
		requestHide : function(hideState) {
			Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'special', 'autohide'), {
				state : hideState
			}, this.afterRequestHide.bindNew(this));
		},
		
		/**
		 * callback after turrets state was changed
		 * 
		 * @param	{Imperion.Util.Response}	response
		 * 
		 * @returns	{Void}
		 */
		afterRequestHide : function(response) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				if(rData.newState == 'ON') {
					this.hideOn();
				}
				else {
					this.hideOff();
				}
			}
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'toggle_hide':
					if(this.hideActive) {
						this.requestHide('OFF');
					}
					else {
						this.requestHide('ON');
					}
					break;
			}
		},
		
		/**
		 * load elements
		 * 
		 * @param	{Element}	parentContainer
		 * 
		 * @returns {Void}
		 */
		loadElements : function(parentContainer) {
			this.elements.container = parentContainer.getElement('.extra');
			
			this.elements.button = this.elements.container.getElement('A.button');
			
			this.addEvent('click', this.elements.button, $H({
				action : 'toggle_hide'
			}));
			
			this.elements.labelOn	= this.elements.container.getElement('SPAN.on');
			this.elements.labelOff	= this.elements.container.getElement('SPAN.off');
		}
	}
);
Imperion.Interface.Sidebar.Buildings.ResourceCache = new Class(
	/** @lends Imperion.Interface.Sidebar.Buildings.ResourceCache.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],
		
		/**
		 * options 
		 * 
		 * @type	Object
		 */
		options : {
			resources : [RESOURCE_TYPE_METAL, RESOURCE_TYPE_CRYSTAL, RESOURCE_TYPE_TRITIUM]
		},
		
		/**
		 * parent inner view class
		 * 
		 * @type	Imperion.Interface.Sidebar.Innerview
		 */
		innerview : null,
		
		/**
		 * special building data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * resource counter
		 * 
		 * @type	Object
		 */
		resourceCounter : null,
		
		/**
		 * second timer
		 * 
		 * @type	Imperion.Util.SecondTimer
		 */
		secondTimer : null,
		
		/**
		 * time resource flag object
		 * 
		 * @type	Object
		 */
		timeFlags : {
			metal	: false,
			crystal : false,
			tritium : false
		},
		
		/**
		 * prepare the turrets generator class
		 * 
		 * @class handles all extra functions for resource cache
		 * 
		 * @param	{Object}								specialData
		 * @param	{Imperion.Interface.Sidebar.InnerView}	innerview
		 * @param	{Object}								resourceCounter
		 * @param	{Imperion.Interface.Util.secondTimer}	secondTimer
		 *
		 * @constructs
		 */
		initialize : function(specialData, innerview, resourceCounter, secondTimer) {
			this.data				= specialData;
			this.innerview			= innerview;
			this.resourceCounter	= resourceCounter;
			this.secondTimer		= secondTimer;

			this.secondTimer.attach('ResourceCache', this);
			
			this.loadElements(this.innerview.elements.container);
			
			$splat(this.options.resources).each(function(resource) {
				this.resourceCounter[resource].attach('ResourceCache', this);
				this.updateResource(resource);
			}, this);
		},
		
		/**
		 * update resource
		 * 
		 * @param	{String}	resourceType
		 * 
		 * @returns	{Void}
		 */
		updateResource : function(resourceType) {
			if(this.data[resourceType] > this.resourceCounter[resourceType].storage) {
				var diff = this.data[resourceType] - this.resourceCounter[resourceType].storage; 
				var prod = this.resourceCounter[resourceType].production * 1000;
				if(prod > 0) {
					this.timeFlags[resourceType] = Math.floor(diff / prod);
					this.elements[resourceType].set('text', this.getUser().formatDuration(this.timeFlags[resourceType]));
				}
				else {
					this.elements[resourceType].set('html', '&infin;');
					this.timeFlags[resourceType] = -1;
				}
			}
			else {
				this.elements[resourceType].set('text', this.getUser().formatNumber(this.resourceCounter[resourceType].storage - this.data[resourceType]));
				this.timeFlags[resourceType] = -1;
			}
		},
		
		/**
		 * timer step listener
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		timerStep : function(params) {
			$splat(this.options.resources).each(function(resource) {
				if(this.timeFlags[resource] >= 0) {
					this.elements[resource].set('text', this.getUser().formatDuration(this.timeFlags[resource]--));
					if(this.timeFlags[resource] < 0) {
						this.elements[resource].set('text', this.getUser().formatNumber(this.resourceCounter[resource].storage - this.data[resource]));
						this.timeFlags[resource] = -1;
					}
				} 
			}, this); 
		},
		
		/**
		 * clean method
		 * 
		 * @returns	{Void}
		 */
		clean : function() {
			this.resourceCounter.metal.detach('resourceChache');
			this.resourceCounter.crystal.detach('resourceChache');
			this.resourceCounter.tritium.detach('resourceChache');
			this.cleanUp();
		},
		
		/**
		 * listener for metal change
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		metalResourceChanged : function(params) {
			if(this.timeFlags.metal < 0) {
				this.elements.metal.set('text', this.getUser().formatNumber(this.resourceCounter.metal.storage - this.data.metal));
			}
		},
		
		/**
		 * listener for metal counter update
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		metalResourceUpdated : function(params) {
			this.updateResource(RESOURCE_TYPE_METAL);
		},
		
		/**
		 * listener for crystal change
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		crystalResourceChanged : function(params) {
			if(this.timeFlags.crystal < 0) {
				this.elements.crystal.set('text', this.getUser().formatNumber(this.resourceCounter.crystal.storage - this.data.crystal));
			}
		},
		
		/**
		 * listener for crystal counter update
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		crystalResourceUpdated : function(params) {
			this.updateResource(RESOURCE_TYPE_CRYSTAL);
		},
		
		/**
		 * listener for tritium change
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		tritiumResourceChanged : function(params) {
			if(this.timeFlags.tritium < 0) {
				this.elements.tritium.set('text', this.getUser().formatNumber(this.resourceCounter.tritium.storage - this.data.tritium));
			}
		},
		
		/**
		 * listener for tritium counter update
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		tritiumResourceUpdated : function(params) {
			this.updateResource(RESOURCE_TYPE_TRITIUM);
		},

		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'toggle_turrets':
					
					break;
			}
		},
		
		/**
		 * load elements
		 * 
		 * @param	{Element}	parentContainer
		 * 
		 * @returns {Void}
		 */
		loadElements : function(parentContainer) {
			this.elements.container = parentContainer.getElement('.extra');
			
			$splat(this.options.resources).each(function(resource) {
				this.elements[resource] = this.elements.container.getElement('.' + resource + ' SPAN'); 
			}, this); 
		}
	}
);
Imperion.Interface.Sidebar.Data.Root = new Class(
	/** @lends Imperion.Interface.Sidebar.Data.Building.prototype */	
	{
		/**
		 * urls
		 * 
		 * @var String
		 */
		urls : {
			CreateData : '',
			GridData : ''
		},
		
		/**
		 * prepare the data handler
		 * 
		 * @constructor
		 */
		initialize : function() {
			
		},
		
		/**
		 * callback for after request function
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @return void
		 */
		afterRequestModule : function(response, requestParams) {
			requestParams.callback(response, requestParams.createMethod);
		}
	}
);
Imperion.Interface.Sidebar.Data.Building = new Class(
	/** @lends Imperion.Interface.Sidebar.Data.Building.prototype */	
	{
		Extends : Imperion.Interface.Sidebar.Data.Root,
		/**
		 * prepare data class
		 * 
		 * @constructor
		 */
		initialize : function() {
			this.urls.GridData	  = Imperion.Util.Helper.url('building', 'index', 'buildingdatagrid');
			this.urls.CreateData = Imperion.Util.Helper.url('building', 'index', 'buildingdatacreate');
		},
		
		/**
		 * request data for new building module
		 * 
		 * @param String buildingId
		 * @param Function callback
		 * @param Function createMethod
		 * 
		 * @return void
		 */
		requestCreateData : function(buildingId, callback, createMethod) {
			Imperion.Util.Request.send(this.urls.CreateData, {
				id	: buildingId
			}, this.afterRequestModule.bindNew(this), {
				callback 	: callback,
				createMethod: createMethod
			});
		},
		
		/**
		 * request the building grid data
		 * 
		 * @param String category Category of buildings to show (military or civil)
		 * @param Function callback
		 * 
		 * @return void
		 */
		requestQueueGridData : function(category, callback) {
			Imperion.Util.Request.send(this.urls.GridData, {
				category	: category
			}, this.afterRequestGridData.bindNew(this), {
				callback : callback
			});
		},
		
		/**
		 * callback for after request function
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @return void
		 */
		afterRequestGridData : function(response, requestParams) {
			requestParams.callback(response);
		}
	}
);
Imperion.Interface.Sidebar.Data.InnerView = new Class(
	/** @lends Imperion.Interface.Sidebar.Data.InnerView.prototype */	
	{
		/**
		 * building urls
		 * 
		 * @type {Object}
		 */
		urls : {
			innerview	: '',
			upgrade		: '',
			downgrade	: ''
		},
		/**
		 * prepare data class
		 * 
		 * @constructor
		 */
		initialize : function() {
			this.urls.innerview	= Imperion.Util.Helper.url('building', 'index', 'innerview');
			this.urls.upgrade	= Imperion.Util.Helper.url('building', 'index', 'upgrade');
			this.urls.downgrade	= Imperion.Util.Helper.url('building', 'index', 'downgrade');
		},
		
		/**
		 * request inner view content
		 * 
		 * @param {Int} ground
		 * @param {Function} callback
		 * @param {Function} createMethod
		 * 
		 * @type void
		 */
		requestInnerView : function(ground, callback) {
			Imperion.Util.Request.send(this.urls.innerview, {
				ground : ground
			}, this.afterRequestInnerView.bindNew(this), {
				callback 	: callback
			});
		},
		
		/**
		 * callback for after request function
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @return void
		 */
		afterRequestInnerView : function(response, requestParams) {
			requestParams.callback(response);
		},
		
		/**
		 * request upgrade building
		 * 
		 * @param {int} ground
		 * 
		 * @type void
		 */
		requestUpgradeBuilding : function(ground, callback) {
			Imperion.Util.Request.send(this.urls.upgrade, {
				ground : ground
			}, this.afterRequestUpgradeBuilding.bindNew(this), {
				callback 	: callback
			});
		},
		
		/**
		 * callback after upgrade request finished
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @type void
		 */
		afterRequestUpgradeBuilding : function(response, requestParams) {
			requestParams.callback(response);
		},
		
		/**
		 * request downgrade building
		 * 
		 * @param {Number} ground
		 * 
		 * @returns {void}
		 */
		requestDowngradeBuilding : function(ground, callback) {
			Imperion.Util.Request.send(this.urls.downgrade, {
				ground : ground
			}, this.afterRequestDowngradeBuilding.bindNew(this), {
				callback 	: callback
			});
		},
		
		/**
		 * callback after downgrade request finished
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @type void
		 */
		afterRequestDowngradeBuilding : function(response, requestParams) {
			requestParams.callback(response);
		}
	}
);
Imperion.Interface.Sidebar.Data.Ship = new Class(
	/** @lends Imperion.Interface.Sidebar.Data.Ship.prototype */	
	{
		Extends : Imperion.Interface.Sidebar.Data.Root,
		/**
		 * prepare data class
		 * 
		 * @constructor
		 */
		initialize : function() {
			this.urls.GridData	  = Imperion.Util.Helper.url('unit', 'ship', 'shipdatagrid');
			this.urls.CreateData = Imperion.Util.Helper.url('unit', 'ship', 'shipdatacreate');
		},
		
		/**
		 * request data for new ship module
		 * 
		 * @param String shipId
		 * @param Function callback
		 * @param Function createMethod
		 * 
		 * @return void
		 */
		requestCreateData : function(shipId, callback, createMethod) {
			Imperion.Util.Request.send(this.urls.CreateData, {
				id	: shipId
			}, this.afterRequestModule.bindNew(this), {
				callback 	: callback,
				createMethod: createMethod
			});
		},
		
		/**
		 * request the building grid data
		 * 
		 * @param String category Category of buildings to show (military or civil)
		 * @param Function callback
		 * 
		 * @return void
		 */
		requestQueueGridData : function(category, callback) {
			Imperion.Util.Request.send(this.urls.GridData, {
				category	: category
			}, this.afterRequestGridData.bindNew(this), {
				callback : callback
			});
		},
		
		/**
		 * callback for after request function
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @return void
		 */
		afterRequestGridData : function(response, requestParams) {
			requestParams.callback(response);
		}
	}
);
Imperion.Interface.Sidebar.Data.Turret = new Class(
	/** @lends Imperion.Interface.Sidebar.Data.Turret.prototype */	
	{
		Extends : Imperion.Interface.Sidebar.Data.Root,
		/**
		 * prepare data class
		 * 
		 * @constructor
		 */
		initialize : function() {
			this.urls.GridData	  = Imperion.Util.Helper.url('unit', 'turret', 'turretdatagrid');
			this.urls.CreateData = Imperion.Util.Helper.url('unit', 'turret', 'turretdatacreate');
		},
		
		/**
		 * request data for new turret module
		 * 
		 * @param String turretId
		 * @param Function callback
		 * @param Function createMethod
		 * 
		 * @return void
		 */
		requestCreateData : function(turretId, callback, createMethod) {
			Imperion.Util.Request.send(this.urls.CreateData, {
				id	: turretId
			}, this.afterRequestModule.bindNew(this), {
				callback 	: callback,
				createMethod: createMethod
			});
		},
		
		/**
		 * request the building grid data
		 * 
		 * @param String category Category of buildings to show (military or civil)
		 * @param Function callback
		 * 
		 * @return void
		 */
		requestQueueGridData : function(category, callback) {
			Imperion.Util.Request.send(this.urls.GridData, {
				category	: category
			}, this.afterRequestGridData.bindNew(this), {
				callback : callback
			});
		},
		
		/**
		 * callback for after request function
		 * 
		 * @param Imperion.Util.Response response
		 * @param Object requestParams
		 * 
		 * @return void
		 */
		afterRequestGridData : function(response, requestParams) {
			requestParams.callback(response);
		}
	}
);
Imperion.Interface.Sidebar.Create.Data = new Class({
	
	/**
	 * prepare
	 * 
	 * @return void
	 */
	initialize : function() {
		
	},
	
	/**
	 * request for new building
	 * 
	 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
	 * @param Imperion.Interface.Sidebar.Create.Building	building
	 * @param function	callback
	 * 
	 * @return void
	 */
	requestNewBuilding : function(slotItem, building, callback) {
		Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'index', 'createbuilding'), {
			ground 	: slotItem.options.ground,
			type	: building.options.type
		}, this.afterRequestNewBuilding.bindNew(this), {
			callback : callback,
			slotItem : slotItem
		});
	},
	
	/**
	 * callback after new building request
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestNewBuilding : function(response, requestParams) {
		requestParams.callback(response, requestParams.slotItem);
	},
	
	/**
	 * request for new ship
	 * 
	 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
	 * @param Imperion.Interface.Sidebar.Create.Ship Ship
	 * 
	 * @return void
	 */
	requestNewShip : function(type, amount, callback) {
		Imperion.Util.Request.send(Imperion.Util.Helper.url('unit', 'ship', 'createship'), {
			amount 	: amount,
			type	: type
		}, this.afterRequestNewShip.bindNew(this), {
			callback : callback,
			type	 : type	
		});
	},
	
	/**
	 * callback after new ship request
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestNewShip : function(response, requestParams) {
		requestParams.callback(response, requestParams.slotItem);
	},
	
	/**
	 * request for new turret
	 * 
	 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
	 * @param Imperion.Interface.Sidebar.Create.Ship Turret
	 * 
	 * @return void
	 */
	requestNewTurret : function(type, amount, callback) {
		Imperion.Util.Request.send(Imperion.Util.Helper.url('unit', 'turret', 'createturret'), {
			amount 	: amount,
			type	: type
		}, this.afterRequestNewTurret.bindNew(this), {
			callback : callback,
			type	 : type	
		});
	},
	
	/**
	 * callback after new turret request
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestNewTurret : function(response, requestParams) {
		requestParams.callback(response, requestParams.slotItem);
	},
	
	/**
	 * request for slot activation
	 * 
	 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
	 * @param Imperion.Interface.Sidebar.Create.Building	building
	 * @param function	callback
	 * 
	 * @return void
	 */
	requestActivateSlot : function(slotItem, building, callback) {
		var params = $H({
			ground 	: slotItem.options.ground
		});
		
		if (building) {
			params.include('type', building.options.type)
		};
		
		Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'index', 'activateslot'), params
		, this.afterRequestActivateSlot.bindNew(this), {
			callback : callback,
			slotItem : slotItem
		});
	},
	
	/**
	 * callback after new building request
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestActivateSlot : function(response, requestParams) {
		requestParams.callback(response, requestParams.slotItem);
	}
});
Imperion.Interface.Sidebar.Create.Root = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Observable, Imperion.Util.Checkpoint, Imperion.Translate],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		type : 'UNDEFINED',
		extension : '.jpg'
	},
	
	/**
	 * data
	 * 
	 * @type Object
	 */
	data : null,
	
	/**
	 * resource counter
	 * 
	 * @var Object
	 */
	resources : null,
	
	/**
	 * check res
	 * 
	 * @type {Object}
	 */
	resourceNotEnough : {
		metal	: null,
		crystal : null,
		tritium : null,
		zeks	: null,
		energy	: null
	},
	
	/**
	 * data handler
	 * 
	 * @var Imperion.Interface.Sidebar.Create.Data
	 */
	dataHandler : null,
	
	/**
	 * parent sidebar
	 * 
	 * @var mperion.Interface.Sidebar.Handle
	 */
	parentSidebar : null,
	
	/**
	 * tooltip handle
	 * 
	 * @var mperion.Interface.Gui.Tooltip
	 */
	tooltip : null,
	
	/**
	 * npc content
	 * 
	 * @type	Imperion.Interface.Dialog.Context.NPC
	 */
	npcContent : null,
	
	/**
	 * request running flag
	 * 
	 * @type	Boolean
	 */
	requestRunning : false,
	
	/**
	 * prepare the root
	 * 
	 * @param Object responseData
	 * @param Object resourceCounter 
	 * @param Imperion.Interface.Sidebar.Handle parentSidebar
	 * 
	 * @return void
	 */
	initialize : function(responseData, resourceCounter, parentSidebar, tooltip) {
		//
		this.parentSidebar	= parentSidebar;
		this.requestRunning	 = false;
		//
		this.dataHandler = Imperion.Interface.Sidebar.Factory.createData();
		//
		this.resources = resourceCounter;
		//
		this.tooltip	= tooltip;
		//
		this.setUser(this.getUser());
		//
		this.setPath(this.options.path + this.user.options.kind + '/');
		//
		this.data = responseData;
		//
		this.setResources({
			metal	: this.data.metal,
			crystal	: this.data.crystal,
			tritium	: this.data.tritium,
			zeks	: this.data.zeks,
			energy  : this.data.energy,
			time	: this.data.time
		});
		//
		this.setType(responseData.type);
		//
		this.show();
		//
		this.npcContent = null;
	},
	
	/**
	 * clean
	 * 
	 * @return void
	 */
	clean : function() {
		delete this.dataHandler;
		this.cleanUp();
	},
	
	/**
	 * set path
	 * 
	 * @param String newPath
	 * 
	 * @return void
	 */
	setPath : function(newPath) {
		this.options.path = newPath;
	},
	
	/**
	 * set the building type
	 * 
	 * @param String newType
	 * 
	 * @return void
	 */
	setType : function(newType) {
		this.options.type = newType;
		this.setImage(newType);
	},
	
	/**
	 * set image
	 * 
	 * @param String imageName
	 * 
	 * @return void
	 */
	setImage : function(imageName) {
		this.elements.image.set('src', this.options.path + imageName + this.options.extension);
	},
	
	/**
	 * set time
	 * 
	 * @param int duration
	 * 
	 * @return void
	 */
	setTime : function(duration) {
		this.elements.time.set('text', this.user.formatDuration(Math.max(1, Math.floor(duration))));
	},
	
	/**
	 * set all resources
	 * 
	 * @param {Object} res
	 * 
	 * @type void
	 */
	setResources : function(res) {
		this.setResource(RESOURCE_TYPE_METAL		, res.metal);
		this.setResource(RESOURCE_TYPE_CRYSTAL		, res.crystal);
		this.setResource(RESOURCE_TYPE_TRITIUM		, res.tritium);
		this.setResource(RESOURCE_TYPE_ENERGY		, res.energy);
		
		//attach resource to resource counter as listener
		this.resources[RESOURCE_TYPE_METAL].attach('CreateView', this);
		if(this.resources[RESOURCE_TYPE_CRYSTAL].type) {
			this.resources[RESOURCE_TYPE_CRYSTAL].attach('CreateView', this);
		}
		this.resources[RESOURCE_TYPE_TRITIUM].attach('CreateView', this);
		this.resources[RESOURCE_TYPE_ENERGY].attach('CreateView', this);
		
		this.setTime(res.time);
	},
	
	/**
	 * set 1 resource
	 * 
	 * @param	{String}	type
	 * @param	{Number}	value
	 * 
	 * @returns {void}
	 */
	setResource : function(type, value) {
		//set value to dom element
		this.setResourceValueAtElement(type, value);
		//check if resource is energy (buildings with 0 energy are energy buildings and can always build
		if(type === RESOURCE_TYPE_ENERGY) {
			if(value > 0) {
				//check if enough resources are in storage so the can build
				if(value > this.resources[type].storage) {
					this.disableResource(type);
				}
				else {
					this.enableResource(type);
				}	
			}
			else {
				this.enableResource(type);
			}
		}
		else {
			//check if enough resources are in storage so the can build
			if(value > this.resources[type].storage) {
				this.disableResource(type);
			}
			else {
				this.enableResource(type);
			}
		}
	},
	
	/**
	 * update resource dom element
	 * 
	 * @param	{String}	type
	 * @param	{Number}	newValue
	 * 
	 * @returns {void}
	 */
	setResourceValueAtElement : function(type, value) {
		this.elements.resources[type].set('text', this.user.formatNumber(value));
	},
	
	/**
	 * enable resource
	 * 
	 * @param	{String}	type
	 * 
	 * @returns {void}
	 */
	enableResource : function(type) {
		if(this.resourceNotEnough[type] || this.resourceNotEnough[type] === null) {
			this.elements.resources[type].addClass('disabled');
			if(this.elements.npc[type]) {
				this.elements.npc[type].addClass('disabled');
			}
			this.resourceNotEnough[type] = false;
			this.enableBuild();
		}
	},
	
	/**
	 * disable resource
	 * 
	 * @param	{String}	type
	 * 
	 * @returns {void}
	 */
	disableResource : function(type) {
		if(!this.resourceNotEnough[type] || this.resourceNotEnough[type] === null) {
			this.elements.resources[type].removeClass('disabled');
			if(this.elements.npc[type]) {
				this.elements.npc[type].removeClass('disabled');
			}
			this.resourceNotEnough[type] = true;
			this.disableBuild();
		}
	},
	
	/**
	 * resource counter metal listener
	 * 
	 * @param {Object} params
	 * 
	 * @type void
	 */
	metalResourceChanged : function(params) {
		if(this.resourceNotEnough.metal) {
			if(this.data.metal <= this.resources.metal.storage) {
				this.enableResource(RESOURCE_TYPE_METAL);
			}
		}
		else {
			if(this.data.metal > this.resources.metal.storage) {
				this.disableResource(RESOURCE_TYPE_METAL);
			}
		}
	},
	
	/**
	 * resource counter crystal listener
	 * 
	 * @param {Object} params
	 * 
	 * @type void
	 */
	crystalResourceChanged : function(params) {
		if(this.resourceNotEnough.crystal) {
			if(this.data.crystal <= this.resources.crystal.storage) {
				this.enableResource(RESOURCE_TYPE_CRYSTAL);
			}
		}
		else {
			if(this.data.crystal > this.resources.crystal.storage) {
				this.disableResource(RESOURCE_TYPE_CRYSTAL);
			}
		}
	},
	
	/**
	 * resource counter tritium listener
	 * 
	 * @param {Object} params
	 * 
	 * @type void
	 */
	tritiumResourceChanged : function(params) {
		if(this.resourceNotEnough.tritium) {
			if(this.data.tritium <= this.resources.tritium.storage) {
				this.enableResource(RESOURCE_TYPE_TRITIUM);
			}
		}
		else {
			if(this.data.tritium > this.resources.tritium.storage) {
				this.disableResource(RESOURCE_TYPE_TRITIUM);
			}
		}
	},
		
	/**
	 * resource energy change listener
	 * 
	 * @param {Object} params
	 * 
	 * @type void
	 */
	energyResourceChanged : function(params) {
		if(this.resourceNotEnough.energy) {
			if(this.data.energy <= this.resources.energy.storage) {
				this.enableResource(RESOURCE_TYPE_ENERGY);
			}
		}
		else {
			if(this.data.energy > 0 && this.data.energy > this.resources.energy.storage) {
				this.disableResource(RESOURCE_TYPE_ENERGY);
			}
		}
	},
	
	/**
	 * check if player can build
	 * 
	 * @type void
	 */
	canBuild : function() {
		if(!this.resourceNotEnough.metal && !this.resourceNotEnough.crystal && !this.resourceNotEnough.tritium && !this.resourceNotEnough.energy && !this.resourceNotEnough.zeks) {
			return true;
		}
		return false;
	},
	
	/**
	 * enable build
	 * 
	 * @type void
	 */
	enableBuild : function() {
		if(this.canBuild()) {
			this.hideError();
			this.showStartButton();
		}
	},
	
	/**
	 * disable build
	 * 
	 * @type void
	 */
	disableBuild : function() {
		if(!this.canBuild()) {
			this.hideStartButton();
			this.showError();
		}
	},
	
	/**
	 * show the start button
	 * 
	 * @return void
	 */
	showStartButton : function() {
		this.elements.start.removeClass('hideContainer');
	},
	
	/**
	 * hide the start button
	 * 
	 * @return void
	 */
	hideStartButton : function() {
		this.elements.start.addClass('hideContainer');
	},
	
	/**
	 * show error message
	 * 
	 * @return void
	 */
	showError : function() {
		this.elements.error.removeClass('hideContainer');
	},
	
	/**
	 * hide error message
	 * 
	 * @return void
	 */
	hideError : function() {
		this.elements.error.addClass('hideContainer');
	},
	
	/**
	 * show npc dialog
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns	{Void}
	 */
	showNPC : function(params) {
		var dialog	= Imperion.Interface.Dialog.Factory.handle().getDialog('npc');
		var npc		= Imperion.Interface.Dialog.Context.Factory.npc(dialog, params);
		npc.showContext();
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'start_action':
				this.start(eventObject);
				break;
			case 'show_npc':
				this.showNPC();
				break;
			case 'show_help':
				this.showHelp();
				break;
			case 'show_npc_tooltip':
				this.tooltip.setText(this.translate('construction__credit_feature_npc_trade'));
				this.tooltip.show();
				break;
			case 'hide_npc_tooltip':
				this.tooltip.hide();
				break;
		}
	},
	
	/**
	 * load root elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.error = this.elements.container.getElement('.error');
		this.elements.start = this.elements.container.getElement('.start');
		this.addEvent('click', this.elements.start, $H({
			action : 'start_action'
		}));
		
		this.elements.resources = {
			metal 	: this.elements.container.getElement('.dspMetal'),
			crystal : this.elements.container.getElement('.dspCrystal'),
			tritium : this.elements.container.getElement('.dspTritium'),
			energy	: this.elements.container.getElement('.energy')
		};
		
		this.elements.npc = {
			metal 	: this.elements.container.getElement('.top'),
			crystal : this.elements.container.getElement('.middle'),
			tritium : this.elements.container.getElement('.bottom'),
			button	: this.elements.container.getElement('.npcButton')
		};
		
		this.addEvent('click', this.elements.npc.button, $H({
			action : 'show_npc'
		}));
		
		this.addEvent('mouseenter', this.elements.npc.button, $H({
			action : 'show_npc_tooltip'
		}));
		this.addEvent('mouseleave', this.elements.npc.button, $H({
			action : 'hide_npc_tooltip'
		}));
		
		this.elements.time = this.elements.container.getElement('.time');
		this.elements.image = this.elements.container.getElement('IMG');
		this.elements.help = this.elements.container.getElement('.help');
		
		this.addEvent('click', this.elements.help, $H({
			action : 'show_help'
		}));
	}
});
Imperion.Interface.Sidebar.Create.Building = new Class({
	Extends : Imperion.Interface.Sidebar.Create.Root,

	/**
	 * options
	 *
	 * @var Object
	 */
	options : {
		path : '/images/buildings/detail/',
		ghost: '/images/buildings/surface/',
		opacity : 0.5
	},

	/**
	 * class name
	 *
	 * @type	String
	 */
	className : 'Imperion.Interface.Sidebar.Create.Building',

	/**
	 * planet surface handle
	 *
	 * @var Imperion.Interface.PlanetSurface
	 */
	planetSurface : null,

	/**
	 * drag instance
	 *
	 * @var Imperion.Interface.Sidebar.Create.BuildingDrag
	 */
	drag : null,

	/**
	 * building mode flag
	 *
	 * @type	Boolean
	 */
	buildingMode : false,

	/**
	 * slot item
	 *
	 * @type	Object
	 */
	slotItem : {},

	/**
	 * initialize
	 *
	 * @param Object responseData
	 * @param Object resourceCounter
	 * @param Imperion.Interface.Sidebar.Handle parentSidebar
	 * @param Imperion.Interface.PlanetSurface planetSurface
	 *
	 * @return void
	 */
	initialize : function(responseData, resourceCounter, parentSidebar, tooltip, planetSurface) {
		//
		this.drag					= null;
		this.buildingMode			= false;
		//
		this.loadElements(parentSidebar.content.area.elements.container);
		//
		this.parent(responseData, resourceCounter, parentSidebar, tooltip);
		//
		this.planetSurface = planetSurface;
		//
		this.options.ghost = this.planetSurface.options.path.buildings + 'ghost/';

	},

	/**
	 * clean
	 *
	 * @returns void
	 */
	clean : function() {
		this.removeCheckpoint('CreateBuildingStart');
		this.parent();
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'CreateBuildingStart':
				for(var i = params.slots.length -1 ; i >= 0 ;i--) {
					if(this.buildingMode || this.planetSurface.items[params.slots[i].ground].options.type === SURFACE_SLOT_TYPE_BUILD) {
						return true;
					}
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'CreateBuildingStart':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						y : 30
					}
				});
				highlight.appendOver(this.elements.start);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		switch(ident) {
			case 'CreateBuildingStart':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
					if(refreshQuests) {
						questObj.refresh(false);
					}
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},

	/**
	 * try complete build on a slot
	 *
	 * @param Element ghostElement
	 * @param Element slotElement
	 * @param Event eventObject
	 *
	 * @return void
	 */
	buildRequest : function(ghostElement, slotElement, eventObject) {
		if(	ghostElement !== null && slotElement !== null && eventObject !== null &&
			ghostElement !== undefined && slotElement !== undefined && eventObject !== undefined) {
			var slotItem = slotElement.retrieve('this');
			//check if slot item was found
			if(slotItem === null) {
				throw '//ERROR HANDLING -> SlotItem not bound';
			}
			//
			switch(slotItem.options.type) {
				case SURFACE_SLOT_TYPE_BUILD:
				case SURFACE_SLOT_TYPE_TAKEN:
				case SURFACE_SLOT_TYPE_EMPTY:
					this.dataHandler.requestNewBuilding(slotItem, this, this.buildResponse.bindNew(this));
					//this.abort();
					break;
				case SURFACE_SLOT_TYPE_TRASH:
					this.planetSurface.removeCheckpoint('TrashSlotDrop');
					this.showActivateSlotEventBox(slotItem);
					Imperion.Factory.quest().refresh();
					break;
				default:
					this.abort();
			}
			//remove highlight
			slotItem.removeHighlight();
		}
		else {
			this.abort(eventObject);
		}
	},

	/**
	 * Unlock/Cancel event box for slot activation
	 *
	 * leads to this.onClickAction
	 *
	 * @return void
	 */
	showActivateSlotEventBox : function(slotItem) {
		this.slotItem = slotItem;
		var eventBox = Imperion.Interface.Factory.eventBox();
		eventBox.setEventBox({
			type : 'confirm',
			headline : this.translate('construction__unlock_ground_dialog_header'),
			image : '/images/layout/color-set/global/visuals/event_box/unlockBuildingSlot.jpg',
			content : this.translate('construction__unlock_ground_dialog_text'),
			firstButtonText : this.translate('default__cancel'),
			firstButtonCallback : this.onCancelActivateSlotEventBox.bindNew(this),
			secondButtonText : this.translate('construction__unlock_ground_dialog_button_unlock'),
			secondButtonCallback : this.onConfirmActivateSlotEventBox.bindNew(this)
		});
		eventBox.showEventBox();
	},

	/**
	 * response after build request
	 *
	 * @param Object response
	 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
	 *
	 * @return void
	 */
	buildResponse : function(response, slotItem) {
		var rData = response.getResponseData();
		this.abort();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			var buildItem = slotItem.toBuildItem(this.options.type, {
				level		: 0,
				running		: 0,
				duration	: 20
			}, this.data.caption);
			this.planetSurface.add(buildItem, buildItem.options.ground);
			//this.planetSurface.removeCheckpoint('FreeSlotDrop');
			Imperion.Factory.quest().refresh();
			this.parentSidebar.updateQueueGrid(response);
			this.planetSurface.updateQueue(rData.queue);

			this.notify({
				response : response
			}, 'onFinishBuilding');
		}
	},

	/**
	 * get drag
	 *
	 * @return Imperion.Interface.Sidebar.Create.BuildingDrag
	 */
	getDragInstance : function() {
		if(this.drag === null) {
			if(this.elements.ghost === null) {
				throw '//ERROR HANDLING';
			}
			this.drag = Imperion.Interface.Sidebar.Factory.createBuildingDrag(this.elements.ghost, {
				stopPropagation : true,
				checkDroppables : false,
				droppables : this.planetSurface.getDroppables(),
				onDrop : this.buildRequest.bindNew(this),
				onComplete : this.abort.bindNew(this)
			}, this);
			this.drag.detach();
		}
		return this.drag;
	},

	/**
	 * remove drag
	 *
	 * @return void
	 */
	removeDrag : function() {
		delete this.drag;
	},

	/**
	 * mouse enter listen for surface
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onMouseEnterSurface : function(params) {
		//
		this.elements.ghost.removeClass('hideContainer');
		//start drag
		this.getDragInstance().attach();
		//
		this.planetSurface.startBuildingMode();
	},

	/**
	 * mouse leave listen for surface
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onMouseLeaveSurface : function() {
		this.elements.ghost.addClass('hideContainer');
		//this.getDragInstance().stop(params.event, false);
		this.getDragInstance().detach();
		this.planetSurface.endBuildingMode();
	},

	/**
	 *
	 * confirm callback for eventBox action
	 *
	 * @return void
	 */
	onConfirmActivateSlotEventBox : function ()
	{
		this.dataHandler.requestActivateSlot(this.slotItem, this, this.activateSlotResponse.bindNew(this));
		this.abort();
	},

	/**
	 *
	 * cancel callback for eventBox action
	 *
	 * @return void
	 */
	onCancelActivateSlotEventBox : function ()
	{
		this.abort();
		Imperion.Factory.quest().refresh(true);
	},

	/**
	 * activateSlotResponse
	 *
	 * @param Imperion.Util.Response response
	 * @param Imperion.Interface.PlanetSurfaceItem slotItem
	 *
	 * @type void
	 */
	activateSlotResponse : function(response, slotItem) {
		var rData = response.getResponseData();

		if(rData.error && rData.activate) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			var newSlotItem = slotItem.toEmptyItem();
			this.planetSurface.add(newSlotItem, newSlotItem.options.ground);
			this.buildResponse(response, newSlotItem);
		}
	},

	/**
	 * start create building
	 *
	 * @param Event eventObject
	 *
	 * @return void
	 */
	start : function(eventObject) {
		this.planetSurface.attach('createBuilding', this);
		//attach as listener for key events
		Imperion.Util.GlobalEvents.attach('createBuilding', this);
		this.hideStartButton();
		this.showAbortButton();

		this.elements.ghost = this.getClonedTemplate('GhostImage');
		this.elements.ghost.set('src', this.options.ghost + this.options.type + '.png');
		this.elements.ghost.inject(this.planetSurface.elements.container);

		this.getDragInstance().start(eventObject);

		this.planetSurface.setOutline();
		//
		this.buildingMode = true;
		//
		this.parentSidebar.removeCheckpoint('CreateBuildingStart');
	},

	/**
	 * abort create building
	 *
	 * @param	{Event}	eventObject
	 *
	 * @return void
	 */
	abort : function(eventObject) {
		if(eventObject !== undefined) {
			new Event(eventObject).stop();
		}
		this.planetSurface.detach('createBuilding');
		//detach as listener for key events
		Imperion.Util.GlobalEvents.detach('createBuilding');
		this.showStartButton();
		this.hideAbortButton();

		this.removeDrag();

		if(this.elements.ghost) {
			this.elements.ghost.destroy();
			this.elements.ghost = null;
		}
		this.planetSurface.removeOutline();
		this.planetSurface.endBuildingMode();
		//
		this.buildingMode = false;
	},

	/**
	 * show the abort button
	 *
	 * @return void
	 */
	showAbortButton : function() {
		this.elements.abort.removeClass('hideContainer');
	},

	/**
	 * hide the abort button
	 *
	 * @return void
	 */
	hideAbortButton : function() {
		this.elements.abort.addClass('hideContainer');
	},

	/**
	 * global events listener callback
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	escPressed : function(params) {
		this.getDragInstance().stop();
		this.abort();
		this.planetSurface.removeCheckpoint('FreeSlotDrop');
		this.planetSurface.removeCheckpoint('TrashSlotDrop');
		Imperion.Factory.quest().refresh(false);
	},

	/**
	 * append show npc
	 *
	 * @returns {Void}
	 */
	showNPC : function() {
		this.parent({
			required	: {
				metal	: this.data.metal,
				crystal	: this.data.crystal,
				tritium	: this.data.tritium
			},
			ratio		: {
				metal	: this.data.metal,
				crystal	: this.data.crystal,
				tritium	: this.data.tritium
			}
		});
	},

	/**
	 * show the help dialog
	 *
	 * @returns	{Void}
	 */
	showHelp : function() {
		this.showHelpDialog('BUILDING', this.data.type);
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//
		this.parent(eventObject, params);
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'abort_action':
				this.abort();
				this.planetSurface.removeCheckpoint('FreeSlotDrop');
				this.planetSurface.removeCheckpoint('TrashSlotDrop');
				Imperion.Factory.quest().refresh(false);
				break;
		}
	},

	/**
	 * load elements
	 *
	 * @return void
	 */
	//
	loadElements : function(domContainer) {
		this.elements.container = domContainer.getElement('.buildings');
		this.parent();

		this.elements.abort = this.elements.container.getElement('.abort');
		this.addEvent('click', this.elements.abort, $H({
			action : 'abort_action'
		}));
	}
});

Imperion.Interface.Sidebar.Create.BuildingDrag = new Class({
	Extends : Drag.Move,

	/**
	 * parent
	 *
	 * @var Imperion.Interface.Sidebar.Create.Building
	 */
	parentHandle : null,

	/**
	 * override default constructor
	 *
	 * @param Imperion.Interface.Sidebar.Create.Building parentHandle
	 *
	 * @return void
	 */
	initialize: function(element, options, parentHandle) {

		//
		this.parentHandle = parentHandle;
		//
		this.parent(element, options);
	},

	/**
	 * override start method
	 *
	 * @param Event event
	 *
	 * @return void
	 */
	start : function(event, offsetX, offsetY) {
		//IE HACK
		if(Browser.Engine.trident || Browser.Engine.presto ) {
			var pos = this.parentHandle.planetSurface.elements.container.getPosition(this.parentHandle.planetSurface.elements.outer);
			var scroll = $(document.body).getScroll();
			pos.x = pos.x + scroll.x;
			pos.y = pos.y + scroll.y;
		}
		else {
			var pos = this.parentHandle.planetSurface.elements.container.getPosition();
		}
		event.page = {
			x : 160 + pos.x,
			y : 215 + pos.y,
			z : 0
		};
		this.parent(event);
	},

	/**
	 * override stop method
	 *
	 * @param Event event
	 * @param Boolean fireEvents
	 */
	stop: function(event, fireEvents){
		this.checkDroppables();
		this.fireEvent('drop', [this.element, this.overed, event]);
		this.overed = null;
		this.document.removeEvent(this.selection, this.bound.eventStop);
		this.document.removeEvent('mousemove', this.bound.drag);
		this.document.removeEvent('mouseup', this.bound.stop);
		if(fireEvents) {
			if (event) this.fireEvent('complete', [this.element, event]);
		}
	}
});
Imperion.Interface.Sidebar.Create.Unit = new Class(
	/** @lends Imperion.Interface.Sidebar.Create.Unit */
	{
		Extends : Imperion.Interface.Sidebar.Create.Root,

		/**
		 * Options
		 *
		 * @var Object
		 */
		options : {
			path	:	'/images/',
			unit	:	UNIT_TYPE_UNDEFINED
		},

		/**
		 * class name
		 *
		 * @type	String
		 */
		className : 'Imperion.Interface.Sidebar.Create.Unit',

		/**
		 * the slider
		 *
		 * @type Imperion.Interface.Tools.Slider
	 	 */
		slider : null,

		/**
		 * amount of selected ships
		 *
		 * @type Number
		 */
		selected : 0,

		/**
		 * attribute if amount quest is running
		 *
		 * @type	Number
		 */
		questAmount : null,

		/**
		 * input active flag
		 *
		 * @type Boolean
		 */
		inputFieldActive : false,

		/**
         * register here to observe key events
         *
         * @type Imperion.Util.GlobalEvents
         */
        globalEvents : null,

		/**
		 * initialize the create ship class
		 *
		 * @param	{String}							unitType	type of unit
		 * @param	{Object}							responseData
		 * @param	{Object}							resourceCounter
		 * @param	{Imperion.Interface.Sidebar.Handle}	parentSidebar
		 *
		 * @constructs
		 */
		initialize : function(unitType, responseData, resourceCounter, parentSidebar, tooltip, globalEvents) {
			this.loadElements(parentSidebar.content.area.elements.container);
			this.selected			= 0;
			this.questAmount		= null;
			this.inputFieldActive	= false;
            this.globalEvents       = globalEvents;
			//check if zeks are needed
			if(responseData.zek) {
				responseData.crystal = responseData.zek;
				resourceCounter.crystal = {
					storage : responseData.zek_amount
				};
				this.elements.resources.crystal.removeClass('dspCrystal').addClass('dspZeks');
			}
			//
			this.options.unit	= unitType;
			this.options.path	= this.options.path + this.options.unit + '/detail/';
			//
			this.parent(responseData, resourceCounter, parentSidebar, tooltip);
			//create slider
			this.slider = new Imperion.Interface.Tools.Slider(this.elements.slider, {
				dir: 'horizontal',
				length: 200,
				range : [1, 100],
				update : this.sliderMoved.bindNew(this)
			});

			this.viewSlider = this.getViewSlider();
			this.bindTooltips();
			this.globalEvents.attach('SideBarUnit', this);
            Imperion.Util.Request.attach('SideBarUnit', this);
		},

		/**
		 * check if checkpoint is resolved
		 *
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'EnterShipAmount':
					if(params.type == this.data.type && this.getFilteredAmountInput() >= params.amount.toInt()) {
						return true;
					}
					return false;
					break;
				case 'CreateShipsBuildStart':
					if(params.type == this.data.type && this.requestRunning && this.getFilteredAmountInput() >= params.amount) {
						return true;
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Create.Unit ident not exist' + ident;
					break;
			}
		},

		/**
		 * activate checkpoint
		 *
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'EnterShipAmount':
					//
					this.questAmount = params.amount;
					//
					var c1 = this.getCheckpointHighlight(ident + '_slider', {
						posOffset	: {
							x : -115
						},
						rotation	: 'arrowRight'
					});
					c1.appendOver(this.elements.slider);
					c1.start();
					var c2 = this.getCheckpointHighlight(ident + '_input', {
						posOffset	: {
							x : -56
						},
						rotation	: 'arrowRight'
					});
					c2.appendOver(this.elements.counter);
					c2.start();
					this.setCheckpointActive(ident, questObj);
					break;
				case 'CreateShipsBuildStart':
					//
					this.questAmount = params.amount;
					//
					var highlight = this.getCheckpointHighlight(ident, {
						posOffset	: {
							y : 30
						}
					});
					highlight.appendOver(this.elements.start);
					highlight.start();
					this.setCheckpointActive(ident, questObj);
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Create.Unit ident not exist';
					break;
			}
		},

		/**
		 * remove checkpoint
		 *
		 * @param	{String}			ident
		 *
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			refreshQuests = refreshQuests === undefined ? true : refreshQuests;
			switch(ident) {
				case 'EnterShipAmount':
					if(this.questAmount !== null) {
						var questObj = this.getCheckpointActive(ident);
						if(questObj !== null) {
							this.unsetCheckpointActive(ident);
							this.removeCheckpointHighlight(ident + '_slider');
							this.removeCheckpointHighlight(ident + '_input');
							if(refreshQuests) {
								questObj.refresh();
							}
							//this.questAmount = null;
						}
					}
					break;
				case 'CreateShipsBuildStart':
					var questObj = this.getCheckpointActive(ident);
					if(questObj !== null) {
						this.unsetCheckpointActive(ident);
						this.removeCheckpointHighlight(ident);
						if(refreshQuests) {
							questObj.refresh();
						}
						//this.questAmount = null;
					}
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Create.Unit ident not exist';
					break;
			}
		},

		/**
		 * clean
		 *
		 * @return void
		 */
		clean : function() {
			this.globalEvents.detach('SideBarUnit');
            Imperion.Util.Request.detach('SideBarUnit', this);
			this.removeCheckpoint('EnterShipAmount');
			this.removeCheckpoint('CreateShipsBuildStart');
			this.parent();
		},

		/**
		 * get entered trade value and filter to positive integer
		 *
		 * @param	{Number}	defaultAmount
		 *
		 * @returns	{Void}
		 */
		getFilteredAmountInput : function(defaultAmount) {
			var val		= this.elements.counter.get('value');
			if(!val) {
				val = '0';
			}
			var filter	= Imperion.Util.Factory.filter();
			return filter.filterInteger(val, defaultAmount);
		},

		/**
		 * creates a FX effect for the slide effect
		 *
		 * @returns {Object}	Mootools FX Object
		 */
		getViewSlider : function(){
			return new Fx.Morph(this.elements.view, {
				fps : 50,
				unit : 'px',
				duration : 250,
				transition : 'sine:in:out'
			});
		},

		/**
		 * listener for slider move, evaluate slider and update view
		 *
		 * @param	{Number}	step
		 *
		 * @returns {void}
		 */
		sliderMoved : function(step) {
			var selected = 1;
			if(step > 1) {
                this.inputFieldActive = true;
				var amountMax = this.getMaxPossible();
				selected = Math.ceil(amountMax * step / 100);
			}
			this.updateSelectedAmount(selected);
		},

		/**
		 * update select value
		 *
		 * @param	{Number}	selected
		 *
		 * @returns {void}
		 */
		updateSelectedAmount : function(selected) {
			this.selected = selected;

			this.setInputBoxValue(selected);

			this.setResource(RESOURCE_TYPE_METAL	, selected * this.data.metal);
			this.setResource(RESOURCE_TYPE_CRYSTAL	, selected * this.data.crystal);
			this.setResource(RESOURCE_TYPE_TRITIUM	, selected * this.data.tritium);
			this.setResource(RESOURCE_TYPE_ENERGY	, Math.ceil(selected * this.data.energy));

			this.setTime(this.data.time * selected);
			//check quest
			if(this.questAmount !== null) {
				if(this.selected >= this.questAmount) {
					this.removeCheckpoint('EnterShipAmount');
				}
				else {
					this.removeCheckpoint('CreateShipsBuildStart');
				}
				//Imperion.Factory.quest().refresh();
			}
		},

		/**
		 * evaluate input box and update view
		 *
		 * @returns {void}
		 */
		inputChanged : function() {
			//get value from input
			//var inputValue = this.elements.counter.get('value');
			var inputValue = this.getFilteredAmountInput();
			//
			if(!inputValue) {
				this.elements.counter.set('value', '');
				this.selected = 0;
				return;
			}
			//cast int
			var castValue = inputValue.toInt();
			//default value
			var newVal = 1;
			//validate
			if(castValue !== 'NaN' &&  castValue > 0) {
				//get max amount
				var amountMax = this.getMaxPossible();
				//check if entered value is possible
				if(castValue  > amountMax) {
					newVal = amountMax;
				}
				else {
					newVal = castValue;
				}
				this.slider.set(newVal * 100 / amountMax);
				this.slider.dragKnob();
				this.updateSelectedAmount(newVal);

			}
			else if(inputValue === '') {
				newVal = '';
			}
			else {
				this.slider.set(0);
				this.slider.dragKnob();
				this.updateSelectedAmount(1);
			}
			this.elements.counter.set('value', newVal);
		},

		/**
		 * return maximum possible buildable ships
		 *
		 * @returns {Number}
		 */
		getMaxPossible : function() {
			var amount = this.calculateMaxAmount({
				metal	: this.data.metal,
				crystal	: this.data.crystal,
				tritium	: this.data.tritium,
				energy	: this.data.energy,
				time	: this.data.time
			}, {
				metal	: this.resources.metal.storage,
				crystal	: this.resources.crystal.storage,
				tritium	: this.resources.tritium.storage,
				energy	: this.resources.energy.storage
			});
			return amount < 1 ? 1 : amount;
		},

		/**
		 * calculate the max amount of ships
		 *
		 * @param	{Object}	resourcesNeed
		 * @param	{Object}	resourcesAvailable
		 *
		 * @returns {Number}
		 */
		calculateMaxAmount : function(resourcesNeed, resourcesAvailable) {
			return Math.floor(Math.min(
				MAX_QUEUE_DURATION	/ resourcesNeed.time,
				resourcesNeed.metal 	<= 0 ? Math.pow(2, 31) - 1 : resourcesAvailable.metal	/ resourcesNeed.metal,
				resourcesNeed.crystal	<= 0 ? Math.pow(2, 31) - 1 : resourcesAvailable.crystal	/ resourcesNeed.crystal,
				resourcesNeed.tritium	<= 0 ? Math.pow(2, 31) - 1 : resourcesAvailable.tritium	/ resourcesNeed.tritium,
				resourcesNeed.energy	<= 0 ? Math.pow(2, 31) - 1 : resourcesAvailable.energy	/ resourcesNeed.energy
			));
		},

		/**
		 * set the value in the input box
		 *
		 * @param {Number} newValue
		 *
		 * @returns {void}
		 */
		setInputBoxValue : function(newValue) {
			this.elements.counter.set('value', newValue);
		},

		/**
		 * try complete build
		 *
		 * @param	{Number}	amount
		 *
		 * @return void
		 */
		buildRequest : function(amount) {
			if(!this.requestRunning && amount.toInt() > 0) {
				if(this.options.unit === UNIT_TYPE_SHIP) {
					this.dataHandler.requestNewShip(this.options.type, amount, this.buildResponse.bindNew(this));
				}
				else if(this.options.unit === UNIT_TYPE_TURRET) {
					this.dataHandler.requestNewTurret(this.options.type, amount, this.buildResponse.bindNew(this));
				}
				this.requestRunning = true;
			}
		},

		/**
		 * response after build request
		 *
		 * @param Object response
		 * @param Imperion.Interface.PlanetSurfaceSlotItemEmpty slotItem
		 *
		 * @return void
		 */
		buildResponse : function(response, slotItem) {
			var rData = response.getResponseData();
			if(rData.error) {
				Imperion.Interface.Factory.eventBox().setEventBox({
					type : 'error',
					content : rData.error
				}).showEventBox();
			}
			else {
				//
				this.removeCheckpoint('CreateShipsBuildStart');
				this.notify({
					response : response
	 			}, this.options.unit + 'Finish');
			}
			this.requestRunning = false;
		},

		/**
		 * start create ships
		 *
		 * @param {Event} eventObject
		 *
		 * @returns {void}
		 */
		start : function(eventObject) {
			//attach as listener for key events
			this.buildRequest(this.selected);
		},

		/**
		 * toggle view screen
		 *
		 * @returns {void}
		 */
		toggleView : function() {
			var collapsed = this.elements.view.getSize().y < 20;
			this.elements.view.toggleClass('collapsed', !collapsed);
			this.viewSlider.start({
			    'height': collapsed ? '156px' : '0px'
			});
			Imperion.Util.Request.send(Imperion.Util.Helper.url('unit', this.options.unit, 'property-pullout'), {
				show : collapsed?1:0
			}, $empty);

		},

		/**
		 * append show npc
		 *
		 * @returns {Void}
		 */
		showNPC : function() {
			if(this.data.zek === undefined) {
				this.parent({
					required	: {
						metal	: this.data.metal * this.selected,
						crystal	: this.data.crystal * this.selected,
						tritium	: this.data.tritium * this.selected
					},
					ratio		: {
						metal	: this.data.metal,
						crystal	: this.data.crystal,
						tritium	: this.data.tritium
					}
				});
			}
		},

		/**
		 * show the help dialog
		 *
		 * @returns	{Void}
		 */
		showHelp : function() {
			this.showHelpDialog(this.options.unit.toUpperCase(), this.data.type);
		},

		bindTooltips : function(){
			this.elements.viewIcons.each(function(el){
				this.addEvent('mouseenter', el, $H({
					action 	: 'show_tooltip',
					text	: el.get('text')
				}));

				this.addEvent('mouseleave', el, $H({
					action 	: 'hide_tooltip'
				}));
			}, this);
		},

        /**
         * setInput field inactive to prevent
         * accidentally build units by pressing Enter,
         * after opening e.g. the ranking list.         *
         *
         * @param params
         */
        onRequestSend : function(params){
            this.inputFieldActive = false;
        },
		/**
		 * key press listener
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		keyPressed : function(params) {
            if(this.inputFieldActive) {
				switch(params.eventObj.key) {
					case 'right':
						var newVal = this.selected + 1;
						var maxVal = this.getMaxPossible();
						if(newVal > maxVal) {
							newVal = maxVal;
						}
						this.updateSelectedAmount(newVal);
						params.eventObj.killEvent = true;
						break;
					case 'left':
						var newVal = this.selected - 1;
						if(newVal <= 0) {
							newVal = 0;
						}
						this.updateSelectedAmount(newVal);
						params.eventObj.killEvent = true;
						break;
					case 'up':
						var newVal = this.selected + 10;
						var maxVal = this.getMaxPossible();
						if(newVal > maxVal) {
							newVal = maxVal;
						}
						this.updateSelectedAmount(newVal);
						params.eventObj.killEvent = true;
						break;
					case 'down':
						var newVal = this.selected - 10;
						if(newVal <= 0) {
							newVal = 0;
						}
						this.updateSelectedAmount(newVal);
						params.eventObj.killEvent = true;
						break;
                    case 'enter':
                        this.start();
						break;
				}
			}
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * @return boolean abortEvent
		 */
		eventHandler : function(eventObject, params) {
			//
			this.parent(eventObject, params);
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'counter_change':
					this.inputChanged();
					if ('enter' === eventObject.key) {
						this.start();
					}
					break;

				case 'toggle_view':
					this.toggleView();
					return false;
					break;
				case 'show_tooltip':
					this.tooltip.setText(params.get('text'));
					this.tooltip.show();
					break;
				case 'hide_tooltip':
					this.tooltip.hide();
					break;
				case 'focus_input':
					this.inputFieldActive = true;
					break;
				case 'blur_input':
					this.inputFieldActive = false;
					break;
			}
		},

		/**
		 * load elements
		 *
		 * @return void
		 */
		//
		loadElements : function(domContainer) {
			this.elements.container = domContainer.getElement('.units');
			this.parent();

			this.elements.slider = this.elements.container.getElement('.Imperion-Interface-Gui-Slider');

			this.elements.counter = this.elements.container.getElement('INPUT');
			this.addEvent('keyup', this.elements.counter, $H({
				action: 'counter_change'
			}));
			this.addEvent('change', this.elements.counter, $H({
				action: 'counter_change'
			}));
			this.addEvent('focus', this.elements.counter, $H({
				action: 'focus_input'
			}));
			this.addEvent('blur', this.elements.counter, $H({
				action: 'blur_input'
			}));

           	this.elements.view       = this.elements.container.getElement('.view ul');
			this.elements.toggleView = this.elements.view.getElement('.toggle');

			this.addEvent('click', this.elements.toggleView, $H({
				action : 'toggle_view'
			}));

			this.elements.viewIcons = this.elements.view.getElements('.icon');
		}
	}
);
Imperion.Interface.Sidebar.Queue.Data = new Class({
	
	/**
	 * prepare
	 * 
	 * @return void
	 */
	initialize : function() {
		
	},
	
	/**
	 * request building abort
	 * 
	 * @param int entryId
	 * @param function	callback
	 * @param int position
	 * 
	 * @return void
	 */
	requestEntryAbort : function(entryId, callback, position) {
		Imperion.Util.Request.send(Imperion.Util.Helper.url('building', 'index', 'abortbuildingqueue'), {
			id : entryId
		}, this.afterRequestEntryAbort.bindNew(this), {
			callback : callback,
			position : position
		});
	},
	
	/**
	 * after request building abort
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestEntryAbort : function(response, requestParams) {
		requestParams.callback(response, requestParams.position);
	},
	
	/**
	 * request building instant
	 * 
	 * @param int entryId
	 * @param function	callback
	 * @param int position
	 * 
	 * @return void
	 */
	requestEntryInstant : function(entryId, callback, position) {
		Imperion.Util.Request.send(Imperion.Util.Helper.url('plus', 'spend', 'use'), {
			type	: 'INSTANT_CONSTRUCTION',
			level	: 1,
			id		: entryId
		}, this.requestEntryInstantAbort.bindNew(this), {
			callback : callback,
			position : position
		});
	},
	
	/**
	 * after request building instant
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	requestEntryInstantAbort : function(response, requestParams) {
		requestParams.callback(response, requestParams.position);
	}
});
Imperion.Interface.Sidebar.Queue.Root = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Observable],
	
	/**
	 * data handler
	 * 
	 * @var Imperion.Interface.Sidebar.Create.Data
	 */
	dataHandler : null,
	
	/**
	 * parent sidebar
	 * 
	 * @var mperion.Interface.Sidebar.Handle
	 */
	parentSidebar : null,
	
	/**
	 * current active item
	 * 
	 * @var Imperion.Interface.Sidebar.Queue.RootItem
	 */
	activeItem : null,
	
	/**
	 * items
	 * 
	 * @var Array
	 */
	items : null,
	
	/**
	 * secondtimer instance
	 * 
	 * @var Imperion.Util.SecondTimer
	 */
	secondTimer : null,
	
	/**
	 * prepare
	 * 
	 * @param Object responseData
	 * @param Imperion.Interface.Sidebar.Handle parentSidebar
	 * @param Imperion.Util.SecondTimer secondTimer
	 * 
	 * @return void
	 */
	initialize : function(responseData, parentSidebar, secondTimer) {
		//
		this.activeItem = null;
		//
		this.secondTimer = secondTimer;
		this.secondTimer.attach('buildingQueue', this);
		//
		this.setUser(Imperion.Util.Registry.get('user'));
		//
		this.parentSidebar = parentSidebar;
		//
		this.dataHandler = Imperion.Interface.Sidebar.Factory.queueData();
		//
		this.items = new Array();
		//
		$splat(responseData.queue).each(function(item, pos) {
			this.addItem(item, pos);
		}, this);
	},
	
	/**
	 * clean
	 * 
	 * @return void
	 */
	clean : function() {
		this.cleanUp();
	},
	
	/**
	 * add an item
	 * 
	 * @param Imperion.Interface.Sidebar.Queue.RootItem item
	 * @param int position
	 * 
	 * @return void
	 */
	add : function(item, position) {
		if(this.items[position]) {
			this.items[position].clean();
		}
		this.items[position] = item;
		this.items[position].elements.container.inject(this.elements.list);
	},
	
	/**
	 * activate the next item
	 * 
	 * @return void
	 */
	activateNext : function() {
		var pos = this.activeItem.position;
		this.activeItem.clean();
		delete this.activeItem;
		this.activeItem = null;
		delete this.items[pos++];
		for(var i = pos ; i < this.items.length ; i++) {
			if(this.items[i]) {
				this.activeItem = this.items[i];
				this.activeItem.activate();
				break;
			}
		}
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceSidebarQueue');
		
		this.elements.list = this.elements.container.getElement('.list');
	}
});

Imperion.Interface.Sidebar.Queue.RootItem = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event],
	
	user : null,
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		id			: 0,
		type		: '',
		running		: 0,
		duration	: 0,
		paused		: false
	},

	/**
	 * position in queue
	 * 
	 * @var int
	 */
	position : 0,
	
	/**
	 * flag if item is active
	 * 
	 * @var boolean
	 */
	active : false,
	
	/**
	 * parent handle
	 * 
	 * @var Imperion.Interface.Sidebar.Queue.Root
	 */
	parentHandle : null,
	
	/**
	 * prepare the item
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Root parentHandle
	 * @param int position
	 * 
	 * @return void
	 */
	initialize : function(options, parentHandle, position) {
		//
		this.user = Imperion.Util.Registry.get('user', user);
		//
		this.parentHandle = parentHandle;
		//
		this.position = position;
		//
		if(this.position === 0) {
			this.activate();
		}
		else {
			this.deactivate();
		}
		//
		this.setType(options.type);
		//
		if(options.running < 0) {
			options.running = 0;
		}
		//
		this.options.duration = options.duration;
		//
		if(typeof options.paused !== 'undefined' && options.paused) {
			this.options.paused = true;
		}
		//
		this.options.id = options.id;
	},
	
	/**
	 * clean
	 * 
	 * @return void
	 */
	clean : function() {
		this.cleanUp();
	},
	
	/**
	 * activate the item
	 * 
	 * @return void
	 */
	activate : function() {
		this.elements.container.removeClass('queued');
		this.elements.container.addClass('active');
		
		this.elements.bar.removeClass('disabled');
		
		this.parentHandle.activeItem = this;
		
		this.active = true;
	},
	
	/**
	 * deactivate the item
	 * 
	 * @return void
	 */
	deactivate : function() {
		this.elements.container.addClass('queued');
		this.elements.container.removeClass('active');
		
		this.active = false;
	},
	
	/**
	 * set the type
	 * 
	 * @param string newType
	 * 
	 * @return void
	 */
	setType : function(newType) {
		if(this.options.type !== '') {
			this.elements.icon.removeClass('ICON_SMALL_' + this.options.type);
		}
		this.elements.icon.addClass('ICON_SMALL_' + newType);
		this.options.type = newType;
	}
});
Imperion.Interface.Sidebar.Queue.Building = new Class({
	Extends : Imperion.Interface.Sidebar.Queue.Root, 
	
	Implements : [Imperion.Translate],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
	
	},
	
	/**
	 * planet surface
	 * 
	 * @var Imperion.Interface.PlanetSurface
	 */
	planetSurface : null,
	
	/**
	 * tooltip handle
	 * 
	 * @type	Imperion.Interface.Gui.Tooltip
	 */
	tooltip : null,
	
	/**
	 * initialize
	 *
	 * @param Object responseData
	 * @param Imperion.Interface.Sidebar.Handle parentSidebar
	 * @param Imperion.Util.SecondTimer secondTimer
	 * @param Imperion.Interface.PlanetSurface
	 * 
	 * @return void
	 */
	initialize : function(responseData, parentSidebar, secondTimer, planetSurface, tooltip) {
		//
		this.loadElements();
		//
		this.planetSurface	= planetSurface;
		this.tooltip		= tooltip;
		//
		this.setPlanet(Imperion.Util.Registry.get('planet'));
		//
		this.parent(responseData, parentSidebar, secondTimer);
	},
	
	/**
	 * handle abort after request
	 * 
	 * @param Imperion.Util.Response response
	 * @param int position
	 * 
	 * @return void
	 */
	handleAbort : function(response, position) {
		var rData = response.getResponseData();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			if(this.items[position]) {
				this.planetSurface.removeQueueEntryByQueueId(this.items[position].options.id);
				this.planetSurface.updateQueue(rData.queue);
				this.notify({
					response : response
				}, 'onAbortBuilding');
			}
		}
	},
	
	/**
	 * handle instant
	 * 
	 * @returns {Void}
	 */
	handleInstant : function(response, position) {
		var rData = response.getResponseData();
		if(rData.error) {
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : rData.error
			}).showEventBox();
		}
		else {
			if(this.items[position]) {
				this.planetSurface.finishQueueItem(position, false);
				this.planetSurface.updateQueue(rData.queue);
				this.notify({
					response : response
				}, 'onAbortBuilding');
			}
		}
	},
	
	/**
	 * add an item
	 * 
	 * @param Object item data
	 * @param int position
	 * 
	 * @return void
	 */
	addItem : function(itemData, position) {
		var surfaceItem = this.planetSurface.items[itemData.ground];
		if(!surfaceItem) {
			throw '//ERROR HANDLING Surface item not found';
		}
		var item = Imperion.Interface.Sidebar.Factory.queueBuildingItem(itemData, this, position, surfaceItem);
		this.add(item, position);
	},
	
	/**
	 * listener for timer
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	timerStep : function(params) {
		if(this.activeItem !== null) {
			if(!this.activeItem.options.paused) {
				var newRunning	= this.activeItem.options.running + 1;
				
				if(newRunning <= this.activeItem.options.duration) {
					this.activeItem.setBar(this.activeItem.options.running + 1);
				}
				else {
					this.activateNext();
				}
			}
		}
		else {
			this.secondTimer.detach('buildingQueue');	
		}
	}
});

Imperion.Interface.Sidebar.Queue.BuildingItem = new Class({
	Extends : Imperion.Interface.Sidebar.Queue.RootItem,
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		id			: 0,
		type		: 'UNDEFINED',
		running		: 0,
		duration	: 0,
		level		: 0,
		ground		: 0,
		direction	: '',
		abortable	: true
	},
	
	/**
	 * bounded surface item
	 * 
	 * @var Imperion.Interface.PlanetSurfaceItem
	 */
	surfaceItem : null,
	
	/**
	 * prepare
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Root parentHandle
	 * @param int position
	 * @param Imperion.Interface.PlanetSurfaceItem surfaceItem
	 * 
	 * @return void
	 */
	initialize : function(options, parentHandle, position, surfaceItem) {
		//
		this.surfaceItem = surfaceItem;
		//
		this.loadElements();
		//
		this.parent(options, parentHandle, position);
		//
		this.setDirection(options.direction);
		//
		this.setLevel(options.level);
		//
		this.setAbortable(options.abortable);
		//
		this.options.ground = options.ground;
		//
		this.setBar(options.running);
		//
		if(this.parentHandle.planet.options.invasion) {
			this.elements.npc.addClass('disabled');
			this.elements.cancel.addClass('hideContainer');
		}
		//
		this.show();
	},
	 
	/**
	 * override activate method
	 * 
	 * @return void
	 */
	activate : function() {
		//this.elements.npc.removeClass('hideContainer');
		this.parent();
	},
	
	/**
	 * override deactivate method
	 * 
	 * @return void
	 */
	deactivate : function() {
		//this.elements.npc.addClass('hideContainer');
		this.parent();
	},
	
	/**
	 * set the next building level
	 * 
	 * @param int nextLevel
	 * 
	 * @return void
	 */
	setLevel : function(nextLevel) {
		this.elements.level.set('text', nextLevel);
		this.options.level = nextLevel;
	},
	
	/**
	 * set building abortable
	 * 
	 * @param	{Boolean}	abortable
	 * 
	 * @returns {void}
	 */
	setAbortable : function(abortable) {
		if(abortable) {
			this.elements.cancel.setStyle('visibility', 'visible');
			this.options.abortable = true;
		}
		else {
			this.elements.cancel.setStyle('visibility', 'hidden');
			this.options.abortable = false;
		}
	},
	
	/**
	 * set the direction of item (upgrade / downgrade)
	 * 
	 * @param string newDirection
	 * 
	 * @return void
	 */
	setDirection : function(newDirection) {
		if(this.options.direction !== '') {
			this.elements.direction.removeClass(newDirection);
		}
		this.elements.direction.addClass(newDirection);
		this.options.direction = newDirection;
	},

	/**
	 * update the bar
	 * 
	 * @param int running
	 * 
	 * @return void
	 */
	setBar : function(running) {
		this.elements.time.set('text', this.parentHandle.user.formatDuration(this.options.duration - running));
		
		var percent = running * 100 / this.options.duration;
		
		this.elements.val.setStyle('width', percent + '%');
		this.options.running = running;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'show_npc':
				if(this.options.abortable) {
					if(!this.elements.npc.hasClass('disabled')) {
						this.parentHandle.dataHandler.requestEntryInstant(this.options.ground, this.parentHandle.handleInstant.bindNew(this.parentHandle), this.position);
					}
				}
				break;
			case 'cancel':
				if(this.options.abortable) {
					this.parentHandle.dataHandler.requestEntryAbort(this.options.ground, this.parentHandle.handleAbort.bindNew(this.parentHandle), this.position);
				}
				break;
			case 'show_npc_tooltip':
				this.parentHandle.tooltip.setText(this.parentHandle.translate('construction__queue_buildings_plus_instant'));
				this.parentHandle.tooltip.show();
				break;
			case 'hide_npc_tooltip':
				this.parentHandle.tooltip.hide();
				break;
		}
	},
	
	/**
	 * load dom elements
	 * 
	 * @return void 
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('InterfaceSidebarQueueItem');
		
		this.elements.icon = this.elements.container.getElement('.icn');
		this.elements.bar = this.elements.container.getElement('.bar');
		this.elements.val = this.elements.bar.getElement('DIV');
		this.elements.npc = this.elements.container.getElement('.nonPlayerCharacter');
		this.elements.cancel = this.elements.container.getElement('.cancel');
		this.elements.level = this.elements.container.getElement('.level');
		this.elements.time = this.elements.container.getElement('.time');
		this.elements.direction = this.elements.container.getElement('.direction');
		
		this.addEvent('click', this.elements.npc, $H({
			action : 'show_npc'
		}));
		this.addEvent('mouseenter', this.elements.npc, $H({
			action : 'show_npc_tooltip'
		}));
		this.addEvent('mouseleave', this.elements.npc, $H({
			action : 'hide_npc_tooltip'
		}));
		this.addEvent('click', this.elements.cancel, $H({
			action : 'cancel'
		}));
	}
});
Imperion.Interface.Sidebar.Queue.Ship = new Class(
	/** @lends Imperion.Interface.Sidebar.Queue.Ship */	
	{
		Extends : Imperion.Interface.Sidebar.Queue.Root, 
		
		/**
		 * scrollbar
		 * 
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollbar : null,
		
		/**
		 * Prepare the ship queue
		 *
		 * @augments	Imperion.Interface.Sidebar.Queue.Root
		 * @class		Ship Queue Class
		 *
		 * @param 		{Object}								responseData
		 * @param 		{Imperion.Interface.Sidebar.Handle}		parentSidebar
		 * @param 		{Imperion.Util.SecondTimer}				secondTimer
		 * 
		 * @constructs
		 */
		initialize : function(responseData, parentSidebar, secondTimer) {
			//
			this.loadElements();
			//
			this.parent(responseData, parentSidebar, secondTimer, planet);
			//
			if(this.activeItem !== null) {
				//
				this.scrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollbar, {});
				//
				this.scrollbar.attachTo(this.elements.entries, this.elements.list);
			}
		},
		
		/**
		 * update scrollbar
		 * 
		 * @returns void
		 */
		refreshScrollbar : function() {
			if(this.scrollbar !== null) {
				this.scrollbar.clean();
				delete this.scrollbar;
				//
				this.scrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollbar, {});
				//
				this.scrollbar.attachTo(this.elements.entries, this.elements.list);	
			}
		},
		
		/**
		 * add an item
		 * 
		 * @param Object item data
		 * @param int position
		 * 
		 * @return void
		 */
		addItem : function(itemData, position) {
			var item = Imperion.Interface.Sidebar.Factory.queueShipItem(itemData, this, position);
			this.add(item, position);
		},
		
		/**
		 * listener for timer
		 * 
		 * @param Object params
		 * 
		 * @return void
		 */
		timerStep : function(params) {
			if(this.activeItem !== null) {
				if(!this.activeItem.options.paused) {
					var newRunning	= this.activeItem.options.running + 1;
					
					if(newRunning <= this.activeItem.options.duration * this.activeItem.options.amount) {
						this.activeItem.setBar(this.activeItem.options.running + 1);
					}
					else {
						this.activateNext();
					}
				}
			}
			else {
				this.secondTimer.detach('buildingQueue');	
			}
		},
		
		/**
		 * load additional elements and call parent method
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('InterfaceSidebarQueueShip');
			this.elements.list = this.elements.container.getElement('.list');
			this.elements.scrollbar = this.elements.container.getElement('.scrollbar');
			this.elements.entries = this.elements.container.getElement('.entries');
		}
	}
);

Imperion.Interface.Sidebar.Queue.ShipItem = new Class({
	Extends : Imperion.Interface.Sidebar.Queue.RootItem,
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		id			: 0,
		type		: 'UNDEFINED',
		running		: 0,
		duration	: 0,
		amount		: 0
	},
	
	/**
	 * current show
	 * 
	 * @type Number
	 */
	currentUnit : null,
	
	/**
	 * prepare
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Root parentHandle
	 * @param int position
	 * @param Imperion.Interface.PlanetSurfaceItem surfaceItem
	 * 
	 * @return void
	 */
	initialize : function(options, parentHandle, position) {
		//
		this.currentUnit = null;
		//
		this.loadElements();
		//
		this.parent(options, parentHandle, position);
		//
		this.setAmount(options.amount);
		//
		this.setBar(options.running);
		//
		this.show();
	},
	
	/**
	 * extend active mission
	 * 
	 * @returns [void}
	 */
	activate : function() {
		this.parent();
		
		this.parentHandle.refreshScrollbar();
	},
	
	/**
	 * set the next building amount
	 * 
	 * @param int amount
	 * 
	 * @return void
	 */
	setAmount : function(amount) {
		this.options.amount = amount;
	},
	
	/**
	 * update the bar
	 * 
	 * @param int running
	 * 
	 * @return void
	 */
	setBar : function(running) {
		var duration	= this.options.duration * this.options.amount;
		
		this.elements.time.set('text', this.parentHandle.user.formatDuration(Math.max(1, Math.floor(duration - running))));
		
		var percent		= running * 100 / duration;
		var unit		= Math.floor(running * this.options.amount / duration);
		
		if(this.currentUnit !== unit) {
			this.currentUnit = unit;
			this.elements.amount.set('text', this.user.formatNumber(this.options.amount - unit));
		}
		
		this.elements.val.setStyle('width', percent + '%');
		this.options.running = running;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			default:
				break;
		}
	},
	
	/**
	 * load dom elements
	 * 
	 * @return void 
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('InterfaceSidebarQueueItemShip');
		
		this.elements.icon = this.elements.container.getElement('.icn');
		this.elements.bar = this.elements.container.getElement('.bar');
		this.elements.val = this.elements.bar.getElement('DIV');
		this.elements.amount = this.elements.container.getElement('.amount');
		this.elements.time = this.elements.container.getElement('.time');
	}
});
Imperion.Interface.Sidebar.Queue.Turret = new Class(
	/** @lends Imperion.Interface.Sidebar.Queue.Turret */
		{
		Extends : Imperion.Interface.Sidebar.Queue.Root, 
		
		/**
		 * scrollbar
		 * 
		 * @type Imperion.Interface.Tools.ScrollBar
		 */
		scrollbar : null,
		
		/**
		 * Prepare the turret queue
		 *
		 * @augments	Imperion.Interface.Sidebar.Queue.Root
		 * @class		Turret Queue Class
		 *
		 * @param 		{Object}								responseData
		 * @param 		{Imperion.Interface.Sidebar.Handle}		parentSidebar
		 * @param 		{Imperion.Util.SecondTimer}				secondTimer
		 * 
		 * @constructs
		 */
		initialize : function(responseData, parentSidebar, secondTimer) {
			//
			this.loadElements();
			//
			this.parent(responseData, parentSidebar, secondTimer);
			//
			if(this.activeItem !== null) {
				//
				this.scrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollbar, {});
				//
				this.scrollbar.attachTo(this.elements.entries, this.elements.list);	
			}
		},
		
		/**
		 * update scrollbar
		 * 
		 * @returns void
		 */
		refreshScrollbar : function() {
			if(this.scrollbar !== null) {
				this.scrollbar.clean();
				delete this.scrollbar;
				//
				this.scrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollbar, {});
				//
				this.scrollbar.attachTo(this.elements.entries, this.elements.list);	
			}
		},
		
		/**
		 * add an item
		 * 
		 * @param Object item data
		 * @param int position
		 * 
		 * @return void
		 */
		addItem : function(itemData, position) {
			var item = Imperion.Interface.Sidebar.Factory.queueTurretItem(itemData, this, position);
			this.add(item, position);
		},
		
		/**
		 * listener for timer
		 * 
		 * @param Object params
		 * 
		 * @return void
		 */
		timerStep : function(params) {
			if(this.activeItem !== null) {
				if(!this.activeItem.options.paused) {
					var newRunning	= this.activeItem.options.running + 1;
					
					if(newRunning <= this.activeItem.options.duration * this.activeItem.options.amount) {
						this.activeItem.setBar(this.activeItem.options.running + 1);
					}
					else {
						this.activateNext();
					}
				}
			}
			else {
				this.secondTimer.detach('buildingQueue');	
			}
		},
		
		/**
		 * load additional elements and call parent method
		 * 
		 * @returns {void}
		 */
		loadElements : function(){
			this.elements.container = this.getTemplate('InterfaceSidebarQueueTurret');
			this.elements.list = this.elements.container.getElement('.list');
			this.elements.scrollbar = this.elements.container.getElement('.scrollbar');
			this.elements.entries = this.elements.container.getElement('.entries');
		}
	}
);

Imperion.Interface.Sidebar.Queue.TurretItem = new Class({
	Extends : Imperion.Interface.Sidebar.Queue.RootItem,
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		id			: 0,
		type		: 'UNDEFINED',
		running		: 0,
		duration	: 0,
		amount		: 0
	},
	
	/**
	 * current show
	 * 
	 * @type Number
	 */
	currentUnit : null,
	
	/**
	 * prepare
	 * 
	 * @param Object options
	 * @param Imperion.Interface.Sidebar.Queue.Root parentHandle
	 * @param int position
	 * @param Imperion.Interface.PlanetSurfaceItem surfaceItem
	 * 
	 * @return void
	 */
	initialize : function(options, parentHandle, position) {
		//
		this.currentUnit = null;
		//
		this.loadElements();
		//
		this.parent(options, parentHandle, position);
		//
		this.setAmount(options.amount);
		//
		this.setBar(options.running);
		//
		this.show();
	},
	
	/**
	 * extend active mission
	 * 
	 * @returns [void}
	 */
	activate : function() {
		this.parent();
		
		this.parentHandle.refreshScrollbar();
	},
	
	/**
	 * set the next building amount
	 * 
	 * @param int amount
	 * 
	 * @return void
	 */
	setAmount : function(amount) {
		this.options.amount = amount;
	},
	
	/**
	 * update the bar
	 * 
	 * @param int running
	 * 
	 * @return void
	 */
	setBar : function(running) {
		var duration	= this.options.duration * this.options.amount;
		
		this.elements.time.set('text', this.parentHandle.user.formatDuration(Math.max(1, Math.floor(duration - running))));
		
		var percent		= running * 100 / duration;
		var unit		= Math.floor(running * this.options.amount / duration);
		
		if(this.currentUnit !== unit) {
			this.currentUnit = unit;
			this.elements.amount.set('text', this.user.formatNumber(this.options.amount - unit));
		}
		
		this.elements.val.setStyle('width', percent + '%');
		this.options.running = running;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			default:
				break;
		}
	},
	
	/**
	 * load dom elements
	 * 
	 * @return void 
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('InterfaceSidebarQueueItemTurret');
		
		this.elements.icon = this.elements.container.getElement('.icn');
		this.elements.bar = this.elements.container.getElement('.bar');
		this.elements.val = this.elements.bar.getElement('DIV');
		this.elements.amount = this.elements.container.getElement('.amount');
		this.elements.time = this.elements.container.getElement('.time');
	}
});
Imperion.Interface.Sidebar.Map.PlanetList = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Observable],

	/**
	 * options
	 *
	 * @var Object
	 */
	options : {
		count : 8
	},

	/**
	 * items
	 *
	 * @var Object
	 */
	items : null,

	/**
	 * active item
	 *
	 * @var Imperion.Interface.Sidebar.Map.PlanetListItem
	 */
	activeItem : null,

	/**
	 * prepare
	 *
	 * @return void
	 */
	initialize : function() {
		//
		this.loadElements();
		//add planet list items
		this.items = {};
		var item;
		for(var i = this.options.count ; i > 0 ; i--) {
			item = Imperion.Interface.Sidebar.Factory.mapPlanetListItem(this);
			this.items[i] = item;
			this.elements.list.appendChild(item.elements.container);
			item.show();
		}
	},

	/**
	 * click on planet item
	 *
	 * @param Imperion.Interface.Sidebar.Map.PlanetListItem item
	 *
	 * @return void
	 */
	clickOnPlanet : function(item) {
		if(item.id !== null) {
			//if(this.activeItem === null || this.activeItem.id !== item.id) {
				this.notify({
					id : item.id
				}, 'clickOnPlanet');
			//}
		}
		this.activeItem = item;
	},

	/**
	 * click on player
	 *
	 * @param Imperion.Interface.Sidebar.Map.PlanetListItem item
	 *
	 * @return void
	 */
	clickOnPlayer : function(item) {
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('profile_' + item.account.id);
		var playerprofile = Imperion.Interface.Dialog.Context.Factory.playerprofile(dialog, item.account.id);
		playerprofile.showContext();
	},

	/**
	 * reset the list
	 *
	 * @return void
	 */
	reset : function() {
		for(var i = 1 ; i <= this.options.count ; i++) {
			this.items[i].reset();
		}
	},

	/**
	 * update the list
	 *
	 * @param Object systemData
	 *
	 * @return void
	 */
	update : function(systemData) {
		if(systemData.x !== undefined && systemData.y !== undefined) {
			this.setCoordinates(systemData.x.toInt(), systemData.y.toInt());
		}
		this.reset();
		if(systemData.planets) {
			var counter = 1;
			$H(systemData.planets).each(function(planet, planetId) {
				this.items[counter].setType(planet.type);
				this.items[counter].setName(planet.name);
				if(planet.account_name && planet.account_id) {
					this.items[counter].setPlayer(planet.account_name, planet.account_id, planet.alliance_member);
				}
				else {
					if(planet.map_info && planet.map_info.info && planet.map_info.info.account_name && planet.map_info.info.account_id) {
						this.items[counter].setPlayer(planet.map_info.info.account_name, planet.map_info.info.account_id);
					}
				}
				var annexed = false;
				if(planet.annexed) {
					annexed = true;
				}
				else {
					if(planet.map_info && planet.map_info.info && planet.map_info.info.annexed) {
						annexed = true;
					}
				}
				this.items[counter].setAnnexed(annexed);
				this.items[counter].id = planetId;
				counter++;
			}, this);
		}
	},

	/**
	 * set coords
	 *
	 * @param int x
	 * @param int y
	 *
	 * @return void
	 */
	setCoordinates : function(x, y) {
		this.elements.x.set('text', x);
		this.elements.y.set('text', y);
	},

	/**
	 * load list elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceSidebarMapPlanetList');
		this.elements.list = this.elements.container.getElement('.entries');

		this.elements.x = this.elements.container.getElement('.x');
		this.elements.y = this.elements.container.getElement('.y');
	}
});

Imperion.Interface.Sidebar.Map.PlanetListItem = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event],

	/**
	 * options
	 *
	 * @Object
	 */
	options : {
		type : 'UNDEFINED'
	},

	/**
	 * current planet id
	 *
	 * @var int
	 */
	id : null,

	/**
	 * player
	 *
	 * @type Object
	 */
	player : null,

	/**
	 * parent list
	 *
	 * @var Imperion.Interface.Sidebar.Map.PlanetList
	 */
	parentList : null,

	/**
	 * prepare the item
	 *
	 * @param Imperion.Interface.Sidebar.Map.PlanetList parentList
	 *
	 * @return void
	 */
	initialize : function(parentList) {
		//
		this.id			= null;
		this.player	= null;
		//
		this.parentList = parentList;
		//
		this.loadElements();
	},

	/**
	 * reset the item
	 *
	 * @return void
	 */
	reset : function() {
		this.elements.container.addClass('cleared');
		this.setType('UNDEFINED');
		this.setName('');
		this.elements.owner.set('text', ' ');
		this.elements.owner.removeClass('allied', ' ');
		this.account = null;
		this.id = null;
	},

	/**
	 * set the planet type
	 *
	 * @param String newType
	 *
	 * @return void
	 */
	setType : function(newType){
		if(this.options.type !== '') {
			this.elements.icon.removeClass(this.options.type);
		}
		if(newType !== 'UNDEFINED') {
			this.elements.container.removeClass('cleared');
		}
		this.options.type = newType;
		this.elements.icon.addClass(this.options.type);

	},

	/**
	 * set the item name
	 *
	 * @param String newName
	 *
	 * @return void
	 */
	setName : function(newName) {
		this.elements.name.set('html', newName);
	},

	/**
	 * set the player
	 *
	 * @param	{String}	playerName
	 * @param	{Number}	playerId
	 * @param	{Boolean}	isAllied
	 *
	 * @returns	{Void}
	 */
	setPlayer : function(playerName, playerId, isAllied) {
		if(playerName !== '') {
			if(isAllied){
				this.elements.owner.addClass('allied');
			}
			this.elements.owner.set('html', playerName);
			this.account = {
				name	: playerName,
				id		: playerId
			};
		}
		else {
			this.elements.owner.set('text', ' ');
			this.account = null;
		}

	},

	/**
	 * set annexed state
	 *
	 * @param	{Boolean}	annexed
	 *
	 * @returns	{Void}
	 */
	setAnnexed : function(annexed) {
		if(annexed) {
			this.elements.owner.addClass('annexed');
		}
		else {
			this.elements.owner.removeClass('annexed');
		}
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click_planet':
				this.parentList.clickOnPlanet(this);
				break;
			case 'context_planet':
				this.showPlanetContextMenu(eventObject, this.id);
				return false;
				break;
			case 'click_player':
				if(this.account !== null) {
					this.parentList.clickOnPlayer(this);
				}
				return false;
				break;
			case 'context_player':
				if(this.account !== null) {
					this.showPlayerContextMenu(eventObject, this.account.id);
				}
				break;
				return false;
		}
	},

	/**
	 * load item elements
	 *
	 * @return void
	 */
	loadElements : function()  {
		this.elements.container = this.getClonedTemplate('InterfaceSidebarMapPlanetListItem');

		this.elements.icon = this.elements.container.getElement('.icn');
		this.elements.name = this.elements.container.getElement('.name');
		this.elements.owner = this.elements.container.getElement('.owner A');

		this.addEvent('contextmenu', this.elements.owner, $H({
			action : 'context_player'
		}));
		this.addEvent('contextmenu', this.elements.name, $H({
			action : 'context_planet'
		}));

		this.addEvent('contextmenu', this.elements.icon, $H({
			action : 'context_planet'
		}));

		this.addEvent('click', this.elements.container, $H({
			action : 'click_planet'
		}));
		this.addEvent('click', this.elements.owner, $H({
			action : 'click_player'
		}));
	}
});

Imperion.Interface.Sidebar.Map.GalaxyList = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template],
			
	/**
	 * prepare
	 * 
	 * @return void
	 */
	initialize : function() {
		//
		this.loadElements();
	},
	
	/**
	 * load list elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceSidebarMapGalaxyList');
	}
});
Imperion.Interface.Resource.Root = new Class(
	/** @lends Imperion.Interface.Resource.Root.prototype */
	{
		Implements : [Imperion.Module, Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Observable],

		/**
		 * counter options
		 *
		 * <p><b>format</b> : storage number format - remove 1000 parts</p>
		 *
		 * @type Object
		 */
		options : {
			format	: 1,
			round	: 0,
			template: true
		},

		/**
		 * current amount of resource
		 *
		 * @type Number
		 * @default 0
		 */
		storage : 0,

		/**
		 * type string constant from type of resource
		 *
		 * @type String
		 * @default empty string
		 */
		type : '',

		/**
		 * instance from infoboxHandle
		 *
		 * @type Imperion.Interface.Infobox.Root
		 * @default null
		 */
		infoboxHandle : null,

		/**
		 * prepare the root
		 *
		 * @class Summary of attributes and method for all resources
		 *
		 * @param {Object}							data			counter data
		 * @param {String}							type		 	Type of Resource
		 * @param {Imperion.Interface.Infobox.Root}	infoboxHandle	handle for showing infobox (tooltip)
		 *
		 * @constructs
		 */
		initialize : function(data, type, infoboxHandle) {
			//
			this.type			= type;
			this.infoboxHandle	= infoboxHandle;
			//
			if(data.template !== undefined) {
				this.options.template = data.template;
			}
			//check if template is enabled
			if(this.options.template) {
				this.loadElements();
			}
			//update resource
			this._update(data);
		},

		/**
		 * clean
		 *
		 * @returns {Void}
		 */
		clean : function() {
			//check if template is enabled
			if(this.options.template) {
				this.cleanUp();
			}
			this.infoboxHandle = null;
		},

		/**
		 * manipulate inputbox data
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		updateInfobox : function(params) {
			if(this.infoboxHandle !== null) {
				this.infoboxHandle.update(params);
			}
		},

		/**
		 * manipulate inputbox data
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		_updateInfobox : function(params) {
			if(this.infoboxHandle !== null) {
				this.infoboxHandle.update(params);
			}
		},

		/**
		 * Object Wrapper for Update
		 *
		 * @param {Object} params
		 *
		 * @returns {void}
		 */
		_update : function(params) {
			if(params.format) {
				this.options.format = params.format;
			}
			if(params.round) {
				this.options.round = params.round;
			}
		},

		/**
		 * update the storage -> manipulate DOM-Element
		 *
		 * @param {Number} newStorage
		 *
		 * @returns {void}
		 */
		setStorage : function(newStorage) {
			this.storage = newStorage;
			if(this.options.round > 0) {
				var step1 = newStorage / Math.pow(10, this.options.format - this.options.round);
				var formated = step1.toInt() / Math.pow(10, this.options.round);
				formated = formated.toString().replace('.', this.getUser().options.decimal);
			}
			else {
				var formated = this.getUser().formatNumber(Math.floor(newStorage / this.options.format));
			}
			//check if template is enabled
			if(this.options.template) {
				this.elements.value.set('text', formated);
			}
			//notify listener
			this.notify({
				'resourceCounter' : this,
				'formated' : formated
			}, this.type + 'ResourceChanged');
		},

		/**
		 * object parameter wrapper for backend request
		 *
		 * @param {Object} params
		 *
		 * @returns {void}
		 */
		_updateStorage : function(params) {
			this.setStorage(params.storage.toInt());
			this.notify({
				'resourceCounter' : this
			}, this.type + 'ResourceUpdated');
		},

		showResourceDialog : function()
		{
			var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('resources');
			var res = Imperion.Interface.Dialog.Context.Factory.ressourcesOverview(dialog);
			res.showContext();
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param {Element.Event}	eventObject
		 * @param {Hash}			params
		 *
		 * @returns {Boolean}
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'show_info':
					if(this.infoboxHandle !== null) {
						if (this.type == RESOURCE_TYPE_RESEARCH || this.type == RESOURCE_TYPE_POPULATION || this.type == RESOURCE_TYPE_ENERGY)
						{
							this.infoboxHandle.setInfoboxPosition(10, 546);
							this.infoboxHandle.setInfoboxWidth(186);
						}
						this.infoboxHandle.showInfobox();
					}
					break;
				case 'hide_info':
					if(this.infoboxHandle !== null) {
						this.infoboxHandle.hideInfobox();
					}
					break;
				case 'show_resource':
					if(this.type == RESOURCE_TYPE_METAL || this.type == RESOURCE_TYPE_CRYSTAL || this.type == RESOURCE_TYPE_TRITIUM)
					{
						this.showResourceDialog();
					}
					else if (this.type == RESOURCE_TYPE_ENERGY)
					{
						this.showEnergyDialog();
					}
					break;
			}
			return false;
		},

		/**
		 * load DOM-Elements
		 *
		 * @returns {Void}
		 */
		loadElements : function() {
			this.elements.value = this.elements.container.getElement('SPAN');
			this.addEvent('mouseenter', this.elements.container, $H({
				action : 'show_info'
			}));
			this.addEvent('mouseleave', this.elements.container, $H({
				action : 'hide_info'
			}));
			this.addEvent('click', this.elements.container, $H({
				action : 'show_resource'
			}));
		}
	}
);

Imperion.Interface.Resource.Factory = new Class.Singleton(
	/** @lends Imperion.Interface.Resource.Factory.prototype */
	{
		/**
		 * prepare the factory - reseting storage
		 * 
		 * @class Imperion Resource Factory
		 * 
		 * @constructs
		 */
		initialize : function() {
		
		},
		
		/**
		 * create a unit (eg energy, population,...)
		 * 
		 * @param	{Object}	data	data of unit
		 * @param	{String}	type	type of unit
		 * @param	{Boolean}	infobox infobox on
		 * 
		 * @returns {Imperion.Interface.Resource.Unit}
		 */
		unit : function(data, type, infobox) {
			if(typeof infobox === 'undefined') {
				infobox = true;
			}
			var infoboxHandle = null;
			if(infobox) {
				infoboxHandle = Imperion.Interface.Infobox.Factory.resource(type);
			}
			return new Imperion.Interface.Resource.Unit(data, type, infoboxHandle);
		},
		
		/**
		 * create instance from resource unit by object params and wrap them
		 * 
		 * @param {Object} params for params set Method unit
		 * 
		 * @returns {Imperion.Interface.Resource.Unit}
		 */
		unitByObject : function(params) {
			if(typeof params.infobox === 'undefined') {
				params.infobox = true;
			}
			return this.unit(params.data, params.type, params.infobox);
		},
		
		/**
		 * create a annexion (eg energy, population,...)
		 * 
		 * @param	{Object}	data	data of unit
		 * @param	{String}	type	type of unit
		 * @param	{Boolean}	infobox infobox on
		 * 
		 * @returns {Imperion.Interface.Resource.Annexion}
		 */
		annexion : function(data, type, infobox) {
			if(typeof infobox === 'undefined') {
				infobox = true;
			}
			var infoboxHandle = null;
			if(infobox) {
				infoboxHandle = Imperion.Interface.Infobox.Factory.resource(type);
			}
			return new Imperion.Interface.Resource.Annexion(data, type, infoboxHandle, Imperion.Util.Factory.secondTimer());
		},
		
		/**
		 * create instance from resource annexion by object params and wrap them
		 * 
		 * @param {Object} params for params set Method unit
		 * 
		 * @returns {Imperion.Interface.Resource.Annexion}
		 */
		annexionByObject : function(params) {
			if(typeof params.infobox === 'undefined') {
				params.infobox = true;
			}
			return this.annexion(params.data, params.type, params.infobox);
		},
		
		/**
		 * create a energy unit object
		 * 
		 * @param	{Object}	data	data of unit
		 * @param	{String}	type	type of unit
		 * @param	{Boolean}	infobox infobox on
		 * 
		 * @returns {Imperion.Interface.Resource.Energy}
		 */
		energy : function(data, type, infobox) {
			if(typeof infobox === 'undefined') {
				infobox = true;
			}
			var infoboxHandle = null;
			if(infobox) {
				infoboxHandle = Imperion.Interface.Infobox.Factory.resource(type);
			}
			return new Imperion.Interface.Resource.Energy(data, type, infoboxHandle);
		},
		
		/**
		 * create instance from resource annexion by object params and wrap them
		 * 
		 * @param {Object} params for params set Method unit
		 * 
		 * @returns {Imperion.Interface.Resource.Energy}
		 */
		energyByObject : function(params) {
			if(typeof params.infobox === 'undefined') {
				params.infobox = true;
			}
			return this.energy(params.data, params.type, params.infobox);
		},
		
		/**
		 * create a population unit object
		 * 
		 * @param	{Object}	data	data of unit
		 * @param	{String}	type	type of unit
		 * @param	{Boolean}	infobox infobox on
		 * 
		 * @returns {Imperion.Interface.Resource.Population}
		 */
		population : function(data, type, infobox) {
			if(typeof infobox === 'undefined') {
				infobox = true;
			}
			var infoboxHandle = null;
			if(infobox) {
				infoboxHandle = Imperion.Interface.Infobox.Factory.resource(type);
			}
			return new Imperion.Interface.Resource.Population(data, type, infoboxHandle);
		},
		
		/**
		 * create instance from resource annexion by object params and wrap them
		 * 
		 * @param {Object} params for params set Method unit
		 * 
		 * @returns {Imperion.Interface.Resource.Population}
		 */
		populationByObject : function(params) {
			if(typeof params.infobox === 'undefined') {
				params.infobox = true;
			}
			return this.population(params.data, params.type, params.infobox);
		},
		
		/**
		 * create instance from Resource Counter
		 *
		 * @param	{Object}	data	data of counter
		 * @param	{String}	type	type of counter
		 * 
		 * @returns {Imperion.Interface.Resource.Counter}
		 */
		counter : function(data, type) {
			return new Imperion.Interface.Resource.Counter(data, type, Imperion.Interface.Infobox.Factory.resource(type));
		},
		
		/**
		 * create instance from resource counter by object params and wrap them
		 * 
		 * @param {Object} params for params set Method counter
		 * 
		 * @returns {Imperion.Interface.Resource.Counter}
		 */
		counterByObject : function(params) {
			return this.counter(params.data, params.type);
		}
	}
);
Imperion.Interface.Resource.Counter = new Class(
	/** @lends Imperion.Interface.Resource.Counter */
	{
		Extends : Imperion.Interface.Resource.Root,
		
		/**
		 * counter options
		 * 
		 * <p><b>minDelay</b> : if production is to high and counter will count to fast, there is a limit for counting</p>
		 * 
		 * @type Object
		 */
		options : {
			minDelay : 200
		},
		
		/**
		 * max counter value
		 * 
		 * @type Number
		 */
		capacity : 0,
		
		/**
		 * resource production
		 * 
		 * @type Number
		 */
		production : 0,
		
		/**
		 * amount of how much counter increase each step
		 * 
		 * @type Number
		 */
		increment : 0,
		
		/**
		 * timer Object
		 * 
		 * @type Imperion.Util.Timer
		 */
		timer : null,
		
		/**
		 * prepare the counter
		 *
		 * @augments	Imperion.Interface.Resource.Root
		 * @class		Inherit from Root and is able to count resources in up and down direction
		 * 
		 * @param		{Object}							data	data of counter
		 * @param		{String}							type	type of counter
		 * @param		{Imperion.Interface.Infobox.Root}	infobox	infobox handle
		 *
		 * @constructs
		 */
		initialize : function(data, type, infobox) {
			//call parent constructor
			this.parent(data, type, infobox);
		},
		
		/**
		 * clean the counter
		 * 
		 * @returns {Void}
		 */
		clean : function() {
			this.timer.detach('counter');
			delete this.timer;
			this.timer = null;
			this.parent();
		},
		
		/**
		 * update the counter with actually values
		 * 
		 * @param	{Number}	production	current planet production
		 * @param	{Number}	storage		current resource in storage
		 * @param	{Number}	capacity	max amount of resource
		 * 
		 * @returns {void}
		 */
		update : function(production, storage, capacity) {
			this.capacity 		= capacity;
			//calculate in milliseconds
			this.production		= production / 60 / 60 / 1000;
			this.setStorage(storage);
			if(this.production > 0) {
				this.increment = this.calculateIncrement(this.production, this.options.minDelay);
				//
				var interval = this.calculateInterval(this.production, this.options.minDelay);
				//
				if(this.timer === null) {
					this.timer = Imperion.Util.Factory.timer(interval);
					this.timer.attach('counter', this);
				}
				else {
					this.timer.updateInterval(interval);
				}
			}
			else {
				if(this.timer !== null) {
					this.timer.clean();
					delete this.timer;
					this.timer = null;
				}
			}
		},
		
		/**
		 * Object Wrapper for Update counter
		 * 
		 * @param {Object} params
		 * 
		 * @returns {void}
		 */
		_update : function(params) {
			//
			this.parent(params);
			//wrap it
			this.update(params.production.toInt(), params.storage.toInt(), params.capacity.toInt());
		},
		
		/**
		 * calculate the increment for each counter step
		 * 
		 * @param {Number}	productionPerMs production in milliseconds
		 * @param {Number}	[minDelay=200]	minimum delay to improve performance
		 * 
		 * @returns {Number} increment value for each counter step 
		 */
		calculateIncrement : function(productionPerMs, minDelay) {
			if(!minDelay) {
				var minDelay = 200;
			}
			var delay = Math.floor(1000 / Math.abs(productionPerMs * 1000));
			var increment = 1; 
			if(delay < minDelay) {
				var tempDelay = delay;
				while(tempDelay < this.minDelay) {
					tempDelay = tempDelay + delay;
					increment++;
				}
				delay = tempDelay;
			}
			return increment * this.calculateDirection(productionPerMs);
		},
		
		/**
		 * calculates the interval for each step
		 * 
		 * @param {Number}	productionPerMs production in milliseconds
		 * @param {Number}	[minDelay=200]	minimum delay to improve performance
		 * 
		 * @returns {Number}
		 */
		calculateInterval : function(productionPerMs, minDelay) {
			if(!minDelay) {
				var minDelay = 200;
			}
			var delay = Math.floor(1000 / Math.abs(productionPerMs * 1000));
			if(delay < minDelay) {
				var tempDelay = delay;
				while(tempDelay < this.minDelay) {
					tempDelay = tempDelay + delay;
				}
				delay = tempDelay;
			}
			return delay;
		},
		
		/**
		 * calculates the direction from production
		 * 
		 * @param {Number}	production
		 * 
		 * @returns {Number} direction from production
		 */
		calculateDirection : function(production) {
			if(production > 0) {
				return RESOURCE_DIRECTION_UP;
			}
			else if(production < 0) {
				return RESOURCE_DIRECTION_DOWN;
			}
			else {
				return RESOURCE_DIRECTION_NO;
			}
		},
		
		/**
		 * listener for timer step
		 * 
		 * @param {Object} params
		 * 
		 * @returns {Void}
		 */
		timerStep : function(params) {
			var newStorage = this.storage + this.increment;
			if(newStorage >= 0 && newStorage <= this.capacity) {
				this.setStorage(newStorage);	
			}
		},
		
		/**
		 * load DOM-Elements
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('ResourceCounter_' + this.type);
			this.parent();
		}

	}
);

Imperion.Interface.Resource.Unit = new Class(
	/** @lends Imperion.Interface.Resource.Unit */
	{
		Extends : Imperion.Interface.Resource.Root,
		
		/**
		 * prepare the unit
		 *
		 * @augments	Imperion.Interface.Resource.Root
		 * @class		Inherit from Root and is able to count resources in up and down direction
		 * 
		 * @param		{Object}							data	data of counter
		 * @param		{String}							type	type of counter
		 * @param		{Imperion.Interface.Infobox.Root}	infobox	infobox handle
		 *
		 * @constructs
		 */
		initialize : function(data, type, infobox) {
			//call parent constructor
			this.parent(data, type, infobox);
		},
		
		/**
		 * update the unit -> set only new amount of resource
		 * 
		 * @param {Number} storage
		 * 
		 * @returns {void}
		 */
		update : function(storage) {
			this.setStorage(storage);
		},
		
		/**
		 * Object Wrapper for Update unit
		 * 
		 * @param {Object} params
		 * 
		 * @returns {void}
		 */
		_update : function(params) {
			//
			this.parent(params);
			//wrap it
			this.update(params.storage.toInt());
		},
		
		/**
		 * load DOM-Elements
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('Resource_' + this.type);
			this.parent();
		}
	}
);

Imperion.Interface.Resource.Annexion = new Class(
	/** @lends Imperion.Interface.Resource.Annexion */
	{
		Extends : Imperion.Interface.Resource.Unit,
	
		/**
		 * state of button
		 * 
		 * @type	String
		 */
		state : 'ACTIVE',
		
		/**
		 * secondtimer instance if attack
		 * 
		 * @type	Imperion.Util.SecondTimer
		 */
		secondTimer : null,
		
		/**
		 * time counter
		 * 
		 * @type	Number
		 */
		time : 0,
		
		/**
		 * prepare the unit
		 *
		 * @augments	Imperion.Interface.Resource.Root
		 * @class		Inherit from Root and is able to count resources in up and down direction
		 * 
		 * @param		{Object}							data		data of counter
		 * @param		{String}							type		type of counter
		 * @param		{Imperion.Interface.Infobox.Root}	infobox		infobox handle
		 * @param		{Imperion.Util.SecondTimer}			secondTimer	secondTimer for attack countdown
		 *
		 * @constructs
		 */
		initialize : function(data, type, infobox, secondTimer) {
			//call parent constructor
			this.parent(data, type, infobox);
			//
			this.secondTimer	= secondTimer;
			//
			this._updateState(data);
		},

		/**
		 * listener for second timer step
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		timerStep : function(params) {
			this.time--;
			if(this.time < 0) {
				this.bootstrap.update({
					method	: 'all',
					params	: {
						methodes : []
					}
				});
				this.updateState('ACTIVE', 0);
			}
		},
		
		/**
		 * update the button state
		 * 
		 * @param	{String}	state
		 * @param	{Number}	time
		 * 
		 * @returns {Void}
		 */
		updateState : function(state, time) {
			switch(state) {
				case 'ACTIVE':
					this.elements.link.removeClass('BAD');
					this.secondTimer.detach('annexCounter');
					break;
				case 'BAD':
					this.elements.link.setProperty('class', state);
					//
					if(time > 0) {
						this.secondTimer.attach('annexCounter', this);
					}
					break;
			}
			this.state	= state;
			this.time	= time;
		},
		
		/**
		 * Object Wrapper for Update state
		 * 
		 * @param {Object} params
		 * 
		 * @returns {void}
		 */
		_updateState : function(params) {
			var state	= 'BAD';
			var time	= 0;
			if(!params.state || params.state === 'ACTIVE' || params.state === 'active') {
				state = 'ACTIVE';
			}
			if(params.time) {
				time = params.time;
			}
			//wrap it
			this.updateState(state, time.toInt());
		},
		
		/**
		 * append load elements method
		 * 
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.parent();
			
			this.elements.link	= this.elements.container.getElement('A');
		}
	}
);

Imperion.Interface.Resource.Energy = new Class(
	/** @lends Imperion.Interface.Resource.Energy */
	{
		Extends : Imperion.Interface.Resource.Unit,

		/**
		 * prepare the unit
		 *
		 * @augments	Imperion.Interface.Resource.Root
		 * @class		Inherit from Root and is able to count resources in up and down direction
		 *
		 * @param		{Object}							data	data of counter
		 * @param		{String}							type	type of counter
		 * @param		{Imperion.Interface.Infobox.Root}	infobox	infobox handle
		 *
		 * @constructs
		 */
		initialize : function(data, type, infobox) {
			//call parent constructor
			this.parent(data, type, infobox);
		},

		showEnergyDialog : function()
		{
			var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('energy_overview');
			var res = Imperion.Interface.Dialog.Context.Factory.energyOverview(dialog);
			res.showContext();
		},
		
		/**
		 * append set storage method
		 *
		 * @param	{Number} newStorage
		 *
		 * @returns	{Void}
		 *
		 */
		setStorage : function(newStorage) {
			if(newStorage < 0) {
				this.elements.container.addClass('BAD');
			}
			else {
				this.elements.container.removeClass('BAD');
			}
			this.parent(newStorage);
		}
	}
);

Imperion.Interface.Resource.Population = new Class(
	/** @lends Imperion.Interface.Resource.Population */
	{
		Extends : Imperion.Interface.Resource.Unit,

		/**
		 * prepare the unit
		 *
		 * @augments	Imperion.Interface.Resource.Root
		 * @class		Inherit from Root and is able to count resources in up and down direction
		 *
		 * @param		{Object}							data	data of counter
		 * @param		{String}							type	type of counter
		 * @param		{Imperion.Interface.Infobox.Root}	infobox	infobox handle
		 *
		 * @constructs
		 */
		initialize : function(data, type, infobox) {
			//call parent constructor
			this.parent(data, type, infobox);
		},

		/**
		 * append set storage method
		 *
		 * @param	{Number} newStorage
		 *
		 * @returns	{Void}
		 *
		 */
		setStorage : function(newStorage) {
			if(newStorage < 0)
			{
				this.elements.container.addClass('BAD');
			}
			else
			{
				this.elements.container.removeClass('BAD');
			}
			this.parent(newStorage);
		}
	}
);

Imperion.Interface.Tools.Factory = new Class.Singleton(
	/** @lends Imperion.Interface.Tools.Factory.prototype */
	{
		/**
		 * prepare the factory - reseting storage
		 * 
		 * @class Imperion Tools Factory
		 * 
		 * @constructs
		 */
		initialize : function() {
		
		},
		
		/**
		 * create a scrollbar
		 * 
		 * @param	{Element}	injectContainer
		 * @param	{Object}	options
		 * 
		 * @returns {Imperion.Interface.Tools.ScrollBar}
		 */
		scrollbar : function(injectContainer, options) {
			return new Imperion.Interface.Tools.ScrollBar(injectContainer, options);
		},
		
		/**
		 * create instance from slider
		 *
		 * @param	{Element}	container
		 * @param	{Object}	options
		 * 
		 * @returns	{Imperion.Interface.Tools.SliderWithButtons}
		 */
		sliderWithButtons : function(container, options) {
			return new Imperion.Interface.Tools.SliderWithButtons(container, options);
		}
	}
);
Imperion.Interface.Tools.ScrollBar = new Class(
	/** @lends Imperion.Interface.Tools.ScrollBar */
	{
		Implements	: [Imperion.Util.Class, Imperion.Template, Imperion.Event],
	
		/**
		 * default options
		 * 
		 * <p><b>direction</b> : Direction of the slider</p>
		 * <p><b>range</b> : Value range</p>
		 * <p><b>initialStep</b> : the initial step for the slider</p>
		 * <p><b>minHeightKnob</b> : minimum knob height in percent</p>
		 * <p><b>minWidthKnob</b> : minimum knob width in percent</p>
		 * 
		 * @type Object
		 */
		options : {
			direction		: SCROLLBAR_DIRECTION_VERTICAL,
			range			: [0, 100],
			initialStep		: 0,
			minHeightKnob	: 5,
			minWidthKnob	: 5,
			scrollSpeed		: 0.1
		},
		
		/**
		 * indicates if scroller is disabled
		 * 
		 * @type Boolean
		 */
		enabled : true,
		
		/**
		 * the mootools slider instance
		 * 
		 * @type Slider
		 */
		slider : null,
		
		/**
		 * scroll step
		 * 
		 * @type Number
		 */
		scrollStep : 1,
		
		/**
		 * current step for scrolling
		 * 
		 * @type Number
		 */
		currentStep : 0,
		
		/**
		 * attached parent
		 * 
		 * @type {Element}
		 */
		attachedParent : null,
		
		/**
		 * attached container
		 * 
		 * @type {Element}
		 */
		attachedContainer : null,
		
		/**
		 * attach event pointer to remove event from attachedParent - Element
		 * 
		 * @type Function
		 */
		attachedParentEventPointer : null,
		
		/**
		 * current percentage
		 * 
		 * @type	Number
		 */
		scrollPercent : 0,
		
		/**
		 * load the templates and set up the configuration
		 *
		 * @augments	Imperion.Interface.Resource.Root
		 * @class		Inherit from Root and is able to count resources in up and down direction
		 * 
		 * @param		{Element}	injectContainer
		 * @param		{Object}	options
		 *
		 * @constructs
		 */
		initialize : function(injectContainer, options) {
			this.setOptions(options);
			//
			this.loadElements();
			//
			this.elements.container.inject(injectContainer);
			//
			this.show();
			//
			this.disable();
		},
		
		/**
		 * free scroll bar
		 * 
		 * @returns {void}
		 */
		clean : function() {
			this.step(0);
			this.cleanUp();
			this.removeEvent('mousewheel', this.attachedParent, this.attachedParentEventPointer);
			this.attachedParent = null;
			this.attachedContainer = null;
		},
		
		/**
		 * listener for mootools slider for each step
		 * 
		 * @param	{Number} step
		 * 
		 * @returns {void}
		 */
		step : function(step) {
			this.currentStep = step;
			if(this.options.direction === SCROLLBAR_DIRECTION_VERTICAL) {
				this.attachedContainer.setStyle('top', -1 * this.currentStep * this.scrollStep);
			}
			else if(this.options.direction === SCROLLBAR_DIRECTION_HORIZONTAL){
				this.attachedContainer.setStyle('left', -1 * this.currentStep * this.scrollStep);
			}
		},

		/**
		 * scrolls to the top of the scroll container
		 */
		scrollToTop :function() {
			if (this.enabled == true) {
				this.step(0);
				this.slider.set(0);
			}
		},

		/**
		 * Scrolls to the bottom of the scroll container
		 *
		 * @return	{Void}
		 */
		scrollToBottom :function() {
			if (this.enabled == true) {
				this.step(100);
				this.slider.set(100);
			}
		},
		
		/**
		 * calulate inner scroll
		 * 
		 * @param {Element}	parentElement
		 * @param {Element}	containerElement
		 * 
		 * @returns {Object}
		 */
		calculateScrollOffset : function(parentElement, containerElement) {
			var offset	= 0;
			var percent = 100;
			if(this.options.direction === SCROLLBAR_DIRECTION_VERTICAL) {
				var cY	= containerElement.getSize().y;
				var pY	= parentElement.getSize().y;
				offset	= cY - pY;
				percent = pY * 100 / cY;
			}
			else if(this.options.direction === SCROLLBAR_DIRECTION_HORIZONTAL){
				var cX	= containerElement.getSize().x;
				var pX	= parentElement.getSize().x;
				offset	= cX - pX;
				percent	= pX * 100 / cX;
			}
			return {
				offset	: offset < 0 ? 0 : offset,
				percent	: percent > 100 ? 100 : percent
			};
		},
		
		/**
		 * attach container
		 * 
		 * @param {Element}	parentElement
		 * @param {Element}	containerElement
		 * 
		 * @returns {void}
		 */
		attachTo : function(parentElement, containerElement) {
			this.attachedParent		= parentElement;
			this.attachedContainer	= containerElement;
			this.currentStep = 0;
			
			this.attachedParentEventPointer = this.addEvent('mousewheel', this.attachedParent, $H({
				action : 'scroll'
			}));
			
			this.setScrollOffset(this.calculateScrollOffset(parentElement, containerElement));
		},

		refreshScrollbarSize :function(){
			var scrollOffset = this.calculateScrollOffset(this.attachedParent	, this.attachedContainer);
			this.setScrollOffset(scrollOffset);
			return scrollOffset;
		},

		/**
		 * set the scrolling offset
		 * 
		 * @param	{Object}	scrollOffset
		 * 
		 * @returns {void}
		 */
		setScrollOffset : function(scrollOffset) {
			this.scrollPercent = scrollOffset.percent;
			if(scrollOffset.offset > 0) {
				this.scrollStep = scrollOffset.offset / this.options.range[1];
				if(this.options.direction === SCROLLBAR_DIRECTION_VERTICAL) {
					this.setKnobHeight(scrollOffset.percent);
				}
				else if(this.options.direction === SCROLLBAR_DIRECTION_HORIZONTAL){
					this.setKnobWidth(scrollOffset.percent);
				}
				this.enable();
			}
			else {
				this.disable();
			}
		},
		
		/**
		 * set the height of the knob
		 * 
		 * @param	{Number}	newHeight	new height of knob in percent
		 * 
		 * @returns {void}
		 */
		setKnobHeight : function(newHeight) {
			if(newHeight < this.options.minHeightKnob) {
				newHeight = this.options.minHeightKnob;
			}
			this.elements.knob.setStyle('height', newHeight + '%');
		},
		
		/**
		 * set the width of the knob
		 * 
		 * @param	{Number}	newWidth	new width of knob in percent
		 * 
		 * @returns {void}
		 */
		setKnobWidth : function(newWidth) {
			if(newWidth < this.options.minWidthKnob) {
				newWidth = this.options.minWidthKnob;
			}
			this.elements.knob.setStyle('width', newWidth + '%');
		},
		
		/**
		 * enable the scrollbar
		 * 
		 * @returns {void}
		 */
		enable : function() {
			if(!this.enabled) {
				this.elements.container.removeClass('disabled');
				this.elements.knob.removeClass('hideContainer');
				
				delete this.slider;
				this.slider = new Slider(this.elements.container, this.elements.knob, {
					range	: this.options.range,
					mode	: this.options.direction,
					onChange: this.step.bindNew(this)
				});
				
				if(this.slider !== null) {
					this.slider.attach();
				}
				this.enabled = true;
			}
		},
		
		/**
		 * disable the scrollbar
		 * 
		 * @returns {void}
		 */
		disable : function() {
			if(this.enabled) {
				this.elements.container.addClass('disabled');
				this.elements.knob.addClass('hideContainer');
				if(this.options.direction === SCROLLBAR_DIRECTION_VERTICAL) {
					this.setKnobHeight(this.options.minHeightKnob);
				}
				else if(this.options.direction === SCROLLBAR_DIRECTION_HORIZONTAL){
					this.setKnobWidth(this.options.minWidthKnob);
				}
				if(this.slider !== null) {
					this.slider.detach();
				}
				this.enabled = false;
			}
		},
		
		/**
		 * scroll content down
		 * 
		 * @param	{Number} direction
		 * 
		 * @returns {void}
		 */
		scroll : function(direction) {
			if (!this.enabled) {
				return false;
			}
			if(this.options.direction === SCROLLBAR_DIRECTION_VERTICAL) {
				var nextStep = this.currentStep + direction * this.options.scrollSpeed * -1 * this.scrollPercent;
				if(nextStep >= 0 && nextStep < 101) {
					this.step(nextStep);
					this.slider.set(nextStep);
				}
				else if(nextStep > 100) {
					this.step(100);
					this.slider.set(100);
					return false;
				}
				else {
					this.step(0);
					this.slider.set(0);
					return false;
				}
			}
			return true;
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'scroll':
					var scrollable;
					eventObject.preventDefault();
					new Event(eventObject).stop();
					if(eventObject.wheel > 0) {
						scrollable = this.scroll(1);
					}
					else {
						scrollable = this.scroll(-1);
					}
					if (!scrollable) {
						return true;
					}
					break;
			}
			return false;
		},
		
		/**
		 * load scrollbar elements
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.elements.container = this.getClonedTemplate('InterfaceToolsScrollbar');
			this.elements.knob = this.elements.container.getElement('.knob');
		}
	}
);
var ISlider = new Class({
	Extends : Slider,
	
	fillElementCallback : null,
	
	initialize : function(element, knob, options, fillElementCallback) {
		this.fillElementCallback = fillElementCallback;
		this.setOptions(options);
		this.element = document.id(element);
		this.knob = document.id(knob);
		this.previousChange = this.previousEnd = this.step = -1;
		var offset, limit = {}, modifiers = {'x': false, 'y': false};
		switch (this.options.mode){
			case 'vertical':
				this.axis = 'y';
				this.property = 'top';
				offset = 'offsetHeight';
				break;
			case 'horizontal':
				this.axis = 'x';
				this.property = 'left';
				offset = 'offsetWidth';
		}
		
		this.full = this.element.measure(function(){ 
			this.half = this.knob[offset] / 2; 
			return this.element[offset] - this.knob[offset] + (this.options.offset * 2); 
		}.bind(this));
		
		this.min = $chk(this.options.range[0]) ? this.options.range[0] : 0;
		this.max = $chk(this.options.range[1]) ? this.options.range[1] : this.options.steps;
		this.range = this.max - this.min;
		this.steps = this.options.steps || this.full;
		this.stepSize = Math.abs(this.range) / this.steps;
		this.stepWidth = this.stepSize * this.full / Math.abs(this.range) ;
	
		this.knob.setStyle('position', 'relative').setStyle(this.property, this.options.initialStep ? this.toPosition(this.options.initialStep) : - this.options.offset);
		modifiers[this.axis] = this.property;
		limit[this.axis] = [- this.options.offset, this.full - this.options.offset];
	
		var dragOptions = {
			snap: 0,
			limit: limit,
			modifiers: modifiers,
			onDrag: this.draggedKnobExtend.bindNew(this),
			onStart: this.draggedKnobExtend.bindNew(this),
			onBeforeStart: (function(){
				this.isDragging = true;
			}).bind(this),
			onCancel: function() {
				this.isDragging = false;
			}.bind(this),
			onComplete: function(){
				this.isDragging = false;
				this.draggedKnobExtend();
				this.end();
			}.bind(this)
		};
		if (this.options.snap){
			dragOptions.grid = Math.ceil(this.stepWidth);
			dragOptions.limit[this.axis][1] = this.full;
		}
	
		this.drag = new Drag(this.knob, dragOptions);
		this.attach();
	},
	
	clickedElement :  function(e) {
		this.parent(e);
		this.fillElementCallback(e);
	},
	
	draggedKnobExtend : function(e) {
		this.draggedKnob(e);
		this.fillElementCallback(e);
	}
});

/**
 * Slider.js
 *
 * Creates a modified mootools slider
 *
 * @version	$Id: slider.js 7738 2011-09-09 08:56:16Z p.kreichauf $
 */
 
Imperion.Interface.Tools.Slider = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event],
	
	/**
	 * default options
	 */
	options : {
		update		: $empty,	// User Callback
		dir			: 'vertical',	// Direction of the slider
		range		: [0, 100],	// Value range
		length		: 300,		// the length in pixels
		initialStep : 0,		// the initial step for the slider
		disabled	: false
	},
	
	/**
	 * disabled flag
	 * 
	 * @type	Boolean
	 */
	sliderDisabled : false,
	
	/**
	 * load the templates and set up the configuration
	 *
	 * @return void
	 */
	initialize : function(container, options){
		this.setOptions(options);
		this.loadElements();
		
		this.prepare(); // setup vertical or horizontal slider
		
		this.elements.container
			.removeClass('hideContainer')
			.addClass(this.options.dir + 'Slide')
			.inject(container);
	
		this.slider = new ISlider(this.elements.handler, this.elements.knob, {
			range: this.options.range,
			steps : this.options.range[1],
			snap: false,
			mode: this.options.dir,
			onChange: function(pos) {
				this.options.update(pos);	// call the userdefined callback
				this.step(pos);				// increase the filler
			}.bindNew(this)
			
			//onComplete: $empty
		}, this.dragKnob.bindNew(this));
		this.slider.set(this.options.initialStep);
		
		if(this.options.disabled) {
			this.disable();
		}
		
	},
	
	/**
	 * clean up slider
	 * 
	 * @returns	{Void}
	 */
	clean : function() {
		this.cleanUp();
		delete this.slider;
	},
	
	/**
	 * drag the knob
	 */
	dragKnob : function() {
		pos = 1;
		//this.elements.filler.setStyle('width', this.elements.knob.getPosition(this.elements.container).x + 'px');
		switch(this.options.dir) {
			case 'vertical':
				this.elements.filler.setStyle('height', pos*this.pixelOffset);
				break;
			case 'horizontal':
				this.elements.filler.setStyle('width', this.elements.knob.getPosition(this.elements.container).x + 'px');
				break;
		}
	},
	
	/**
	 * disable
	 * 
	 * @returns	{Void}
	 */
	disable : function() {
		this.elements.container.addClass('disabled');
		this.sliderDisabled = true;
		this.slider.detach();
	},
	
	/**
	 * enable
	 * 
	 * @returns	{Void}
	 */
	enable : function() {
		this.elements.container.removeClass('disabled');
		this.sliderDisabled = false;
		this.slider.attach();
	},
	
	/**
	 * internal callback, fires when the value of the slider is changed
	 *
	 * @return void
	 */
	step : function(pos){
		switch(this.options.dir) {
			case 'vertical':
				this.elements.filler.setStyle('height', pos*this.pixelOffset);
				break;
			case 'horizontal':
				//this.elements.filler.setStyle('width', this.elements.knob.getPosition(this.elements.container).x + 'px');
				break;
		}
	},
	
	/**
	 * prepare the slider for vertical or horizontal display
	 * and alter some option values for correct display
	 *
	 * @return void
	 */
	prepare : function() {
		
		// abstract the start and end blocks from the handle height
		this.options.length = this.options.length-22; 
		
		// calculate the pixels for the filler 
		this.pixelOffset = this.options.length / this.options.range[1];
		
		switch(this.options.dir) {
			case 'vertical':
			
				// MooTools will start the slider in vertical mode with
				// the first value on top and the second bottom - reverse that
				this.options.range.reverse();
				
				this.elements.handler.setStyle('height', this.options.length);
				break;
		
			case 'horizontal':
			
				this.elements.handler.setStyle('width', this.options.length);
				break;
		}
	},
	
	set : function(pos, update){
		var callback = this.options.update;
		this.options.update = function() {};
		this.slider.set(pos);
		this.options.update = callback;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {		
		var el = eventObject.target;
		switch(params.get('action')) {
			case 'click':
				eventObject.preventDefault();
				break;
		}
	},
	
	loadElements : function(){
		this.elements.container = this.getClonedTemplate('Slide');
		this.elements.start     = this.elements.container.getElement('.slideStart');
		this.elements.handler   = this.elements.container.getElement('.slideHandler');
		this.elements.filler    = this.elements.container.getElement('.slideFiller');
		this.elements.knob      = this.elements.container.getElement('.slideKnob');
		this.elements.end       = this.elements.container.getElement('.slideEnd');
	}
});
/**
 * sliderbuttons.js
 *
 * 
 *
 * @version	$Id: slider.js 6226 2011-04-26 08:45:56Z p.kreichauf $
 */
 
Imperion.Interface.Tools.SliderWithButtons = new Class({
	Extends : Imperion.Interface.Tools.Slider, 
		
	/**
	 * load the templates and set up the configuration
	 *
	 * @return void
	 */
	initialize : function(container, options) {
		this.parent(container, options);
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {		
		switch(params.get('action')) {
			case 'plus':
				if(!this.sliderDisabled) {
					this.slider.set(this.slider.step + 1);
					this.dragKnob();
				}
				break;
			case 'minus':
				if(!this.sliderDisabled) {
					this.slider.set(this.slider.step - 1);
					this.dragKnob();
				}
				break;
		}
	},
	
	/**
	 * load elements
	 * 
	 * @returns {Void}
	 */
	loadElements : function(){
		this.parent();
		
		this.elements.plus	= this.getClonedTemplate('SlideButtonPlus').removeClass('hideContainer');
		this.elements.minus	= this.getClonedTemplate('SlideButtonMinus').removeClass('hideContainer');
		
		this.addEvent('click', this.elements.plus, $H({
			action : 'plus'
		}));
		this.addEvent('click', this.elements.minus, $H({
			action : 'minus'
		}));
		
		this.elements.plus.inject(this.elements.container, 'bottom');
		this.elements.minus.inject(this.elements.container, 'top');
	}
});
Imperion.Interface.Map.Factory = new Class.Singleton({

	/**
	 * storage for instances
	 *
	 * @var Object
	 */
	storage : {
		contextmenu : null
	},

	/**
	 * prepare the factory
	 *
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			contextmenu : null
		};
	},

	/**
	 * return an instance from a orb detail view
	 *
	 * @return Imperion.Interface.Map.Detail
	 */
	detail : function() {
		return new Imperion.Interface.Map.Detail(Imperion.Interface.Factory.mission(), Imperion.Interface.Gui.Factory.tooltip(), Imperion.Interface.Gui.Factory.htmltooltip(), Imperion.Util.Factory.secondTimer());
	},

	/**
	 * return an instance from overlay class
	 *
	 * @return Imperion.Interface.Map.Overlay
	 */
	overlay : function() {
		return new Imperion.Interface.Map.Overlay(
			this.overlayCoordinate()
		);
	},

	/**
	 * return an instance from overlay coordinate class
	 *
	 * @return Imperion.Interface.Map.OverlayCoordinates
	 */
	overlayCoordinate : function() {
		return new Imperion.Interface.Map.OverlayCoordinates();
	},

	/**
	 * return an instance from sidebar
	 *
	 * @return Imperion.Interface.Map.Sidebar
	 */
	sidebar : function() {
		return new Imperion.Interface.Map.Sidebar(this.sidebarList());
	},

	/**
	 * return an instance from sidebarlist
	 *
	 * @return Imperion.Interface.Map.SidebarList
	 */
	sidebarList : function() {
		return new Imperion.Interface.Map.SidebarList({
			template : 'InterfaceMapSidebarList'
		});
	},

	/**
	 * return an instance from sidebarlistitem
	 *
	 * @param string type
	 * @param Imperion.Interface.Map.SidebarList
	 *
	 * @return Imperion.Interface.Map.SidebarListItem
	 */
	sidebarListItem : function(type, parentList) {
		switch(type) {
			case 'planet':
				return new Imperion.Interface.Map.SidebarListItemPlanet(parentList);
				break;
			case 'system':
				return new Imperion.Interface.Map.SidebarListItemSystem(parentList);
				break;
			case 'galaxy':
				return new Imperion.Interface.Map.SidebarListItemGalaxy(parentList);
				break;
		}
	}
});

Imperion.Interface.Map.Detail = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Translate, Imperion.Util.Checkpoint],

	/**
	 * options
	 *
	 * @var Object
	 */
	options : {
		desc : ''
	},

	/**
	 * mission handle (show mission selection)
	 *
	 * @var Imperion.Interface.Mission
	 */
	missionHandler : null,

	/**
	 * tooltop handle
	 *
	 * @var Imperion.Interface.Gui.Tooltip
	 */
	tooltipHandle : null,

	/**
	 * html tooltop handle
	 *
	 * @var Imperion.Interface.Gui.HtmlTooltip
	 */
	htmlTooltipHandle : null,

	/**
	 * detail location
	 *
	 * @var Imperion.Data.Location
	 */
	location : null,

	/**
	 * current orb showed
	 *
	 * @type Imperion.Map.SystemElement
	 */
	currentOrb : null,

	/**
	 * second counter
	 *
	 * @type 	Imperion.Util.SecondTimer
	 */
	secondTimer : null,

	/**
	 * invasion time
	 *
	 * @type	Number
	 */
	invasionTime : 0,

	/**
	 * seconds loaded till refresh new data
	 *
	 * @type	Number
	 */
	secondsLoaded : 0,

	/**
	 * no scanner tooltip flag
	 *
	 * @type Boolean
	 */
	showNoScannerToolitp : null,

	/**
	 * identifier for the link to planet mouse event.
	 * used to remove the mouseEvent
	 */
	enableLinkToPlanetIdentifier : null,

	/**
	 * identifier for the abandon planet link.
	 * used to remove the mouseEvent
	 */
	enableAbandonPlanetIdentifier : null,

	/**
	 * prepare the detail view class
	 *
	 * @param Imperion.Interface.Mission missionHandler
	 * @param Imperion.Interface.Gui.Tooltip tooltipHandle
	 * @param	{Imperion.Util.secondTimer}	secondTimer
	 *
	 * @return void
	 */
	initialize : function(missionHandler, tooltipHandle, htmlTooltipHandle, secondTimer) {
		this.currentOrb		= null;
		this.invasionTime	= 0;
		this.secondsLoaded	= 0;
		//
		this.missionHandler = missionHandler;
		this.secondTimer	= secondTimer;
		this.missionHandler.attach('Imperion.Interface.Map.Detail', this);
		this.tooltipHandle = tooltipHandle;
		this.tooltipHandle.setText(0);

		this.htmlTooltipHandle = htmlTooltipHandle;
		this.htmlTooltipHandle.setText(0);

		this.setUser(this.getUser());
		//
		this.loadElements();
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'SelectMissionDropDown':
				return this.missionHandler.options.visible;
				break;
			case 'SelectMissionItem':
				return this.missionHandler.isCheckpointResolved(ident, params, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'SelectMissionDropDown':
				if(this.currentOrb) {
					if(!params.type || (params.type == this.currentOrb.location.options.type)) {
						var highlight = this.getCheckpointHighlight(ident, {
							container	: this.elements.front.container,
							posOffset	: {
							y : -25,
							x : -5
						},
						rotation	: 'arrowBottom'
						});
						highlight.appendOver(this.elements.front.mission);
						highlight.start();
						this.setCheckpointActive(ident, questObj);
					}
					else {
						this.removeCheckpoint('SelectMissionDropDown');
						this.removeCheckpoint('SelectMissionItem');
					}
				}
				else {
					this.removeCheckpoint('SelectMissionDropDown');
					this.removeCheckpoint('SelectMissionItem');
				}
				break;
			case 'SelectMissionItem':
				if(this.currentOrb) {
					if(!params.type || (params.type == this.currentOrb.location.options.type)) {
						this.missionHandler.activateCheckpoint(ident, params, questObj);
					}
					else {
						this.removeCheckpoint('SelectMissionDropDown');
						this.removeCheckpoint('SelectMissionItem');
					}
				}
				else {
					this.removeCheckpoint('SelectMissionDropDown');
					this.removeCheckpoint('SelectMissionItem');
				}
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'SelectMissionDropDown':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			case 'SelectMissionItem':
				this.missionHandler.removeCheckpoint(ident, refreshQuests);
				break;
			default:
				throw 'Imperion.Layout ident not exist';
				break;
		}
	},

	/**
	 * update the detail view
	 *
	 * @param {Imperion.Map.SystemElement} orb
	 *
	 * @return void
	 */
	update : function(orb) {
		this.location = orb.getLocation();
		//
		this.currentOrb = orb;

		if(orb.data.map_info.missions && $type(orb.data.map_info.missions) === 'object') {
			this.missionHandler.enableMultiple(orb.data.map_info.missions);
		}
		else {
			this.missionHandler.enableMultiple({});
		}

		switch(orb.elementType) {
			case SYSTEM_ORB_TYPE_PLANET:
				//set location name
				this.elements.back.name.set('text', this.location.getName());
				this.hideResources();
				this.updateDesc(this.location.getPlanetType());
				//show / hide production
				if(orb.data.map_info.production) {
					this.showProduction(orb.data.map_info.production.box_count, orb.data.map_info.production.caption);
					this.setProductionTooltip(orb.data.map_info.production.resources);
					this.setBonusesTooltip(orb.data.map_info.production.annexationBonuses);
				}
				else {
					this.hideProduction();
				}
				//
				if(orb.data.map_info.production && orb.data.map_info.info.account_name && orb.data.map_info.info.account_name !== '' && orb.data.map_info.info.account_id.toInt() === this.user.id) {
					this.elements.front.ownage.statannex.removeClass('hideContainer');
					this.elements.front.ownage.stat.addClass('hideContainer');
				}
				else {
					this.elements.front.ownage.statannex.addClass('hideContainer');
					this.elements.front.ownage.stat.removeClass('hideContainer');
				}
				if(orb.data.map_info.invasion) {
					this.showInvasion(orb.data.map_info.invasion.time.toInt() - this.secondsLoaded, orb.data.map_info.invasion.state);
				}
				else {
					this.hideInvasion();
				}
				if(orb.data.map_info.alienbonus && orb.data.map_info.alienbonus.value) {
					this.showAlienBonus(orb.data.map_info.alienbonus);
				} else {
					this.hideAlienBonus();
				}

				//show / hide bonuses
				if(orb.data.map_info.bonuses) {
					this.showBoni(orb.data.map_info.bonuses);
				}
				else {
					this.hideBoni();
				}
				//show hide admiral
				if(orb.data.map_info.admiral) {
					this.showAdmiral(orb.data.map_info.info.account_name, orb.data.map_info.info.account_kind, orb.data.map_info.info.account_avatar);
				}
				else {
					this.hideAdmiral();
				}
				//update info
				if(orb.data.map_info.info) {
					this.showPlanetInfo(orb.data.map_info.info, orb.data.map_info.info.status);
					this.handlePlanetLink(orb);
					this.handleAbandonButton(orb);
				}
				else {
					this.hidePlanetInfo();
				}
				this.hideCometSlots();
				//update info
				if(orb.data.map_info.pop) {
					this.showPopulation(orb.data.map_info.pop);
				}
				else {
					this.hidePopulation();
				}
				//update building slots
				if(orb.data.map_info.slots) {
					this.showBuildingslots(orb.data.map_info.slots);
				}
				else {
					this.hideBuildingslots();
				}
				break;
			case SYSTEM_ORB_TYPE_DEBRIS:
				//set location name
				this.elements.back.name.set('text', this.translate('map__debris'));
				this.updateDesc(SYSTEM_ORB_TYPE_DEBRIS);
				this.showResources(orb.data.metal, orb.data.crystal, orb.data.tritium);
				this.hideBoni();
				this.hideAdmiral();
				this.hidePlanetInfo();
				this.hideProduction();
				this.hideCometSlots();
				this.hideBuildingslots();
				this.hideInvasion();
				this.handlePlanetLink(orb);
				this.handleAbandonButton(orb);
				break;
			case SYSTEM_ORB_TYPE_COMET:
				//set location name
				this.elements.back.name.set('text', orb.data.map_info.name);
				this.updateDesc(SYSTEM_ORB_TYPE_COMET);
				this.showResources(orb.data.metal, orb.data.crystal, orb.data.tritium);
				this.hideBoni();
				this.hideAdmiral();
				this.hidePlanetInfo();
				this.hideProduction();
				this.hideBuildingslots();
				this.hideInvasion();
				this.showCometSlots(orb.data.map_info.slots);
				this.handlePlanetLink(orb);
				this.handleAbandonButton(orb);
				break;
			default:
				throw '//ERROR HANDLING - orb type not support at detail view';
				break;
		}
		//
	},

	/**
	 * show invasion
	 *
	 * @param	{Number}	time
	 * @param	{String}	state
	 *
	 * @returns	{Void}
	 */
	showInvasion : function(time, state) {
		if(time > 0) {
			this.invasionTime = time;
			this.secondTimer.attach('MapDetails', this);
			if(state === 'own') {
				this.elements.front.invasion.container.removeClass('blue').addClass('red');
			}
			else if(state === 'foreign'){
				this.elements.front.invasion.container.removeClass('red').addClass('blue');
			}
			this.elements.front.invasion.time.set('text', this.user.formatDuration(this.invasionTime));
			this.elements.front.invasion.container.removeClass('hideContainer');
		} else {
			this.hideInvasion();
		}
	},

	/**
	 * lister for second timer step
	 *
	 * @params	{Object}	params
	 *
	 * @returns	{Void}
	 */
	timerStep : function(params) {
		this.secondsLoaded++;
		this.invasionTime--;
		this.elements.front.invasion.time.set('text', this.user.formatDuration(this.invasionTime));
		if(this.invasionTime < 0) {
			this.hideInvasion();
		}
	},

	/**
	 * hide invasion
	 *
	 * @returns	{Void}
	 */
	hideInvasion : function() {
		this.invasionTime = 0;
		this.secondTimer.detach('MapDetails');
		this.elements.front.invasion.container.addClass('hideContainer');
	},

	/**
	 * show and set comet slots
	 *
	 * @param	{Array}		slotData
	 *
	 * @returns	{Void}
	 */
	showCometSlots : function(slotData) {
		if(slotData === undefined) {
			for(var i = 0 ; i < 5 ; i++) {
				this.elements.front.comets.slots[i].image.setProperty('class', 'secret');
				this.elements.front.comets.slots[i].player.addClass('hideContainer');
			}
		}
		else if(slotData.length === 0) {
			for(var i = 0 ; i < 5 ; i++) {
				this.elements.front.comets.slots[i].image.setProperty('class', 'empty');
				this.elements.front.comets.slots[i].player.addClass('hideContainer');
			}
		}
		else {
			for(var i = 0 ; i < 5 ; i++) {
				//check if slotdata is set
				if(slotData[i]) {
					this.elements.front.comets.slots[i].image.setProperty('class', slotData[i].disabled ? slotData[i].avatar + ' disabled' : slotData[i].avatar);
					this.elements.front.comets.slots[i].player.set('html', slotData[i].name);
					this.elements.front.comets.slots[i].player.removeClass('hideContainer');
				}
				else {
					this.elements.front.comets.slots[i].image.setProperty('class', 'empty');
					this.elements.front.comets.slots[i].player.addClass('hideContainer');
				}
			}
		}
		this.elements.front.comets.container.removeClass('hideContainer');
	},

	/**
	 * hide comet slots
	 *
	 * @returns	{Void}
	 */
	hideCometSlots : function() {
		this.elements.front.comets.container.addClass('hideContainer');
	},

	/**
	 * show and set production
	 *
	 * @param int block
	 * @param String caption
	 *
	 * @return void
	 */
	showProduction : function(block, caption) {
		if(this.elements.front.production.container.hasClass('hideContainer')) {
			this.elements.front.production.container.removeClass('hideContainer');
		}
		for(var i = 0 ; i < block; i++) {
			if(!this.elements.front.production.blocks[i].hasClass('active')) {
				this.elements.front.production.blocks[i].addClass('active');
			}
		}
		for(var i = block ; i < 5; i++) {
			if(this.elements.front.production.blocks[i].hasClass('active')) {
				this.elements.front.production.blocks[i].removeClass('active');
			}
		}
		this.elements.front.production.caption.set('text', caption);
	},

	/**
	 * hide production
	 *
	 * @return void
	 */
	hideProduction : function() {
		if(!this.elements.front.production.container.hasClass('hideContainer')) {
			this.elements.front.production.container.addClass('hideContainer');
		}
	},

	/**
	 * redirect to planet with param planetId
	 * @param planetId
	 */
	redirectToPlanet : function(planetId){
		window.location = '/planet/index/change/planetId/' + planetId;
	},

	/**
	 * removes or enables PlanetLink based on ownage of a planet
	 * @param orb
	 */
	handlePlanetLink : function(orb){
		if(this.isOwnPlanet(orb)){
			this.enablePlanetLink(orb.data.id_planet);
		}else{
			this.removePlanetLink();
		}
	},

	/**
	 * checks if this planet/orb is owned by this player
	 *
	 * @param orb
	 */
	isOwnPlanet : function(orb){
		if(	orb.data.map_info.status && orb.data.map_info.status.ownage &&
			(orb.data.map_info.status.ownage === 'green' || orb.data.map_info.status.ownage === 'homeworld green')
		) {
			return true;
		}else{
			return false;
		}
	},

	/**
	 * add MouseClickEvent to Planet
	 *
	 * @param planetId
	 */
	enablePlanetLink : function(planetId){
		this.elements.front.linkToOwnPlanet.removeClass('hideContainer');
		this.enableLinkToPlanetIdentifier = this.addEvent('click',this.elements.front.linkToOwnPlanet	, $H({
			action : 'link_to_planet',
			planetId : planetId
		}));
	},

	/**
	 * remove MouseClickEvent to Planet
	 *
	 * @param planetId
	 */
	removePlanetLink : function(){
		this.elements.front.linkToOwnPlanet.addClass('hideContainer');
		if(this.enableLinkToPlanetIdentifier){
			this.removeEvent('click', this.elements.front.linkToOwnPlanet, this.enableLinkToPlanetIdentifier);
		}
	},

	/**
	 * removes or enables Abandon PlanetLink based on ownage of a planet
	 * @param orb
	 */
	handleAbandonButton : function(orb){
		if(this.enableAbandonPlanetIdentifier){
				this.removeEvent('click', this.elements.front.abandonPlanet, this.enableAbandonPlanetIdentifier);
		}
		if(this.isOwnPlanet(orb)){
			this.elements.front.abandonPlanet.removeClass('hideContainer');
			if(orb.data.map_info.status.planet_abandonable){
				this.elements.front.abandonPlanet.removeClass('disabled');
				this.enableAbandonPlanetIdentifier = this.addEvent('click', this.elements.front.abandonPlanet, $H({
					action   : 'abandon_planet',
					planetId : orb.data.id_planet
				}));
			}else{
				this.elements.front.abandonPlanet.addClass('disabled');
			}
		}else{
			this.elements.front.abandonPlanet.addClass('hideContainer');
		}
	},

	/**
	 * show and set planet info
	 *
	 * @param Object info
	 * @param String status
	 *
	 * @return void
	 */
	showPlanetInfo : function(info, status) {
		if(this.elements.front.ownage.container.hasClass('hideContainer')) {
			this.elements.front.ownage.container.removeClass('hideContainer');
		}
		if(info.account_id && info.account_name) {
			this.elements.front.ownage.name.set('html', info.account_name);
			this.elements.front.ownage.name.removeClass('disabled');
			if(info.alliance_member){
				this.elements.front.ownage.name.addClass('allied');
			}else{
				this.elements.front.ownage.name.removeClass('allied');
			}
		}
		else {
			this.elements.front.ownage.name.set('text', '---');
			this.elements.front.ownage.name.addClass('disabled');
			this.elements.front.ownage.name.removeClass('allied');
		}
		if(info.alliance_id && info.alliance_name) {
			this.elements.front.ownage.ally.set('html', info.alliance_name);
			this.elements.front.ownage.ally.removeClass('disabled');
		}
		else {
			this.elements.front.ownage.ally.set('text', '---');
			this.elements.front.ownage.ally.addClass('disabled');
		}
		this.elements.back.name.set('html', info.planet_name);
		this.elements.front.ownage.stat.set('text', status);
	},

	/**
	 * hide planet info
	 *
	 * @return void
	 */
	hidePlanetInfo : function() {
		if(!this.elements.front.ownage.container.hasClass('hideContainer')) {
			this.elements.front.ownage.container.addClass('hideContainer');
		}
	},

	/**
	 * Show alien bonus
	 *
	 * @param	{Object}	Alienbonus data
	 *
	 * @return	{Void}
	 */
	showAlienBonus : function(alienbonus) {
		if(this.elements.front.alienbonus.container.hasClass('hideContainer')) {
			this.elements.front.alienbonus.container.removeClass('hideContainer');
		}

		var value = alienbonus.value;

		if (alienbonus.percentage == true) {
			if(this.elements.front.alienbonus.percentage.hasClass('hideContainer')) {
				this.elements.front.alienbonus.percentage.removeClass('hideContainer');
			}
			value *= 100;
		} else {
			this.elements.front.alienbonus.percentage.addClass('hideContainer');
		}

		this.elements.front.alienbonus.caption.set('html', alienbonus.caption);
		this.elements.front.alienbonus.value.set('html', value);
	},

	/**
	 * Hide alien bonus
	 *
	 * @return void
	 */
	hideAlienBonus : function() {
		if(!this.elements.front.alienbonus.container.hasClass('hideContainer')) {
			this.elements.front.alienbonus.container.addClass('hideContainer');
		}
	},

	/**
	 * show and set player
	 *
	 * @param 	{String}	name
	 * @param 	{String}	kind
	 * @param	{String}	type
	 *
	 * @return void
	 */
	showAdmiral : function(name, kind, avatar) {
		if(this.elements.front.owner.container.hasClass('hideContainer')) {
			this.elements.front.owner.container.removeClass('hideContainer');
		}
		this.elements.front.owner.container.removeClass('TERRAN').removeClass('TITAN').removeClass('XEN').removeClass('ALIEN').addClass(kind);
		if (kind == 'ALIEN' && (this.location.getPlanetType() == 'ALIEN01' || this.location.getPlanetType() == 'ALIEN02')) {
			avatar = 2;
		}
		this.elements.front.owner.admiral.setProperty('class', 'admiral_' + avatar);
		this.elements.front.owner.name.set('html', name);
	},

	/**
	 * hide player
	 *
	 * @return void
	 */
	hideAdmiral : function() {
		if(!this.elements.front.owner.container.hasClass('hideContainer')) {
			this.elements.front.owner.container.addClass('hideContainer');
		}
	},

	/**
	 * show and set planet boni
	 *
	 * @param Array newBoni
	 *
	 * @return void
	 */
	showBoni : function(newBoni) {
		if(this.elements.front.boni.hasClass('hideContainer')) {
			this.elements.front.boni.removeClass('hideContainer');
		}
		this.showNoScannerToolitp = false;
		for(var i = 0 ; i < 5 ; i++) {
			if(!newBoni[i]) {
				throw '//ERROR HANDLING boni not set';
			}
			if(newBoni[i].value >= 0) {
				if(newBoni[i].invert) {
					this.elements.front.bonis[i].container.removeClass('positive');
					this.elements.front.bonis[i].container.addClass('negative');
				}
				else {
					this.elements.front.bonis[i].container.removeClass('negative');
					this.elements.front.bonis[i].container.addClass('positive');
				}
			}
			else {
				if(newBoni[i].invert) {
					this.elements.front.bonis[i].container.removeClass('negative');
					this.elements.front.bonis[i].container.addClass('positive');
				}
				else {
					this.elements.front.bonis[i].container.removeClass('positive');
					this.elements.front.bonis[i].container.addClass('negative');
				}
			}
			if(newBoni[i].caption == '???') {
				this.showNoScannerToolitp = true;
			}
			this.elements.front.bonis[i].caption.set('text', newBoni[i].caption);
			this.elements.front.bonis[i].value.set('text', newBoni[i].value);
			var value = Math.abs(newBoni[i].value / 2);
			if (value > 100) {
				value = 100;
			}
			this.elements.front.bonis[i].bar.setStyle('width', value + '%');
		}

	},

	/**
	 * hide planet boni
	 *
	 * @return void
	 */
	hideBoni : function() {
		if(!this.elements.front.boni.hasClass('hideContainer')) {
			this.elements.front.boni.addClass('hideContainer');
		}
	},

	/**
	 * show resources
	 *
	 * @params	{Number}	metal
	 * @params	{Number}	crystal
	 * @params	{Number}	tritium
	 *
	 * @returns	{Void}
	 */
	showResources : function(metal, crystal, tritium) {
		if(this.elements.front.resources.container.hasClass('hideContainer')) {
			this.elements.front.resources.container.removeClass('hideContainer');
		}
		var user = this.getUser();
		this.elements.front.resources.metal.set('text',		metal	!== undefined ? user.formatNumber(metal)	: '???');
		this.elements.front.resources.crystal.set('text',	crystal	!== undefined ? user.formatNumber(crystal)	: '???');
		this.elements.front.resources.tritium.set('text',	tritium	!== undefined ? user.formatNumber(tritium)	: '???');
	},

	/**
	 * hide resources
	 *
	 * @returns	{Void}
	 */
	hideResources : function() {
		if(!this.elements.front.resources.container.hasClass('hideContainer')) {
			this.elements.front.resources.container.addClass('hideContainer');
		}
	},

	/**
	 * show the population box
	 *
	 * @param	{String}	pop
	 *
	 * @returns	{Void}
	 */
	showPopulation : function(pop) {
		this.elements.front.population.container.style.display = '';
		this.elements.front.population.caption.set('text', this.user.formatNumber(pop));
	},

	/**
	 * hide population
	 *
	 * @returns	{Void}
	 */
	hidePopulation : function() {
		this.elements.front.population.container.style.display = 'none';
	},

	/**
	 * show the building slots box
	 *
	 * @param	{String}	slots
	 *
	 * @returns	{Void}
	 */
	showBuildingslots : function(slots) {
		this.elements.front.buildingslots.container.style.display = '';
		this.elements.front.buildingslots.caption.set('text', slots);
	},

	/**
	 * hide building slots
	 *
	 * @returns	{Void}
	 */
	hideBuildingslots : function() {
		this.elements.front.buildingslots.container.style.display = 'none';
	},

	/**
	 * update the description
	 *
	 * @param {String} descIndex
	 *
	 * @return void
	 */
	updateDesc : function(descIndex) {
		if(this.options.desc !== '') {
			this.elements.back.desc[this.options.desc].addClass('hideContainer');
			this.elements.back.surface.removeClass(this.options.desc);
		}
		this.elements.back.desc[descIndex].removeClass('hideContainer');
		this.elements.back.surface.addClass(descIndex);
		this.options.desc = descIndex;
	},

	/**
	 * show the menu
	 *
	 * @return void
	 */
	show : function() {
		if(this.elements.back.container.hasClass('hideContainer')) {
			this.elements.back.container.removeClass('hideContainer');
			this.elements.front.container.removeClass('hideContainer');
		}
	},

	/**
	 * hide the menu
	 *
	 * @return void
	 */
	hide : function() {
		if(!this.elements.back.container.hasClass('hideContainer')) {
			this.elements.back.container.addClass('hideContainer');
			this.elements.front.container.addClass('hideContainer');
		}
	},

	/**
	 * listener for mission item clicked
	 *
	 * @param	{Object}	params
	 *
	 * @return void
	 */
	missionItemClicked : function(params) {
		var start = Imperion.Util.Registry.get('planet');
		var target = Imperion.Data.Factory.locationByType(this.currentOrb.elementType, {
			id: this.currentOrb.id
		});

		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('fleetTransport');

		var transport = Imperion.Interface.Dialog.Context.Factory.fleetTransport(dialog, {
			type: this.currentOrb.elementType,
			start: start,
			target: target,
			mission	: params.item.options.type
		});

		transport.showContext();
	},

	/**
	 * Updates the HTML tooltip with the detailed resources of the production
	 *
	 * @param {Object} resources
	 *
	 * @return {Void}
	 */
	setProductionTooltip : function(resources) {
		this.elements.front.production.tooltip.metal.set('text', this.user.formatNumber(resources.metal));
		this.elements.front.production.tooltip.crystal.set('text', this.user.formatNumber(resources.crystal));
		this.elements.front.production.tooltip.tritium.set('text', this.user.formatNumber(resources.tritium));
	},

	setBonusesTooltip: function(annexationBonuses) {
		var tooltip = this.elements.front.production.tooltip;
		tooltip.bonusSystem.getElement('span').set('text', 0);
		tooltip.bonusSpecies.getElement('span').set('text', 0);
		tooltip.bonusDaysAnnexed.getElement('span').set('text', 0);
		tooltip.bonusSystem.addClass('hideContainer');
		tooltip.bonusSpecies.addClass('hideContainer');
		tooltip.bonusDaysAnnexed.addClass('hideContainer');

		var hasBonus = false;
		tooltip.container.getElement('.bonuses').addClass('hideContainer');
		if (typeof annexationBonuses.bonusSystem != undefined && annexationBonuses.bonusSystem) {
			tooltip.bonusSystem.removeClass('hideContainer');
			tooltip.bonusSystem.getElement('span').set('text', Math.round(annexationBonuses.bonusSystem * 100));
			hasBonus = true;
		}
		if (typeof annexationBonuses.bonusSpecies != undefined && annexationBonuses.bonusSpecies) {
			tooltip.bonusSpecies.removeClass('hideContainer');
			tooltip.bonusSpecies.getElement('span').set('text', Math.round(annexationBonuses.bonusSpecies * 100));
			hasBonus = true;
		}
		if (typeof annexationBonuses.bonusDaysAnnexed != undefined && annexationBonuses.bonusDaysAnnexed) {
			tooltip.bonusDaysAnnexed.removeClass('hideContainer');
			tooltip.bonusDaysAnnexed.getElement('span').set('text', Math.round(annexationBonuses.bonusDaysAnnexed * 100));
			hasBonus = true;
		}
		if (hasBonus) {
			tooltip.container.getElement('.bonuses').removeClass('hideContainer');
		}
	},

	/**
	 * sends a request to abandon this planet (check if abandon is possible)
	 *
	 * @param planetId
	 */
	abandonPlanet : function(planetId){
		Imperion.Util.Request.send(Imperion.Util.Helper.url('planet', 'index', 'check'), {'abandonPlanetId':planetId}, this.afterRequestAbandon.bindNew(this));
	},

	/**
	 * callback for requestAbandonPlanet
	 *
	 * @param response
	 */
	afterRequestAbandon : function(response){
		var rData = response.getResponseData();
		if(rData.error) {
			this.handleErrorResponse(rData);
		}
		else{
			//fill eventBox with html for abandon
			var eventBox = Imperion.Interface.Factory.eventBox();
			eventBox.setEventBox({
				type : 'confirm',
				headline : response.jsonDataDefault.data.translations.confirm_abandon_headline,
				image : '/images/layout/color-set/global/visuals/event_box/abandonPlanet.jpg',
				content : response.jsonDataDefault.html,
				firstButtonText : this.translate('default__cancel'),
				firstButtonCallback : null,
				secondButtonText : response.jsonDataDefault.data.translations.confirm_abandon_ok_button,
				secondButtonCallback : this.completeAbandonPlanet.bindNew(this,response.jsonDataDefault.data.planetId,response.tan)
			});
			eventBox.showEventBox();
		}
	},

	/**
	 * shows eventBox if error occured
	 *
	 * @param rData
	 */
	handleErrorResponse : function(rData){
		Imperion.Interface.Factory.eventBox().setEventBox({
			type : 'error',
			content : rData.error
		}).showEventBox();
	},

	/**
	 * sends request to really abandon a planet
	 *
	 * @param planetId
	 */
	completeAbandonPlanet : function(planetId,tan){
		Imperion.Util.Request.send(Imperion.Util.Helper.url('planet', 'index', 'abandon'), {'abandonPlanetId':planetId}, this.afterCompleteRequestAbandon.bindNew(this), null, null,{'name':'tan','value':tan});
	},

	/**
	 * callback for the completeAbandonPlanet Request
	 *
	 * @param response
	 */
	afterCompleteRequestAbandon : function(response){
		var rData = response.getResponseData();
		if(rData.error) {
			this.handleErrorResponse(rData);
		}else{
			window.location = '/map/index/index/stage/ORB/targetPlanetId/'+response.jsonDataDefault.data.planetId;
		}
	},


	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'show_boni_tooltip':
				if(this.showNoScannerToolitp) {
					this.tooltipHandle.setText(this.translate('map__no_scanner_in_range'));
					this.tooltipHandle.show();
				}
				break;
			case 'hide_boni_tooltip':
				this.tooltipHandle.hide();
				break;
			case 'show_mission':
				this.missionHandler.setPosition(58, 46, this.elements.front.mission);
				this.missionHandler.toggle();
				if(this.missionHandler.options.visible) {
					this.removeCheckpoint('SelectMissionDropDown');
				}
				Imperion.Factory.quest().refresh();
				return false;
				break;
			case 'show_player_profile':
				if(this.currentOrb.data.map_info.info.account_id && this.currentOrb.data.map_info.info.account_name) {
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('profile_' + this.currentOrb.data.map_info.info.account_id);
					var playerprofile = Imperion.Interface.Dialog.Context.Factory.playerprofile(dialog, this.currentOrb.data.map_info.info.account_id);
					playerprofile.showContext();
				}
				break;
			case 'show_annexation':
				var annexionUnit = Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Annexion');
				var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('annexion');
				var annexion = Imperion.Interface.Dialog.Context.Factory.annexion(dialog);
				annexion.options.params = {
					info : this.location.getId()
				};
				annexion.showContext();
				break;
			case 'show_alliance_profile':
				if(this.currentOrb.data.map_info.info.alliance_id && this.currentOrb.data.map_info.info.alliance_name) {
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('alliance_profile');
					var profile = Imperion.Interface.Dialog.Context.Factory.allianceProfile(dialog, this.currentOrb.data.map_info.info.alliance_id);
					if(this.getUser().getAllianceId() == this.currentOrb.data.map_info.info.alliance_id){
						var forum = Imperion.Interface.Dialog.Context.Factory.forumIndex(dialog,1);
					}
					profile.showContext();
				}
				break;
			case 'comet_slot_player_click':
				var slot = params.get('slot');
				if(this.currentOrb.data.map_info.slots[slot]) {
					var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('profile_' + this.currentOrb.data.map_info.slots[slot].id);
					var playerprofile = Imperion.Interface.Dialog.Context.Factory.playerprofile(dialog, this.currentOrb.data.map_info.slots[slot].id);
					playerprofile.showContext();
				}
				return false;
			case 'show_player_context':
				if(this.currentOrb.data.map_info.info.account_id && this.currentOrb.data.map_info.info.account_name) {
					this.showPlayerContextMenu(eventObject, this.currentOrb.data.map_info.info.account_id);
				}
				return false;
				break;
			case 'show_production_tooltip':
				var ele = this.elements.front.production.tooltip.container.clone();
				ele.removeClass('hideContainer');
				this.htmlTooltipHandle.setHtml(ele);
				this.htmlTooltipHandle.show();
				break;
			case 'hide_production_tooltip':
				this.htmlTooltipHandle.hide();
				break;
			case 'link_to_planet' :
				this.redirectToPlanet(params.get('planetId'));
				break;
			case 'abandon_planet' :
				this.abandonPlanet(params.get('planetId'));
				break;
			case 'show_abandon_planet_tooltip' :
				if(this.elements.front.abandonPlanet.hasClass('disabled')){
					var ele = this.elements.front.abandonPlanetTooltip.clone();
					ele.removeClass('hideContainer');
					this.htmlTooltipHandle.setHtml(ele);
					this.htmlTooltipHandle.show();
				}else{
					this.htmlTooltipHandle.setText(this.translate('abandonplanet__planet_detail_view_tooltip'));
					this.htmlTooltipHandle.show();
				}
				break;
			case 'hide_abandon_planet_tooltip' :
				this.htmlTooltipHandle.hide();
				break;
		}
	},

	/**
	 * load all neccessary dom elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.back = {};
		this.elements.back.container = this.getTemplate('InterfaceMapDetailBack');
		this.elements.back.name = this.elements.back.container.getElement('.name');
		//register context
		this.elements.back.desc = {};
		$splat(['ALIEN02', 'ALIEN01', 'GAS', 'DESERT', 'ICE', 'WATER', 'TERRESTRIAL', 'VOLCANO', 'DEBRIS', 'COMET']).each(function(descType) {
			this.elements.back.desc[descType] = this.elements.back.container.getElement('.' + descType);
		}, this);

		this.elements.back.surface = this.elements.back.container.getElement('.surface');

		this.elements.front = {};
		this.elements.front.container = this.getTemplate('InterfaceMapDetailFront');
		this.elements.front.mission = this.elements.front.container.getElement('.mission');
		this.elements.front.missions = this.elements.front.mission.getElements('A');
		//bind click events
		for(var i = 0 ; i < this.elements.front.missions.length ; i++) {
			this.addEvent('click', this.elements.front.missions[i], $H({
				action : 'show_mission'
			}));
		}

		this.elements.front.boni = this.elements.front.container.getElement('.boniBox');
		var headlines = this.elements.front.boni.getElements('H2');
		this.elements.front.bonis = new Array();
		$splat(this.elements.front.boni.getElements('.Imperion-Interface-Gui-DiagrammBar')).each(function(boni, key) {
			this.addEvent('mouseenter', headlines[key], $H({
				action : 'show_boni_tooltip'
			}));
			this.addEvent('mouseleave', headlines[key], $H({
				action : 'hide_boni_tooltip'
			}));
			this.elements.front.bonis[key] = {
				container : boni,
				caption : headlines[key],
				value : boni.getElement('SPAN'),
				bar : boni.getElement('DIV')
			};
		}, this);

		this.elements.front.owner = {
			container : this.elements.front.container.getElement('.ownerBox')
		};
		this.elements.front.owner.admiral = this.elements.front.owner.container.getElement('.admiral');
		this.elements.front.owner.name = this.elements.front.owner.container.getElement('.name');

		this.elements.front.ownage = {
			container : this.elements.front.container.getElement('.planetInfoBox')
		};
		this.elements.front.ownage.name = this.elements.front.ownage.container.getElement('.name');
		this.addEvent('click', this.elements.front.ownage.name, $H({
			action : 'show_player_profile'
		}));
		this.addEvent('contextmenu', this.elements.front.ownage.name, $H({
			action : 'show_player_context'
		}));
		this.elements.front.ownage.ally = this.elements.front.ownage.container.getElement('.ally');
		this.addEvent('click', this.elements.front.ownage.ally, $H({
			action : 'show_alliance_profile'
		}));
		this.elements.front.ownage.stat			= this.elements.front.ownage.container.getElement('.status');
		this.elements.front.ownage.statannex	= this.elements.front.ownage.container.getElement('.statusAnnexed');
		this.addEvent('click', this.elements.front.ownage.statannex, $H({
			action : 'show_annexation'
		}));

		this.elements.front.population = {
			container : this.elements.front.container.getElement('.populationBox')
		};
		this.elements.front.population.caption = this.elements.front.population.container.getElement('.text');

		this.elements.front.buildingslots = {
			container : this.elements.front.container.getElement('.buildingslotBox')
		};
		this.elements.front.buildingslots.caption = this.elements.front.buildingslots.container.getElement('.text');

		this.elements.front.production = {
			container : this.elements.front.container.getElement('.productionBox'),
			details   : this.elements.front.container.getElement('.productionBox .detailBox')
		};

		this.elements.front.production.tooltip = {
			container			: this.elements.front.production.container.getElement('.tooltipBox'),
			metal				: this.elements.front.production.container.getElement('.tooltipBox .ICON_SYMBOLS_SMALL_METAL .value'),
			crystal				: this.elements.front.production.container.getElement('.tooltipBox .ICON_SYMBOLS_SMALL_CRYSTAL .value'),
			tritium				: this.elements.front.production.container.getElement('.tooltipBox .ICON_SYMBOLS_SMALL_TRITIUM .value'),
			bonusSystem			: this.elements.front.production.container.getElement('.tooltipBox .bonuses .bonusSystem'),
			bonusSpecies		: this.elements.front.production.container.getElement('.tooltipBox .bonuses .bonusSpecies'),
			bonusDaysAnnexed	: this.elements.front.production.container.getElement('.tooltipBox .bonuses .bonusDaysAnnexed')
		};

		this.addEvent('mouseover', this.elements.front.production.details, $H({
			action : 'show_production_tooltip'
		}));
		this.addEvent('mouseout', this.elements.front.production.details, $H({
			action : 'hide_production_tooltip'
		}));
		this.elements.front.production.caption = this.elements.front.production.container.getElement('P');
		this.elements.front.production.blocks  = this.elements.front.production.container.getElements('LI');

		this.elements.front.alienbonus = {
			container	: this.elements.front.container.getElement('.alienBonusBox'),
			caption		: this.elements.front.container.getElement('.alienBonusBox .caption'),
			value		: this.elements.front.container.getElement('.alienBonusBox .value'),
			percentage	: this.elements.front.container.getElement('.alienBonusBox .percentage')
		};

		this.elements.front.invasion = {
			container : this.elements.front.container.getElement('.invasionBox')
		};
		this.elements.front.invasion.time	= this.elements.front.invasion.container.getElement('.time');

		this.elements.front.resources = {
			container	: this.elements.front.container.getElement('.resourceBox'),
			metal		: this.elements.front.container.getElement('.metal SPAN'),
			crystal		: this.elements.front.container.getElement('.crystal SPAN'),
			tritium		: this.elements.front.container.getElement('.tritium SPAN')
		};

		this.elements.front.comets				= {};
		this.elements.front.comets.container	= this.elements.front.container.getElement('.cometBox');
		this.elements.front.comets.slots		= new Array();

		$splat(this.elements.front.comets.container.getElements('LI')).each(function(slot, key) {
			this.elements.front.comets.slots[key] = {
				container	: slot,
				image		: slot.getElement('IMG'),
				player		: slot.getElement('A')
			};
			this.addEvent('click', this.elements.front.comets.slots[key].player, $H({
				action	: 'comet_slot_player_click',
				slot	: key
			}));
		}, this);

		this.elements.front.linkToOwnPlanet 	 = this.elements.front.container.getElement('.linkToOwnPlanet');
		this.elements.front.abandonPlanet		 = this.elements.front.container.getElement('.abandonPlanet');

		this.addEvent('mouseover', this.elements.front.abandonPlanet, $H({
			action : 'show_abandon_planet_tooltip'
		}));

		this.addEvent('mouseout', this.elements.front.abandonPlanet, $H({
			action : 'hide_abandon_planet_tooltip'
		}));

		this.elements.front.abandonPlanetTooltip = this.elements.front.container.getElement('.abandonPlanetTooltip');
	}
});

Imperion.Interface.Map.Overlay = new Class({
	
	/**
	 * instance from coordinates class
	 * 
	 * @var Imperion.Interface.Map.OverlayCoords
	 */
	coords : null,
	
	/**
	 * prepare
	 * 
	 * @param Imperion.Interface.Map.OverlayCoordinates coords
	 * 
	 * @return void 
	 */
	initialize : function(coords) {
		this.coords = coords;
	}
});

Imperion.Interface.Map.OverlayCoordinates = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template],
	
	/**
	 * coordinate options
	 * 
	 * @var Object
	 */
	options : {
		width : 963,
		height: 637,
		x : 9,
		y : 7,
		offsetX : 4,
		offsetY : 3,
		quadWidth : 107,
		quadHeight : 91,
		preloadX : 3,
		preloadY : 3,
		movement : 0.5
	},
	
	/**
	 * current position
	 * 
	 * @var Object
	 */
	position: {
		x : 0,
		y : 0
	},
	
	/**
	 * moved units
	 * 
	 * @var Object
	 */
	moved : {
		x : 0,
		y : 0
	},
	
	/**
	 * starting coordinates
	 * 
	 * @var Object
	 */
	start : {
		x : 0,
		y : 0
	},
	
	/**
	 * prepare
	 * 
	 * @return void
	 */
	initialize : function() {
		this.start = {
			x : 0,
			y : 0
		};
		this.position = {
			x : 0,
			y : 0
		};
		this.moved = {
			x : 0,
			y : 0
		};
		//load elements
		this.loadElements();
	},
	
	/**
	 * update start point
	 * 
	 * @param int newX
	 * @param int newY
	 * 
	 * @return void
	 */
	update : function(newX, newY) {
		for(var i = this.options.preloadX * -1 ; i < this.options.x + this.options.preloadX; i++) {
			var pos = this.options.quadWidth * i;
			var coord = i + newX - this.options.offsetX;
			this.elements.xItems[i].element.set('text', coord).setStyle('left', pos);
			this.elements.xItems[i].left = pos;
			this.elements.xItems[i].coord = coord;
		}
		this.start.x = newX;
		this.moved.x = 0;
		this.position.x = 0;
		this.moveX(0);
		
		for(var i = this.options.preloadY * -1 ; i < this.options.y + this.options.preloadY; i++) {
			var pos = this.options.quadHeight * i;
			var coord = newY + this.options.offsetY - i;
			this.elements.yItems[i].element.set('html', (coord + '').replace(/(.)/gi, '$1<br />')).setStyle('top', pos);
			this.elements.yItems[i].top = pos;
			this.elements.yItems[i].coord = coord;
		}
		this.start.y = newY;
		this.moved.y = 0;
		this.position.y = 0;
		
		this.moveY(0);
	},

	/**
	 * move the x bar in a direction
	 * 
	 * @param int moveAmountX
	 * 
	 * @return void
	 */
	moveX : function(moveAmountX) {
		this.moved.x += moveAmountX * this.options.movement;
		this.setPositionX(this.position.x + moveAmountX * this.options.movement);
		//check for change
		var offset = (this.moved.x / this.options.quadWidth).toInt();
		//check if change is need
		if(offset !== 0) {
			//update distance object
			this.moved.x = this.moved.x - offset * this.options.quadWidth;
			//check how many quadrants has moved
			var quadrantOffset = this.options.quadWidth * (this.options.preloadX - Math.abs(offset));
			//check direction which was moved
			if(offset > 0) {
				var check = this.options.width + quadrantOffset - this.position.x + this.options.quadWidth;
			}
			else {
				var check = 0 - quadrantOffset - (this.position.x - this.options.quadWidth * -1);
			}
			for(var i = this.options.preloadX * -1 ; i < this.options.x + this.options.preloadX; i++) {
				//check direction
				if(offset > 0) {
					if(this.elements.xItems[i].left > check) {
						var newLeft = this.elements.xItems[i].left - (this.options.quadWidth * (this.options.preloadX * 2) + this.options.width);
						var newCoord = this.elements.xItems[i].coord - (this.options.preloadX * 2 + this.options.x);
						this.elements.xItems[i].element.set('text', newCoord).setStyle('left', newLeft);
						this.elements.xItems[i].left = newLeft;
						this.elements.xItems[i].coord = newCoord;
					}
				}
				else {
					if(this.elements.xItems[i].left < check) {
						var newLeft = this.elements.xItems[i].left + (this.options.quadWidth * (this.options.preloadX * 2) + this.options.width);
						var newCoord = this.elements.xItems[i].coord + (this.options.preloadX * 2 + this.options.x);
						this.elements.xItems[i].element.set('text', newCoord).setStyle('left', newLeft);
						this.elements.xItems[i].left = newLeft;
						this.elements.xItems[i].coord = newCoord;
					}
				}
			}
		}
	},
	
	/**
	 * move the y bar in a direction
	 * 
	 * @param int moveAmountY
	 * 
	 * @return void
	 */
	moveY : function(moveAmountY) {
		this.moved.y += moveAmountY * this.options.movement * -1;
		this.setPositionY(this.position.y + moveAmountY * this.options.movement * -1);
		//check for change
		var offset = (this.moved.y / this.options.quadHeight).toInt();
		//check if change is need
		if(offset !== 0) {
			//update distance object
			this.moved.y = this.moved.y - offset * this.options.quadHeight;
			//check how many quadrants has moved
			var quadrantOffset = this.options.quadHeight * (this.options.preloadY - Math.abs(offset));
			//check direction which was moved
			if(offset > 0) {
				var check = this.options.height + quadrantOffset - this.position.y + this.options.quadHeight;
			}
			else {
				var check = 0 - quadrantOffset - (this.position.y - this.options.quadHeight * -1);
			}
			for(var i = this.options.preloadY * -1 ; i < this.options.y + this.options.preloadY; i++) {
				//check direction
				if(offset > 0) {
					if(this.elements.yItems[i].top > check) {
						var newTop = this.elements.yItems[i].top - (this.options.quadHeight * (this.options.preloadY * 2) + this.options.height);
						var newCoord = this.elements.yItems[i].coord + (this.options.preloadY * 2 + this.options.y);
						this.elements.yItems[i].element.set('html', (newCoord + '').replace(/(.)/gi, '$1<br />')).setStyle('top', newTop);
						this.elements.yItems[i].top = newTop;
						this.elements.yItems[i].coord = newCoord;
						
					}
				}
				else {
					if(this.elements.yItems[i].top < check) {
						var newTop = this.elements.yItems[i].top + (this.options.quadHeight * (this.options.preloadY * 2) + this.options.height);
						var newCoord = this.elements.yItems[i].coord - (this.options.preloadY * 2 + this.options.y);
						this.elements.yItems[i].element.set('html', (newCoord + '').replace(/(.)/gi, '$1<br />')).setStyle('top', newTop);
						this.elements.yItems[i].top = newTop;
						this.elements.yItems[i].coord = newCoord;
					}
				}
			}
		}
		
	},
	
	/**
	 * set position of the x bar
	 * 
	 * @param int newPosX
	 * 
	 * return void
	 */
	setPositionX : function(newPosX) {
		this.elements.moveX.setStyle('left', newPosX);
		this.position.x = newPosX;
	},
	
	/**
	 * set position of the y bar
	 * 
	 * @param int newPosY
	 * 
	 * return void
	 */
	setPositionY : function(newPosY) {
		this.elements.moveY.setStyle('top', newPosY);
		this.position.y = newPosY;
	},
	
	/**
	 * show the coordinate bars
	 * 
	 * @return void
	 */
	show : function() {
		this.elements.corner.removeClass('hideContainer');
		
		this.showX();
		this.showY();
	},
	
	/**
	 * show the x bar
	 * 
	 * @return void
	 */
	showX : function() {
		this.elements.containerX.removeClass('hideContainer');
	},
	
	/**
	 * show the y bar
	 * 
	 * @return void
	 */
	showY : function() {
		this.elements.containerY.removeClass('hideContainer');
	},
	
	/**
	 * hide the coordinate bars
	 * 
	 * @return void
	 */
	hide : function() {
		this.elements.corner.addClass('hideContainer');
		
		this.hideX();
		this.hideY();
	},
	
	/**
	 * hide the x bar
	 * 
	 * @return void
	 */
	hideX : function() {
		this.elements.containerX.addClass('hideContainer');
	},
	
	/**
	 * hide the y bar
	 * 
	 * @return void
	 */
	hideY : function() {
		this.elements.containerY.addClass('hideContainer');
	},
	
	/**
	 * load neccessary elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.containerX = this.getTemplate('InterfaceMapOverlayCoordsX');
		this.elements.containerY = this.getTemplate('InterfaceMapOverlayCoordsY');
		
		this.elements.corner = this.getTemplate('InterfaceMapOverlayCorner');
		
		this.elements.moveX = this.elements.containerX.getElement('div');
		this.elements.moveY = this.elements.containerY.getElement('div');
		
		//add x coord elements
		this.elements.xItems = new Array();
		for(var i = this.options.preloadX * -1 ; i < this.options.x + this.options.preloadX; i++) {
			var pos = this.options.quadWidth * i;
			var ele = this.getClonedTemplate('InterfaceMapOverlayCoordsitem').setStyle('left', pos).removeClass('hideContainer');
			var xElement = {
				element : ele,
				left : pos,
				coord : i
			};
			this.elements.xItems[i] = xElement;
			this.elements.moveX.appendChild(ele);
		}
		//add y coord elements
		this.elements.yItems = new Array();
		for(var i = this.options.preloadY * -1 ; i < this.options.y + this.options.preloadY; i++) {
			var pos = this.options.quadHeight * i;
			var ele = this.getClonedTemplate('InterfaceMapOverlayCoordsitem').setStyle('top', pos).removeClass('hideContainer');
			var yElement = {
				element : ele,
				top : pos,
				coord : i
			};
			this.elements.yItems[i] = yElement;
			this.elements.moveY.appendChild(ele);
		}
	}
});
Imperion.Interface.FleetTransport.Data = new Class({
	Implements : [Options],
	
	/**
	 * duration url
	 * 
	 * @var String
	 */
	urlFleetDuration : '',
	
	/**
	 * new start location url
	 * 
	 * @var String
	 */
	urlNewStartLocation : '',
	
	/**
	 * new start location url
	 * 
	 * @var String
	 */
	urlNewReturnLocation : '',
	
	/**
	 * fleet transport handle
	 * 
	 * @var Imperion.Interface.FleetTransport.Handle
	 */
	fleetHandle : null,
	
	/**
	 * prepare the data handler
	 * 
	 * @param Imperion.Interface.FleetTransport.Handle fleetHandle
	 * 
	 * @return void
	 */
	initialize : function(fleetHandle) {
		//
		this.fleetHandle = fleetHandle;
		//
		this.urlFleetDuration = Imperion.Util.Helper.url('fleet', 'mission', 'duration');
		this.urlNewStartLocation = Imperion.Util.Helper.url('fleet', 'mission', 'newstartlocation');
		this.urlNewReturnLocation = Imperion.Util.Helper.url('fleet', 'mission', 'newreturnlocation');
		this.urlSendFleet = Imperion.Util.Helper.url('fleet', 'mission', 'sendfleet');
	},
	
	/**
	 * clean up method
	 * 
	 * @return void
	 */
	clean : function() {
		
	},
	
	/**
	 * send the mission data to server
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	requestSendFleet : function(params, callback) {
		Imperion.Util.Request.send(this.urlSendFleet, {
			data : params
		}, this.afterRequestSendFleet.bindNew(this), {
			callback : callback
		});
	},
	
	/**
	 * callback after send fleet request finished
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestSendFleet : function(response, requestParams) {
		requestParams.callback(response.getResponseData());
	},
	
	/**
	 * retrieve the factor for fleet duration
	 * 
	 * @param Object fleet
	 * @param Object locations
	 * @param function callback
	 * 
	 * @return int
	 */
	requestFleetDuration : function(fleet, locations, callback) {
		if($H(fleet).getLength() === 0) {
			callback(0, 0);
		}
		else {
			Imperion.Util.Request.send(this.urlFleetDuration, {
				fleet : fleet,
				location : locations
			}, this.afterRequestFleetDuration.bindNew(this), {
				callback : callback
			});
		}
	},
	
	/**
	 * callback for fleet duration request after request
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParams
	 * 
	 * @return void
	 */
	afterRequestFleetDuration : function(response, requestParams) {
		var startDuration = response.getResponseData()['duration_start-target'];
		var returnDuration = response.getResponseData()['duration_target-return'];
		if(!startDuration || !returnDuration) {
			// ERROR HANDLING
		}
		requestParams.callback(startDuration.toInt(), returnDuration.toInt());
	},
	
	/**
	 * request data for new start location
	 * 
	 * @param	{Imperion.Data.Location}	newLocation
	 * @param	{Imperion.Data.Location}	targetLocation
	 * 
	 * @return void
	 */
	requestNewStartLocation : function(newLocation, targetLocation,  callback) {
		Imperion.Util.Request.send(this.urlNewStartLocation, {
			id 			: newLocation.getId(),
			type 		: newLocation.getType(),
			target_id	: targetLocation.getId(),
			target_type	: targetLocation.getType()
			
		}, this.afterRequestNewStartLocation.bindNew(this), {
			callback : callback,
			location : newLocation
		});
	},
	
	/**
	 * callback for request new start location
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParam
	 * 
	 * @return void
	 */
	afterRequestNewStartLocation : function(response, requestParam) {
		var rData = response.getResponseData();
		requestParam.callback(requestParam.location, rData.fleet, rData.production, rData.missions);
	}
});
Imperion.Interface.FleetTransport.Factory = new Class.Singleton({
	
	/**
	 * storage 
	 * 
	 * @var Object
	 */
	storage : {
	},
	
	/**
	 * prepare the factory
	 * 
	 * @return void
	 */
	initialize : function() {
		this.storage = {
			
		};
	},
	
	/**
	 * return the fleet transport form handle
	 *
	 * @param Object requestData
	 * @param Object responseData
	 * @param Imperion.Interface.ModalDialog
	 * @param	{Imperion.Interface.Dialog.Context.FleetTransport}	context
	 * 
	 * @return Imperion.Interface.FleetTransport.Handle 
	 */
	handle : function(requestData, responseData, dialog, context) {
		return new Imperion.Interface.FleetTransport.Handle(
			requestData, 
			responseData, 
			Imperion.Util.Registry.get('user'), 
			Imperion.Util.Registry.get('PlanetList'),
			dialog,
			context,
			Imperion.Interface.Gui.Factory.tooltip()
		);
	},
	
	/**
	 * create the fleet handler
	 * 
	 * @param Imperion.Interface.FleetTransport.Handle fleetTransportHandle
	 * @param Object fleetData
	 * 
	 * @return Imperion.Interface.FleetTransport.Fleet
	 */
	fleet : function(fleetTransportHandle, fleetData) {
		return new Imperion.Interface.FleetTransport.Fleet(fleetTransportHandle, fleetData, Imperion.Interface.Gui.Factory.htmltooltip());
	},
	
	/**
	 * create a fleet item
	 * 
	 * @param Imperion.Interface.FleetTransport.Fleet parentFleet
	 * @param Object options
	 * 
	 * @return Imperion.Interface.FleetTransport.FleetItem
	 */
	fleetItem : function(parentFleet, options) {
		return new Imperion.Interface.FleetTransport.FleetItem(parentFleet, options);
	},
	
	/**
	 * create an instance from data handler for fleet transport
	 * 
	 * @param Imperion.Interface.FleetTransport.Handle fleetHandle
	 * 
	 * @return Imperion.Interface.FleetTransport.Data
	 */
	data : function(fleetHandle) {
		return new Imperion.Interface.FleetTransport.Data(fleetHandle);
	},
	
	/**
	 * create an instance from mission handler
	 * 
	 * @param Imperion.Interface.FleetTransport.Handle fleetHandle
	 * @param Object options
	 * 
	 * @return Imperion.Interface.FleetTransport.Mission
	 */
	mission : function(fleetHandle, options) {
		return new Imperion.Interface.FleetTransport.Mission(fleetHandle, options, Imperion.Interface.Gui.Factory.htmltooltip(), Imperion.Util.Factory.globalEvents());
	},
	
	/**
	 * create an instance from mission item
	 * 
	 * @param Imperion.Interface.FleetTransport.Mission mission
	 * 
	 * @return Imperion.Interface.FleetTransport.MissionItem
	 */
	missionItem : function(mission, options) {
		return new Imperion.Interface.FleetTransport.MissionItem(mission, options);
	},
	
	/**
	 * create an instance from options handler
	 * 
	 * @param Imperion.Interface.FleetTransport.Handle parentHandle
	 * @param Object options
	 * 
	 * @return Imperion.Interface.FleetTransport.Options
	 */
	options : function(parentHandle, options) {
		return new Imperion.Interface.FleetTransport.Options(parentHandle, options);
	},
	
	/**
	 * returns an instance from resource option object
	 * 
	 * @param Imperion.Interface.FleetTransport.Options optionsHandle
	 * @param Object options 
	 * 
	 * @return Imperion.Interface.FleetTransport.OptionResource
	 */
	optionResource : function(optionsHandle, options, resourceCounter) {
		if (typeof resourceCounter === 'undefined') {
			return new Imperion.Interface.FleetTransport.OptionResource(optionsHandle, options, {
				metal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Metal'),
				crystal : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Crystal'),
				tritium : Imperion.Factory.bootstrap().getModule('Imperion.Interface.Resource.Tritium')
			});
		} else {
			return new Imperion.Interface.FleetTransport.OptionResource(optionsHandle, options, resourceCounter);
		}
	},
	
	/**
	 * create an instance from espionage option handler
	 * 
	 * @param Imperion.Interface.FleetTransport.Options optionsHandle
	 * @param Object options 
	 * 
	 * @return Imperion.Interface.FleetTransport.OptionEspionage
	 */
	optionEspionage : function(optionsHandle, options) {
		return new Imperion.Interface.FleetTransport.OptionEspionage(optionsHandle, options);
	},
	
	/**
	 * create an instance from invasion option handler
	 * 
	 * @param	{Imperion.Interface.FleetTransport.Options}	optionsHandle
	 * @param	{Object}									options 
	 * 
	 * @return	{Imperion.Interface.FleetTransport.OptionInvasion}
	 */
	optionInvasion : function(optionsHandle, options) {
		return new Imperion.Interface.FleetTransport.OptionInvasion(optionsHandle, options);
	}
});
Imperion.Interface.FleetTransport.Fleet = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Observable],

	/**
	 * options
	 *
	 * @var Object
	 */
	options : {
		maxShips : 12
	},

	/**
	 * ships
	 *
	 * @var Array
	 */
	ships : [],

	/**
	 * fleet transport handle
	 *
	 * @var Imperion.Interface.FleetTransport.Handle
	 */
	fleetTransportHandle : null,

	/**
	 * tooltip handle
	 *
	 * @type Imperion.Interface.Gui.HtmlTooltip
	 */
	tooltip : null,

	/**
	 * quest items
	 *
	 * @type	Object
	 */
	questItems : null,

	/**
	 * current type mapping
	 *
	 * @type	Object
	 */
	typeMapping : null,

	/**
	 * prepare the fleet handle
	 *
	 * @param Imperion.Interface.FleetTransport.Handle fleetTransportHandle
	 * @param Hash fleetData
	 * @param	{Imperion.Interface.Gui.HtmlTooltip}	tooltip
	 *
	 * @return void
	 */
	initialize : function(fleetTransportHandle, fleetData, tooltip) {
		//
		this.fleetTransportHandle = fleetTransportHandle;
		this.tooltip = tooltip;
		//
		this.questItems = {
			FleetTransportShips : null
		};
		this.typeMapping = {};
		//load dom elements
		this.loadElements(this.fleetTransportHandle.elements.container);
		//add ships
		this.ships = [];
		//set items
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			this.ships[i] = Imperion.Interface.FleetTransport.Factory.fleetItem(this);
			if((i + 1) % 4 === 0) {
				this.ships[i].elements.container.addClass('last');
			}
		}
		//
		this.setNewFleet(fleetData.fleet);
		//
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			this.elements.container.appendChild(this.ships[i].elements.container);
		}
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShips':
				for(var i = params.ships.length - 1; i >= 0 ; i--) {
					ship = this.typeMapping[params.ships[i].type];
					if(this.ships && this.ships[ship] && this.ships[ship].getValue() >= params.ships[i].amount) {
						return true;
					}
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Fleet I ident not exist';
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShips':
				this.questItems[ident] = new Array();
				for(var i = params.ships.length - 1; i >= 0 ; i--) {
					if(this.ships && this.ships[ship]) {
						ship = this.typeMapping[params.ships[i].type];
						this.ships[ship].activateCheckpoint(ident, params, questObj);
						this.questItems[ident].push(ship);
					}
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Fleet II ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportShips':
				if(this.questItems[ident] !== null) {
					for(var i = this.questItems[ident].length - 1 ; i >= 0 ; i--) {
						this.ships[this.questItems[ident][i]].removeCheckpoint(ident, refreshQuests);
					}
					this.questItems[ident] = null;
					if(refreshQuests) {
						Imperion.Factory.quest().refresh();
					}
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Fleet III ident not exist';
				break;
		}
	},

	/**
	 * clean up method
	 *
	 * @return void
	 */
	clean : function() {
		//clean up fleet items
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			this.ships[i].clean();
			delete this.ships[i];
		}
		this.detachAll();
		//free all elements
		this.cleanUp();
	},

	/**
	 * set new fleet
	 *
	 * @param Object newFleet
	 *
	 * @return void
	 */
	setNewFleet : function(newFleet) {
		this.unsetFleet();
		var counter = 0;
		$splat(newFleet).each(function(item, key) {
			this.ships[key].setType(item.type);
			if(item.count.toInt() > 0) {
				this.ships[key].enable();
			}
			this.ships[key].options.caption = item.name;
			this.ships[key].setMaxCount(item.count);
			this.ships[key].setCapacity(item.capacity);
			this.ships[key].showContent();
			this.ships[key].show();

			this.typeMapping[item.type] = key;
		}, this);
	},

	/**
	 * disable fleet items
	 *
	 * @param	{Array}	disabledItems
	 *
	 * @returns	{Void}
	 */
	disableFleetItems : function(disabledItems) {
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			if(!disabledItems[i] && this.ships[i].options.maxCount > 0) {
				this.ships[i].enable();
			}
			else {
				this.ships[i].disable();
			}
		}
	},

	/**
	 * sets all Fleet Values to zero
	 *
	 * @return void
	 */
	resetAllValues : function(){
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			this.ships[i].setValue(0);
		}
	},

	/**
	 * sets all Last Change Values to null
	 *
	 * @return void
	 */
	resetAllLastChange : function(){
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			this.ships[i].lastChange = null;
		}
	},

	/**
	 * remove fleet from area
	 *
	 * @return void
	 */
	unsetFleet : function() {
		for(var i = 0 ; i < this.options.maxShips ; i++) {
			this.ships[i].reset();
		}
		this.typeMapping = {};
	},

	/**
	 * fleet item was removed (eg. bomber)
	 *
	 * @param Imperion.Interface.FleetTransport.FleetItem fleetItem
	 *
	 * @return void
	 */
	fleetItemRemoved : function(item) {
		this.notify({}, 'onFleetItemRemoved');
	},

	/**
	 * fleet item was added (eg. bomber)
	 *
	 * @param Imperion.Interface.FleetTransport.FleetItem fleetItem
	 * @param int addedAmount
	 *
	 * @return void
	 */
	fleetItemAdded : function(item, addedAmount) {
		this.notify({}, 'onFleetItemAdded');
	},

	/**
	 * fleet item changed amount
	 *
	 * @param Imperion.Interface.FleetTransport.FleetItem fleetItem
	 * @param int addedAmount
	 *
	 * @return void
	 */
	fleetItemChanged : function(item, newAmount) {
		Imperion.Factory.quest().refresh(true);
		this.notify({}, 'onFleetItemChanged');
	},

	/**
	 * get fleet list
	 *
	 * @return Object
	 */
	getFleetList : function() {
		var fleetList = {};
		for(var i = 0 ; i < this.ships.length ; i++) {
			if(this.ships[i].added) {
				fleetList[this.ships[i].options.type] = this.ships[i].getValue();
			}
		}
		return fleetList;
	},

	/**
	 * get fleet capacity
	 *
	 * @return int
	 */
	getCapacity : function() {
		var capacity = 0;
		for(var i = 0 ; i < this.ships.length ; i++) {
			if(this.ships[i].added) {
				capacity += this.ships[i].getValue() * this.ships[i].options.capacity;
			}
		}
		return capacity;
	},

	/**
	 * get a clone item
	 *
	 * @returns {Element}
	 */
	getFleetItemContainer : function() {
		return this.elements.fleetItem.clone();
	},

	checkSendButton : function() {
		this.notify({}, 'onCheckSendButton');
	},

	/**
	 * load neccessary dom elements
	 *
	 * @return void
	 */
	loadElements : function(domContainer) {
		this.elements.container = domContainer.getElement('.fleetContainer');
		this.elements.fleetItem = this.elements.container.getElement('.fleetItem');

	}
});

Imperion.Interface.FleetTransport.FleetItem = new Class({
	Implements : [Imperion.Event, Imperion.Util.Class, Imperion.Template, Imperion.Util.Checkpoint],

	/**
	 * options
	 *
	 * @var Object
	 */
	options : {
		type : 'undefined',
		caption : '!!UNDEFINED!!',
		maxCount : 0,
		capacity : 0,
		icon : 'undefined',
		visible : false,
		prefix : 'ICON_',
		enabled : true
	},

	/**
	 * add flag
	 *
	 * @var boolean
	 */
	added : false,

	/**
	 * last change value to avoid unneccessary requests
	 *
	 * @var mixed
	 */
	lastChange : null,

	/**
	 * parent fleet object
	 *
	 * @var Imperion.Interface.FleetTransport.Fleet
	 */
	parentFleet : null,

	/**
	 * prepare the item
	 *
	 * @param Imperion.Interface.FleetTransport.Fleet
	 * @param Object options
	 *
	 * @return void
	 */
	initialize : function(parentFleet, options) {
		this.setOptions(options);
		this.parentFleet = parentFleet;
		this.added = false;

		//
		this.loadElements(this.parentFleet.getFleetItemContainer());
		this.show();
		this.hideContent();
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShips':
				var highlight = this.getCheckpointHighlight(ident + this.options.type, {
					container	: this.parentFleet.elements.container,
					posOffset	: {
						y : -55,
						x : -3
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident + this.options.type, questObj);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.FleetItem I ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportShips':
				var questObj = this.getCheckpointActive(ident + this.options.type);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident + this.options.type);
					this.removeCheckpointHighlight(ident + this.options.type);
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.FleetItem II ident not exist';
				break;
		}
	},

	/**
	 * clean up method
	 *
	 * @return void
	 */
	clean : function() {
		//free all elements
		this.cleanUp();
	},

	/**
	 * set the type of the item
	 *
	 * @param String newType
	 *
	 * @return void
	 */
	setType : function(newType) {
		this.elements.image.removeClass(this.options.prefix + this.options.type);
		this.options.type = newType;
		this.elements.image.addClass(this.options.prefix + newType);
	},

	/**
	 * set max count of the item
	 *
	 * @param int newMaxCount
	 *
	 * @return void
	 */
	setMaxCount : function(newMaxCount) {
		this.options.maxCount = newMaxCount;
		this.elements.maxCount.set('text', this.parentFleet.fleetTransportHandle.user.formatNumber(newMaxCount));
	},

	/**
	 * set capacity of the item
	 *
	 * @param int newCapacity
	 *
	 * @return void
	 */
	setCapacity : function(newCapacity) {
		this.options.capacity = newCapacity;
	},

	/**
	 * reset the item
	 *
	 * @return void
	 */
	reset : function() {
		this.setType('undefined');
		this.setMaxCount(0);
		this.setCapacity(0);
		this.hideContent();
		this.elements.input.set('value', null);
		this.added = false;
		this.lastChange = null;
		this.disable();
	},

	/**
	 * hide the content
	 *
	 * @return void
	 */
	hideContent : function() {
		this.options.visible = false;
	},

	/**
	 * show the content
	 *
	 * @return void
	 */
	showContent : function() {
		this.options.visible = true;
	},

	/**
	 * enable the item
	 *
	 * @return void
	 */
	enable : function() {
		if(!this.options.enabled) {
			this.elements.container.removeClass('disabled');
			this.elements.input.removeProperty('disabled');
			this.options.enabled = true;
		}
	},

	/**
	 * disable the item
	 *
	 * @return void
	 */
	disable : function() {
		if(this.options.enabled) {
			this.elements.container.addClass('disabled');
			this.elements.input.setProperty('disabled', 'disabled');
			this.options.enabled = false;
		}
	},

	/**
	 * get input value
	 *
	 * @return int
	 */
	getValue : function() {
		var retVal = this.elements.input.get('value').toInt();
		return isNaN(retVal) ? null : retVal;
	},

	/**
	 * sets the input value
	 *
	 * @param int newValue
	 *
	 * @return void
	 */
	setValue : function(newValue){
		if(newValue){
			this.elements.input.set('value', newValue);
		}else{
			this.elements.input.set('value', '');
		}
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'fill_max':
				if(this.options.enabled) {
					var amount = this.getValue() === this.options.maxCount ? null : this.options.maxCount;
					this.elements.input.set('value', amount);
					if(amount !== null) {
						if(!this.added) {
							this.added = true;
							try{
								this.parentFleet.fleetItemAdded(this, amount);
							} catch (e) {

							}

						}
						this.lastChange = amount;
					}
					else {
						if(this.added) {
							this.added = false;
							this.lastChange = 0;
							try{
								this.parentFleet.fleetItemRemoved(this);
							} catch (e) {

							}

						}
					}
					try{
						this.parentFleet.fleetItemChanged(this, amount);
					} catch (e) {

					}
				}
				this.parentFleet.checkSendButton();
				break;
			case 'change_amount':
				var amount = this.getValue();
				//check if there are changes (to avoid unneccessary updates)
				if(amount !== this.lastChange) {
					if(amount > this.options.maxCount) {
						this.elements.input.set('value', this.options.maxCount);
					}
					else if(amount < 0) {
						this.elements.input.set('value', 0);
					}
					else {
						this.elements.input.set('value', amount);
					}
					if(amount === null) {
						this.added = false;
						this.parentFleet.fleetItemRemoved(this);
					}
					else {
						if(!this.added) {
							this.added = true;
							this.parentFleet.fleetItemAdded(this, amount);
						}
					}
					this.lastChange = amount;
					try{
						this.parentFleet.fleetItemChanged(this, amount);
					} catch (e) {

					}

				}
				this.parentFleet.checkSendButton();
				break;
			case 'show_tooltip':
				var unitTooltipContent = new Imperion.Interface.Gui.UnitTooltipContent(this.options.type, true);
				this.parentFleet.tooltip.setHtml(unitTooltipContent.get());
				this.parentFleet.tooltip.show();
				break;
			case 'hide_tooltip':
				this.parentFleet.tooltip.hide();
				break;
		}
	},

	/**
	 * load item dom elements
	 *
	 * @return void
	 */
	loadElements : function(container) {
		this.elements.container = container;

		this.elements.image = this.elements.container.getElement('.image');
		this.elements.maxCount = this.elements.container.getElement('.maxAmount');
		this.elements.count = this.elements.container.getElement('.count');
		this.elements.input = this.elements.container.getElement('input');

		this.addEvent('click', this.elements.count, $H({
			action : 'fill_max'
		}));
		this.addEvent('click', this.elements.image, $H({
			action : 'fill_max'
		}));
		this.addEvent('keyup', this.elements.input, $H({
			action : 'change_amount'
		}));

		this.addEvent('mouseenter', this.elements.image, $H({
			action : 'show_tooltip'
		}));
		this.addEvent('mouseleave', this.elements.image, $H({
			action : 'hide_tooltip'
		}));
	}
});
Imperion.Interface.FleetTransport.Handle = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Util.Checkpoint, Imperion.Translate],

	/**
	 * fleet transport options
	 *
	 * @var Object
	 */
	options : {
		startDuration : 0,
		returnDuration : 0,
		slots : {
			used : 0,
			max : 0
		}
	},

	/**
	 * the fleet handler
	 *
	 * @var Imperion.Interface.FleetTransport.Fleet;
	 */
	fleetHandler : null,

	/**
	 * the mission handler
	 *
	 * @var Imperion.Interface.FleetTransport.Mission;
	 */
	missionHandler : null,

	/**
	 * the data handler
	 *
	 * @var Imperion.Interface.FleetTransport.Data;
	 */
	dataHandler : null,

	/**
	 * the Options handler
	 *
	 * @var Imperion.Interface.FleetTransport.Options;
	 */
	optionsHandler : null,

	/**
	 * eta timer
	 *
	 * @var Imperion.Util.timerETA
	 */
	etaArrival : null,
	etaReturn : null,

	/**
	 * planetlist object
	 *
	 * @var Imperion.Data.PlanetList
	 */
	planetList : null,

	/**
	 * target
	 *
	 * @var Imperion.Data.Location
	 */
	target : null,

	/**
	 * dialog instance
	 *
	 * @var Imperion.Interface.ModalDialog
	 */
	dialog : null,

	/**
	 * request flag
	 *
	 * @type	Boolean
	 */
	requestRunning : false,

	/**
	 * starting mission
	 *
	 * @type String
	 */
	startMission : null,

	/**
	 * tooltip handle
	 *
	 * @type	Imperion.Interface.Gui.Tooltip
	 */
	tooltipHandle : null,

	/**
	 * prepare the handler
	 *
	 * @param Object requestData
	 * @param Object responseData
	 * @param Imperion.Data.User user
	 * @param Imperion.Data.PlanetList planetList
	 * @param Imperion.Interface.ModalDialog dialog
	 * @param	{Imperion.Interface.Dialog.Context.FleetTransport}	context
	 *
	 * @return void
	 */
	initialize : function(requestData, responseData, user, planetList, dialog, context, tooltip) {
		//set user
		this.setUser(user);
		//
		this.planetList = planetList;
		this.requestRunning = false;
		//
		this.tooltipHandle = tooltip;
		//
		this.dialog = dialog;
		//append target
		this.target = requestData.target;
		//load elements
		this.loadElements(context.elements.container);
		//load fleet handler
		this.fleetHandler = Imperion.Interface.FleetTransport.Factory.fleet(this, {
			fleet : responseData.fleet
		});
		this.fleetHandler.attach('handle', this);
		//load data handler
		this.dataHandler = Imperion.Interface.FleetTransport.Factory.data(this);
		//load mission handler
		this.missionHandler = Imperion.Interface.FleetTransport.Factory.mission(this, {
			available	: responseData.missions,
			translation : {
				UNDEFINED 	: '!!undefined!!',
				ASSAULT 	: 'assault',
				TRANSPORT 	: 'transport',
				MINING 		: 'mining',
				BOMBARDMENT : 'bombardment',
				ANNEXION 	: 'annexion',
				INVASION 	: 'invasion',
				COLONIZATION: 'colonization',
				DEPLOYMENT 	: 'deployment',
				ESPIONAGE 	: 'espionage'
			},
			fleet		: responseData.missionShips
		});
		this.missionHandler.attach('handle', this);
		//load options handler
		this.optionsHandler = Imperion.Interface.FleetTransport.Factory.options(this, {
			espionage : responseData.espionage,
			targetRes : responseData.targetResources,
			population : responseData.population
		});
		this.optionsHandler.attach('handle', this);
		//load etas
		this.etaArrival = Imperion.Util.Factory.timerEta({
			name : 'arrival',
			template : 'InterfaceFleetTransportArrivalETA',
			format : this.user.options.timeFormat
		});
		this.addEvent('mouseenter', this.etaArrival.elements.container, $H({
			action : 'show_arrival_tooltip'
		}));
		this.addEvent('mouseleave', this.etaArrival.elements.container, $H({
			action : 'hide_arrival_tooltip'
		}));


		if(this.target.options.type === LOCATION_TYPE_PLANET) {
			this.etaReturn = Imperion.Util.Factory.timerEta({
				name : 'return',
				template : 'InterfaceFleetTransportReturnETA',
				format : this.user.options.timeFormat
			});
			this.addEvent('mouseenter', this.etaReturn.elements.container, $H({
				action : 'show_return_tooltip'
			}));
			this.addEvent('mouseleave', this.etaReturn.elements.container, $H({
				action : 'hide_return_tooltip'
			}));
		}
		if(requestData.currentMission === null) {
			if(responseData.missionPreselect) {
				requestData.currentMission = responseData.missionPreselect;
			}
			else {
				requestData.currentMission = MISSION_ASSAULT;
			}
		}

		//if selectedMission is not enabled, then take the preselectedMission
		var newMission = this.missionHandler.missions[requestData.currentMission];
		if(!newMission.enabled){
			newMission = this.missionHandler.missions[responseData.missionPreselect];
		}

		this.startMission = requestData.currentMission;
        //suppress resourceSend in case of Deployment on annexion
        if(responseData.targetIsAnnexed) {
            this.optionsHandler.options.mission.DEPLOYMENT = [];
        }
		//preselect mission

		var questData = Imperion.Factory.quest().questData;
		Imperion.Factory.quest().questData = null;
		this.missionHandler.setActiveMission(newMission);
		Imperion.Factory.quest().questData = questData;
		//
		this.setFleetSlots(responseData.slots.used, responseData.slots.max);

		Imperion.Util.Factory.globalEvents().attach('FleetTransport', this);
		this.fleetHandler.disableFleetItems(this.missionHandler.getAllowedFleetItems());
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShips':
				return this.fleetHandler.isCheckpointResolved(ident, params, questObj);
				break;
			case 'FleetTransportShowMission':
			case 'FleetTransportSelectMission':
				return this.missionHandler.isCheckpointResolved(ident, params, questObj);
				break;
			case 'FleetTransportResource':
				return this.optionsHandler.isCheckpointResolved(ident, params, questObj);
				break;
			case 'FleetTransportSendFleet':
				return this.requestRunning;
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Handle I ident not exist';
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShips':
				this.fleetHandler.activateCheckpoint(ident, params, questObj);
				break;
			case 'FleetTransportShowMission':
			case 'FleetTransportSelectMission':
				this.missionHandler.activateCheckpoint(ident, params, questObj);
				break;
			case 'FleetTransportResource':
				this.optionsHandler.activateCheckpoint(ident, params, questObj);
				break;
			case 'FleetTransportSendFleet':
				var highlight = this.getCheckpointHighlight(ident, {
					container	: this.elements.container.getElement('.Imperion-Interface-FleetTransport-Handle'),
					posOffset	: {
						y : -25
					},
					rotation 	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.send);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Handle II ident not exist';
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportShips':
				this.fleetHandler.removeCheckpoint(ident, refreshQuests);
				break;
			case 'FleetTransportShowMission':
			case 'FleetTransportSelectMission':
				this.missionHandler.removeCheckpoint(ident, refreshQuests);
				break;
			case 'FleetTransportResource':
				this.optionsHandler.removeCheckpoint(ident, refreshQuests);
				break;
			case 'FleetTransportSendFleet':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Handle III ident not exist ' + ident;
				break;
		}
	},

	/**
	 * clean up method
	 *
	 * @return void
	 */
	clean : function() {
		Imperion.Util.Factory.globalEvents().detach('FleetTransport');
		//
		this.fleetHandler.clean();
		delete this.fleetHandler;
		//
		this.dataHandler.clean();
		delete this.dataHandler;
		//
		this.missionHandler.clean();
		delete this.missionHandler;
		//
		this.optionsHandler.clean();
		delete this.optionsHandler;
		//
		this.etaArrival.clean();
		delete this.etaArrival;
		//
		if(this.etaReturn !== null) {
			this.etaReturn.clean();
			delete this.etaReturn;
		}
		//free all elements
		this.highlights.empty();
		this.cleanUp();
	},

	/**
	 * set fleet slots
	 *
	 * @param int use
	 * @param int max
	 *
	 * @return void
	 */
	setFleetSlots : function(use, max) {
		if(max) {
			this.elements.slots.max.set('text', max);
			this.options.slots.max = max;
		}
		this.elements.slots.use.set('text', use);
		this.options.slots.use = use;
		if(this.options.slots.max !== 0) {
			var percent = Math.round(this.options.slots.use * 100 / this.options.slots.max);
			if (percent > 100) {
				percent = 100;
			}
			this.elements.slots.bar.setStyle('width', percent + '%');
		}
	},

	/**
	 * get distance from start to target by planet id
	 *
	 * @param int planetId
	 *
	 * @return int
	 */
	getDistanceToTarget : function(planetId) {
		return 1;
	},

	/**
	 * update distances
	 *
	 * @param	{Number}	startDuration
	 * @param	{Number}	returnDuration
	 *
	 * @return void
	 */
	updateDistances : function(startDuration, returnDuration) {
		var sum = startDuration.toInt() + returnDuration.toInt();
		this.setFlightTime(startDuration);
		this.etaArrival.setOffset(startDuration);
		if(this.etaReturn !== null) {
			this.etaReturn.setOffset(sum);
		}
	},

	/**
	 * set new fleet duration
	 *
	 * @param	{Number}	startDuration
	 * @param	{Number}	returnDuration
	 *
	 * @return void
	 */
	setNewFleetDuration : function(startDuration, returnDuration) {
		this.updateDistances(startDuration, returnDuration);

		this.options.startDuration	= startDuration;
		this.options.returnDuration	= returnDuration;
	},

	/**
	 * set flight time
	 *
	 * @param int flightTime
	 *
	 * @return void
	 */
	setFlightTime : function(flightTime) {
		this.elements.flightTime.set('text', this.user.formatDuration(flightTime));
	},

	/**
	 * set a new start location
	 *
	 * @param	{Imperion.Data.Location}	newLocation
	 * @param	{Object}					newFleet
	 * @param	{Object}					newProduction
	 * @param	{Object}					newMissions
	 *
	 * @return void
	 */
	setNewStartLocation : function(newLocation, newFleet, newProduction, newMissions) {
		//set production with no template
		newProduction.metal.template = false;
		newProduction.crystal.template = false;
		newProduction.tritium.template = false;
		//update resource counter
		this.optionsHandler.resourceSend.setResourceCounter(
			Imperion.Interface.Resource.Factory.counter(newProduction.metal, RESOURCE_TYPE_METAL),
			Imperion.Interface.Resource.Factory.counter(newProduction.crystal, RESOURCE_TYPE_CRYSTAL),
			Imperion.Interface.Resource.Factory.counter(newProduction.tritium, RESOURCE_TYPE_TRITIUM)
		);
		this.fleetHandler.setNewFleet(newFleet);
		//disable fleet items for selected mission
		this.fleetHandler.disableFleetItems(this.missionHandler.getAllowedFleetItems());
		this.optionsHandler.updateCapacity(this.fleetHandler.getCapacity());
		this.setNewFleetDuration(0, 0);
		this.updateDistances(this.options.startDuration, this.options.returnDuration);
		//update missions
		this.missionHandler.enableMultipleMissions(newMissions);
		this.missionHandler.setActiveMission(this.missionHandler.missions[this.startMission]);

		var newEle, curVal, loopVal;
		curVal = this.elements.location.returning.select.options[this.elements.location.returning.select.selectedIndex].get('value');
		for(var i = this.elements.location.returning.select.options.length - 1; i >= 0 ; i--) {
			loopVal = this.elements.location.returning.select.options[i].get('value');
			if(loopVal == curVal) {
				this.elements.location.returning.select.options[i].removeProperty('selected');
			}
			if(newLocation.getId() == this.elements.location.returning.select.options[i].get('value')) {
				this.elements.location.returning.select.options[i].setProperty('selected', 'selected');
				newEle = this.elements.location.returning.select.options[i];
			}
		}
		var locationObj = this.planetList.planets.get(newEle.get('value').toInt());
		this.setReturnLocationImage(locationObj.options.planetType);
		if(newEle) {
			this.elements.location.returning.text.set('html', newEle.get('html'));
		}
	},

	/**
	 * listener for fleet actions (ship was remove from selection)
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onFleetItemRemoved : function(params) {
		this.dataHandler.requestFleetDuration(this.fleetHandler.getFleetList(), {
			start 		: this.getStartLocation().options,
			target		: this.getTargetLocation().options,
			returning 	: this.getReturnLocation().options
		}, this.setNewFleetDuration.bindNew(this));
	},

	/**
	 * listener for fleet actions (ship was added to selection)
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onFleetItemAdded : function(params) {
		this.dataHandler.requestFleetDuration(this.fleetHandler.getFleetList(), {
			start 		: this.getStartLocation().options,
			target		: this.getTargetLocation().options,
			returning 	: this.getReturnLocation().options
		}, this.setNewFleetDuration.bindNew(this));
	},

	/**
	 * listener for fleet item changed (ship was added or removed)
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onFleetItemChanged : function(params) {
		this.optionsHandler.updateCapacity(this.fleetHandler.getCapacity());
	},

	onCheckSendButton : function() {
		var sum = 0;
		for (var i = 0; i < this.fleetHandler.ships.length; i++) {
			var ship = this.fleetHandler.ships[i];
			if (ship.added)	sum = sum + ship.lastChange;
		}

		if (sum > 0) {
			this.elements.send.removeClass('disabled')

		} else {
			this.elements.send.addClass('disabled')

		}
	},

	/**
	 * listener for mission change
	 *
	 * @param Object params
	 *
	 * @return void
	 */
	onChangeMission : function(params) {
		this.elements.mission.set('text', params.obj.parentMission.translate('mission__' + params.obj.options.type.toLowerCase()));
		this.optionsHandler.showOptionsByMissionType(params.obj.options.type);
		this.fleetHandler.disableFleetItems(this.missionHandler.getAllowedFleetItems());
		this.fleetHandler.resetAllValues();
		this.optionsHandler.updateCapacity(0);
		this.fleetHandler.resetAllLastChange();
	},

	/**
	 * on deactivate mission
	 *
	 * @param	{Object}	params
	 *
	 * @returns	{Void}
	 */
	onDeactivateMission : function(params) {
		this.elements.mission.set('text', '---');
		this.optionsHandler.hideAllOptions();
		this.optionsHandler.showNoOptions('left');
		this.optionsHandler.showNoOptions('right');
	},

	/**
	 * get start location
	 *
	 * @return Imperion.Data.Location
	 */
	getStartLocation : function() {
		var locationId = this.elements.location.start.select.get('value').toInt();
		if(isNaN(locationId)) {
			throw '// ERROR HANDLING - invalid location id';
		}
		var locationObj = this.planetList.planets.get(locationId);
		return locationObj;
	},

	/**
	 * set the type of start location
	 *
	 * @param String locationType
	 *
	 * @return void
	 */
	setStartLocationImage : function(locationType) {
		var current = this.elements.location.start.planet.getProperty('class').split(' ')[1];
		this.elements.location.start.planet.removeClass(current).addClass('planetHalf_' + locationType);
	},

	/**
	 * return the target location
	 *
	 * @return Imperion.Data.Location
	 */
	getTargetLocation : function() {
		return this.target;
	},

	/**
	 * get return location
	 *
	 * @return Imperion.Data.Location
	 */
	getReturnLocation : function() {
		var locationId = this.elements.location.returning.select.get('value').toInt();
		if(isNaN(locationId)) {
			throw '// ERROR HANDLING - invalid location id';
		}
		var locationObj = this.planetList.planets.get(locationId);
		return locationObj;
	},

	/**
	 * set the type of return location
	 *
	 * @param String locationType
	 *
	 * @return void
	 */
	setReturnLocationImage : function(locationType) {
		var current = this.elements.location.returning.planet.getProperty('class').split(' ')[1];
		this.elements.location.returning.planet.removeClass(current).addClass('planetHalf_' + locationType);
	},

	/**
	 * callback after mission was send to server
	 *
	 * @param Object responseParams
	 *
	 * @return void
	 */
	afterFleetSend : function(responseParams) {
		if(responseParams.error)
		{
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : responseParams.error
			}).showEventBox();
		}
		else
		{
			try {
				Imperion.Factory.quest().refresh();
			} catch (e) {
				
			}


			if (responseParams.noobProtection)
			{
				var eventBox = Imperion.Interface.Factory.eventBox();
				eventBox.setEventBox({
					type : 'confirm',
					headline : responseParams.translations.info_invade_week_player_headline,
					image : '/images/layout/color-set/global/visuals/event_box/admiralRefusal.jpg',
					content : responseParams.translations.info_invade_week_player_content,
					firstButtonText : responseParams.translations.info_invade_week_player_confirm
				});
				eventBox.showEventBox();
			}
			else if (responseParams.riots)
			{
				var eventBox = Imperion.Interface.Factory.eventBox();
				eventBox.setEventBox({
					type : 'confirm',
					headline : responseParams.translations.confirm_riots_headline,
					image : '/images/layout/color-set/global/visuals/event_box/riots.jpg',
					content : responseParams.translations.confirm_riots_content_part1 + ' <b>' + responseParams.translations.confirm_riots_content_part2 + '</b> ' + responseParams.translations.confirm_riots_content_part3,
					firstButtonText : responseParams.translations.confirm_riots_abort,
					firstButtonCallback : null,
					secondButtonText : responseParams.translations.confirm_riots_ignore,
					secondButtonCallback : this.sendFleet.bindNew(this, 1),
					secondButtonDisabled : responseParams.notEnoughPopulation,
					secondButtonTooltip : (responseParams.notEnoughPopulation ? responseParams.translations.notEnoughPopulation : false)
				});
				eventBox.showEventBox();
			}
			else
			{
				this.dialog.closeDialog();
			}
		}

		this.requestRunning = false;
	},

	/**
	 * show return location
	 *
	 * @return void
	 */
	showReturnLocation : function() {
		this.elements.location.returning.container.removeClass('hideContainer');
	},

	/**
	 * hide return location
	 *
	 * @return void
	 */
	hideReturnLocation : function() {
		this.elements.location.returning.container.addClass('hideContainer');
	},

	/**
	 * key press listener
	 *
	 * @param	{Object}	params
	 *
	 * @returns	{Void}
	 */
	keyPressed : function(params) {
		switch(params.eventObj.code) {
			//enter pressed
			case 13:
				if (this.dialog.hasFocus) {
					this.sendFleet();
				}
				break;
		}
	},

	/**
	 * send the fleet
	 *
	 * @returns	{Void}
	 */
	sendFleet : function(isConfirmed) {
		if (isConfirmed === undefined)
		{
			isConfirmed = 0;
		}
		try {
			this.requestRunning = true;
			this.dataHandler.requestSendFleet({
				start 		: this.getStartLocation().options,
				target		: this.getTargetLocation().options,
				returning 	: this.getReturnLocation().options,
				fleet		: this.fleetHandler.getFleetList(),
				mission		: this.missionHandler.getMission(),
				options		: this.optionsHandler.getOptions(),
				isConfirmed : isConfirmed
			}, this.afterFleetSend.bindNew(this));
		}
		catch(e) {
			this.requestRunning = false;
			Imperion.Interface.Factory.eventBox().setEventBox({
				type : 'error',
				content : e
			}).showEventBox();
		}
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'change_location_start':
				var startLocation = this.getStartLocation();
				this.setStartLocationImage(startLocation.options.planetType);
				this.dataHandler.requestNewStartLocation(startLocation, this.getTargetLocation(), this.setNewStartLocation.bindNew(this));
				break;
			case 'change_location_returning':
				var returnLocation = this.getReturnLocation();
				this.setReturnLocationImage(returnLocation.options.planetType);
				this.onFleetItemAdded({});
				break;
			case 'send_fleet':
				var sum = 0;
				for (var i = 0; i < this.fleetHandler.ships.length; i++) {
					var ship = this.fleetHandler.ships[i];
					if (ship.added)	sum = sum + ship.lastChange;
				}
				if (sum > 0) this.sendFleet();
				break;
			case 'show_arrival_tooltip':
				this.tooltipHandle.setText(this.etaArrival.dateObj.format(this.getUser().getDateFormat()));
				this.tooltipHandle.show();
				break;
			case 'hide_arrival_tooltip':
			case 'hide_return_tooltip':
				this.tooltipHandle.hide();
				break;
			case 'show_return_tooltip':
				this.tooltipHandle.setText(this.etaReturn.dateObj.format(this.getUser().getDateFormat()));
				this.tooltipHandle.show();
				break;
		}
	},

	/**
	 * load elements
	 *
	 * @param	{Element}	domContainer
	 *
	 * @return void
	 */
	loadElements : function(domContainer) {
		//form
		this.elements.container = domContainer;
		this.elements.mission = this.elements.container.getElement('.missionCaption');
		this.elements.location = {
			start 	: {},
			returning	: {}
		};
		//location start
		this.elements.location.start.container = this.elements.container.getElement('.locationStart');
		this.elements.location.start.planet = this.elements.location.start.container.getElement('.planet');
		this.elements.location.start.select = this.elements.location.start.container.getElement('select');
		this.addEvent('change', this.elements.location.start.select, $H({
			action : 'change_location_start'
		}));
		//location return
		this.elements.location.returning.container = this.elements.container.getElement('.locationReturn');
		this.elements.location.returning.planet = this.elements.location.returning.container.getElement('.planet');
		this.elements.location.returning.text	= this.elements.location.returning.container.getElement('.text');
		this.elements.location.returning.select = this.elements.location.returning.container.getElement('select');
		this.addEvent('change', this.elements.location.returning.select, $H({
			action : 'change_location_returning'
		}));
		//flight time
		this.elements.flightTime = this.elements.container.getElement('.flightTime');
		//slots
		this.elements.slots = {};
		this.elements.slots.container = this.elements.container.getElement('.flightSlots');
		this.elements.slots.use = this.elements.slots.container.getElement('.used');
		this.elements.slots.max = this.elements.slots.container.getElement('.max');
		this.elements.slots.bar = this.elements.slots.container.getElement('.bar');
		//send fleet
		this.elements.send = this.elements.container.getElement('.send');
		this.addEvent('click', this.elements.send, $H({
			action : 'send_fleet'
		}));
	}
});

Imperion.Interface.FleetTransport.Mission = new Class({
	Implements : [Imperion.Event, Imperion.Util.Class, Imperion.Template, Imperion.Observable, Imperion.Util.Checkpoint, Imperion.Translate],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		available	: {},
		fleet		: {
			'UNDEFINED' : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		},
		translation : {
			MISSION_UNDEFINED 	: 'undefined',
			MISSION_ASSAULT 	: 'assault',
			MISSION_TRANSPORT 	: 'transport',
			MISSION_MINING 		: 'mining',
			MISSION_BOMBARDMENT : 'bombardment',
			MISSION_ANNEXION 	: 'annexion',
			MISSION_INVASION 	: 'invasion',
			MISSION_COLONIZATION: 'colonization',
			MISSION_DEPLOYMENT 	: 'deployment',
			MISSION_ESPIONAGE 	: 'espionage'
		},
		missions	: [MISSION_ASSAULT, MISSION_TRANSPORT, MISSION_MINING,MISSION_BOMBARDMENT, MISSION_ANNEXION, MISSION_INVASION, MISSION_COLONIZATION, MISSION_DEPLOYMENT, MISSION_ESPIONAGE]
	},
	
	/**
	 * registered missions
	 * 
	 * @var Object
	 */
	missions : null,
	
	/**
	 * select mission
	 * 
	 * @var string
	 */
	activeMission : null,
	
	/**
	 * tooltop handle
	 * 
	 * @var Imperion.Interface.Gui.HtmlTooltip
	 */
	tooltipHandle : null,
	
	/**
	 * parent fleet handle
	 * 
	 * @var Imperion.Interface.FleetTransport.Handle
	 */
	fleetHandle : null,
	
	/**
	 * visible flag
	 * 
	 * @type Boolean
	 */
	visible : false,
	
	/**
	 * global event listener
	 * 
	 * @var Imperion.Util.GlobalEvents
	 */
	globalEvents : null,
	
	/**
	 * quest mission
	 * 
	 * @type String
	 */
	questMission : null,
	
	/**
	 * prepare the mission object
	 * 
	 * @param Imperion.Interface.FleetTransport.Handle fleetHandle
	 * @param Object options
	 * @param Imperion.Interface.Gui.HtmlTooltip tooltipHandle
	 * @param	{Imperion.Util.GlobalEvents}	globalEvents
	 * 
	 * @return void
	 */
	initialize : function(fleetHandle, options, tooltipHandle, globalEvents) {
		this.globalEvents = globalEvents;
		//
		this.setOptions(options);
		//
		this.activeMission = null;
		this.questMission	 = null;
		this.visible = false;
		this.tooltipHandle = tooltipHandle;
		this.fleetHandle = fleetHandle;
		
		this.missions = {};
		//
		this.loadElements(this.fleetHandle.elements.container);
		
		$splat(this.options.missions).each(function(mission) {
			this.missions[mission] = Imperion.Interface.FleetTransport.Factory.missionItem(this, {
				type : mission,
				caption : this.options.translation[mission]
			});
			if(this.options.available[mission]) {
				this.missions[mission].enable();
			}
			this.elements.list.appendChild(this.missions[mission].elements.container);
		}, this);
	},

	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShowMission':
				if(this.visible || (this.activeMission !== null && this.activeMission.options.type === params.mission)) {
					return true;
				}
				return false;
				break;
			case 'FleetTransportSelectMission':
				if(this.activeMission !== null && this.activeMission.options.type === params.mission) {
					return true;
				}
				return false;
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Mission I ident not exist';
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportShowMission':
				var highlight = this.getCheckpointHighlight(ident, {
					container	: this.fleetHandle.elements.container,
					posOffset	: {
						y : -15
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			case 'FleetTransportSelectMission':
				this.questMission = params.mission;
				this.missions[params.mission].activateCheckpoint(ident, params, questObj);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Mission II ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportShowMission':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			case 'FleetTransportSelectMission':
				if(this.questMission !== null) {
					this.missions[this.questMission].removeCheckpoint(ident, refreshQuests);
					this.questMission = null;
					if(refreshQuests) {
						Imperion.Factory.quest().refresh();
					}
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Mission III ident not exist ' + ident;
				break;
		}
	},
	
	/**
	 * clean up method
	 * 
	 * @return void
	 */
	clean : function() {
		//free all elements
		this.cleanUp();
	},
	
	/**
	 * return array with allowed fleet items
	 * 
	 * @returns	{Void}
	 */
	getAllowedFleetItems : function() {
		var mission;
		try {
			mission = this.getMission();
		}
		catch(e) {
			mission = MISSION_UNDEFINED;
		}
		return this.options.fleet[mission];
	},
	
	/**
	 * activate mutliple missions
	 * 
	 * @param	{{Object}	newEnabledMissions
	 * 
	 * @returns	{Void}
	 */
	enableMultipleMissions : function(newEnabledMissions) {
		this.unsetActiveMission();
		$H(this.missions).each(function(missionItem, mission) {
			if(newEnabledMissions[mission] !== undefined) {
				missionItem.enable();
			}
			else {
				missionItem.disable();
			}
		}, this);
	},
	
	/**
	 * set active mission
	 * 
	 * @param Imperion.Interface.FleetTransport.MissionItem newMission
	 * 
	 * @return void
	 */
	setActiveMission : function(newMission) {
		if(newMission.enabled) {
			if(this.activeMission !== null) {
				this.activeMission.deactivate();
			}
			if(this.isValid(newMission)) {
				this.activeMission = newMission;
				this.activeMission.activate();
				this.notify({
					obj : newMission
				}, 'onChangeMission');
			}
			this.removeCheckpoint('FleetTransportSelectMission');
		}
	},
	
	/**
	 * unset active mission
	 * 
	 * @returns	{Void}
	 */
	unsetActiveMission : function() {
		if(this.activeMission !== null) {
			this.activeMission.deactivate();
			this.activeMission = null;
			this.notify({}, 'onDeactivateMission');
		}
	},
	
	/**
	 * check if mission is valid mission
	 * 
	 * @param int mission
	 * 
	 * @return boolean
	 */
	isValid : function(mission) {
		if(!mission) {
			return false;
		}
		else if(!this.missions[mission.options.type]) {
			return false;
		}
		return true;
	},
	
	/**
	 * get current selected mission
	 * 
	 * @return string
	 */
	getMission : function() {
		if(this.activeMission === null) {
			throw 'Please select a mission!';
		}
		return this.activeMission.options.type;
	},
	
	/**
	 * toggle mission container
	 * 
	 * @return void
	 */
	toggleSelect : function() {
		if(!this.visible) {
			this.elements.list.removeClass('hideContainer');
			this.visible = true;
			this.globalEvents.attach('fleetTransportMission', this);
			this.removeCheckpoint('FleetTransportShowMission');
		}
		else {
			this.elements.list.addClass('hideContainer');
			this.visible = false;
			this.globalEvents.detach('fleetTransportMission');
		}
		Imperion.Factory.quest().refresh();
	},
	
	/**
	 * global event on body click listener
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	onBodyClick : function() {
		if(this.visible) {
			this.elements.list.addClass('hideContainer');
			this.visible = false;
			this.globalEvents.detach('fleetTransportMission');
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'toggle_mission_select':
				this.toggleSelect();
				return false;
				new Event(eventObject).stop();
				break;
		}
	},
	
	/**
	 * get mission item
	 * 
	 * @returns	{Element}
	 */
	getMissionElementContainer : function() {
		return this.elements.missionItem.clone();
	},
	
	/**
	 * load elements
	 * 
	 * @param	{Element}	domContainer
	 * 
	 * @return void
	 */
	loadElements : function(domContainer) {
		this.elements.container = domContainer.getElement('.missionContainer');
		this.elements.missionItem = this.elements.container.getElement('.missionItem'); 
		
		this.elements.toggle = this.elements.container.getElement('.toggle');
		this.addEvent('click', this.elements.toggle, $H({
			action : 'toggle_mission_select'
		}));
		
		this.elements.list = this.elements.container.getElement('.missionSelect');
	}
});

Imperion.Interface.FleetTransport.MissionItem = new Class({
	Implements : [Imperion.Event, Imperion.Template, Imperion.Util.Class, Imperion.Util.Checkpoint],
	
	/**
	 * item options
	 * 
	 * @var Object
	 */
	options : {
		type 	: MISSION_UNDEFINED,
		caption : 'undefined' 
	},
	
	/**
	 * flag if mission is enabled
	 * 
	 * @type boolean
	 */
	enabled	: false,
	
	/**
	 * parent mission handle
	 * 
	 * @var Imperion.Interface.FleetTransport.Mission
	 */
	parentMission : null,
	
	/**
	 * prepare the item
	 * 
	 * @param Imperion.Interface.FleetTransport.Mission parentMission
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(parentMission, options) {
		this.parentMission = parentMission;
		//
		this.loadElements(this.parentMission.getMissionElementContainer());
		//
		this.setOptions(options);
		this.setType(options.type);
		this.enabled = false;
		//
		this.show();
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportSelectMission':
				var highlight = this.getCheckpointHighlight(ident, {
					container : this.parentMission.elements.list,
					posOffset	: {
						y : 30
					}
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.MissionItem I ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportSelectMission':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.MissionItem II ident not exist';
				break;
		}
	},
	
	/**
	 * acitvate mission
	 * 
	 * @return void
	 */
	activate : function() {
		this.elements.container.addClass('active');
		switch(this.options.type) {
			case MISSION_MINING:
			case MISSION_BOMBARDMENT:
			case MISSION_ESPIONAGE:
			case MISSION_TRANSPORT:
			case MISSION_UNDEFINED:
			case MISSION_ASSAULT:
				this.parentMission.fleetHandle.showReturnLocation();
				break;
			case MISSION_COLONIZATION:
			case MISSION_ANNEXION:
			case MISSION_INVASION:
			case MISSION_DEPLOYMENT:
				this.parentMission.fleetHandle.hideReturnLocation();
				break;
		}
	},
	
	/**
	 * enable mission
	 * 
	 * @returns	{Void}
	 */
	enable : function() {
		if(!this.enabled) {
			this.elements.container.removeClass('disabled');
			this.enabled = true;
		}
	},
	
	/**
	 * disable mission
	 * 
	 * @returns	{Void}
	 */
	disable : function() {
		if(this.enabled) {
			this.elements.container.addClass('disabled');
			this.enabled = false;
		}
	},
	
	/**
	 * deacitvate mission
	 * 
	 * @return void
	 */
	deactivate : function() {
		this.elements.container.removeClass('active');
	},
	
	/**
	 * set type of mission
	 * 
	 * @param String missionType
	 * 
	 * @return void
	 */
	setType : function(missionType) {
		this.elements.container.addClass(missionType);
		this.options.type = missionType;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click_mission':
				this.parentMission.setActiveMission(this);
				this.parentMission.toggleSelect();
				break;
			case 'mouse_enter':
				var missionTranslationKey = 'mission__' + this.options.type.toLowerCase();
				var ele = this.elements.tooltipContainer.clone();
				ele.removeClass('hideContainer');
				ele.getElement('H1').set('text', this.parentMission.translate(missionTranslationKey));
				ele.getElement('P').set('text', this.parentMission.translate(missionTranslationKey + '_description'));
				this.parentMission.tooltipHandle.setHtml(ele);
				this.parentMission.tooltipHandle.show();
				break;
			case 'mouse_leave':
				this.parentMission.tooltipHandle.hide();
				break;
		}
	},
	
	/**
	 * load item elements
	 * 
	 * @param	{Element}	domContainer
	 * 
	 * @return void
	 */
	loadElements : function(domContainer) {
		this.elements.container = domContainer;
		
		this.elements.tooltipContainer = this.getTemplate('MissionTooltip');
		
		this.addEvent('click', this.elements.container, $H({
			action : 'click_mission'
		}));
		this.addEvent('mouseenter', this.elements.container, $H({
			action : 'mouse_enter'
		}));
		this.addEvent('mouseleave', this.elements.container, $H({
			action : 'mouse_leave'
		}));
	}
});
Imperion.Interface.FleetTransport.Options = new Class({
	Implements : [Imperion.Event, Imperion.Util.Class, Imperion.Template, Imperion.Observable],

	/**
	 * options options <-- l0l
	 *
	 * @var Object
	 */
	options : {
		mission : {
			UNDEFINED		: [],
			ASSAULT 		: [],
			TRANSPORT 		: ['resourceSend', 'resourceRetrieve'],
			MINING			: [],
			BOMBARDMENT		: [],
			ANNEXION		: [],
			INVASION		: ['invasion'],
			COLONIZATION	: ['resourceSend'],
			DEPLOYMENT		: ['resourceSend'],
			ESPIONAGE 		: ['espionage']
		}
	},

	/**
	 * @var Object
	 *
	 * to know, if mission is a transport mission as well
	 */
	autoMaxCapacityOnMission : {TRANSPORT: true, COLONIZATION: true},

	/**
	 * to know if to put resources with the fleet or not
	 */
	hasResourceSendModule: false,
	/**
	 * resource handler - send
	 *
	 * @var Imperion.Interface.FleetTransport.OptionResource
	 */
	resourceSend : null,

	/**
	 * resource handler - retrieve
	 *
	 * @var Imperion.Interface.FleetTransport.OptionResource
	 */
	resourceRetrieve : null,

	/**
	 * espionage handler
	 *
	 * @var Imperion.Interface.FleetTransport.OptionEspionage
	 */
	espionage : null,

	/**
	 * invasion handle
	 *
	 * @type	Imperion.Interface.FleetTransport.OptionInvasion
	 */
	invasion : null,

	/**
	 * the over handle
	 *
	 * @var Imperion.Interface.FleetTransport.Handle
	 */
	parentHandle : null,

	/**
	 * prepare the options object
	 *
	 * @param Imperion.Interface.FleetTransport.Handle fleetHandle
	 * @param Object
	 *
	 * @return void
	 */
	initialize : function(parentHandle, options) {
		//
		this.parentHandle = parentHandle;
		this.resourceSend = Imperion.Interface.FleetTransport.Factory.optionResource(this, {
			template : 'InterfaceFleetTransportOptionResourceToTarget',
			countRes : true

		});
		if (options.targetRes !== null) {
			this.resourceRetrieve = Imperion.Interface.FleetTransport.Factory.optionResource(this, {
				template : 'InterfaceFleetTransportOptionResourceFromTarget',
				countRes : true,
				overfill : true
			}, {
				metal : Imperion.Interface.Resource.Factory.counter({
					production : options.targetRes.metal.production,
					storage    : options.targetRes.metal.storage,
					capacity   : options.targetRes.metal.capacity,
					template   : false
				}, RESOURCE_TYPE_METAL),
				crystal : Imperion.Interface.Resource.Factory.counter({
					production : options.targetRes.crystal.production,
					storage    : options.targetRes.crystal.storage,
					capacity   : options.targetRes.crystal.capacity,
					template   : false
				}, RESOURCE_TYPE_CRYSTAL),
				tritium : Imperion.Interface.Resource.Factory.counter({
					production : options.targetRes.tritium.production,
					storage    : options.targetRes.tritium.storage,
					capacity   : options.targetRes.tritium.capacity,
					template   : false
				}, RESOURCE_TYPE_TRITIUM)
			});
		} else {
			this.resourceRetrieve = Imperion.Interface.FleetTransport.Factory.optionResource(this, {
				template : 'InterfaceFleetTransportOptionResourceFromTarget'
			});
		}

		this.espionage = Imperion.Interface.FleetTransport.Factory.optionEspionage(this, options.espionage);
		this.invasion = Imperion.Interface.FleetTransport.Factory.optionInvasion(this, options.population);
		//
		this.loadElements();
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportResource':
				return this.resourceSend.isCheckpointResolved(ident, params, questObj);
			default:
				throw 'Imperion.Interface.FleetTransport.Options I ident not exist:' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportResource':
				this.resourceSend.activateCheckpoint(ident, params, questObj);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Options II ident not exist:' + ident;
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportResource':
				this.resourceSend.removeCheckpoint(ident, refreshQuests);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Options III ident not exist: ' + ident;
				break;
		}
	},

	/**
	 * clean up method
	 *
	 * @return void
	 */
	clean : function() {
		//
		this.resourceSend.clean();
		delete this.resourceSend;
		//
		this.resourceRetrieve.clean();
		delete this.resourceRetrieve;
		//
		this.espionage.clean();
		delete this.espionage;
		//
		this.invasion.clean();
		delete this.invasion;
		//free all elements
		this.cleanUp();
	},

	/**
	 * get all options
	 *
	 * @return Object
	 */
	getOptions : function() {
		var retVal = {};
		retVal.resource = {};
		var resSend = this.resourceSend.getAllValues();
		if(resSend !== null) {
			retVal.resource.send = resSend;
		}
		var resRetrieve = this.resourceRetrieve.getAllValues();
		if(resRetrieve !== null) {
			retVal.resource.retrieve = resRetrieve;
		}
		retVal.espionage = this.espionage.getSelectedOptions();
		retVal.invasion = this.invasion.selectedPopulation;
		return retVal;
	},

	/**
	 * show options by mission type
	 *
	 * @param int mission
	 *
	 * @return void
	 */
	showOptionsByMissionType : function(mission) {
		this.hideAllOptions();
		this.hasResourceModule = false;
		if(this.options.mission[mission].length > 0) {
			for(var i = 0 ; i < this.options.mission[mission].length ; i++) {
				switch(this.options.mission[mission][i]) {
					case 'espionage':
						this.espionage.show();
						this.invasion.hide();
						this.showNoOptions('left');
						break;
					case 'resourceSend':
						this.hasResourceModule = true;
						if (typeof this.autoMaxCapacityOnMission[mission] == 'undefined') {
							this.resourceSend.disableCheckbox();
						} else {
							this.resourceSend.enableCheckbox();
						}
						this.resourceSend.show();
						this.invasion.hide();
						this.showNoOptions('right');
						break;
					case 'resourceRetrieve':
						this.resourceRetrieve.show();
						this.invasion.hide();
						this.hideNoOptions('right');
						break;
					case 'invasion':
						this.invasion.show();
						this.showNoOptions('right');
						break;

				}
			}
		}
		else {
			this.showNoOptions('left');
			this.showNoOptions('right');
		}
	},

	/**
	 * hide all options
	 *
	 * @returns	{Void}
	 */
	hideAllOptions : function() {
		this.hideNoOptions('left');
		this.hideNoOptions('right');
		this.espionage.hide();
		this.invasion.hide();
		this.resourceSend.hide();
		this.resourceRetrieve.hide();
	},

	/**
	 * show the no options container
	 *
	 * @param string pos
	 *
	 * @return void
	 */
	showNoOptions : function(pos) {
		switch(pos) {
			case 'left':
				this.elements.noOptionsLeft.removeClass('hideContainer');
				break;
			case 'right':
				this.elements.noOptionsRight.removeClass('hideContainer');
				break;
		}
	},

	/**
	 * hide the no options container
	 *
	 * @param string pos
	 *
	 * @return void
	 */
	hideNoOptions : function(pos) {
		switch(pos) {
			case 'left':
				this.elements.noOptionsLeft.addClass('hideContainer');
				break;
			case 'right':
				this.elements.noOptionsRight.addClass('hideContainer');
				break;
		}
	},

	/**
	 * update capacity
	 *
	 * @param int newCapacity
	 *
	 * @return void
	 */
	updateCapacity : function(newCapacity) {
		var capacity = newCapacity / 3;
		this.resourceSend.setMaxCapacity(newCapacity);
		this.resourceRetrieve.setMaxCapacity(newCapacity);

		this.resourceSend.elements['resMetal'].input.set('value', 0);
		this.resourceSend.elements['resCrystal'].input.set('value', 0);
		this.resourceSend.elements['resTritium'].input.set('value', 0);

		if (this.hasResourceModule) {
			this.resourceSend.setResourceAmount('resMetal', capacity, true);
			this.resourceSend.setResourceAmount('resCrystal', capacity, true);
			this.resourceSend.setResourceAmount('resTritium', capacity, true);
		}
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'change_mission':

				break;
		}
	},

	/**
	 * load elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.noOptionsLeft = this.getTemplate('InterfaceFleetTransportOptionNoOptionsLeft');
		this.elements.noOptionsRight = this.getTemplate('InterfaceFleetTransportOptionNoOptionsRight');
	}
});

Imperion.Interface.FleetTransport.OptionInvasion = new Class({
	Implements : [Imperion.Util.Class, Imperion.Event, Imperion.Template],

	/**
	 * options
	 *
	 * @type	Object
	 */
	options : {
		min : 5,
		max : 5,
		possible : true
	},

	/**
	 * popvalue
	 *
	 * @type	Number
	 */
	selectedPopulation : 0,

	/**
	 * scroll bar
	 *
	 * @type	Imperion.Interface.Tools.ScrollBar
	 */
	slider : null,

	/**
	 *
	 *
	 * @param	{Imperion.Interface.FleetTransport.Option}	optionHandler
	 * @param	{Object}									options
	 *
	 * @construct
	 */
	initialize : function(optionHandler, options) {
		//
		this.slider = null;
		//
		this.setOptions(options);
		//
		this.loadElements();
		//
		this.selectedPopulation = this.options.min;
	},

	/**
	 * clean invasion
	 *
	 * @returns {Void}
	 */
	clean : function() {
		if(this.slider !== null) {
			this.slider.clean();
			delete this.slider;
			this.slider = null;
		}
		this.cleanUp();
	},

	/**
	 * show invasion section
	 *
	 * @returns	{Void}
	 */
	show : function() {
		if(this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
		}
		if(this.slider !== null) {
			this.slider.clean();
			delete this.slider;
			this.slider = null;
		}
		//
		this.slider = Imperion.Interface.Tools.Factory.sliderWithButtons(this.elements.slider, {
			dir			: 'horizontal',
			length		: 180,
			range		: [0, this.options.max - this.options.min],
			initialStep	: 0,
			update		: this.sliderMoved.bindNew(this),
			disabled	: !this.options.possible
		});
	},

	/**
	 * hide
	 *
	 * @return void
	 */
	hide : function() {
		if(!this.elements.container.hasClass('hideContainer')) {
			this.elements.container.addClass('hideContainer');
		}
		if(this.slider !== null) {
			this.slider.clean();
			delete this.slider;
			this.slider = null;
		}
	},

	/**
	 * listener for slider move, evaluate slider and update view
	 *
	 * @param	{Number}	step
	 *
	 * @returns {void}
	 */
	sliderMoved : function(step) {
		this.selectedPopulation = step + this.options.min;
		this.elements.population.set('text', this.selectedPopulation);
	},

	/**
	 * load invasion elements
	 *
	 * @returns	{Void}
	 */
	loadElements : function() {
		this.elements.container 	= this.getTemplate('InterfaceFleetTransportOptionInvasion');
		this.elements.slider		= this.elements.container.getElement('.Imperion-Interface-Gui-Slider');
		this.elements.population	= this.elements.container.getElement('.popSel');
	}
});

Imperion.Interface.FleetTransport.OptionEspionage = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event],

	/**
	 * espionage options
	 *
	 * @var Object
	 */
	options : {
		level : ['troops', 'resource', 'buildings', 'defence', 'research'],
		possible : []
	},

	/**
	 * spio options
	 *
	 * @var Object
	 */
	spioLevel : null,

	/**
	 * parent option handler
	 *
	 * @var Imperion.Interface.FleetTransport.Option
	 */
	optionHandler : null,

	/**
	 * prepare the bombing options
	 *
	 * @param Imperion.Interface.FleetTransport.Option optionHandler
	 * @param Object options
	 *
	 * @return void
	 */
	initialize : function(optionHandler, options) {
		//
		this.setOptions(options);
		//
		this.optionHandler = optionHandler;
		//
		this.loadElements();
		//
		this.setSpioLevel(options.possible);
	},

	/**
	 * clean up method
	 *
	 * @return void
	 */
	clean : function() {
		//free all elements
		this.cleanUp();
	},

	/**
	 * update the spio levels
	 *
	 * @param Object spioLevel
	 *
	 * @return void
	 */
	setSpioLevel : function(spioLevel) {
		this.unsetSpioLevel();
		$splat(spioLevel).each(function(spio) {
			this.elements[spio].container.removeClass('hideContainer');
		}, this);
		this.options.possible = spioLevel;
	},

	/**
	 * unset spio level
	 *
	 * @return void
	 */
	unsetSpioLevel : function() {
		$splat(this.options.level).each(function(spio) {
			this.elements[spio].container.addClass('hideContainer');
		}, this);
		this.options.possible = [];
	},

	/**
	 * get spio options
	 *
	 * @return Object
	 */
	getSelectedOptions : function() {
		var values = {};
		$splat(this.options.possible).each(function(spio) {
			if(!this.elements[spio].container.hasClass('hideContainer') && this.elements[spio].checkbox.checked) {
				values[spio] = true;
			}
		}, this);
		return values;
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'change_bombing_target':

				break;
		}
	},

	/**
	 * load bombing elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('InterfaceFleetTransportOptionEspionage');

		$splat(this.options.level).each(function(spio) {
			this.elements[spio] = {};
			this.elements[spio].container = this.elements.container.getElement('.' + spio);
			this.elements[spio].checkbox = this.elements[spio].container.getElement('input');
		}, this);
	}
});

Imperion.Interface.FleetTransport.OptionResource = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Util.Checkpoint],

	/**
	 * options
	 *
	 * @var Object
	 */
	options : {
		template 	: '',
		resMetal 	: 0,
		resCrystal	: 0,
		resTritium	: 0,
		maxCapacity : 0,
		countRes	: false,
		visible		: false,
		overfill	: true
	},

	/**
	 * parent option handler
	 *
	 * @var Imperion.Interface.FleetTransport.Option
	 */
	optionHandler : null,

	/**
	 * resource counter
	 *
	 * @type {Object}
	 */
	resourceCounter : null,

	/**
	 * prepare the resource option object
	 *
	 * @param Imperion.Interface.FleetTransport.Option optionHandler
	 * @param Object options
	 * @param Object resourceCounter
	 *
	 * @return void
	 */
	initialize : function(optionHandler, options, resourceCounter) {
		//
		this.setOptions(options);
		//
		this.optionHandler = optionHandler;
		//
		this.resourceCounter = resourceCounter;
		//
		this.loadElements();
		this.setUser(Imperion.Util.Registry.get('user'));
		//
		this.setMaxCapacity(0);
		//
		if(this.options.countRes) {
			this.options.visible = true;
			this.resourceCounter.metal.attach(this.options.template, this);
			this.setMaxResource('resMetal', this.resourceCounter.metal.storage, this.user.formatNumber(this.resourceCounter.metal.storage));
			this.resourceCounter.crystal.attach(this.options.template, this);
			this.setMaxResource('resCrystal', this.resourceCounter.crystal.storage, this.user.formatNumber(this.resourceCounter.crystal.storage));
			this.resourceCounter.tritium.attach(this.options.template, this);
			this.setMaxResource('resTritium', this.resourceCounter.tritium.storage, this.user.formatNumber(this.resourceCounter.tritium.storage));
		}
		else {
			this.options['resMetal'] = 2147483648;
			this.options['resCrystal'] = 2147483648;
			this.options['resTritium'] = 2147483648;
		}
	},

	/**
	 * check if checkpoint is resolved
	 *
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportResource':
				var resMetal = this.getValue('resMetal');
				var resCrystal = this.getValue('resCrystal');
				var resTritium = this.getValue('resTritium');
				var resourcesCount = resMetal + resCrystal + resTritium;

				if (resourcesCount >= params.minRequiredResources) {
					return true
				}

				return false;
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Options I ident not exist:' + ident;
				break;
		}
	},

	/**
	 * activate checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 *
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'FleetTransportResource':
				var highlight = this.getCheckpointHighlight(ident, {
					container	: this.elements.container,
					posOffset	: {
						y : -71,
						x : 75
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Options II ident not exist:' + ident;
				break;
		}
	},

	/**
	 * remove checkpoint
	 *
	 * @param	{String}			ident
	 * @param	{Boolean}			refreshQuests
	 *
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'FleetTransportResource':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Interface.FleetTransport.Options III ident not exist: ' + ident;
				break;
		}
	},

	/**
	 * clean up method
	 *
	 * @return void
	 */
	clean : function() {
		//
		if(this.options.countRes) {
			this.resourceCounter.metal.detach(this.options.template);
			this.resourceCounter.crystal.detach(this.options.template);
			this.resourceCounter.tritium.detach(this.options.template);
			this.resourceCounter = null;
		}
		//free all elements
		this.cleanUp();
	},

	/**
	 * set new resource counter objects
	 *
	 * @param	{Imperion.Interface.Resource.Counter}	metal
	 * @param	{Imperion.Interface.Resource.Counter}	crystal
	 * @param	{Imperion.Interface.Resource.Counter}	tritium
	 *
	 * @returns	{Void}
	 */
	setResourceCounter : function(metal, crystal, tritium) {
		if(this.resourceCounter !== null) {
			this.resourceCounter.metal.detach(this.options.template);
			this.resourceCounter.crystal.detach(this.options.template);
			this.resourceCounter.tritium.detach(this.options.template);
			this.resourceCounter = null;
		}
		this.resourceCounter = {
			metal		: metal,
			crystal 	: crystal,
			tritium		: tritium
		};
		this.resourceCounter.metal.attach(this.options.template, this);
		this.setMaxResource('resMetal', this.resourceCounter.metal.storage, this.user.formatNumber(this.resourceCounter.metal.storage));
		this.resourceCounter.crystal.attach(this.options.template, this);
		this.setMaxResource('resCrystal', this.resourceCounter.crystal.storage, this.user.formatNumber(this.resourceCounter.crystal.storage));
		this.resourceCounter.tritium.attach(this.options.template, this);
		this.setMaxResource('resTritium', this.resourceCounter.tritium.storage, this.user.formatNumber(this.resourceCounter.tritium.storage));

		this.elements['resMetal'].input.set('value', null);
		this.elements['resCrystal'].input.set('value', null);
		this.elements['resTritium'].input.set('value', null);

		this.updateCurrentCapacity();

		this.setMaxCapacity(0);
	},

	/**
	 * resource counter callback
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	metalResourceChanged : function(data) {
		this.setMaxResource('resMetal', data.resourceCounter.storage, data.formated);
	},

	/**
	 * resource counter callback
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	crystalResourceChanged : function(data) {
		this.setMaxResource('resCrystal', data.resourceCounter.storage, data.formated);
	},

	/**
	 * resource counter callback
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	tritiumResourceChanged : function(data) {
		this.setMaxResource('resTritium', data.resourceCounter.storage, data.formated);
	},

	/**
	 * set the max resource value
	 *
	 * @param string resType
	 * @param int maxValue
	 * @param int maxValueFormated
	 *
	 * @return void
	 */
	setMaxResource : function(resType, maxValue, maxValueFormated) {
		this.options[resType] = maxValue;
		this.elements[resType].current.set('text', maxValueFormated);
	},

	/**
	 * get value from checkbox
	 *
	 * @return int
	 */
	getCheckboxValue : function() {
		var retVal = this.elements.checkbox.checked;
		return isNaN(retVal) ? null : retVal;
	},

	disableCheckbox: function() {
		this.elements.uiCheckbox.removeClass('checked');
		this.elements.checkbox.checked = false;
		this.hideContent();
	},

	enableCheckbox: function() {
		this.elements.uiCheckbox.addClass('checked');
		this.elements.checkbox.checked = true;
		this.showContent();
	},

	/**
	 * get current entered val
	 *
	 * @param String resType
	 *
	 * @return int
	 */
	getValue : function(resType) {
		var retVal = this.elements[resType].input.get('value').toInt();
		var reti	= isNaN(retVal) ? null : retVal;
		if(reti !== null && reti > Math.pow(2, 31)) {
			reti = Math.pow(2, 31);
		}
		return reti;
	},

	/**
	 * get all
	 *
	 * @return Object
	 */
	getAllValues : function() {
		if(this.options.visible) {
			return {
				r1 : this.getValue('resMetal'),
				r2 : this.getValue('resCrystal'),
				r3 : this.getValue('resTritium')
			};
		}
		else {
			return null;
		}
	},

	/**
	 * toggle content show
	 *
	 * @param string resType
	 *
	 * @return void
	 */
	toggleContent : function(resType) {
		if(this.options.visible) {
			this.hideContent();
		}
		else {
			this.showContent();
		}

	},

	/**
	 * show the content
	 *
	 * @return void
	 */
	showContent : function() {
		if(this.elements.content.hasClass('hideContainer')) {
			this.elements.content.removeClass('hideContainer');
			this.options.visible = true;
		}
	},

	/**
	 * show the content
	 *
	 * @return void
	 */
	hideContent : function() {
		if(!this.elements.content.hasClass('hideContainer')) {
			this.elements.content.addClass('hideContainer');
			this.options.visible = false;
		}
	},

	/**
	 * update the maximum capacity
	 *
	 * @var int newCapacity
	 *
	 * @return void
	 */
	setMaxCapacity : function(newCapacity) {
		this.options.maxCapacity = newCapacity;
		this.elements.capacity.max.set('text', this.optionHandler.parentHandle.user.formatNumber(newCapacity));
		this.updateCurrentCapacity();
	},

	/**
	 * add all added resources and update caption
	 *
	 * @return void
	 */
	updateCurrentCapacity : function() {
		var amountMetal = this.getValue('resMetal');
		var amountCrystal = this.getValue('resCrystal');
		var amountTritium = this.getValue('resTritium');

		var all = amountMetal + amountCrystal + amountTritium;

		if(all > this.options.maxCapacity) {
			this.elements.capacity.current.addClass('toMuch');
			this.elements.bar.addClass('error');
			this.elements.barFill.setStyle('width', '100%');
		}
		else {
			this.elements.capacity.current.removeClass('toMuch');
			this.elements.bar.removeClass('error');
			var percent = 0;
			if(this.options.maxCapacity > 0) {
				percent = Math.round(all * 100 / this.options.maxCapacity);
			}
			this.elements.barFill.setStyle('width', percent + '%');
		}
		this.elements.capacity.current.set('text', this.optionHandler.parentHandle.user.formatNumber(all));
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * @return boolean abortEvent
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'resource_max':
				var resType = params.get('type');
				var value = this.getValue(resType);
				this.setResourceAmount(resType, value);
				break;
			case 'change_amount':
				var resType = params.get('type');
				var amount = this.getValue(resType);
				if(!this.options.overfill && amount > this.options[resType]) {
					this.elements[resType].input.set('value', this.options[resType]);
				}
				else {
					this.elements[resType].input.set('value', amount);
				}
				this.updateCurrentCapacity();
				Imperion.Factory.quest().refresh(true);
				break;
			case 'toggle_content':
				if(this.getCheckboxValue()) {
					this.showContent();
				}
				else {
					this.hideContent();
				}
				break;
		}
	},

	setResourceAmount: function(resType, value, min) {
		if (typeof min == 'undefined') {
			min = false;
		}
		var newValue;
		var entered = 0;
		$splat(['resMetal', 'resCrystal', 'resTritium']).each(function(item, key) {
			if(resType !== item) {
				var resAmount = this.getValue(item);
				entered += resAmount;
			}
		}, this);

		if (!min && (value == this.options.maxCapacity || value == this.options[resType] || this.options.maxCapacity == entered + value))
		{
			newValue = 0;
		}
		else if(this.options[resType] >= this.options.maxCapacity && !min)
		{
			newValue = this.options.maxCapacity - entered;
		}
		else
		{
			if (min) {
				newValue = Math.min(this.options[resType], Math.floor(value));
			} else {
				var maxValue = this.options.maxCapacity - entered;
				newValue = maxValue > this.options[resType] ? enteredValue : maxValue;
			}
		}

		this.elements[resType].input.set('value', newValue);

		this.updateCurrentCapacity();
		Imperion.Factory.quest().refresh(true);
	},

	/**
	 * load elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate(this.options.template);
		this.elements.content = this.elements.container.getElement('.content');
		this.elements.checkbox = this.elements.container.getElement('input[type=checkbox]');
		this.elements.uiCheckbox = this.elements.container.getElement('.UI-Checkbox');
		this.addEvent('click', this.elements.checkbox, $H({
			action : 'toggle_content'
		}));

		$H({'resMetal' : '.metal', 'resCrystal' : '.crystal', 'resTritium' : '.tritium'}).each(function(resClass, resType) {
			this.elements[resType] = {};
			this.elements[resType].container = this.elements.container.getElement(resClass);
			this.elements[resType].input = this.elements[resType].container.getElement('input');
			this.elements[resType].current = this.elements[resType].container.getElement('a');
			this.addEvent('click', this.elements[resType].current, $H({
				action : 'resource_max',
				type : resType
			}));
			this.addEvent('keyup', this.elements[resType].input, $H({
				action : 'change_amount',
				type : resType
			}));
		}, this);

		this.elements.bar = this.elements.container.getElement('.Imperion-Interface-Gui-Bar');
		this.elements.barFill = this.elements.bar.getElement('div');

		this.elements.capacity = {
			current : this.elements.container.getElement('.currentCapacity'),
			max : this.elements.container.getElement('.maxCapacity')
		};
	}
});
Imperion.Interface.FleetSummary.Data = new Class({
	Implements : [Options],
	
	/**
	 * fleetSummary url
	 * 
	 * @var String
	 */
	urlFleetSummary : '',
	
	/**
	 * fleet summary handle
	 * 
	 * @var Imperion.Interface.FleetSummary.Handle
	 */
	handle : null,
	
	/**
	 * prepare the data handler
	 * 
	 * @param Imperion.Interface.FleetSummary.Handle handle
	 * 
	 * @return void
	 */
	initialize : function(handle) {
		//
		this.handle = handle;
		//
		this.urlFleetSummary = Imperion.Util.Helper.url('frontend', 'fleet', 'detail');
	},
	
	/**
	 * clean up method
	 * 
	 * @return void
	 */
	clean : function() {
		
	},

	
	/**
	 * request fleet summary
	 * 
	 * @param {Number} fleetId
	 * @param {Object} callback
	 * 
	 * @return void
	 */
	requestFleetSummary : function(fleetId, callback) {
		Imperion.Util.Request.send(this.urlFleetSummary, {
			fleetid  : fleetId
		}, this.afterRequestFleetSummary.bindNew(this), {
			callback : callback
		});
	},
	
	/**
	 * callback for request fleet summary
	 * 
	 * @param Imperion.Util.Response response
	 * @param Object requestParam
	 * 
	 * @return void
	 */
	afterRequestFleetSummary : function(response, requestParam) {
		requestParam.callback(response);
	}
});
Imperion.Interface.FleetSummary.Factory = new Class.Singleton({
	storage : {
		handle : null
	},
	
	initialize : function() {
		this.storage = {
			handle : null
		};
	},
	
	handle : function(request, response, dialog, context) {
		return new Imperion.Interface.FleetSummary.Handle(request, response, dialog, context);
	},

	area : function() {
		return new Imperion.Interface.Area('FleetSummaryOptionsBox');
	},
	
	list : function (request, response, dialog, context, handle) {
		return new Imperion.Interface.FleetSummary.List(request, response, dialog, context, handle);
	},
	
	listItem : function (item, parentList, index) {
		return new Imperion.Interface.FleetSummary.ListItem(item, parentList, index);
	},

	listGroup : function (item, parentList, index) {
		return new Imperion.Interface.FleetSummary.ListGroup(item, parentList, index);
	},

	grid : function (request, response, dialog, context, handle) {
		return new Imperion.Interface.FleetSummary.Grid(request, response, dialog, context, handle, Imperion.Interface.Gui.Factory.htmltooltip());
	},

	gridItem : function (grid, race, ship, name, amount) {
		return new Imperion.Interface.FleetSummary.GridItem(grid, race, ship, name, amount);
	},

	data : function () {
		return new Imperion.Interface.FleetSummary.Data();
	}
});
Imperion.Interface.FleetSummary.Grid = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event, Imperion.Translate],

	options : {
	},

	items : $A([]),

	returnMode : false,

	user : null,

	dataHandler : null,

	type : null,

	tooltip : null,

	secondTimer : null,

	recallSeconds : 0,

	invasionSeconds: 0,

	isOwnFleet : false,

	/**
	* the fleetsummary grid
	*
	* @param (Object}	request
	* @param {Object}	response
	* @param {Object}	dialog
	* @param {Object}	handle
	*
	* @constructs
	*/
	initialize : function(request, response, dialog, context, handle, tooltip) {
		this.user = Imperion.Util.Registry.get('user');
		this.dialog = dialog;
		this.context = context;
		this.tooltip = tooltip;
		this.list = handle.list;
		this.loadElements();
		this.dataHandler = Imperion.Interface.FleetSummary.Factory.data();
		this.secondTimer = Imperion.Util.Factory.secondTimer();

		this.type = request.type;

		this.emptyGrid(true);
		this.loadForms();
	},

	/**
	* empties the grid and prefills it with empty data
	*
	* @param (Boolean}	prefill
	*/
	emptyGrid : function(prefill) {
		this.disableReturnMode();
		this.elements.list.set('class', 'Imperion-Interface-Items-Fleet');
		this.items.each(function(item, key) {
			item.cleanUp();
			delete this.items[key];
		}, this);

		if (prefill) {
			for (var i = 12 - 1; i >= 0; i--) {
				this.addItem(this, '', '', '', '', i);
			};
		};
	},

	/**
	* update the grid
	*
	* @param (Object}	response
	*/
	updateGrid : function(response) {
		if (this.secondTimer) {
			this.secondTimer.detach('invasion');
			this.secondTimer.detach('return');
		}
		this.resetFleetActions();
		this.emptyGrid();
		data = response.getResponseData();
		var species = data.species;
		this.isOwnFleet = data.isOwnFleet;
		this.elements.id_fleet.set('value', data.id_fleet);
		$A(data.ships).each(function(ships, index) {
			this.addItem(this, species, ships.type, ships.name, ships.amount, index);
		}, this);
		if (data.remaining_seconds_recall) {
			this.recallSeconds = data.remaining_seconds_recall;
			this.elements.recallTime.set('text', this.user.formatDuration(this.recallSeconds));
			this.elements.recallTime.removeClass('hideContainer');
			this.elements.recallPossibleText.removeClass('hideContainer');
		}
		if (data.allowed_actions) {
			data.allowed_actions.each(function(item) {
				this.updateFleetActions(item, data);
			}, this);
		}
		this.loadForms();
	},

	/**
	 * Reset the Action buttons
	 */
	resetFleetActions : function() {
		this.disableReturnMode();
		this.elements.returnPartialFleetButton.addClass('hideContainer');
		this.elements.attackFleetButton.addClass('hideContainer');
		this.elements.returnWholeFleetButton.addClass('hideContainer');
		this.elements.recallFleetButton.addClass('hideContainer');
		this.elements.recallPossibleText.addClass('hideContainer');
		this.elements.recallNotPossibleText.addClass('hideContainer');
		this.elements.recallTime.addClass('hideContainer');
	},

	/**
	 * Update the Action buttons
	 *
	 * @param (String}	action
	 */
	updateFleetActions : function(action, data){
		switch(action) {
			case 'return_whole':
				this.elements.returnPartialFleetButton.removeClass('hideContainer').addClass('disabled');
				this.enableReturnMode();
				this.checkInputFields();
				break;
			case 'return_partial':
				this.elements.returnWholeFleetButton.removeClass('hideContainer');
				this.checkInputFields();
				break;
			case 'recall':
				this.secondTimer.attach('return', this);
				this.elements.recallFleetButton.removeClass('hideContainer');
				if (data.remaining_seconds_recall > 0) {
					this.elements.recallFleetButton.removeClass('disabled');
					this.elements.recallPossibleText.removeClass('hideContainer');
					this.elements.recallNotPossibleText.addClass('hideContainer');
					this.elements.recallTime.removeClass('hideContainer');
				} else {
					this.elements.recallFleetButton.addClass('disabled');
					this.elements.recallPossibleText.addClass('hideContainer');
					this.elements.recallNotPossibleText.removeClass('hideContainer');
					this.elements.recallTime.addClass('hideContainer');
				}
				this.checkInputFields();
				break;
		}
	},

	/**
	* add an Item to the Grid
	*
	* @param (Object}	grid
	* @param (String}	species
	* @param (String}	unit
	* @param (Object}	amount
	* @param (Number}	index
	*/
	addItem : function(grid, species, unit, name, amount, index) {
		var item = Imperion.Interface.FleetSummary.Factory.gridItem(this, species, unit, name, amount);
		this.items[index] = item;
	},

	/**
	* on Item click set the amount of maximum ships to withdraw
	*
	* @param (Object}	item
	*/
	itemClick : function(item) {
		if (this.returnMode) {
			item.setAmountToWithdraw(item.getMaxAmount());
		}
	},
	
	
	checkInputFields: function() {
		this.items.each(function(item) {
			if (item.maxAmount == 0) {
				item.elements.input.addClass('disabled');
				item.elements.input.setProperty('disabled', 'disabled');
			}
		});
	},

	/**
	 * Toggle the Returnmode
	 */
	toggleReturnButton : function(state) {
		if (state) {
			this.elements.returnPartialFleetButton.removeClass('hideContainer');
			this.returnMode = true;
		} else {
			this.elements.returnPartialFleetButton.addClass('hideContainer');
			this.returnMode = false;
		}
	},

	enableReturnMode : function() {
		this.items.each(function(item) {
			item.elements.input.removeClass('disabled');
			item.elements.input.removeProperty('disabled');
		});
		this.elements.container.addClass('return');
		this.returnMode = true;
	},

	disableReturnMode : function() {
		this.items.each(function(item) {
			item.elements.input.addClass('disabled');
			item.elements.input.setProperty('disabled', 'disabled');
		});
		this.elements.container.removeClass('return');

		this.returnMode = false;
	},

	updateDetails : function(grid) {
		this.invasionCountdown = 0;
		if (this.elements.invasionCountdown = this.elements.container.getElement('.invasionBox .countdown')) {
			if (!this.secondTimer) {
				this.secondTimer = Imperion.Util.Factory.secondTimer();
			};
			this.invasionSeconds = this.elements.invasionCountdown.get('text');
			this.secondTimer.attach('invasion', this);
			this.elements.invasionCountdown.set('text', this.user.formatDuration(this.invasionSeconds));
		}
	},

	timerStep : function (timer, name) {
		switch(name) {
			case 'invasion':
				if (0 === this.invasionSeconds) {
					this.secondTimer.detach('invasion');
					window.location.reload();
					break;
				};
				this.elements.invasionCountdown.set('text', this.user.formatDuration(--this.invasionSeconds));
				break;
			case 'return':
				if (0 === this.recallSeconds) {
					this.secondTimer.detach('return');
					this.disableReturnMode();
					this.elements.recallFleetButton.addClass('disabled');
					this.elements.recallPossibleText.addClass('hideContainer');
					this.elements.recallNotPossibleText.removeClass('hideContainer');
					this.elements.recallTime.addClass('hideContainer');
					break;
				}

				this.elements.recallTime.set('text', this.user.formatDuration(--this.recallSeconds));

				break;
		}
	},

	checkReturnFleet : function() {
		var sum = 0;
		this.items.each(function(item) {
			var v = +item.elements.input.get('value');
			sum += v;
		}, this);

		if (sum > 0) {
			this.elements.returnPartialFleetButton.removeClass('disabled');
		} else {
			this.elements.returnPartialFleetButton.addClass('disabled');
		}
	},

	onCleanUp : function() {
		if (this.secondTimer) {
			this.secondTimer.detach('invasion');
			this.secondTimer.detach('return');
		}
		delete this.items;
		this.cleanUp();
	},

	/**
	 * main event handler
	 *
	 * all registered events will be processed here
	 *
	 * @param {Element.Event}	eventObject
	 * @param {Hash}			params
	 *
	 * @returns {Boolean}
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action  = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'return_partial':
				if (this.elements.returnPartialFleetButton.hasClass('disabled')) {
					break;
				}
				this.elements.mode.set('value', action);
				this.elements.return_form.action = '/fleet/mission/return';
				this.context.submitForm(this.elements.return_form);
				break;
			case 'return_whole':
				if (this.elements.returnWholeFleetButton.hasClass('disabled')) {
					break;
				}
				this.elements.mode.set('value', action);
				this.elements.return_form.action = '/fleet/mission/return';
				this.context.submitForm(this.elements.return_form);
				break;
			case 'recall':
				if (this.elements.recallFleetButton.hasClass('disabled')) {
					break;
				}
				this.elements.mode.set('value', action);
				this.elements.return_form.action = '/fleet/mission/recall';
				this.context.submitForm(this.elements.return_form);
				break;
		}
		return false;
	},

	/**
	* Load Elements
	*/
	loadElements : function() {
		this.elements.container = this.dialog.elements.container.getElement('.grid');
		this.elements.list = this.elements.container.getElement('ul');

		this.elements.actions = this.dialog.elements.container.getElement('.actions');
		this.elements.return_form = this.dialog.elements.container.getElement('form.return');
		this.elements.returnPartialFleetButton = this.elements.actions.getElement('.returnPartial');
		this.elements.attackFleetButton = this.elements.actions.getElement('.attack');
		this.elements.returnWholeFleetButton = this.elements.actions.getElement('.returnWhole');
		this.elements.recallFleetButton = this.elements.actions.getElement('.recall');
		this.elements.id_fleet = this.elements.container.getElement('.id_fleet');
		this.elements.mode = this.elements.container.getElement('.return_mode');

		this.elements.recall_countdown = this.list.elements.container.getElement('.recall_countdown');
		this.elements.recallPossibleText = this.elements.recall_countdown.getElement('.recallPossibleText');
		this.elements.recallNotPossibleText = this.elements.recall_countdown.getElement('.recallNotPossibleText');
		this.elements.recallTime = this.elements.recall_countdown.getElement('.time');

		this.elements.recallFleetButton.addClass('disabled');

		this.addEvent('click', this.elements.returnPartialFleetButton, $H({
			action : 'return_partial'
		}));

		this.addEvent('click', this.elements.returnWholeFleetButton, $H({
			action : 'return_whole'
		}));

		this.addEvent('click', this.elements.recallFleetButton, $H({
			action : 'recall'
		}));
	}
});

Imperion.Interface.FleetSummary.GridItem = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event],

	options : {
	},

	parentGrid : null,

	state : '',

	maxAmount : 0,

	ship : '',

	name : 'unknown',

	actions : null,

	/**
	* a grid item
	*
	* @param (Object}	request
	* @param {String}	species
	* @param {String}	ship
	* @param {String}	amount
	*
	* @constructs
	*/
	initialize : function(grid, species, ship, name, amount, actions) {
		this.parentGrid = grid;
		this.ship = ship;
		this.name = name;
		this.maxAmount = amount;
		this.actions = actions;
		this.loadElements();

		this.show();

		switch (this.parentGrid.type) {
			case FLEET_LIST_TYPE_ORBITAL  :
			case FLEET_LIST_TYPE_INCOMING :
			case FLEET_LIST_TYPE_OUTGOING :
			case FLEET_LIST_TYPE_WORKING  :
				break;
		}

		if ('' !== amount && +amount > 0) {
			this.elements.icon.removeClass('disabled');
		}

		this.parentGrid.elements.list.addClass(species.toLowerCase());
		this.elements.icon.addClass('ICON_' + ship);

		this.elements.amount.set('text', (+amount >= 0)?amount:'??');

		this.elements.container.inject(this.parentGrid.elements.list);

		this.elements.input.setProperty('name', 'ships[' + ship + ']');
	},

	/**
	* returns the max amount of available ships
	*/
	getMaxAmount : function() {
		return this.maxAmount;
	},

	/**
	* set the amount of ships to withdraw
	*
	* @param (Object}	amount
	*/
	setAmountToWithdraw : function(amount) {
		if (amount === this.elements.input.get('value') || amount === -1) {
			amount = '';
		}
		this.elements.input.set('value', amount);
	},

	/**
	 * main event handler
	 *
	 * all registered events will be processed here
	 *
	 * @param {Element.Event}	eventObject
	 * @param {Hash}			params
	 *
	 * @returns {Boolean}
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action  = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'show_help':
				if(this.ship && this.ship !== '') {
					this.showHelpDialog('SHIP', this.ship);
				}
				break;
			case 'item_click':
				this.parentGrid.itemClick(this);
				this.parentGrid.checkReturnFleet();
				eventObject.stop();
				break;
			case 'show_tooltip':
				if (this.ship.length > 0) {
					var unitTooltipContent = new Imperion.Interface.Gui.UnitTooltipContent(this.ship, this.parentGrid.isOwnFleet);
					this.parentGrid.tooltip.setHtml(unitTooltipContent.get());
					this.parentGrid.tooltip.show();
				}
				break;
			case 'hide_tooltip':
				this.parentGrid.tooltip.hide();
				break;
			case 'input_change':
				this.parentGrid.checkReturnFleet();
				break;
		}
		return false;
	},

	loadElements : function() {
		this.elements.container = this.getClonedTemplate('FleetSummary-Item');
		this.elements.icon = this.elements.container.getElement('A');
		this.addEvent('click', this.elements.icon, $H({
			action : 'show_help'
		}));

		this.addEvent('mouseenter', this.elements.icon, $H({
			action : 'show_tooltip'
		}));

		this.addEvent('mouseleave', this.elements.icon, $H({
			action : 'hide_tooltip'
		}));

		this.elements.amount = this.elements.container.getElement('P.amount');
		this.addEvent('click', this.elements.amount, $H({
			action : 'item_click'
		}));

		this.elements.input = this.elements.container.getElement('input');

		this.addEvent('keyup', this.elements.input, $H({
			action : 'input_change'
		}))
	}
});

Imperion.Interface.FleetSummary.Handle = new Class({
	Implements : [Imperion.Event],

	options : {

	},

	area : null,

	list : null,

	grid : null,

	initialize : function(request, response, dialog, context, handle) {
		this.list = Imperion.Interface.FleetSummary.Factory.list(request, response, dialog, context, this);
		this.grid = Imperion.Interface.FleetSummary.Factory.grid(request, response, dialog, context, this);
		this.dataHandler = Imperion.Interface.FleetSummary.Factory.data();
		dialog.attach('FleetSummary'+request.type, this.list);
		dialog.attach('FleetSummaryGrid', this.grid);

		this.area = Imperion.Interface.FleetSummary.Factory.area();

		//first own fleet should be preselected
		if(response.preselect){
			var responseDummy = Imperion.Util.Factory.responseDummy(response.preselect.data,response.preselect.html);
			this.updateGrid(responseDummy);
			this.list.groups[0].items[0].activate();
		}
	},

	loadGridData : function(link) {
		var params = $H();
		var hash = link.hash?link.hash.substr(1):'';
		var pairs = hash.split(';');
		pairs.each(function(item) {
			var pair = item.split('=');
			params.include(pair[0], pair[1]);
		}, this);
		this.dataHandler.requestFleetSummary(params.fleetid, this.updateGrid.bindNew(this));
	},

	emptyGrid : function(){
		this.grid.emptyGrid(true);
		this.area.destroy();
	},

	updateGrid : function(response) {
		this.grid.updateGrid(response);
		this.area.setContent(response);
		this.grid.updateDetails(this.grid);
	},

	clean : function() {
		// dummy for pauls santiy check. the real cleanup is happening in
		// the grid.js and list.js, attached to the dialog in initialize()
		// and listening to the onCleanUp event from the dialog.
	}
});

Imperion.Interface.FleetSummary.List = new Class(
/** @lends Imperion.Interface.FleetSummary.List.prototype	*/
{
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event],

	/**
	 * Groups
	 *
	 * @var Object
	*/
	groups : $H({}),

	/**
	 * secondTimer
	 *
	 * @var Object
	*/
	secondTimer : null,

	/**
	 * Type
	 *
	 * @var Object
	*/
	type : null,

	/**
	 * dialog
	 *
	 * @var Object
	*/
	dialog : null,

	/**
	 * handle
	 *
	 * @var Object
	*/
	handle : null,

	/**
	 * scrollbar
	 *
	 * @var Object
	*/
	scrollbar : null,

	/**
	 * fleet transport options
	 *
	 * @var Object
	 */
	options : {

	},

	/**
	 * the fleet list
	 */
	initialize : function(request, response, dialog, context, handle) {
		this.groups = $H({});
		this.handle = handle;
		this.dialog = dialog;
		this.context = context;
		this.type = request.type;
		this.user = Imperion.Util.Registry.get('user');
		this.loadElements();
		this.getGroups();

		this.secondTimer = Imperion.Util.Factory.secondTimer();
		this.secondTimer.attach('FleetSummary' + this.type, this);

		setTimeout(function() {
			this.scrollbar = Imperion.Interface.Tools.Factory.scrollbar(this.elements.scrollbar, {});
			this.scrollbar.attachTo(this.elements.entries, this.elements.list);
		}.bindNew(this), 0);
	},

	update : function() {
		if (0 === this.groups.getLength()) {
			//this.elements.container.destroy();
		}
	},

	getGroups : function () {
		var _items = this.elements.entries.getElements('li.group');
		_items.each(function (item, index) {
			this.groups.include(index, Imperion.Interface.FleetSummary.Factory.listGroup(item, this, index));
		}, this);
	},

	itemClick : function(item){
		this.elements.container.getElement('.active').removeClass('active');
		item.activate();
		this.handle.loadGridData(item.elements.link);
	},

	timerStep : function () {
		this.groups.each(function (group, index) {
			group.items.each(function(item, index) {
				item.countdown();
			});
		});
	},

	onCleanUp : function () {
		this.secondTimer.detach('FleetSummary' + this.type);
		this.groups.each(function (group, index) {
			group.cleanup();
		});
		//this.elements.container.destroy();
	},

	/**
	 * load elements
	 *
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.dialog.elements.container;
		this.elements.entries = this.elements.container.getElement('.entries');
		this.elements.list = this.elements.entries.getElement('.fleets');
		this.elements.scrollbar = this.elements.container.getElement('.bar');
	}
});

Imperion.Interface.FleetSummary.ListGroup = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event],

	parentList : null,

	index : 0,

	items : $H(),
	
	initialize : function(groupElement, parentList, index){
		this.items = $H({});
		this.loadElements(groupElement);
		
		this.parentList = parentList;
		this.index = index;
		this.getItems();
	},
	
	/**
	 * decrease the summary counter
	 * 
	 * @returns	{Void}
	 */
	decreaseCounter : function() {
		if(this.elements.summary !== null) {
			var currentVal = this.elements.summary.get('text').toInt();
			currentVal--;
			if(currentVal > 0) {
				this.elements.summary.set('text', currentVal);
			}
		}
	},

	update : function() {
		if (0 === this.items.getLength()) {
			this.elements.container.destroy();
		}
	},

	cleanup : function () {
		delete this.parentList.groups[this.index];
		this.elements.container.destroy();
		this.parentList.update();

		this.items.each(function(item, index) {
			item.cleanup();
		});

		delete this.items;
	},

	getItems : function () {
		var _items = this.elements.container.getElements('li.entry');
		_items.each(function (item, index) {
			this.items.include(index, Imperion.Interface.FleetSummary.Factory.listItem(item, this, index));
		}, this);
	},

	loadElements : function(el){
		this.elements.container = el;
		this.elements.headline = this.elements.container.getElement('li.subHeadline');
		
		this.elements.summary	= this.elements.container.getElement('.summaryCounter');
	}
});

Imperion.Interface.FleetSummary.ListItem = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Imperion.Event],

	parentList : null,

	seconds : null,

	index : 0,

	/**
	 * fleet transport options
	 *
	 * @var Object
	 */
	options : {

	},

	/**
	 * the fleet list
	 */
	initialize : function(itemElement, parentGroup, index) {
		var parentList = parentGroup.parentList;
		this.index = index;
		this.loadElements(itemElement);
		this.parentList = parentList;
		this.parentGroup = parentGroup;
		if ('element' === $type(this.elements.container.getElement('.seconds'))) {
			this.setupCountdown();
			this.countdown();
		}
	},

	activate : function() {
		this.elements.container.addClass('active');
	},

	setupCountdown : function () {
		this.seconds = this.elements.container.getElement('.seconds').get('text').toInt();
		this.elements.container.getElement('.seconds').set('text', '00:00:00');
	},

	countdown : function () {
		if (this.seconds === 0 || this.seconds < 0) {
			this.finishItem();
		};
		if (this.seconds && this.seconds >= 0) {
			var time = this.parentList.user.formatDuration(this.seconds--);
			if (-1 === this.seconds) {
				this.finishItem();
				return;
			}
			this.elements.seconds.set('text', time);
		}
	},

	finishItem : function () {
		this.cleanup();
		if (this.parentGroup.items.getLength() < 0) {
			this.parentGroup.cleanup();
		}
		else {
			this.parentGroup.decreaseCounter();
		}
	},

	cleanup : function () {
		delete this.parentGroup.items[this.index];
		this.elements.container.destroy();
		this.parentGroup.update();
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param {Element.Event}	eventObject
	 * @param {Hash}			params
	 *
	 * @returns {Boolean}
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action  = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'item_click':
				if ('A' == eventObject.target.tagName) {
					window.location.href = eventObject.target.href;
				} else {
					this.parentList.itemClick(this);
					eventObject.stop();
				}
				break;
		}
		return false;
	},

	/**
	 * load DOM-Elements
	 *
	 * @returns {Void}
	 */
	loadElements : function(el) {
		this.elements.container = el;
		this.elements.seconds = this.elements.container.getElement('.seconds');
		this.elements.link = this.elements.container.getElement('a');

		this.addEvent('click', this.elements.container, $H({
			action  : 'item_click'
		}));
	}
});

Imperion.Interface.Surface.Factory = new Class.Singleton(
	/** @lends Imperion.Interface.Surface.Factory.prototype */
	{
		/**
		 * prepare the factory
		 * 
		 * @class Imperion Sidebar Factory
		 * 
		 * @constructs
		 */
		initialize : function() {
			
		},
		
		/**
		 * create the turret surface class
		 * 
		 * @param	{Array}		turrets
		 * @param	{String}	state
		 * 
		 * @returns {Imperion.Interface.Surface.Turrets}
		 */
		turrets : function(turrets, state) {
			return new Imperion.Interface.Surface.Turrets(
				turrets,
				state,
				Imperion.Factory.registry().get('planet'),
				Imperion.Factory.registry().get('user'),
				Imperion.Interface.Gui.Factory.tooltip()
			);
		},
		
		/**
		 * create the account module
		 * 
		 * @param	{Object}	params	params for turret class
		 * 
		 * @returns {Imperion.Interface.Surface.Turrets}
		 */
		turretsByObject : function(params) {
			return this.turrets(params.turrets, params.state);
		},
		
		/**
		 * create a turret item
		 * 
		 * @param	{Object}								data
		 * @param	{Imperion.Interface.Surface.Turrets}	parentClass
		 * 
		 * @returns {Imperion.Interface.Surface.Turrets}
		 */
		turretsItem : function(data, parentClass) {
			return new Imperion.Interface.Surface.TurretsItem(data, parentClass);
		}
	}
);
Imperion.Interface.Surface.Root = new Class(
	/** @lends Imperion.Interface.Surface.Root.prototype */
	{
		Implements : [Imperion.Module, Imperion.Util.Class, Imperion.Template],
		
		/**
		 * currently loaded planet
		 * 
		 * @type Imperion.Data.LocationPlanet
		 */
		planet : null,

		/**
		 * tooltip class
		 * 
		 * @type	Imperion.Interface.Gui.Tooltip
		 */
		tooltip : null,
		
		/**
		 * registered items
		 * 
		 * @type 	array
		 */
		items : null,
		
		/**
		 * surface root class
		 * 
		 * @class		Imperion Sidebar Factory
		 * 
		 * @param		{Imperion.Data.LocationPlanet}		currentPlanet
		 * @param		{Imperion.Data.User}				currentUser
		 * @param		{Imperion.Interface.Gui.Tooltip}	tooltip
		 * 
		 * @constructs
		 */
		initialize : function(currentPlanet, currentUser, tooltip) {
			this.planet = currentPlanet;
			this.setUser(currentUser);
			this.tooltip = tooltip; 
			//
			this.items = new Array();
			//
			this.loadElements();
		},
		
		/**
		 * load surface elements
		 * 
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('PlanetSurfaceList');
			this.elements.trigger	= this.getTemplate('PlanetSurfaceTrigger');
		}
	}
);

Imperion.Interface.Surface.RootItem = new Class(
	/** @lends Imperion.Interface.Surface.RootItem.prototype */
	{
		Implements : [Imperion.Util.Class, Imperion.Event],
		
		/**
		 * iktem data
		 * 
		 * @type	Object
		 */
		data : null,
		
		/**
		 * parent Class
		 * 
		 * @type	Imperion.Interface.Surface.Root
		 */
		parentClass : null,
		
		/**
		 * surface root class
		 * 
		 * @class	Imperion Sidebar Factory
		 * 
		 * @param	{Object}							data
		 * @param	{Imperion.Interface.Surface.Root}	parentClass
		 * 
		 * @constructs
		 */
		initialize : function(data, parentClass) {
			this.parentClass = parentClass;
			//
			this.loadElements();
			//
			this.update(data);
			//
			this.elements.container.inject(this.parentClass.elements.container);
			this.elements.trigger.inject(this.parentClass.elements.trigger);
		},
		
		/**
		 * update the item
		 * 
		 * @params	{Object}	newData
		 * 
		 * @returns{Void}
		 */
		update : function(newData) {
			this.data = newData;
			this.setImage(this.data.type);
		},
		
		/**
		 * set the image
		 * 
		 * @param	{String}	name
		 * 
		 * @returns	{Void}
		 */
		setImage : function(name) {
			this.elements.image.set('src', this.parentClass.options.path + '/' + this.parentClass.user.getKind() + '/' + this.parentClass.planet.getPlanetType() + '/' + name + '.png');
		},
		
		/**
		 * set the position of the item
		 * 
		 * @param	{Object}	position
		 * 
		 * @returns {Void}
		 */
		setPosition : function(position) {
			this.elements.container.setPosition({
				x : position.x - 160,
				y : position.y - 186
			});
			this.elements.trigger.setPosition({
				x : position.x - 20,
				y : position.y + 15
			});
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'enter':
					this.parentClass.tooltip.setText(this.data.caption);
					this.parentClass.tooltip.show();
					break;
				case 'leave':
					this.parentClass.tooltip.hide();
					break;
			}
			return true;
		},
		
		/**
		 * show
		 * 
		 * @return void
		 */
		show : function() {
			if(this.elements.container.hasClass('hideContainer')) {
				this.elements.container.removeClass('hideContainer');
				this.elements.trigger.removeClass('hideContainer');
			}
		},
		
		/**
		 * hide
		 * 
		 * @return void
		 */
		hide : function() {
			if(!this.elements.container.hasClass('hideContainer')) {
				this.elements.container.addClass('hideContainer');
				this.elements.trigger.addClass('hideContainer');
			}
		},
		
		/**
		 * load elements
		 * 
		 * @param	{String}	templateName
		 * 
		 * @returns	{Void}
		 */
		loadElements : function(templateName) {
			this.elements.container = this.parentClass.getClonedTemplate(templateName + 'Item');
			this.elements.trigger	= this.parentClass.getClonedTemplate(templateName + 'Trigger');
			this.elements.image		= this.elements.container.getElement('IMG');
			
			this.addEvent('click', this.elements.trigger, $H({
				action : 'show_help'
			}));
			
			this.addEvent('mouseenter', this.elements.trigger, $H({
				action : 'enter'
			}));
			this.addEvent('mouseleave', this.elements.trigger, $H({
				action : 'leave'
			}));
		}
	}
);



Imperion.Interface.Surface.Turrets = new Class(
	/** @lends Imperion.Interface.Surface.Turrets.prototype */
	{
		Extends : Imperion.Interface.Surface.Root,
		
		/**
		 * options
		 * 
		 * @type	Object
		 */
		options 		: {
			count		: 5,
			path		: '/images/turret/surface',
			positions	: {
				1 : {
					x : 197,
					y : 585
				},
				2 : {
					x : 388,
					y : 585
				},
				3 : {
					x : 579,
					y : 585
				},
				4 : {
					x : 771,
					y : 585
				},
				5 : {
					x : 907,
					y : 515
				}
			}
		},
		
		/**
		 * turrets
		 * 
		 * @type	Array
		 */
		turrets : null,
		
		/**
		 * state of turrets [on|off]
		 * 
		 * @type	String
		 */
		state : null,
		
		/**
		 * turrets on surface class
		 * 
		 * @augments	Imperion.Interface.Surface.Root
		 * @class		Imperion Surface Turret Class
		 * 
		 * @param		{Array}								turrets
		 * @param		{String}							state
		 * @param		{Imperion.Data.LocationPlanet}		currentPlanet
		 * @param		{Imperion.Data.User}				currentUser
		 * @param		{Imperion.Interface.Gui.Tooltip}	tooltip
		 * 
		 * @constructs
		 */
		initialize : function(turrets, state, currentPlanet, currentUser, tooltip) {
			//
			this.turrets	= turrets;
			this.state		= state;
			//
			this.parent(currentPlanet, currentUser, tooltip);
			//update the class
			this.update(turrets);
		},
		
		/**
		 * change state
		 * 
		 * @param	{String}	newState
		 * 
		 * @returns	{Void}
		 */
		changeState : function(newState) {
			if(newState !== this.state) {
				this.state = newState;
				for(var i = 0 ; i < this.options.count ; i++) {
					this.items[i].setImage(this.items[i].data.type);
				}
			}
		},
		
		/**
		 * request wrapping for change state
		 * 
		 * @param	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_changeState : function(params) {
			this.changeState(params.state);
		},
		
		/**
		 * update the turrets on surface
		 * 
		 * @param	{Object}	turrets
		 * 
		 * @returns	{Void}
		 */
		update : function(turrets) {
			for(var i = 0 ; i < this.options.count ; i++) {
				if(!turrets[i]) {
					throw '//ERROR HANDLING - turret has to be complete set';
				}
				this.addTurret(i, turrets[i]);
			}
		},
		
		/**
		 * object wrapping for external requests
		 * 
		 * @params	{Object}	params
		 * 
		 * @returns	{Void}
		 */
		_update : function(params) {
			this.update(params.turrets);
		},
		
		/**
		 * add turret
		 * 
		 * @param	{Number}	position
		 * @param	{Object}	data
		 * 
		 * @returns	{Void}
		 */
		addTurret : function(position, data) {
			if(this.items[position] === undefined) {
				this.items[position] = Imperion.Interface.Surface.Factory.turretsItem(data, this);
			}
			else {
				this.items[position].update(data);
			}
		}
	}
);

Imperion.Interface.Surface.TurretsItem = new Class(
	/** @lends Imperion.Interface.Surface.TurretsItem.prototype */
	{
		Extends : Imperion.Interface.Surface.RootItem,
		
		/**
		 * turret item class
		 * 
		 * @augments	Imperion.Interface.Surface.RootItem
		 * @class		Imperion Surface Turret Class
		 * 
		 * @param		{Object}								data
		 * @param		{Imperion.Interface.Surface.Turrets}	parentClass
		 * 
		 * @constructs
		 */
		initialize : function(data, parentClass) {
			//
			this.parent(data, parentClass);
			//set position
			this.setPosition(this.parentClass.options.positions[this.data.ground]);
		},
		
		/**
		 * update the item
		 * 
		 * @param	{Object}	turretData
		 * 
		 * @returns	{Void}
		 */
		update : function (turretData) {
			this.parent(turretData);
			
			//if more then 0 turrets -> show else  -> hide
			if(this.data.amount > 0) {
				this.elements.value.set('text', this.parentClass.user.formatNumber(this.data.amount));
				this.show();
			}
			else {
				this.hide();
			}
		},
		
		/**
		 * extend set image
		 * 
		 * @param	{String}	name
		 * 
		 * @returns	{Void}
		 */
		setImage : function(name) {
			this.parent(this.parentClass.state + '/' + name);
		},
		
		/**
		 * main event handler
		 * 
		 * all registered events will processed here
		 * 
		 * @param Element.Event eventObject
		 * @param Hash params
		 * 
		 * @return boolean
		 */
		eventHandler : function(eventObject, params) {
			//call parent
			this.parent(eventObject, params);
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'show_help':
					this.showHelpDialog('TURRET', this.data.type);
					break;
			}
			return true;
		},
		
		/**
		 * load dom elements
		 * 
		 * @returns	{Void}
		 */
		loadElements : function() {
			this.parent('SurfaceTurret');
			this.elements.value		= this.elements.container.getElement('.value');
		}	
	}
);
var g = new Class.Singleton({
	d : null,
	initialize : function() {
		this.d = new Array();
	},
	a : function(x,y) {
		if(!this.d[x]) {
			this.d[x] = new Array();
		}
		this.d[x][y] = 1;
	}
});

/**
 * Constants
 */

var MAP_MOVE_LEFT 		= { x : -1, y :  0 };
var MAP_MOVE_UP_LEFT 	= { x : -1, y :  1 };
var MAP_MOVE_UP 		= { x :  0, y :  1 };
var MAP_MOVE_UP_RIGHT 	= { x :  1, y :  1 };
var MAP_MOVE_RIGHT 		= { x :  1, y :  0 };
var MAP_MOVE_DOWN_RIGHT = { x :  1, y : -1 };
var MAP_MOVE_DOWN 		= { x :  0, y : -1 };
var MAP_MOVE_DOWN_LEFT 	= { x : -1, y : -1 };

var MAP_ZOOM_IN 		= { w :  1, h :  1 };
var MAP_ZOOM_OUT 		= { w : -1, h : -1 };
var MAP_ZOOM_RESET 		= { w :  0, h :  0 };

var GALAXY_TUTORIAL = 1;
var GALAXY_MID_GAME = 2;
var GALAXY_END_GAME = 3;

var SYSTEM_ORB_TYPE_UNDEFINED 	= 'UNDEFINED';
var SYSTEM_ORB_TYPE_PLANET 		= 'PLANET';
var SYSTEM_ORB_TYPE_DEBRIS 		= 'DEBRIS';
var SYSTEM_ORB_TYPE_COMET 		= 'COMET';

Imperion.Map.Config.Root = new Class({
	Implements : [Options],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		general : {
			path : '/images/map/'
		},
		viewport : {
			width: 963,
			height: 637,
			halfWidth : 0,
			halfHeight : 0,
			centerX : 0,
			centerY : 0,
			changeX : 0,
			changeY : 0
		},
		quadrant : {
			countX : 9,
			countY : 7,
			offsetX : 0,
			offsetY : 0,
			width: 107,
			height : 91,
			preload : {
				x : 3,
				y : 3
			}
		},
		stars : {
			factor : 1,
			speedFactor : 0.025,
			quadrantChance : 25,
			zoom : 0.05,
			star : {
				width: 8,
				height : 8
			},
			zoomFactorToSystem : 3,
			zoomFactorToOrb : 4,
			zoomOutFx : {
				duration : 400,
				fps : 35,
				transition : Fx.Transitions.Quad
			},
			zoomInFx : {
				duration : 400,
				fps : 35,
				transition : Fx.Transitions.Quad
			}
		},
		/**
		 * minimap global configuration
		 */
		minimap : {
			//zoom config
			zoomOutFx : {
				duration : 400,
				fps : 50,
				transition : Fx.Transitions.Quad
			}
		},
		/**
		 * Galaxy global configuration
		 */
		galaxy : {
			//calculated value
			halfWidth : 0,
			//calculated value
			halfHeight : 0,
			//galaxy item configuration (star in galaxy view)
			item : {
				//bind events to item which will notify listener of occour
				listenerEvents : ['mouseenter']
			},
			//zoom options
			zoomOutFx : {
				duration : 400,
				fps : 35,
				transition : Fx.Transitions.Quad
			},
			//zoom factor if galaxy zoom from galaxy view to system view
			zoomFactorIn : 24,
			//??
			zoomInFx : {
				duration : 400,
				fps : 35,
				transition : Fx.Transitions.Quad
			}
		},
		/**
		 * system global configuration
		 */
		system : {
			planet : {
				size : [50, 80, 120],
				variation : {
					8 : [1, 1],
					7 : [1, 1],
					6 : [1, 1],
					5 : [1, 2],
					4 : [1, 2],
					3 : [2, 3],
					2 : [2, 3],
					1 : [2, 3]
				}
			},
			comet : {
				width: 70,
				height: 70,
				halfWidth : 35,
				halfHeight : 35
			},
			debris : {
				side		: 25,
				halfSide	: 12
			},
			rings : {
				8 : [
				     { x : 205 , y : 65},
				     { x : 290 , y : 40}
				],
				7 : [
				     { x : 116 , y : 103},
				     { x : 373 , y : 33}
				],
				6 : [
				     { x : 183 , y : 124},
				     { x : 270 , y : 108},
				     { x : 444 , y : 44}
				],
				5 : [
				     { x : 77  , y : 174},
				     { x : 390 , y : 127},
				     { x : 534 , y : 66}
				],
				4 : [
				     { x : 183 , y : 224},
				     { x : 294 , y : 211},
				     { x : 488 , y : 170},
				     { x : 631 , y : 114}
				],
				3 : [
				     { x : 72  , y : 304},
				     { x : 414 , y : 272},
				     { x : 614 , y : 227},
				     { x : 751 , y : 178}
				],
				2 : [
				     { x : 256 , y : 392},
				     { x : 548 , y : 355},
				     { x : 746 , y : 311},
				     { x : 885 , y : 268}
				],
				1 : [
				     { x : 86  , y : 538},
				     { x : 236 , y : 533},
				     { x : 390 , y : 520},
				     { x : 555 , y : 505},
				     { x : 727 , y : 476},
				     { x : 889 , y : 445}
				]
			},
			enableBgClickZoomOut: true
		},
		orb : {
			planet : {
				images : {
					'UNDEFINED'		: 'planets/undefined.png',
					'TERRESTRIAL'	: 'planets/terran.png',
					'DESERT'		: 'planets/desert.png',
					'ICE'			: 'planets/ice.png',
					'WATER'			: 'planets/water.png',
					'VOLCANO'		: 'planets/volcano.png',
					'GAS'			: 'planets/gas.png',
					'ALIEN01'		: 'planets/alien01.png',
					'ALIEN02'		: 'planets/alien02.png'
				},
				zoomPos : {
					x : 371,
					y : 39
				},
				zoomSize : 230,
				listenerEvents : ['contextmenu']
			},
			comet : {
				images : ['comets/comet.png'],
				zoomPos : {
					x : 391,
					y : 0
				},
				zoomSize : 230,
				factor : 6,
				listenerEvents : ['contextmenu']
			},
			debris : {
				images : ['debris/debris.png'],
				zoomPos : {
					x : 381,
					y : 39
				},
				zoomSize : 230,
				factor : 20,
				listenerEvents : ['contextmenu']
			}
		},
		performance : {
			starLayerCount : 5,
			fps : 50
		}
	},
		
	/**
	 * registry
	 * 
	 * @var Object
	 */
	registry : {
		fxRunningSystem : false,
		fxRunningGalaxy : false,
		fxRunningMinimap: false,
		fxRunningOrb : false,
		starLayerZoomPos : {
			x : null,
			y : null
		}
	},
	
	/**
	 * current galaxy
	 * 
	 * @var int
	 */
	currentGalaxy : 0,
	
	/**
	 * init the options class
	 * 
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(options) {
		//this.currentGalaxy = GALAXY_MID_GAME;
		this.setOptions(options);
		this.registry = {
			fxRunningSystem : false,
			fxRunningGalaxy : false,
			fxRunningMinimap: false,
			fxRunningOrb : false,
			starLayerZoomPos : {
				x : null,
				y : null
			}
		};
		//calculations
		this.options.viewport.halfWidth = Math.floor(this.options.viewport.width / 2);
		this.options.viewport.halfHeight = Math.floor(this.options.viewport.height / 2);
		
		this.options.viewport.centerX = (this.options.quadrant.countX / 2).toInt();
		this.options.viewport.centerY = (this.options.quadrant.countY / 2).toInt();
		
		this.options.viewport.changeX = this.options.viewport.width + (this.options.quadrant.preload.x * 2) * this.options.quadrant.width;
		this.options.viewport.changeY = this.options.viewport.height + (this.options.quadrant.preload.y * 2) * this.options.quadrant.height;
		
		this.options.quadrant.offsetX = this.options.quadrant.countX + this.options.quadrant.preload.x * 2;
		this.options.quadrant.offsetY = this.options.quadrant.countY + this.options.quadrant.preload.y * 2;
		
		this.options.galaxy.halfWidth = Math.floor(this.options.galaxy.width / 2);
		this.options.galaxy.halfHeight = Math.floor(this.options.galaxy.height / 2);
		
	},
	
	getRealQuadrantLimitsX : function() {
		return {
			up : this.options.quadrant.countX + this.options.quadrant.preload.x,
			down : -1 * this.options.quadrant.preload.x
		};
	},
	getRealQuadrantLimitsY : function() {
		return {
			up : this.options.quadrant.countY + this.options.quadrant.preload.y,
			down : -1 * this.options.quadrant.preload.y
		};
	},
	getPercentWidth : function(orgWidth) {
		return orgWidth / this.options.viewport.width * 100;
	},
	getPercentHeight : function(orgHeight) {
		return orgHeight / this.options.viewport.height * 100;
	},
	
	/**
	 * calculates the real x coordinate
	 * 
	 * @param int x
	 * 
	 * @return int
	 */
	getRealX : function(x) {
		return x - this.options.viewport.centerX;
	},
	
	/**
	 * calculates the real y coordinate
	 *  
	 * @param int y
	 * 
	 * @return int
	 */
	getRealY : function(y) {
		return this.options.viewport.centerY - y;
	},
	
	/**
	 * calculate in game coordinates
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return Object
	 */
	getInGameCoords : function(x, y) {
		return {
			x : this.options.start.x + x,
			y : this.options.start.y + y
		};
	},
	
	/**
	 * get mouse coords
	 * 
	 * @param Event event
	 * 
	 * @return Object
	 */
	getMouseCoordsFromEvent : function(event) {
		return {
			x : event.event.layerX !== undefined ? event.event.layerX : event.event.offsetX,
			y : event.event.layerY !== undefined ? event.event.layerY : event.event.offsetY
		};
	},
	
	/**
	 * return viewport config
	 * 
	 * @return Object
	 */
	viewport : function() {
		return this.options.viewport;
	},
	
	/**
	 * return galaxy config
	 * 
	 * @return Object
	 */
	galaxy : function() {
		return this.options.galaxy;
	},
	galaxyItem : function() {
		return this.options.galaxy.item;
	},
	galaxyItemIcon : function() {
		return this.options.galaxy.item.icons;
	},
	galaxyMidGame : function() {
		return this.options.galaxy.midGame;
	},
	/*
	galaxyCurrent : function() {
		switch(this.currentGalaxy) {
			case GALAXY_TUTORIAL:
			
			break;
			case GALAXY_MID_GAME:
				return this.galaxyMidGame();
				break;
			case GALAXY_END_GAME:
				
				break;
		}
	},
	*/
	/**
	 * return quadrant config
	 * 
	 * @return Object
	 */
	quadrant : function() {
		return this.options.quadrant;
	},
	
	/**
	 * return system config
	 * 
	 * @return Object
	 */
	system : function() {
		return this.options.system;
	},
	systemItem : function(itemType) {
		switch(itemType) {
			case 'planet':
				return this.options.system.planet;
				break;
			case 'comet':
				return this.options.system.comet;
				break;
			case 'debris':
				return this.options.system.debris;
				break;
			default:
				throw '//ERROR HANDLING';
				break;
		}
	},
	
	/**
	 * get minimap
	 * 
	 * @return Object
	 */
	minimap : function() {
		return this.options.minimap;
	},
	
	/**
	 * get stars config
	 * 
	 * @return Object
	 */
	stars : function() {
		return this.options.stars;
	},
	
	/**
	 * get orb config
	 * 
	 * @return Object
	 */
	orb : function() {
		return this.options.orb;
	},
	orbPlanet : function() {
		return this.options.orb.planet;
	},
	orbComet : function() {
		return this.options.orb.comet;
	},
	orbDebris : function() {
		return this.options.orb.debris;
	},
	orbType : function(orbType) {
		switch(orbType) {
			case SYSTEM_ORB_TYPE_PLANET:
				return this.orbPlanet();
				break;
			case SYSTEM_ORB_TYPE_COMET:
				return this.orbComet();
				break;
			case SYSTEM_ORB_TYPE_DEBRIS:
				return this.orbDebris();
				break;
		}
		//ERROR HANDLING
	}
});
Imperion.Map.Config.Endgame = new Class(
	/** @lends Imperion.Map.Config.Endgame */
	{
		Extends : Imperion.Map.Config.Root,
		
		/**
		 * endgame options predefined
		 * 
		 * @type Object
		 */
		options : {
			//player can navigate to the following stages
			allowedStages : {
				MINIMAP	: true,
				GALAXY	: true,
				SYSTEM	: true,
				ORB		: true
			},
			/**
			 * minimap configuration
			 */
			minimap : {
				//scale the image in relation to 200 % of the viewport
				scaleProcent : 250,
				//zoom multiplicator
				zoomFactor : 4
			},
			/**
			 * galaxy configuration
			 */
			galaxy : {
				//width of galaxy
				width		: 0,
				//height of galaxy
				height		: 0,
				//offset to calculate correct system id (midgame width * midgame height)
				offset		: 0,
				//block info 
				block		: {
					//width of 1 block (for filename generation)
					width	: 50,
					//width of 1 block (for filename generation)
					height	: 50
				},
				//multiplicator for drag speed -> 0.3 means 30% of viewport width bei drag from left to right
				movement	: 0.5,
				//
				keyspeed	: 150,
				//
				loadAtFrame	: 10,
				//galaxy item configuration (star in galaxy view)
				item : {
					//width of item
					width: 24,
					//height of item
					height: 24,
					//position deformation flag
					deformation  : true,
					//icon image config
					icons : {
						'star_1'		: 'galaxy/s1.png',
						'star_2'		: 'galaxy/s2.png',
						'star_3'		: 'galaxy/s3.png',
						'star_4'		: 'galaxy/s4.png',
						'star_5'		: 'galaxy/s5.png',
						'star_1_frog'	: 'galaxy/s1_frog.png',
						'star_2_frog'	: 'galaxy/s1_frog.png',
						'star_3_frog'	: 'galaxy/s1_frog.png',
						'star_4_frog'	: 'galaxy/s1_frog.png',
						'star_5_frog'	: 'galaxy/s1_frog.png'
					}
				}
			}
		}
	}
);
Imperion.Map.Config.Midgame = new Class(
	/** @lends Imperion.Map.Config.Midgame */
	{
		Extends : Imperion.Map.Config.Root,
		
		/**
		 * midgame options predefined
		 * 
		 * @type Object
		 */
		options : {
			//player can navigate to the following stages
			allowedStages : {
				MINIMAP	: true,
				GALAXY	: true,
				SYSTEM	: true,
				ORB		: true
			},
			/**
			 * minimap configuration
			 */
			minimap : {
				//scale the image in relation to 200 % of the viewport
				scaleProcent : 125,
				//zoom multiplicator
				zoomFactor : 4
			},
			/**
			 * galaxy configuration
			 */
			galaxy : {
				//width of galaxy
				width		: 0,
				//height of galaxy
				height		: 0,
				//block info 
				block		: {
					//width of 1 block (for filename generation)
					width	: 50,
					//width of 1 block (for filename generation)
					height	: 50
				},
				//multiplicator for drag speed -> 0.3 means 30% of viewport width bei drag from left to right
				movement	: 0.5,
				//
				keyspeed	: 150,
				//
				loadAtFrame	: 10,
				//galaxy item configuration (star in galaxy view)
				item : {
					//width of item
					width: 24,
					//height of item
					height: 24,
					//position deformation flag
					deformation  : true,
					//icon image config
					icons : {
						'star_1'		: 'galaxy/s1.png',
						'star_2'		: 'galaxy/s2.png',
						'star_3'		: 'galaxy/s3.png',
						'star_4'		: 'galaxy/s4.png',
						'star_5'		: 'galaxy/s5.png',
						'star_1_frog'	: 'galaxy/s1_frog.png',
						'star_2_frog'	: 'galaxy/s1_frog.png',
						'star_3_frog'	: 'galaxy/s1_frog.png',
						'star_4_frog'	: 'galaxy/s1_frog.png',
						'star_5_frog'	: 'galaxy/s1_frog.png'
					}
				}
			}
		}
	}
);
Imperion.Map.Config.Tutorial = new Class(
	/** @lends Imperion.Map.Config.Tutorial */
	{
		Extends : Imperion.Map.Config.Root,
		
		/**
		 * midgame options predefined
		 * 
		 * @type Object
		 */
		options : {
			//player can navigate to the following stages
			allowedStages : {
				MINIMAP	: false,
				GALAXY	: false,
				SYSTEM	: true,
				ORB		: true
			}
		}
	}
);
var g = new Class.Singleton({
	d : null,
	initialize : function() {
		this.d = new Array();
	},
	a : function(x,y) {
		if(!this.d[x]) {
			this.d[x] = new Array();
		}
		this.d[x][y] = 1;
	}
});

Imperion.Map.Generator.Root = new Class(
	/** @lends Imperion.Map.Generator.Root */
	{
		/**
		 * currently loaded system data (only information if system exist at x-y coordinate
		 * 
		 * @var g
		 */
		storage : {},
		
		/**
		 * type of galaxy for generator
		 * 
		 * @type Number
		 */
		galaxy : 0,
		
		/**
		 * galaxy config
		 * 
		 * @type Imperion.Map.Config.Root
		 */
		config : null,
		
		/**
		 * filesloaded
		 * 
		 * @var Object
		 */
		filesLoaded : {},
		
		/**
		 * prepare the generator
		 * 
		 * @param	{Number}	galaxyType
		 * 
		 * @constructs
		 */
		initialize : function(galaxyType, config, galaxyStorage) {
			this.galaxy		= galaxyType;
			this.config		= config;
			this.storage	= galaxyStorage;
		},
		
		/**
		 * check if x coord is valid
		 * 
		 * @param	{Number} ingameX
		 * 
		 * @returns	{Boolean}
		 */
		isValidXCoord : function(ingameX) {
			var checkX = Math.ceil(this.config.options.galaxy.width	/ 2) + ingameX;
			if(checkX <= this.config.options.galaxy.width && checkX > 0) {
				return true;
			}
			return false;
		},
		
		/**
		 * check if y coord is valid
		 * 
		 * @param	{Number} ingameY
		 * 
		 * @returns	{Boolean}
		 */
		isValidYCoord : function(ingameY) {
			var checkY = Math.ceil(this.config.options.galaxy.height / 2) - ingameY;
			if(checkY <= this.config.options.galaxy.height && checkY > 0) {
				return true;
			}
			return false;
		},
		
		/**
		 * from file
		 * 
		 * @param	{String}	filename
		 * 
		 * @returns	{void}
		 */
		loadData : function(filename) {
			new Request({
				url: '/javascript/map/galaxy_'+filename,
				async : false,
				method : 'get',
				onSuccess : function(responseText) {
					$exec(responseText);
				}
			}).send();
			this.filesLoaded[filename] = true;
		},
		
		/**
		 * check if system exist at given coordinate
		 * 
		 * @param	{Number}	x
		 * @param	{Number}	y
		 * 
		 * @returns {Boolean}
		 */
		systemExistAtXY : function(x, y) {
			if(this.storage.d[x] && this.storage.d[x][y]) {
				return true;
			}
			var filename = this.getBlockName(x, y) + '.js';
			if(this.filesLoaded[filename]) {
				if(this.storage.d[x] && this.storage.d[x][y]) {
					return true;
				}
				return false;
			}
			else {
				this.loadData(filename);
				if(this.storage.d[x] && this.storage.d[x][y]) {
					return true;
				}
			}
			return false;
		},
		
		/**
		 * generate block name (for filename)
		 * 
		 * @param	{Number}	ingameX
		 * @param	{Number}	ingameY
		 * 
		 * @returns	{String}
		 */
		getBlockName : function(ingameX, ingameY) {
			var limits = this.getBlockLimits(ingameX, ingameY);
			return this.galaxy + '_' + limits.xDown + '_' + limits.xUp + '_' + limits.yDown + '_' + limits.yUp;
		},
		
		/**
		 * calculate the block limits
		 * 
		 * @param	{Number}	ingameX
		 * @param	{Number}	ingameY
		 * 
		 * @return Object
		 */
		getBlockLimits : function(ingameX, ingameY) {
			var realCoords = this.transformIngameXYToRealXY(ingameX, ingameY);
			var dist = { 
				x : Math.floor((realCoords.x - 1) / this.config.options.galaxy.block.width) + 1,
				y : Math.floor((realCoords.y - 1) / this.config.options.galaxy.block.height) + 1
			};
			
			var xUp = this.config.options.galaxy.block.width	* dist.x;
			var yUp = this.config.options.galaxy.block.height	* dist.y;
			
			var xDown = (dist.x - 1) * this.config.options.galaxy.block.width	+ 1;
			var yDown = (dist.y - 1) * this.config.options.galaxy.block.height	+ 1;
			
			xUp = xUp > this.config.options.galaxy.width ? this.config.options.galaxy.width	: xUp;
			yUp = yUp > this.config.options.galaxy.height? this.config.options.galaxy.height	: yUp;
			
			xDown = xDown > this.config.options.galaxy.width ? this.config.options.galaxy.width : xDown;
			yDown = yDown > this.config.options.galaxy.height? this.config.options.galaxy.height: yDown;
			
			var rCUp = this.transformRealXYToIngameXY(xUp, yDown);
			var rCDown = this.transformRealXYToIngameXY(xDown, yUp);
			
			return {
				xUp 	: rCUp.x,
				xDown 	: rCDown.x,
				yUp		: rCUp.y,
				yDown	: rCDown.y
			};
		},
		
		/**
		 * transform real coordinates to ingame coordinates
		 * 
		 * @param	{Number}	realX
		 * @param	{Number}	realY
		 *
		 * @return Object
		 */
		transformRealXYToIngameXY : function(realX, realY) {
			return {
				x : realX - Math.ceil(this.config.options.galaxy.width / 2),
				y : Math.ceil(this.config.options.galaxy.height / 2) - realY
			};
		},
		
		/**
		 * calculate the real x-y coordinates by ingame coordinates
		 * 
		 * @param	{Number}	ingameX
		 * @param	{Number}	ingameY
		 * 
		 * @returns {Object}
		 */
		transformIngameXYToRealXY : function(ingameX, ingameY) {
			return {
				x : Math.ceil(this.config.options.galaxy.width	/ 2) + ingameX,
				y : Math.ceil(this.config.options.galaxy.height	/ 2) - ingameY
			};
		}
	}
);
Imperion.Map.Generator.Endgame = new Class(
	/** @lends Imperion.Map.Generator.Endgame */
	{
		Extends : Imperion.Map.Generator.Root,
		
		/**
		 * prepare generator for galaxy endgame
		 * 
		 * @param	{Imperion.Map.Config.Endgame}	endgameConfig
		 * @param	{galaxyStorage}					galaxyStorage
		 * 
		 * @constructs
		 */
		initialize : function(endgameConfig, galaxyStorage) {
			this.parent(GALAXY_TYPE_ENDGAME, endgameConfig, galaxyStorage);
		},

		/**
		 * generate the system id
		 * 
		 * @param	{Number}	ingameX
		 * @param	{Number}	ingameY
		 * 
		 * @returns {Number}
		 */
		getSystemId : function(ingameX, ingameY) {
			var xOffset = this.config.options.galaxy.halfWidth + this.config.options.quadrant.countX;
			if(ingameX > xOffset || ingameX < (-1 * xOffset)) {
				throw 'X Coordinate out of range';
			}
			var yOffset = this.config.options.galaxy.halfHeight+ this.config.options.quadrant.countY;
			if(ingameY > yOffset || ingameY < (-1 * yOffset)) {
				throw 'Y Coordinate out of range';
			}
			var realCoordinates = this.transformIngameXYToRealXY(ingameX, ingameY);
			return (this.config.options.galaxy.width * (realCoordinates.y - 1) + realCoordinates.x) + this.config.options.galaxy.offset;
		}
	}
);
Imperion.Map.Generator.Midgame = new Class(
	/** @lends Imperion.Map.Generator.Midgame */
	{
		Extends : Imperion.Map.Generator.Root,
		
		/**
		 * prepare generator for galaxy midgame
		 * 
		 * @param	{Imperion.Map.Config.Midgame}	midgameConfig
		 * @param	{galaxyStorage}					galaxyStorage
		 * 
		 * @constructs
		 */
		initialize : function(midgameConfig, galaxyStorage) {
			this.parent(GALAXY_TYPE_MIDGAME, midgameConfig, galaxyStorage);
		},
		
		/**
		 * generate the system id
		 * 
		 * @param	{Number}	ingameX
		 * @param	{Number}	ingameY
		 * 
		 * @returns {Number}
		 */
		getSystemId : function(ingameX, ingameY) {
			var xOffset = this.config.options.galaxy.halfWidth + this.config.options.quadrant.countX;
			if(ingameX > xOffset || ingameX < (-1 * xOffset)) {
				throw 'X Coordinate out of range';
			}
			var yOffset = this.config.options.galaxy.halfHeight + this.config.options.quadrant.countY;
			if(ingameY > yOffset || ingameY < (-1 * yOffset)) {
				throw 'Y Coordinate out of range';
			}
			var realCoordinates = this.transformIngameXYToRealXY(ingameX, ingameY);
			return this.config.options.galaxy.width * (realCoordinates.y - 1) + realCoordinates.x;
		}
	}
);
Imperion.Map.Generator.Tutorial = new Class(
	/** @lends Imperion.Map.Generator.Tutorial */
	{
		Extends : Imperion.Map.Generator.Root,
		
		/**
		 * prepare generator for galaxy midgame
		 * 
		 * @constructs
		 */
		initialize : function() {
			this.parent(GALAXY_TYPE_TUTORIAL);
		}
	}
);
/**
 * Interface exceptions
 *
 * @see Impersion.Util.Exception
 *
 * @version	$Id: exception.js 1735 2010-09-15 15:59:43Z m.trenker $
 */

// Warning Codes
var IMPERION_MAP_EXCEPTION_X_OUT_OF_RANGE   = 11001;
var IMPERION_MAP_EXCEPTION_Y_OUT_OF_RANGE   = 11002;
var IMPERION_MAP_EXCEPTION_X_Y_OUT_OF_RANGE = 11003;

// Critical Codes
var IMPERION_MAP_EXCEPTION_WRONG_DATA_FORMAT = 31001;

Imperion.Map.ExceptionCritical = new Class({
	Extends : Imperion.Util.ExceptionCritical
});

Imperion.Map.ExceptionError = new Class({
	Extends : Imperion.Util.ExceptionError
});

Imperion.Map.ExceptionWarning = new Class({
	Extends : Imperion.Util.ExceptionWarning
});
Imperion.Map.Factory = new Class.Singleton({
	/**
	 * storage for cached objects
	 * 
	 * @var Object
	 */
	storage : {},
	
	/**
	 * prepare factory
	 * 
	 * @return void
	 */
	initialize : function() {
		//reset storage
		this.storage = {};
	},
		
	/**
	 * create map handle by object
	 * 
	 * @param	{Object}	params
	 * 
	 * @returns {Imperion.Map.Handle}
	 */
	handleByObject : function(params) {
		var config		= this.configByGalaxyType(params.type, params.config);
		var generator	= this.generatorByGalaxyType(params.type, config);
		switch(params.type) {
			case GALAXY_TYPE_MIDGAME:
				return new Imperion.Map.Handle.Midgame(config, generator, params.data, Imperion.Util.Factory.globalEvents());
				break;
			case GALAXY_TYPE_ENDGAME:
				return new Imperion.Map.Handle.Endgame(config, generator, params.data, Imperion.Util.Factory.globalEvents());
				break;
			case GALAXY_TYPE_TUTORIAL:
				return new Imperion.Map.Handle.Tutorial(config, generator, params.data, Imperion.Util.Factory.globalEvents());
				break;
		}
	},
	
	/**
	 * get config by galaxy type
	 * 
	 * @param	{Number}	galaxyType
	 * @param	{Object}	options
	 * 
	 * @returns	{Imperion.Map.Config}
	 */
	configByGalaxyType : function(galaxyType, options) {
		switch(galaxyType) {
			case GALAXY_TYPE_MIDGAME:
				return new Imperion.Map.Config.Midgame(options);
				break;
			case GALAXY_TYPE_ENDGAME:
				return new Imperion.Map.Config.Endgame(options);
				break;
			case GALAXY_TYPE_TUTORIAL:
				return new Imperion.Map.Config.Tutorial(options);
				break;
		}
	},

	/**
	 * get generator by galaxy type
	 * 
	 * @param	{Number}					galaxyType
	 * @param	{Imperion.Map.Config.Root}	galaxyConfig
	 * 
	 * @returns {Imperion.Map.Generator.Root}
	 */
	generatorByGalaxyType : function(galaxyType, galaxyConfig) {
		switch(galaxyType) {
			case GALAXY_TYPE_MIDGAME:
				return new Imperion.Map.Generator.Midgame(galaxyConfig, g);
				break;
			case GALAXY_TYPE_ENDGAME:
				return new Imperion.Map.Generator.Endgame(galaxyConfig, g);
				break;
			case GALAXY_TYPE_TUTORIAL:
				return new Imperion.Map.Generator.Tutorial(galaxyConfig, g);
				break;
		}
	}
});
var MAP_CONTEXTMENU_ITEM_TYPE_ATTACK	= 1;
var MAP_CONTEXTMENU_ITEM_TYPE_RECYCLE	= 2;
var MAP_CONTEXTMENU_ITEM_TYPE_DEPLOY	= 3;
var MAP_CONTEXTMENU_ITEM_TYPE_DEBRIS	= 4;
var MAP_CONTEXTMENU_ITEM_TYPE_COMET		= 5;
var MAP_CONTEXTMENU_ITEM_TYPE_SPY		= 6;

Imperion.Map.Composite.Contextmenu = new Class({
	Implements : [Options, Imperion.Translate],
	
	/**
	 * parent class
	 * 
	 * @var Imperion.Map.Handle.Root
	 */
	parentHandle : null,
	
	/**
	 * instance from context menu
	 * 
	 * @var Imperion.Interface.Map.Contextmenu
	 */
	contextmenu : null,
	
	/**
	 * instance of dialog modal
	 * 
	 * @var Imperion.Interface.DialogModal
	 */
	dialog : null,
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		items			: {
			'spy'	: {
				type	: MAP_CONTEXTMENU_ITEM_TYPE_SPY,
				caption	: 'map__contextmenu_spy'
			},
			'debris'	: {
				type	: MAP_CONTEXTMENU_ITEM_TYPE_DEBRIS,
				caption	: 'map__contextmenu_debris'
			},
			'comet'	: {
				type	: MAP_CONTEXTMENU_ITEM_TYPE_COMET,
				caption	: 'map__contextmenu_comet'
			},
			'deploy'	: {
				type	: MAP_CONTEXTMENU_ITEM_TYPE_DEPLOY,
				caption	: 'map__contextmenu_support'
			},
			'attack'	: {
				type	: MAP_CONTEXTMENU_ITEM_TYPE_ATTACK,
				caption	: 'map__send_fleet_button'
			}
		},
		sets 				: {
			'PLANET'		: {
				'attack' 	: true,
				'deploy' 	: true,
				'debris' 	: true,
				'spy'		: true
			},
			'DEBRIS'		: {
				'debris' 	: true
			},
			'COMET'			: {
				'comet' 	: true
			}
		}
	},
	
	/**
	 * prepare the contextmenu handle
	 * 
	 * @param Imperion.Map.Handle parentHandle
	 * 
	 * @return void
	 */
	initialize : function(parentHandle) {
		this.parentHandle = parentHandle;
		//
		this.contextmenu = Imperion.Interface.Factory.contextMenu();
		
		//
		//this.fleetTransportHandle = Imperion.Interface.FleetTransport.Factory.handle();
		
		this.dialog = null;
		
		this.contextmenu.attach('observer', this);
		//add all possible items to contextmenu
		$H(this.options.items).each(function(item, key) {
			item.caption = this.translate(item.caption);
			this.contextmenu.add(Imperion.Interface.Factory.contextmenuItem(key, this.contextmenu, item));
		}, this);
		Imperion.Util.GlobalEvents.attach('mapContextmenu', this);
	},
	
	/**
	 * close contextmenu as global listener
	 * 
	 * @param Object data
	 * 
	 * @return void
	 */
	onBodyClick : function(data) {
		this.contextmenu.hide();
	},
	
	/**
	 * bind click listener to contextmenu
	 * 
	 * @param object data
	 * 
	 * @return void
	 */
	onContextItemClick : function(data) {
		var start = Imperion.Util.Registry.get('planet');
		
		var target;
		var mission;
		switch(data.itemType) {
			case MAP_CONTEXTMENU_ITEM_TYPE_ATTACK:
				target = Imperion.Data.Factory.locationByType(data.bindObject.elementType, {
					id: data.bindObject.id
				});
				mission = MISSION_ASSAULT;
				break;
			case MAP_CONTEXTMENU_ITEM_TYPE_DEPLOY:
				target = Imperion.Data.Factory.locationByType(data.bindObject.elementType, {
					id: data.bindObject.id
				});
				mission = MISSION_DEPLOYMENT;
				break;
			case MAP_CONTEXTMENU_ITEM_TYPE_DEBRIS:
				target = Imperion.Data.Factory.locationByType(LOCATION_TYPE_DEBRIS, {
					id: data.bindObject.id
				});
				mission = MISSION_MINING;
				break;
			case MAP_CONTEXTMENU_ITEM_TYPE_COMET:
				target = Imperion.Data.Factory.locationByType(LOCATION_TYPE_COMET, {
					id: data.bindObject.id
				});
				mission = MISSION_MINING;
				break;
			case MAP_CONTEXTMENU_ITEM_TYPE_SPY:
				target = Imperion.Data.Factory.locationByType(data.bindObject.elementType, {
					id: data.bindObject.id
				});
				mission = MISSION_ESPIONAGE;
				break;
		}
		
		var dialog = Imperion.Interface.Dialog.Factory.handle().getDialog('fleetTransport');

		var transport = Imperion.Interface.Dialog.Context.Factory.fleetTransport(dialog, { 
			type	: target.getType(),
			start	: start,
			target	: target,
			mission	: mission
		});

		transport.showContext();
	},
	
	/**
	 * update the context menu
	 * 
	 * @param Object newPosition
	 * @param Imperion.Map.SystemElement systemElement
	 * 
	 * @return void
	 */
	update : function(newPosition, systemElement) {
		var eleType = systemElement.elementType;
		$H(this.options.items).each(function(item, key) {
			if(this.options.sets[eleType][key] !== undefined) {
				this.contextmenu.get(key).show();
			}
			else {
				this.contextmenu.get(key).hide();
			}
		}, this);
		this.contextmenu.setBindObject(systemElement);
		this.contextmenu.setPosition(newPosition.x, newPosition.y);
		this.contextmenu.show();
	}
});
Imperion.Map.Composite.Data = new Class({
	
	/**
	 * storage
	 * 
	 * @var Object
	 */
	storage : $H({}),
	
	/**
	 * galaxy data
	 * 
	 * @type	Object
	 */
	galaxyData : {},
	
	/**
	 * system data
	 * 
	 * @type	Object
	 */
	systemData : {},
	
	/**
	 * prepare preload handler
	 * 
	 * @param	{Object}	galaxyData
	 * @param	{Object}	systemData
	 * 
	 * @param Object definedData
	 * 
	 * @return void
	 */
	initialize : function(galaxyData, systemData, definedData) {
		if(galaxyData) {
			this.galaxyData = galaxyData;
		}
		if(systemData) {
			this.systemData = systemData;
		}
		if(!definedData) {
			definedData = {};
		}
		this.storage = $H(definedData);
	},
	
	/**
	 * get system data
	 * 
	 * @param int systemId
	 * 
	 * @return Object
	 */
	getSystemData : function(systemId) {
		if(this.systemData[systemId]) {
			return this.systemData[systemId];
		}
		return Imperion.Util.Request.sendSync(
			Imperion.Util.Helper.url('map', 'index', 'system'),
			{
				'systemId' : systemId
			},
			true
		).getResponseData();
	},
	
	/**
	 * get system data async
	 * 
	 * @param	{Number}	systemId
	 * @param	{Function}	callback
	 * 
	 * @returns {Void}
	 */
	getSystemDataAsync : function(systemId, callback) {
        //refresh system data on every map change galaxy <-> system
		/*if(this.systemData[systemId]) {
			callback(systemId, this.systemData[systemId]);
			return;
		}*/

		Imperion.Util.Request.send(
			Imperion.Util.Helper.url('map', 'index', 'system'),
			{
				'systemId' : systemId
			},
			this.afterGetSystemDataAsync.bindNew(this),
			{
				callback	: callback,
				'systemId'	: systemId
			},
			true
		);
	},
	
	/**
	 * callback after get system data async request finish
	 * 
	 * @param	{Imperion.Util.Response}	response
	 * @param	{Object}					request
	 * 
	 * @returns	{Void}
	 */
	afterGetSystemDataAsync : function(response, request) {
		request.callback(request.systemId, response.getResponseData());
	},
	
	/**
	 * request galaxy data
	 * 
	 * @param	{Hash}		systems
	 * @param	{Function}	updateCallback
	 * 
	 * @returns	{Object}	galaxyData
	 */
	getGalaxyData : function(systems, updateCallback) {
		var systemIds = systems.getKeys();
		var returnArray = [];
		for(var i = systemIds.length - 1 ; i >= 0 ; i--) {
			if(this.galaxyData[systemIds[i]]) {
				returnArray[systemIds[i]] = this.galaxyData[systemIds[i]];
			}
		}
		return returnArray;
		
		/*
		var systemIds = systems.getKeys();
		var toCheck = new Array();
		for(var i = systemIds.length - 1 ; i >= 0 ; i--) {
			if(!this.galaxyData[systemIds[i]]) {
				toCheck.push(systemIds[i]);
			}
		}
		if(toCheck.length > 0) { 
			Imperion.Util.Request.send(Imperion.Util.Helper.url('map', 'index', 'state'), {
				systemids : toCheck
			}, this.afterGetGalaxyData.bindNew(this), {
				callback : updateCallback,
				systems	: systems,
				systemIds : systemIds
			}, true);
		}
		else {
			var returnData = new Array();
			for(var i = systemIds.length - 1 ; i >= 0 ; i--) {
				returnData[systemIds[i]] = this.galaxyData[systemIds[i]]; 
			}
			updateCallback(systems, returnData);
		}
		*/
	},
	
	/**
	 * after request galaxy data
	 * 
	 * @param	{Imperion.Util.Response}	response
	 * 
	 * @returns	{Void}
	 */
	afterGetGalaxyData : function(response, request) {
		var rData = response.getResponseData();
		if(!rData.status) {
			throw '//ERROR HANDLING : no status in response';
		}
		var returnData = new Array();
		var systemIds = request.systemIds;
		for(var i = systemIds.length - 1 ; i >= 0 ; i--) {
			if(!this.galaxyData[systemIds[i]]) {
				returnData[systemIds[i]] = rData.status[systemIds[i]];
			}
			else {
				returnData[systemIds[i]] = this.galaxyData[systemIds[i]]; 
			}
		}
		request.callback(request.systems, returnData);
	},
	
	/**
	 * get a list of planets from a system (cached version)
	 * 
	 * @param int systemId
	 * 
	 * @return Object
	 */
	getPlanetListBySystemId : function(systemId) {

		if(!this.storage.has(systemId)) {
			this.storage = $H(Imperion.Util.Request.sendSync(
				Imperion.Util.Helper.url('map', 'index', 'preload'),
				{
					'systemId' : systemId
				},
				true
			).getResponseData());
		}
		return this.storage.get(systemId);
	}
});
Imperion.Map.Composite.DetailView = new Class({
	
	/**
	 * parent class
	 * 
	 * @var Imperion.Map.Handle
	 */
	parentHandle : null,
	
	/**
	 * instance from detail class
	 * 
	 * @var Imperion.Interface.Map.Detail
	 */
	detail : null,
	
	/**
	 * prepare the contextmenu handle
	 * 
	 * @return void
	 */
	initialize : function(parentHandle) {
		this.parentHandle = parentHandle;
		this.detail = Imperion.Interface.Map.Factory.detail();
	},
	
	/**
	 * update and show
	 * 
	 * @params Imperion.Map.SystemElement orb
	 * 
	 * @return void
	 */
	update : function(orb) {
		this.detail.update(orb);
	},
	
	/**
	 * show the detail view
	 * 
	 *  @return void
	 */
	show : function() {
		this.detail.show();
	},
	
	/**
	 * hide the detail view
	 * 
	 *  @return void
	 */
	hide : function() {
		this.detail.hide();
	}
});
Imperion.Map.Composite.Factory = new Class.Singleton(
	/** @lends Imperion.Map.Composite.Factory.prototype */
	{
		/**
		 * prepare the factory - reseting storage
		 * 
		 * @class Imperion Resource Factory
		 * 
		 * @constructs
		 */
		initialize : function() {
		
		},
		
		/**
		 * create map context menu 
		 * 
		 * @param	{Imperion.Map.Handle.Root}	handle
		 * 
		 * @returns {Imperion.Map.Composite.Contextmenu}
		 */
		contextmenu : function(handle) {
			return new Imperion.Map.Composite.Contextmenu(handle);
		},
		
		/**
		 * create detail view composite 
		 * 
		 * @param	{Imperion.Map.Handle.Root}	handle
		 * 
		 * @returns {Imperion.Map.Composite.DetailView}
		 */
		detailview : function(handle) {
			return new Imperion.Map.Composite.DetailView(handle);
		},
		
		/**
		 * create map data composite 
		 * 
		 * @param	{Object}	galaxyData
		 * @param	{Object}	systemData
		 * 
		 * @returns {Imperion.Map.Composite.Data}
		 */
		data : function(galaxyData, systemData) {
			return new Imperion.Map.Composite.Data(galaxyData, systemData);
		},
		
		/**
		 * create map overlay composite -> handle coordinates, quickjump etc.
		 * 
		 * @param	{Imperion.Map.Handle.Root}	handle
		 * @param	{Object}					start
		 * 
		 * @returns {Imperion.Map.Composite.Overlay}
		 */
		overlay : function(handle, start) {
			return new Imperion.Map.Composite.Overlay(handle, start);
		},
		
		/**
		 * create map sidebar composite -> handle sidebar navigation
		 * 
		 * @param	{Imperion.Map.Handle.Root}	handle
		 * 
		 * @returns {Imperion.Map.Composite.Sidebar}
		 */
		sidebar : function(handle) {
			return new Imperion.Map.Composite.Sidebar(handle);
		},
		
		/**
		 * create instance from navigation handle
		 * 
		 * @param	{Imperion.Map.Handle.Root}	handle
		 * @param	{Object}					allowedStages
		 * 
		 * @returns {Imperion.Map.Composite.Navigation}
		 */
		navigation : function(parentHandle, allowedStages) {
			return new Imperion.Map.Composite.Navigation(parentHandle, allowedStages);
		}
	}
);
Imperion.Map.Composite.Navigation = new Class({

	/**
	 * allowedStages
	 *
	 * @type Object
	 */
	allowed : {},

	/**
	 * parent class
	 *
	 * @var Imperion.Map.Handle
	 */
	parentHandle : null,

	/**
	 * current stage
	 *
	 * @var String
	 */
	stage : MAP_STAGE_UNDEFINED,

	/**
	 * queue
	 *
	 * @var Object
	 */
	queue : null,

	/**
	 * flag if navigation is in process
	 *
	 * @var boolean
	 */
	navigationRunning : false,

	/**
	 * system data request flag
	 *
	 * @type	Boolean
	 */
	requestSystemDataRunning : false,

	/**
	* current system id used on map changes to and from system map
 	* to reload system Data
	*
	* @type	int
	*/
	systemId : 0,

	/**
	 * prepare the overlay handle
	 *
	 * @param	{Imperion.Map.Handle}	parentHandle
	 * @param	{Object}				allowedStages
	 *
	 * @return void
	 */
	initialize : function(parentHandle, allowedStages) {
		//
		this.parentHandle = parentHandle;
		//
		this.allowed = allowedStages;
		//
		this.queue = {};
		this.queue[MAP_STAGE_MINIMAP] = null;
		this.queue[MAP_STAGE_GALAXY] = null;
		this.queue[MAP_STAGE_SYSTEM] = null;
		this.queue[MAP_STAGE_ORB] = null;
		this.navigationRunning = false;
		this.requestSystemDataRunning = false;
	},

	/**
	 * navigate to previous stage of current stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	toPreviousStage : function(data) {
		if(!this.navigationRunning) {
			switch(this.getStage()) {
				case MAP_STAGE_MINIMAP:
					throw '//ERROR HANDLING zoom out not possible from minimap';
					break;
				case MAP_STAGE_GALAXY:
					this.toStageMinimap(data);
					break;
				case MAP_STAGE_SYSTEM:
					this.toStageGalaxy(data);
					break;
				case MAP_STAGE_ORB:
					this.toStageSystem(data);
					break;
			}
		}
	},

	/**
	 * navigate to a specific stage
	 *
	 * @param String stage
	 * @param Object data
	 *
	 * @return void
	 */
	to : function(stage, data) {
		if(!this.navigationRunning) {
			switch(stage) {
				case MAP_STAGE_MINIMAP:
					this.toStageMinimap(data);
					break;
				case MAP_STAGE_GALAXY:
					this.toStageGalaxy(data);
					break;
				case MAP_STAGE_SYSTEM:
					this.toStageSystem(data);
					break;
				case MAP_STAGE_ORB:
					this.toStageOrb(data);
					break;
			}
		}
	},

	/**
	 * reach a stage
	 *
	 * @param String stage
	 * @param Object data
	 *
	 * @return
	 */
	reach : function(stage, data) {
		switch(stage) {
			case MAP_STAGE_MINIMAP:
				this.reachStageMinimap(data);
				break;
			case MAP_STAGE_GALAXY:
				this.reachStageGalaxy(data);
				break;
			case MAP_STAGE_SYSTEM:
				this.reachStageSystem(data);
				break;
			case MAP_STAGE_ORB:
				this.reachStageOrb(data);
				break;
		}
	},

	/**
	 * navigate to minimap stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	toStageMinimap : function(data) {
		if(this.allowed[MAP_STAGE_MINIMAP]) {
			switch(this.getStage()) {
				case MAP_STAGE_GALAXY:
					this.toStageMinimapFromGalaxy(data);
					break;
				default :
					throw '//ERROR HANDLING TO WRONG STAGE ' + this.getStage();
					break;
			}
		}
	},

	/**
	 * reach minimap stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	reachStageMinimap : function(data) {
		switch(this.getStage()) {
			case MAP_STAGE_GALAXY:
				this.reachStageMinimapFromGalaxy();
				break;
			default :
				throw '//ERROR HANDLING REACH WRONG STAGE ' + this.getStage();
				break;
		}
	},

	/**
	 * navigate from galaxy to minimap stage
	 *
	 * @return void
	 */
	toStageMinimapFromGalaxy : function() {
		this.navigationRunning = true;
		//
		this.parentHandle.modules.galaxy.zoomOut();
		this.parentHandle.modules.starLayer.zoomOut();
		this.parentHandle.modules.minimap.show();
		this.parentHandle.modules.minimap.zoomIn();
		this.parentHandle.drag.detach();
		this.parentHandle.composites.overlay.overlay.coords.hide();
		this.parentHandle.composites.sidebar.planetList.hide();
		//
		this.parentHandle.elements.zoomOut.addClass('hideContainer');
		this.parentHandle.elements.showLegend.addClass('hideContainer');
	},

	/**
	 * reach minimap stage
	 *
	 * @return void
	 */
	reachStageMinimapFromGalaxy : function() {
		this.parentHandle.composites.sidebar.galaxyList.show();
		this.parentHandle.modules.galaxy.hide();
		this.navigationRunning = false;
		//
		this.setStage(MAP_STAGE_MINIMAP);
	},

	/**
	 * navigate to galaxy stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	toStageGalaxy : function(data) {
		if(this.allowed[MAP_STAGE_GALAXY]) {
			switch(this.getStage()) {
				case MAP_STAGE_MINIMAP:
					this.toStageGalaxyFromMinimap(data.x, data.y);
					break;
				case MAP_STAGE_SYSTEM:
					this.toStageGalaxyFromSystem(data);
					break;
				default :
					throw '//ERROR HANDLING TO WRONG STAGE ' + this.getStage();
					break;
			}
		}
	},

	/**
	 * reach stage galaxy
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	reachStageGalaxy : function(data) {
		switch(this.getStage()) {
			case MAP_STAGE_MINIMAP:
				this.reachStageGalaxyFromMinimap(data.x, data.y);
				break;
			case MAP_STAGE_SYSTEM:
				this.reachStageGalaxyFromSystem(data);
				break;
			default :
				throw '//ERROR HANDLING REACH WRONG STAGE ' + this.getStage();
				break;
		}
	},

	/**
	 * navigate from minimap to galaxy stage
	 *
	 * @param int x ingame coordinate x
	 * @param int y ingame coordinate y
	 *
	 * @return void
	 */
	toStageGalaxyFromMinimap : function(x, y) {
		this.navigationRunning = true;
		//
		this.parentHandle.composites.overlay.overlay.coords.update(x, y);
		this.parentHandle.composites.overlay.overlay.coords.show();
		this.parentHandle.modules.galaxy.setStart(x, y);
		this.parentHandle.modules.galaxy.zoomIn();
		this.parentHandle.modules.starLayer.zoomIn();
		this.parentHandle.modules.minimap.zoomOut();
		this.parentHandle.composites.sidebar.galaxyList.hide();
		this.parentHandle.resetDrag();
	},

	/**
	 * reach galaxy stage from minimap
	 *
	 * @return void
	 */
	reachStageGalaxyFromMinimap : function() {
		this.navigationRunning = false;
		//
		this.parentHandle.modules.minimap.hide();
		this.parentHandle.elements.zoomOut.removeClass('hideContainer');
		this.parentHandle.elements.showLegend.removeClass('hideContainer');
		this.parentHandle.drag.attach();
		this.parentHandle.composites.sidebar.reset();
		this.parentHandle.composites.sidebar.planetList.show();
		this.parentHandle.modules.galaxy.show();
		//
		this.setStage(MAP_STAGE_GALAXY);
	},

	/**
	 * navigate from system to galaxy stage
	 *
	 * @param
	 *
	 * @return void
	 */
	toStageGalaxyFromSystem : function() {
		this.navigationRunning = true;
		//
		//
		this.parentHandle.modules.galaxy.zoomToDefault();
		this.parentHandle.modules.system.zoomToInvisible();
		this.parentHandle.modules.starLayer.zoomIn();
		this.parentHandle.drag.attach();
		this.parentHandle.composites.overlay.overlay.coords.show();
        this.systemId = 0;
	},

	/**
	 * reach stage galaxy from system stage
	 *
	 * @param
	 *
	 * @return void
	 */
	reachStageGalaxyFromSystem : function() {
		this.navigationRunning = false;
		//
		this.parentHandle.modules.system.hideAll();
		//
		this.setStage(MAP_STAGE_GALAXY);
		//
		this.parentHandle.removeBgClickZoomOut();
	},

	/**
	 * navigate to system stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	toStageSystem : function(data) {
		if(this.allowed[MAP_STAGE_SYSTEM]) {
			switch(this.getStage()) {
				case MAP_STAGE_GALAXY:
					this.toStageSystemFromGalaxy(data.system);
					break;
				case MAP_STAGE_ORB:
					this.toStageSystemFromOrb(this.systemId);
					break;
				default :
					throw '//ERROR HANDLING TO WRONG STAGE ' + this.getStage();
					break;
			}
		}
	},

	/**
	 * reach system stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	reachStageSystem : function(data) {
		switch(this.getStage()) {
			case MAP_STAGE_GALAXY:
				this.reachStageSystemFromGalaxy();
				this.parentHandle.addBgClickZoomOut();
				break;
			case MAP_STAGE_ORB:
				this.reachStageSystemFromOrb();
				this.parentHandle.addBgClickZoomOut(true);
				break;
			default :
				throw '//ERROR HANDLING REACH WRONG STAGE ' + this.getStage();
				break;
		}
	},

	/**
	 * navigate from galaxy to system
	 *
	 * @param Imperion.Map.GalaxyElement galaxyElement
	 *
	 * @return void
	 */
	toStageSystemFromGalaxy : function(galaxyElement) {
		this.navigationRunning = true;
		//
		//
		var systemId = galaxyElement.getSystemId();
		var coords = galaxyElement.getCenterCoordinates();
		//
		this.parentHandle.composites.overlay.overlay.coords.hide();
		//
		this.requestSystemDataRunning = true;
        this.systemId = systemId;

		Imperion.Util.PseudoRandom.setNewSeed(systemId);
		this.parentHandle.modules.system.setSystemType(Imperion.Util.PseudoRandom.rand(1,5));
		this.parentHandle.composites.data.getSystemDataAsync(systemId, function(systemId, systemData) {
			this.parentHandle.modules.system.update(systemId, systemData);
			this.parentHandle.modules.system.showAll();
			this.requestSystemDataRunning = false;
		}.bindNew(this));

		this.parentHandle.modules.system.zoomToDefault(coords.x, coords.y, true);
		//
		this.parentHandle.modules.galaxy.zoomToCenterFromXY(coords.x, coords.y);
		this.parentHandle.modules.starLayer.zoomToSystem(coords.x, coords.y);

		this.parentHandle.drag.detach();
	},

	/**
	 * reach system stage from galaxy stage
	 *
	 * @param
	 *
	 * @return void
	 */
	reachStageSystemFromGalaxy : function() {
		//
		if(this.requestSystemDataRunning) {
			this.reachStageSystemFromGalaxy.delay(50, this);
		}
		else {
			//
			this.navigationRunning = false;
			//
			this.parentHandle.composites.detailview.secondsLoaded = 0;
			//
			this.setStage(MAP_STAGE_SYSTEM);
			//check if entry for next stage exist
			if(this.queue[MAP_STAGE_ORB] !== null) {
				//navigate to orb
				this.toStageOrb(this.queue[MAP_STAGE_ORB]);
				this.queue[MAP_STAGE_ORB] = null;
			}
		}
	},

	/**
	 * navigate from orb to system
	 *
	 * @return void
	 */
	toStageSystemFromOrb : function(systemId) {
		this.navigationRunning = true;
		//
		this.parentHandle.modules.starLayer.zoomToSystem();

        //refresh systemData
        if (systemId != 0) {
            this.requestSystemDataRunning = true;
            this.parentHandle.composites.data.getSystemDataAsync(systemId, function(systemId, systemData) {
                this.parentHandle.modules.system.update(systemId, systemData);
                this.parentHandle.modules.system.showAll();
                this.requestSystemDataRunning = false;
            }.bindNew(this));
        }

		this.parentHandle.modules.system.zoomToDefault(0, 0, false);
		this.parentHandle.composites.detailview.hide();
	},

	/**
	 * reach system stage from orb stage
	 *
	 * @param
	 *
	 * @return void
	 */
	reachStageSystemFromOrb : function() {
		this.navigationRunning = false;
		//this is dirty!
		if(this.allowed[MAP_STAGE_GALAXY]) {
			this.parentHandle.modules.galaxy.show();
		}
		this.parentHandle.modules.system.showAll();
		//
		this.parentHandle.elements.showLegend.removeClass('hideContainer');
		//
		this.setStage(MAP_STAGE_SYSTEM);
		//check if entry for next stage exist
		if(this.queue[MAP_STAGE_ORB] !== null) {
			//navigate to orb
			this.toStageOrb(this.queue[MAP_STAGE_ORB]);
			this.queue[MAP_STAGE_ORB] = null;
		}
		else {
			Imperion.Factory.quest().refresh();
			if(this.parentHandle.galaxy === 3) {
				this.parentHandle.elements.zoomOut.addClass('hideContainer');
			}
		}
	},

	/**
	 * navigate to orb stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	toStageOrb : function(data) {
		if(this.allowed[MAP_STAGE_ORB]) {
			switch(this.getStage()) {
				case MAP_STAGE_GALAXY:
					this.toStageSystem(data);
					this.queue[MAP_STAGE_ORB] = data;
					break;
				case MAP_STAGE_ORB:
					var now = this.parentHandle.modules.system.activeElement;
					var to	= data.orb;
					if(now && (now.id !== to.id || (now.id === to.id && to.elementType !== now.elementType))) {
						this.toStageSystem(data);
						this.queue[MAP_STAGE_ORB] = data;
					}
					break;
				case MAP_STAGE_SYSTEM:
					var orb;
					if(data.orb) {
						orb = data.orb;
					}
					else if(data.comet) {
						orb = this.parentHandle.modules.system.findCometOrb(data.comet);
					}
					this.toStageOrbFromSystem(orb);
					break;
				default :
					throw '//ERROR HANDLING TO WRONG STAGE ' + this.getStage();
					break;
			}
		}
	},

	/**
	 * reach orb stage
	 *
	 * @param Object data
	 *
	 * @return void
	 */
	reachStageOrb : function(data) {
		switch(this.getStage()) {
			case MAP_STAGE_SYSTEM:
				this.reachStageOrbFromSystem(data.orb);
				break;
			default :
				throw '//ERROR HANDLING REACH WRONG STAGE ' + this.getStage();
				break;
		}
	},

	/**
	 * navigate from system to orb stage
	 *
	 * @param Imperion.Map.SystemElement orb
	 *
	 * @return void
	 */
	toStageOrbFromSystem : function(orb) {
		this.navigationRunning = true;
		//this is dirty!
		if(this.allowed[MAP_STAGE_GALAXY]) {
			this.parentHandle.modules.galaxy.hide();
		}
		this.parentHandle.composites.detailview.update(orb);
		//
		this.parentHandle.modules.system.activeElement = orb;
		this.parentHandle.modules.system.hideAll();
		this.parentHandle.modules.system.zoomToOrb(orb.position.x, orb.position.y, orb);
		//
		this.parentHandle.modules.starLayer.zoomToOrb();
		//hide legend button
		this.parentHandle.elements.showLegend.addClass('hideContainer');
		//check checkpoints
		this.parentHandle.removeCheckpoint('CometDetailView', true);
		//
		orb.show();
		orb.hideStatus();
		if(this.parentHandle.galaxy === 3) {
			this.parentHandle.elements.zoomOut.removeClass('hideContainer');
		}
	},

	/**
	 * reach orb stage from system
	 *
	 * @param Imperion.Map.SystemElement orb
	 *
	 * @return void
	 */
	reachStageOrbFromSystem : function(orb) {
		this.navigationRunning = false;
		//
		this.parentHandle.composites.detailview.show();
		//
		this.setStage(MAP_STAGE_ORB);
		//
		this.parentHandle.removeBgClickZoomOut(true);
		//
		Imperion.Factory.quest().refresh();
	},

	/**
	 * get current stage
	 *
	 * @param String newStage
	 *
	 * @return void
	 */
	setStage : function(newStage) {
		this.stage = newStage;
	},

	/**
	 * get current stage
	 *
	 * @return void
	 */
	getStage : function() {
		return this.stage;
	}
});

Imperion.Map.Composite.Overlay = new Class({
	
	/**
	 * parent class
	 * 
	 * @var Imperion.Map.Handle
	 */
	parentHandle : null,
	
	/**
	 * instance from overlay class
	 * 
	 * @var Imperion.Interface.Map.Overlay
	 */
	overlay : null,
	
	/**
	 * prepare the overlay handle
	 * 
	 * @param Imperion.Map.Handle parentHandle
	 * @param	{Object}	start
	 * 
	 * @return void
	 */
	initialize : function(parentHandle, start) {
		this.parentHandle = parentHandle;
		//
		this.overlay = Imperion.Interface.Map.Factory.overlay();
		this.overlay.coords.show();
		this.update({
			coords : start
		});
	},
	
	/**
	 * update the overlay
	 * 
	 * @param Object data
	 * 
	 * @return void
	 */
	update : function(data) {
		if(data.coords.x !== undefined && data.coords.y !== undefined) {
			this.setCoordinates(data.coords.x, data.coords.y);
		}
	},
	
	/**
	 * set coordinates
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return void
	 */
	setCoordinates : function(x, y) {
		this.overlay.coords.update(x, y);
	},
	
	/**
	 * listener for map drag
	 * 
	 * @param Object dragData
	 * 
	 * @return void
	 */
	dragMap : function(data) {
		if(data.direction.x) {
			this.overlay.coords.moveX(data.direction.x);
		}
		if(data.direction.y) {
			this.overlay.coords.moveY(data.direction.y);
		}
	}
});
Imperion.Map.Composite.Sidebar = new Class({
	
	/**
	 * parent class
	 * 
	 * @var Imperion.Map.Handle
	 */
	parentHandle : null,
	
	/**
	 * instance from sidebar galaxylist class
	 * 
	 * @var Imperion.Interface.Sidebar.Map.GalaxyList
	 */
	galaxyList : null,
	
	/**
	 * instance from sidebar planetlist class
	 * 
	 * @var Imperion.Interface.Sidebar.Map.PlanetList
	 */
	planetList : null,
	
	/**
	 * current system data
	 * 
	 * @var Object
	 */
	systemData : null,
	
	/**
	 * prepare the overlay handle
	 * 
	 * @param Imperion.Map.Handle parentHandle
	 * 
	 * @return void
	 */
	initialize : function(parentHandle) {
		//
		this.systemData = null;
		//
		this.parentHandle = parentHandle;
		//
		this.planetList = Imperion.Interface.Sidebar.Factory.mapPlanetList();
		this.planetList.attach('Imperion.Map.Handles.Sidebar', this);
		//
		this.galaxyList = Imperion.Interface.Sidebar.Factory.mapGalaxyList();
	},
	
	/**
	 * reset
	 * 
	 * @return void
	 */
	reset : function() {
		this.planetList.reset();
		this.systemData = null;
	},
	
	/**
	 * listener for item click on a planet
	 * 
	 * @param Object params
	 * 
	 * @return void
	 */
	clickOnPlanet : function(params) {
		var orb = this.parentHandle.modules.system.findPlanetOrb(params.id);
		if(orb !== null) {
			this.parentHandle.composites.navigation.to(MAP_STAGE_ORB, {
				system : this.systemData.element,
				orb : orb
			});
		}
	},
	
	/**
	 * set list
	 * 
	 * @param	{Object}	data
	 * @param	{Object}	coords
	 * 
	 * @returns {void}
	 */
	setList : function(planets, coords, data) {
		this.planetList.update({
			x : coords.x,
			y : coords.y,
			planets : planets
		});
		this.systemData = data;
	},
	
	/**
	 * update the sidebar area (star)
	 * 
	 * @param Object data
	 * 
	 * @return void
	 */
	updatePlanetList : function(data) {
		var coords = data.element.getInGameCoords2();
		var systemData = this.parentHandle.composites.data.getPlanetListBySystemId(data.element.getSystemId());
		this.setList(systemData.planets, coords, data);
	}
});
Imperion.Map.Handle.Root = new Class(
	/** @lends Imperion.Map.Config.Midgame */
	{
		Implements : [Imperion.Event, Imperion.Module, Imperion.Template, Imperion.Util.Class, Imperion.Util.Checkpoint, Imperion.Translate],

		/**
		 * type of galaxy for generator
		 *
		 * @type Number
		 */
		galaxy : 0,

		/**
		 * currently bounded generator object
		 *
		 * @type Imperion.Map.Generator.Root
		 */
		generator : null,

		/**
		 * currently bounded config object
		 *
		 * @type Imperion.Map.Config.Root
		 */
		config : null,

		/**
		 * legend info box
		 *
		 * @type Imperion.Interface.Infobox.MapLegend
		 */
		mapLegend : null,

		/**
		 * composite modules
		 *
		 * @type Object
		 */
		composites : {},

		/**
		 * map modules
		 *
		 * @type Object
		 */
		modules : {},

		/**
		 * global events
		 *
		 * @type Imperion.Util.GlobalEvents
		 */
		globalEvents : null,

		/**
		 * questOrbs
		 *
		 * @type	Object
		 */
		questOrbs : null,

		/**
		 * map has focus flag
		 *
		 * @type	Boolean
		 */
		mapHasFocus : false,

		/**
		 * background click zoom out event pointer
		 *
		 * @type	Function
		 */
		BgClickZoomOutFunction: null,
		/**
		* tooltip handle
		*
		* @type	Imperion.Interface.Gui.Tooltip
		*/
		tooltip : null,

		/**
		 * root handle
		 *
		 * @class delivers main functionality for handle galaxy
		 *
		 * @param	{Number}						galaxyType
		 * @param	{Imperion.Map.Config.Root}		mapConfig
		 * @param	{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 	{Object}						data
		 * @param 	{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(galaxyType, mapConfig, mapGenerator, data, globalEvents) {
			//
			this.galaxy					= galaxyType;
			this.config					= mapConfig;
			this.generator				= mapGenerator;
			this.globalEvents			= globalEvents;
			this.globalEvents.attach('MapHandle', this);
			this.tooltip = Imperion.Interface.Gui.Factory.tooltip();
			//
			this.loadElements();
			this.questOrbs = {
				CometDetailView		: new Array()
			};
			this.mapHasFocus			= false;
			//
			this.mapLegend = Imperion.Interface.Infobox.Factory.mapLegend();
			//load composites
			this.composites.contextmenu = Imperion.Map.Composite.Factory.contextmenu(this);
			this.composites.detailview	= Imperion.Map.Composite.Factory.detailview(this);
			this.composites.navigation	= Imperion.Map.Composite.Factory.navigation(this, this.config.options.allowedStages);
			this.composites.sidebar		= Imperion.Map.Composite.Factory.sidebar(this);
			//load modules
			this.modules.system			= Imperion.Map.Modules.Factory.system(this.config, this.generator);
			this.modules.system.attach('handle', this);
			this.modules.starLayer		= Imperion.Map.Modules.Factory.starLayerHandle();
			for(var i = 1 ; i <= this.config.options.performance.starLayerCount ; i++) {
				this.modules.starLayer.add(Imperion.Map.Modules.Factory.starLayer(this.config));
			}
			//REFACTOR
			//append star layer
			for(var i = 0 ; i < this.modules.starLayer.layer.length ; i++) {
				this.elements.container.appendChild(this.modules.starLayer.layer[i].elements.container);
			}
		},

		/**
		 * check if checkpoint is resolved
		 *
		 * @param	{String}			questIdent
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		isCheckpointResolved : function(ident, params, questObj) {
			switch(ident) {
				case 'CometDetailView':
					if(this.composites.navigation.getStage() === MAP_STAGE_ORB) {
						var orb = this.composites.detailview.detail.currentOrb;
						if(orb !== null && orb.elementType === LOCATION_TYPE_COMET && orb.id == params.id) {
							return true;
						}
					}
					return false;
					break;
				case 'SelectMissionDropDown':
					if(this.composites.navigation.getStage() === MAP_STAGE_ORB) {
						return this.composites.detailview.detail.isCheckpointResolved(ident, params, questObj);
					}
					return false;
					break;
				case 'SelectMissionItem':
					if(this.composites.navigation.getStage() === MAP_STAGE_ORB) {
						return this.composites.detailview.detail.isCheckpointResolved(ident, params, questObj);
					}
					return false;
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Create.Building ident not exist' + ident;
					break;
			}
		},

		/**
		 * activate checkpoint
		 *
		 * @param	{String}			ident
		 * @param	{Object}			params
		 * @param	{Imperion.Quest}	questObj
		 *
		 * @returns	{Boolean}
		 */
		activateCheckpoint : function(ident, params, questObj) {
			switch(ident) {
				case 'CometDetailView':
					var comet = this.modules.system.findCometOrb(params.id);
					if(comet) {
						comet.activateCheckpoint(ident, params, questObj);
						this.questOrbs[ident] = new Array();
						this.questOrbs[ident].push(comet);
					}
					else {
						window.location.reload(false);
					}
					this.composites.detailview.detail.removeCheckpoint('SelectMissionDropDown');
					this.composites.detailview.detail.removeCheckpoint('SelectMissionItem');
					break;
				case 'SelectMissionDropDown':
				case 'SelectMissionItem':
					this.composites.detailview.detail.activateCheckpoint(ident, params, questObj);
					break;
				default:
					throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
					break;
			}
		},

		/**
		 * remove checkpoint
		 *
		 * @param	{String}			ident
		 *
		 * @returns	{Boolean}
		 */
		removeCheckpoint : function(ident, refreshQuests) {
			refreshQuests = refreshQuests === undefined ? true : refreshQuests;
			switch(ident) {
				case 'CometDetailView':
					if(this.questOrbs[ident] !== null) {
						for(var i = this.questOrbs[ident].length - 1 ; i >= 0 ; i--) {
							this.questOrbs[ident][i].removeCheckpoint(ident);
						}
						this.questOrbs[ident] = null;
					}
					break;
				case 'SelectMissionDropDown':
				case 'SelectMissionItem':
					this.composites.detailview.detail.removeCheckpoint(ident);
					break;
				default:
					throw 'Imperion.Layout ident not exist';
					break;
			}
		},

		/**
		 * listener for system element clicked (planet, debris, comet...)
		 *
		 * @param	{Object}	systemElement
		 *
		 * @returns	{void}
		 */
		clickOnSystemElement : function(systemElement) {
			switch(this.composites.navigation.getStage()) {
				case MAP_STAGE_SYSTEM:
					this.composites.navigation.to(MAP_STAGE_ORB, {
						orb : systemElement.element
					});
					break;
			}
		},

		/**
		 * context menu
		 *
		 * @param	{Object}	data
		 *
		 * @returns {void}
		 */
		contextmenuOnSystemElement : function(data) {
			if(this.composites.navigation.getStage() === MAP_STAGE_SYSTEM) {
				this.composites.contextmenu.update(data.event.client, data.element);
			}
		},

		/**
		 * listener for finish zoom from system to orb
		 *
		 * @param	{Object}	data
		 *
		 * @returns	{void}
		 */
		zoomSystemToOrbComplete : function(data) {
			this.composites.navigation.reach(MAP_STAGE_ORB, {
				orb : data.element.activeElement
			});
		},

		/**
		 * listener for finish zoom from orb to system
		 *
		 * @param	{Object}	data
		 *
		 * @returns	{void}
		 */
		zoomOrbToSystemComplete : function(data) {
			this.composites.navigation.reach(MAP_STAGE_SYSTEM, {});
		},

		/**
		 * key press listener
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		keyPressed : function(params) {
			switch(params.eventObj.code) {
				case 189:
				case 109:
					if(typeof this.playerAtCoordinates === 'undefined' || !this.playerAtCoordinates) {
						this.composites.navigation.toPreviousStage({});
					}
					break;
			}
		},

		/**
		 * add background click zoomOut event in system stage
		 *
		 * @params	boolean		doNotAddMousewheelEvent
		 *
		 * @returns {Void}
		 */
		addBgClickZoomOut: function(doNotAddMousewheelEvent) {
			if (doNotAddMousewheelEvent == undefined) {
				doNotAddMousewheelEvent = false;
			}
			if(this.config.options.system.enableBgClickZoomOut) {
				this.BgClickZoomOutFunction = this.addEvent('click', this.elements.container, $H({
					action: 'zoom_out'
				}));

				if (doNotAddMousewheelEvent === false) {
					this.BgClickZoomOutWheelFunction = this.addEvent('mousewheel', this.elements.container, $H({
						action: 'zoom_out_wheel'
					}));
				}
			}
		},

		/**
		 * remove background click zoomOut event in system stage
		 *
		 * @params	boolean		doNotRemoveMousewheelEvent
		 *
		 * @returns {Void}
		 */
		removeBgClickZoomOut: function(doNotRemoveMousewheelEvent) {
			if (doNotRemoveMousewheelEvent == undefined) {
				doNotRemoveMousewheelEvent = false;
			}
			if(this.config.options.system.enableBgClickZoomOut) {
				this.removeEvent('click', this.elements.container, this.BgClickZoomOutFunction);
				if (doNotRemoveMousewheelEvent === false) {
					this.removeEvent('mousewheel', this.elements.container, this.BgClickZoomOutWheelFunction);
				}
			}
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * return boolean
		 */
		eventHandler : function(eventObject, params) {
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'zoom_out':
					if(!this.composites.navigation.navigationRunning) {
						this.composites.navigation.toPreviousStage({});
					}
					break;
				case 'zoom_out_wheel':
					if(eventObject.wheel < 0 && !this.composites.navigation.navigationRunning) {
						this.composites.navigation.toPreviousStage({});
					}
					new Event(eventObject).stop();
					break;
				case 'show_legend':
					this.mapLegend.showInfobox();
					break;
				case 'hide_legend':
					this.mapLegend.hideInfobox();
					break;
				case 'show_zoom_tooltip':
					this.tooltip.setText(this.translate('planetsurface__tooltip_show_zoom_to_planet'));
					this.tooltip.show();
					break;
				case 'hide_zoom_tooltip':
					this.tooltip.hide();
					break;
				case 'mouse_enter_map':
					if(typeof this.playerAtCoordinates === 'undefined' || !this.playerAtCoordinates) {
						this.mapHasFocus = true;
					}
					break;
				case 'mouse_leave_map':
					if(typeof this.playerAtCoordinates === 'undefined' || !this.playerAtCoordinates) {
						this.mapHasFocus = false;
					}
					break;
			}
		},

		/**
		 * load elements
		 *
		 * @return void
		 */
		loadElements : function() {
			this.elements.container = this.getTemplate('Map');

			this.elements.showLegend = this.getTemplate('InterfaceMapShowLegend');
			this.addEvent('mouseenter', this.elements.showLegend, $H({
				action : 'show_legend'
			}));
			this.addEvent('mouseleave', this.elements.showLegend, $H({
				action : 'hide_legend'
			}));

			this.elements.zoomOut = this.elements.container.getElement('.zoomOut');
			this.addEvent('click', this.elements.zoomOut, $H({
				action : 'zoom_out'
			}));
			this.addEvent('mouseenter', this.elements.zoomOut, $H({
				action : 'show_zoom_tooltip'
			}));
			this.addEvent('mouseleave', this.elements.zoomOut, $H({
				action : 'hide_zoom_tooltip'
			}));
		}
	}
);
Imperion.Map.Handle.SingleSystem = new Class(
	/** @lends Imperion.Map.Handle.SingleSystem */
	{
		Extends : Imperion.Map.Handle.Root,
		
		/**
		 * prepare multi system galaxy
		 *
		 * @augments	Imperion.Map.Handle.Root
		 * @class		Inherit from Root Handle
		 *
		 * @param		{Number}						galaxyType
		 * @param		{Imperion.Map.Config.Root}		mapConfig
		 * @param		{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 		{Object}						data
		 * @param 		{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(galaxyType, mapConfig, mapGenerator, data, globalEvents) {
			//call parent constructor
			this.parent(galaxyType, mapConfig, mapGenerator, data, globalEvents);
			//show system instant
			Imperion.Util.PseudoRandom.setNewSeed(data.systemdata.id_system);
			this.modules.system.setSystemType(Imperion.Util.PseudoRandom.rand(1,5));
			this.modules.system.update(data.systemdata.id_system, data.systemdata);
			this.modules.system.showInstant();
			//
			this.modules.starLayer.showInstant();
			//
			this.composites.sidebar.setList(data.systemdata.planets, {
				x : 1,
				y : 1
			}, data.systemdata);
			//
			this.elements.zoomOut.addClass('hideContainer');
			//
			this.composites.navigation.setStage(MAP_STAGE_SYSTEM);
			if(data.stage) {
				switch(data.stage) {
					case MAP_STAGE_ORB:
						var orb = null;
						
						if(data.planetId !== 0) {
							orb = this.modules.system.findPlanetOrb(data.planetId.toInt());
						}
						if(orb !== null) {
							this.composites.navigation.to(MAP_STAGE_ORB, {
								system : this.modules.system,
								orb : orb
							});
						}
						else if(data.cometId !== 0) {
							this.composites.navigation.to(MAP_STAGE_ORB, {
								system : this.modules.system,
								comet : data.cometId
							});
						}
						break;
				}
			}
		},
		
		/**
		 * load elements
		 * 
		 * @returns {void}
		 */
		loadElements : function() {
			this.parent();
			
			this.addEvent('mouseenter', this.elements.container, $H({
				action : 'mouse_enter_map'
			}));
			this.addEvent('mouseleave', this.elements.container, $H({
				action : 'mouse_leave_map'
			}));
		}
	}
);
Imperion.Map.Handle.MultiSystem = new Class(
	/** @lends Imperion.Map.Handle.MultiSystem */
	{
		Extends : Imperion.Map.Handle.Root,

		/**
		 * drag layer drag instance
		 *
		 * @type Drag
		 */
		drag : null,

		/**
		 * last drag position
		 *
		 * @type Object
		 */
		lastDragPos : null,

		/**
		 * start drag position
		 *
		 * @type Object
		 */
		startDragPos : null,

		/**
		 * object for time handling
		 *
		 * @type Object
		 */
		timeHandling : null,

		/**
		 * flag if enter event is bounded
		 *
		 * @type Boolean
		 */
		playerAtCoordinates : false,

		/**
		 * update running flag
		 *
		 * @type	Boolean
		 */
		updateOnGalaxyRunning : false,

		/**
		 * frame count for load data at galaxy on keypress event
		 *
		 * @type	Number
		 */
		loadFrameCount : 0,

		/**
		 * prepare multi system galaxy
		 *
		 * @augments	Imperion.Map.Handle.Root
		 * @class		Inherit from Root Handle
		 *
		 * @param		{Number}						galaxyType
		 * @param		{Imperion.Map.Config.Root}		mapConfig
		 * @param		{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 		{Object}						data
		 * @param 		{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(galaxyType, mapConfig, mapGenerator, data, globalEvents) {
			//call parent constructor
			this.parent(galaxyType, mapConfig, mapGenerator, data, globalEvents);
			//set / reset attributes
			this.timeHandling = {
				last : 0,
				sum : 0
			};
			this.lastDragPos = {
				x : 0,
				y : 0
			};
			this.startDragPos = {
				x : 0,
				y : 0
			}
			this.playerAtCoordinates	= false;
			this.updateOnGalaxyRunning	= false;
			this.loadFrameCount			= 0;
			//load composites
			var systemData = {};
			if(data.systemdata) {
				systemData[data.systemId.toInt()] = data.systemdata;
			}
			this.composites.data		= Imperion.Map.Composite.Factory.data(data.galaxy, systemData);
			this.composites.overlay		= Imperion.Map.Composite.Factory.overlay(this, data.start);
			//load modules
			this.modules.galaxy			= Imperion.Map.Modules.Factory.galaxy(this.config, this.generator, data.start, data.noFrog);
			this.modules.galaxy.attach('handle', this);
			this.modules.minimap		= Imperion.Map.Modules.Factory.minimap(this.config, data.minimap);
			this.modules.minimap.attach('handle', this);
			//
			this.composites.navigation.setStage(MAP_STAGE_GALAXY);
			if(data.stage) {
				switch(data.stage) {
					case MAP_STAGE_MINIMAP:
						this.composites.navigation.toPreviousStage({});
						break;
					case MAP_STAGE_SYSTEM:
						var galaxyCenterElement = this.modules.galaxy.getElementBySystemId(data.systemId.toInt());
						this.composites.sidebar.setList(data.systemdata.planets, data.start, systemData);
						this.composites.navigation.to(MAP_STAGE_SYSTEM, {
							system : galaxyCenterElement
						});
						break;
					case MAP_STAGE_ORB:
						var galaxyCenterElement = this.modules.galaxy.getElementBySystemId(data.systemId.toInt());
						this.composites.sidebar.setList(data.systemdata.planets, data.start, systemData);
						var orb = null;

						if(data.planetId !== 0) {
							orb = this.modules.system.findPlanetOrb(data.planetId.toInt());
						}

						if(orb !== null) {
							this.composites.navigation.to(MAP_STAGE_ORB, {
								system : galaxyCenterElement,
								orb : orb
							});
						}
						else if(data.cometId !== 0) {
							this.composites.navigation.to(MAP_STAGE_ORB, {
								system : galaxyCenterElement,
								comet : data.cometId
							});
						}
						break;
				}
			}
			this.updateStatusIconsAtGalaxy();
		},

		/**
		 * listener for finishing zoom from galaxy to minimap
		 *
		 * @param	{Object}	params
		 *
		 * @returns {void}
		 */
		zoomFromGalaxyToMinimapComplete : function(params) {
			this.composites.navigation.reach(MAP_STAGE_MINIMAP, {});
		},

		/**
		 * listener for finishing zoom from minimap to galaxy
		 *
		 * @param	{Object}	params
		 *
		 * @returns {void}
		 */
		zoomFromMinimapToGalaxyComplete : function(params) {
			this.composites.navigation.reach(MAP_STAGE_GALAXY, {});
		},

		/**
		 * listener for click on minimap
		 *
		 * @param	{Object}	data
		 *
		 * @returns {void}
		 */
		clickOnMinimap : function(data) {
			this.composites.navigation.to(MAP_STAGE_GALAXY, {
				x : data.coord.x,
				y : data.coord.y
			});
		},

		/**
		 * listener for galaxy element clicked
		 *
		 * @param Object data
		 *
		 * @return void
		 */
		galaxyElementStarClicked : function(data) {
			this.composites.navigation.to(MAP_STAGE_SYSTEM, {
				system : data.element
			});
		},

		/**
         * listener for galaxy zoomOut to Minimap
         *
         * @param Object data
         *
         * @return void
         */
        galaxyZoomOutToMinimap : function(data) {
            this.composites.navigation.to(MAP_STAGE_MINIMAP, {
                system : data.element
            });
        },

		/**
		 * mouseover on a star at galaxy view
		 *
		 * @param	{Object}	data
		 *
		 * @returns	{void}
		 */
		mouseoverOnGalaxyElement : function(data) {
			//update galaxy flag check
			if(!this.updateOnGalaxyRunning && !this.composites.navigation.navigationRunning) {
				switch(data.element.elementType) {
					case GALAXY_TYPE_STAR:
						this.composites.sidebar.updatePlanetList(data);
						break;
				}
			}
		},

		/**
		 * listen for finish zoom from system to galaxy
		 *
		 * @param	{Object}	data
		 *
		 * @returns {void}
		 */
		zoomSystemToInvisbleComplete : function(data) {
			this.composites.navigation.reach(MAP_STAGE_GALAXY, {});
		},

		/**
		 * listener for finish zoom from galaxy to system
		 *
		 * @param	{Object}	data
		 *
		 * @returns	{void}
		 */
		zoomGalaxyToSystemComplete : function(data) {
			this.composites.navigation.reach(MAP_STAGE_SYSTEM, {});
		},

		/**
		 * move map
		 *
		 * @param	{Object}	direction
		 *
		 * @returns	{Boolean}
		 */
		moveMap : function(direction) {
			if(this.composites.navigation.getStage() === MAP_STAGE_GALAXY) {
				this.modules.starLayer.move(direction);
				this.modules.galaxy.move(direction);
				this.modules.galaxy.change(direction);
				//update composites
				this.composites.overlay.dragMap({
					direction : direction
				});
				return true;
			}
			return false;
		},

		/**
		 * callback for drag start
		 *
		 * @param Element dragElement
		 *
		 * @return void
		 */
		startDrag : function(dragElement) {
			if(this.composites.navigation.getStage() === MAP_STAGE_GALAXY) {
				this.composites.sidebar.reset();
				this.elements.container.addClass('active');
			}
		},

		/**
		 * handle galaxy during drag
		 *
		 * @param Element dragElement
		 *
		 * @return void
		 */
		handleDrag : function(dragElement) {
			if(this._frameAllowed() && this.composites.navigation.getStage() === MAP_STAGE_GALAXY) {
				var posi = dragElement.getPosition(this.elements.container);
				var direction = {
					x : posi.x - this.lastDragPos.x,
					y : (posi.y - this.lastDragPos.y) * -1
				};
				this.lastDragPos.x = posi.x;
				this.lastDragPos.y = posi.y;
				//move the map
				this.moveMap(direction);
			}
		},

		/**
		 * reset from drag
		 *
		 * @return void
		 */
		resetDrag : function(dragElement) {
			this.updateStatusIconsAtGalaxy();
			this.elements.drag.setPosition({
				x : this.modules.galaxy.position.x * -1,
				y : this.modules.galaxy.position.y * -1
			});
			this.lastDragPos.x = 0;
			this.lastDragPos.y = 0;
			this.elements.container.removeClass('active');
		},

		/**
		 * request status icons
		 *
		 * @returns	{Void}
		 */
		updateStatusIconsAtGalaxy : function() {
			//reset frame count for key press
			this.loadFrameCount = 0;
			//update galaxy flag check
			if(!this.updateOnGalaxyRunning) {
				//set running flag
				this.updateOnGalaxyRunning = true;
				//get viewable systems
				var systems	= this.modules.galaxy.getSystems();
				//request data
				var gData = this.composites.data.getGalaxyData(systems);
				//
				this.updateGalaxy(systems, gData);
			}
		},

		/**
		 * update the galaxy
		 *
		 * @param	{Hash}		systems
		 * @param	{Object}	systemStatus
		 *
		 * @returns	{Void}
		 */
		updateGalaxy : function(systems, systemStatus) {
			//unset running flag
			this.updateOnGalaxyRunning = false;
			//
			systems.each(function(system, systemId) {
				if(systemStatus[systemId]) {
					system.setStatus(systemStatus[systemId]);
				}
				else {
					system.setStatus({});
				}
			}, this);
		},

		/**
		 * check if frame can be drawn
		 *
		 * @returns {Boolean}
		 */
		_frameAllowed  : function() {
			if(this.timeHandling.last === 0) {
				this.timeHandling.last = $time();
				return true;
			}
			else {
				var now = $time();
				var diff = now - this.timeHandling.last + this.timeHandling.sum;
				this.timeHandling.last = now;
				if(diff > this.config.options.performance.fps) {
					this.timeHandling.sum = 0;
					return true;
				}
				else {
					this.timeHandling.sum = diff;
				}
			}
			return false;
		},

		/**
		 * navigate to xy coordinate (Zoom if Minimap, Reload all other stages
		 *
		 * @param	{Number}	newX
		 * @param	{Number}	newY
		 *
		 * @returns	{Void}
		 */
		gotoXY : function(newX, newY) {
			if(this.composites.navigation.getStage() === MAP_STAGE_MINIMAP) {
				this.clickOnMinimap({
					coord : {
						x : newX,
						y : newY
					}
				});
			}
			else {
				window.location.href = Imperion.Util.Factory.helper().url('map', 'index', 'index', {
					x : newX,
					y : newY,
					galaxyId : this.galaxy
				});
			}
		},

		/**
		 * get valid coords
		 *
		 * @returns	{Object}
		 */
		getCoordsFromInput : function() {
			var filter = Imperion.Util.Factory.filter();

			var x = filter.filterInteger(this.elements.navigation.x.get('value'), null);
			var y = filter.filterInteger(this.elements.navigation.y.get('value'), null);

			if(x !== null && x !== '-' && !this.generator.isValidXCoord(x)) {
				x = null;
			}
			if(y !== null && y !== '-' && !this.generator.isValidYCoord(y)) {
				y = null;
			}

			return {
				x : x,
				y : y
			};
		},

		/**
		 * listener for global events enter key pressed
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		enterPressed : function(params) {
			var coords = this.getCoordsFromInput();
			if(coords.x !== null && coords.y !== null && this.playerAtCoordinates) {
				this.gotoXY(coords.x, coords.y);
			}
		},

		/**
		 * evaluate entered coordinates
		 *
		 * @returns	{Void}
		 */
		evaluateCoordinates : function() {
			var coords = this.getCoordsFromInput();
			this.elements.navigation.x.set('value', coords.x);
			this.elements.navigation.y.set('value', coords.y);
		},

		/**
		 * key press listener
		 *
		 * @param	{Object}	params
		 *
		 * @returns	{Void}
		 */
		keyPressed : function(params) {
			if(this.mapHasFocus) {
				if(this.composites.navigation.getStage() === MAP_STAGE_GALAXY && this._frameAllowed()) {
					var vector = {x : 0, y : 0};
					switch(params.eventObj.key) {
						case 'right':
							vector.x = -1 * this.config.options.galaxy.keyspeed;
							break;
						case 'left':
							vector.x = this.config.options.galaxy.keyspeed;
							break;
						case 'up':
							vector.y = -1 * this.config.options.galaxy.keyspeed;
							break;
						case 'down':
							vector.y = this.config.options.galaxy.keyspeed;
							break;
					}
					//layer has to move
					if(vector.x !== 0 || vector.y !== 0) {
						//check if map was moved
						if(this.moveMap(vector)) {
							//drag layer has to be fixed
							this.elements.drag.setPosition({
								x : this.modules.galaxy.position.x * -1,
								y : this.modules.galaxy.position.y * -1
							});
							//check if galaxy has to update
							if(this.loadFrameCount++ > this.config.options.galaxy.loadAtFrame) {
								//update galaxy view
								this.updateStatusIconsAtGalaxy();
							}
						}
					}
				}
				params.eventObj.killEvent = true;
			}
			this.parent(params);
		},

		/**
		 * main event handler
		 *
		 * all registered events will processed here
		 *
		 * @param Element.Event eventObject
		 * @param Hash params
		 *
		 * return boolean
		 */
		eventHandler : function(eventObject, params) {
			//call parent event handler
			this.parent(eventObject, params);
			//get action
			var action = params.get('action');
			//
			if(!action) {
				// ERROR HANDLING
			}
			//
			switch(action) {
				case 'start_enter_coords':
					this.playerAtCoordinates = true;
					this.mapHasFocus = false;
					break;
				case 'finish_enter_coords':
					this.playerAtCoordinates = false;
					this.mapHasFocus = true;
					break;
				case 'change_coords':
					this.evaluateCoordinates();
					break;
				case 'to_coords':
					var coords = this.getCoordsFromInput();
					if(coords.x !== null && coords.y !== null) {
						this.gotoXY(coords.x, coords.y);
					}
					break;
				case 'show_nav_button_tooltip':
					this.tooltip.setText(this.translate('map__tooltip_nav_button_to_system'));
					this.tooltip.show();
					break;
				case 'hide_nav_button_tooltip':
					this.tooltip.hide();
					break;
			}
		},

		/**
		 * load elements
		 *
		 * @returns {void}
		 */
		loadElements : function() {
			this.parent();

			this.elements.drag = this.getTemplate('MapDrag');
			this.drag = new Drag(this.elements.drag, {
				preventDefault : false,
				snap : 0,
				onStart : this.startDrag.bindNew(this),
				onDrag : this.handleDrag.bindNew(this),
				onComplete : this.resetDrag.bindNew(this)
			});

			this.elements.navigation			= {};
			this.elements.navigation.container	= this.getTemplate('MapNavigation');
			this.elements.navigation.x			= this.elements.navigation.container.getElement('.xCoord');
			this.elements.navigation.y			= this.elements.navigation.container.getElement('.yCoord');
			this.elements.navigation.button		= this.elements.navigation.container.getElement('.button');
			this.addEvent('mouseenter', this.elements.navigation.button, $H({
				action : 'show_nav_button_tooltip'
			}));
			this.addEvent('mouseleave', this.elements.navigation.button, $H({
				action : 'hide_nav_button_tooltip'
			}));

			this.elements.navigation.container.removeClass('hideContainer');
			this.addEvent('click', this.elements.navigation.button, $H({
				action : 'to_coords'
			}));

			this.addEvent('focus', this.elements.navigation.x, $H({ action : 'start_enter_coords' }));
			this.addEvent('blur', this.elements.navigation.x, $H({ action : 'finish_enter_coords' }));
			this.addEvent('change', this.elements.navigation.x, $H({ action : 'change_coords' }));

			this.addEvent('change', this.elements.navigation.y, $H({ action : 'change_coords' }));
			this.addEvent('focus', this.elements.navigation.y, $H({ action : 'start_enter_coords' }));
			this.addEvent('blur', this.elements.navigation.y, $H({ action : 'finish_enter_coords' }));

			this.addEvent('mouseenter', this.elements.drag, $H({
				action : 'mouse_enter_map'
			}));
			this.addEvent('mouseleave', this.elements.drag, $H({
				action : 'mouse_leave_map'
			}));
		}
	}
);
Imperion.Map.Handle.Tutorial = new Class(
	/** @lends Imperion.Map.Handle.Endgame */
	{
		Extends : Imperion.Map.Handle.SingleSystem,
		
		/**
		 * prepare tutorial handle
		 *
		 * @augments	Imperion.Map.Handle.SingleSystem
		 * @class		Inherit from Singlesystem class to append additional functionality
		 *
		 * @param		{Imperion.Map.Config.Root}		mapConfig
		 * @param		{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 		{Object}						data
		 * @param 		{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(mapConfig, mapGenerator, data, globalEvents) {
			//call parent constructor
			this.parent(GALAXY_TYPE_TUTORIAL, mapConfig, mapGenerator, data, globalEvents);
		}
	}
);
Imperion.Map.Handle.Midgame = new Class(
	/** @lends Imperion.Map.Handle.Midgame */
	{
		Extends : Imperion.Map.Handle.MultiSystem,
		
		/**
		 * prepare midgame handle
		 *
		 * @augments	Imperion.Map.Handle.MultiSystem
		 * @class		Inherit from Multisystem class to append additional functionality
		 *
		 * @param		{Imperion.Map.Config.Root}		mapConfig
		 * @param		{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 		{Object}						data
		 * @param 		{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(mapConfig, mapGenerator, data, globalEvents) {
			//call parent constructor
			this.parent(GALAXY_TYPE_MIDGAME, mapConfig, mapGenerator, data, globalEvents);
		}
	}
);
Imperion.Map.Handle.Endgame = new Class(
	/** @lends Imperion.Map.Handle.Endgame */
	{
		Extends : Imperion.Map.Handle.MultiSystem,
		
		/**
		 * prepare endgame handle
		 *
		 * @augments	Imperion.Map.Handle.MultiSystem
		 * @class		Inherit from Multisystem class to append additional functionality
		 *
		 * @param		{Imperion.Map.Config.Root}		mapConfig
		 * @param		{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 		{Object}						data
		 * @param 		{Imperion.Util.GlobalEvents}	globalEvents
		 *
		 * @constructs
		 */
		initialize : function(mapConfig, mapGenerator, data, globalEvents) {
			//call parent constructor
			this.parent(GALAXY_TYPE_ENDGAME, mapConfig, mapGenerator, data, globalEvents);
		}
	}
);
Imperion.Map.Moveable = new Class({
	/**
	 * move modificator
	 * 
	 * @var int
	 */
	movement : 1,
	
	/**
	 * current position
	 * 
	 * @var object
	 */
	position: {
		x : 0,
		y : 0
	},
	
	/**
	 * moved units
	 * 
	 * @var Object
	 */
	moved : {
		x : 0,
		y : 0
	},
	
	/**
	 * array with star objects
	 * 
	 * @var Array
	 */
	moveElements : null,
	
	/**
	 * prepare the object
	 * 
	 * @param	{Number}	movementModifactor
	 * 
	 * @return void
	 */
	initialize : function(movementModifactor) {
		//
		this.movement = movementModifactor;
		//
		this.position = {
			x : 0, 
			y : 0
		};
		this.moved = {
			x : 0, 
			y : 0
		};
		this.moveElements = new Object();
	},
	
	/**
	 * move the layer
	 * 
	 * @param Object direction
	 * 
	 * @return void
	 */
	move : function(direction) {
		if(this.canMove()) {
			this.moved.x += direction.x * this.movement;
			this.moved.y += direction.y * this.movement * -1;
			this.setPosition(direction.x * this.movement + this.position.x, direction.y * this.movement * -1 + this.position.y);
		}
	},

	/**
	 * set the position of this layer
	 * 
	 * @param int newX
	 * @param int newY
	 * 
	 * @return void
	 */
	setPosition : function(newX, newY) {
		this.elements.container.setStyles({
			top : newY,
			left : newX
		});
		this.position.x = newX;
		this.position.y = newY;
	},
	
	/**
	 * change to stars
	 * 
	 * @return void
	 */
	change : function() {
		this.changeX();
		this.changeY();
		
	},
	
	/**
	 * check for change at x coords
	 * 
	 * @return void
	 */
	changeX : function() {
		//get distance how much layer is moved
		var offset = (this.moved.x / this.config.options.quadrant.width).toInt();
		//check if change is need
		if(offset !== 0) {
			//update distance object
			this.moved.x = this.moved.x - offset * this.config.options.quadrant.width;
			//calculate how much quadrants has moved
			var quadrantOffset = this.config.options.quadrant.width * (this.config.options.quadrant.preload.x - Math.abs(offset));
			//check if layer is more moved then allowed
			if(quadrantOffset <= 0) {
				//throw '// ERROR HANDLING Imperion.Map.StarLayer -> change -> to much movement';
			}
			//check direction which was moved
			if(offset > 0) {
				var check = this.config.options.viewport.width + quadrantOffset - this.position.x + this.config.options.quadrant.width;
			}
			else {
				var check = 0 - quadrantOffset - (this.position.x - this.config.options.quadrant.width * -1);
			}
			//loop over each quadrant
			var limitsX = this.config.getRealQuadrantLimitsX();
			var limitsY = this.config.getRealQuadrantLimitsY();
			for(var y = limitsY.down ; y < limitsY.up ; y++) {
				for(var x = limitsX.down ; x < limitsX.up ; x++) {
					if(this.moveElements[y] && this.moveElements[y][x]) {
						//check direction
						if(offset > 0) {
							//check if star has to be moved
							if(this.moveElements[y][x].position.x > check) {
								this.moveElements[y][x].switchX(-1);
							}
						}
						else {
							//check if star has to be moved
							if(this.moveElements[y][x].position.x < check) {
								this.moveElements[y][x].switchX(1);
							}
						}
					}
				}
			}
		}
	},
	
	/**
	 * check for change at y coords
	 * 
	 * @return void
	 */
	changeY : function() {
		//get distance how much layer is moved
		var offset = (this.moved.y / this.config.options.quadrant.height).toInt();
		//check if change is need
		if(offset !== 0) {
			//update distance object
			this.moved.y = this.moved.y - offset * this.config.options.quadrant.height;
			//calculate how much quadrants has moved
			var quadrantOffset = this.config.options.quadrant.height * (this.config.options.quadrant.preload.y - Math.abs(offset));
			//check if layer is more moved then allowed
			if(quadrantOffset <= 0) {
				//throw '// ERROR HANDLING Imperion.Map.StarLayer -> changeY -> to much movement';
			}
			//check direction which was moved
			if(offset > 0) {
				var check = this.config.options.viewport.height + quadrantOffset - this.position.y + this.config.options.quadrant.height;
			}
			else {
				var check = 0 - quadrantOffset - (this.position.y - this.config.options.quadrant.height * -1);
			}
			//loop over each quadrant
			var limitsX = this.config.getRealQuadrantLimitsX();
			var limitsY = this.config.getRealQuadrantLimitsY();
			for(var y = limitsY.down ; y < limitsY.up ; y++) {
				for(var x = limitsX.down ; x < limitsX.up ; x++) {
					if(this.moveElements[y] && this.moveElements[y][x]) {
						//check direction
						if(offset > 0) {
							//check if star has to be moved
							if(this.moveElements[y][x].position.y > check) { 
								this.moveElements[y][x].switchY(-1);
							}
						}
						else {
							//check if star has to be moved
							if(this.moveElements[y][x].position.y < check) {
								this.moveElements[y][x].switchY(1);
							}
						}
					}
				}
			}
		}
	}
});
Imperion.Map.Modules.Factory = new Class.Singleton(
	/** @lends Imperion.Map.Modules.Factory.prototype */
	{
		/**
		 * prepare the factory - reseting storage
		 * 
		 * @class Factory for map modules
		 * 
		 * @constructs
		 */
		initialize : function() {
		
		},
		
		/**
		 * create instance from minimap
		 * 
		 * @param	{Imperion.Map.Config.Root}	mapConfig
		 * @param	{Object}					symbolData
		 * 
		 * @returns {Imperion.Map.Modules.MiniMap}
		 */
		minimap : function(mapConfig, symbolData) {
			return new Imperion.Map.Modules.Minimap(mapConfig, symbolData, Imperion.Interface.Gui.Factory.tooltip());
		},
		
		/**
		 * create a minimap symbol
		 * 
		 * @param	{Imperion.Map.Minimap}	parentHandle
		 * @param 	{Object}				options
		 * 
		 * @return Imperion.Map.MinimapSymbol
		 */
		minimapSymbol : function(parentHandle, options) {
			return new Imperion.Map.Modules.MinimapSymbol(parentHandle, options);
		},
		
		/**
		 * create a starlayer object
		 * 
		 * @returns {Imperion.Map.Modules.StarLayerHandle}
		 */
		starLayerHandle : function() {
			return new Imperion.Map.Modules.StarLayerHandle();
		},
		
		/**
		 * create a starlayer object
		 * 
		 * @param	{Imperion.Map.Config.Root}	galaxyConfig
		 * 
		 * @returns	{Imperion.Map.Modules.StarLayer}
		 */
		starLayer : function(galaxyConfig) {
			return new Imperion.Map.Modules.StarLayer(galaxyConfig);
		},
		
		/**
		 * create a starLayerStar object
		 * 
		 * @param	{Number}							oX
		 * @param	{Number}							oY
		 * @param	{Number}							width
		 * @param	{Number}							height
		 * @param 	{Imperion.Map.Modules.StarLayer}	layer
		 * 
		 * @returns {Imperion.Map.Modules.StarLayerStar}
		 */
		starLayerStar : function(oX, oY, width, height, layer) {
			return new Imperion.Map.Modules.StarLayerStar({
				offsetX : oX,
				offsetY : oY,
				width   : width,
				height  : height
			}, layer);
		},
		
		/**
		 * create a galaxy object
		 * 
		 * @param	{Imperion.Map.Config.Root}		mapConfig
		 * @param	{Imperion.Map.Generator.Root}	mapGenerator
		 * @param 	{Object}						start
		 * @param	{Object}						noFrog
		 * 
		 * @returns	{Imperion.Map.Galaxy}
		 */
		galaxy : function(mapConfig, mapGenerator, start, noFrog) {
			return new Imperion.Map.Modules.Galaxy(mapConfig, mapGenerator, start, noFrog);
		},
		
		/**
		 * create a galaxy element
		 * 
		 * @param	{Imperion.Map.Modules.Galaxy}	galaxy
		 * 
		 * @returns {Imperion.Map.Modules.GalaxyElement}
		 */
		galaxyElement : function(galaxy) {
			return new Imperion.Map.Modules.GalaxyElement(galaxy);
		},
		
		/**
		 * create a system object
		 * 
		 * @param	{Imperion.Map.Config.Root}		mapConfig
		 * @param	{Imperion.Map.Generator.Root}	mapGenerator
		 * 
		 * @return Imperion.Map.System
		 */
		system : function(mapConfig, mapGenerator) {
			return new Imperion.Map.Modules.System(mapConfig, mapGenerator);
		},
		
		/**
		 * create a system element object
		 * 
		 * @param	{Imperion.Map.Modules.System} system
		 * 
		 * @returns {Imperion.Map.Modules.SystemElement}
		 */
		systemElement : function(system) {
			return new Imperion.Map.Modules.SystemElement(system);
		},
		
		/**
		 * create a orb object
		 * 
		 * @param	{Number}						orbType
		 * @param 	{Imperion.Map.Modules.System}	system
		 * 
		 * @return Imperion.Map.Modules.SystemElement
		 */
		orbByType : function(orbType, system) {
			switch(orbType) {
				case SYSTEM_ORB_TYPE_PLANET:
					return new Imperion.Map.Modules.OrbPlanet(system);
					break;
				case SYSTEM_ORB_TYPE_COMET:
					return new Imperion.Map.Modules.OrbComet(system);
					break;
				case SYSTEM_ORB_TYPE_DEBRIS:
					return new Imperion.Map.Modules.OrbDebris(system);
					break;
				default: 
					return this.systemElement(system);
					break;
			}
		}
	}
);
var GALAXY_TYPE_STAR = 1;

/**
 * the galaxy object
 */
Imperion.Map.Modules.Galaxy = new Class({
	Extends : Imperion.Map.Moveable,
	Implements : [Imperion.Util.Class, Imperion.Event, Imperion.Template, Imperion.Observable],
	/**
	 * Config Object
	 * 
	 * @type Imperion.Map.Config
	 */
	config : null,
	
	/**
	 * Generator Object
	 * 
	 * @type Imperion.Map.Generator
	 */
	generator : null,
	
	/**
	 * zoom state
	 * 
	 * @type Number
	 */
	zoomState : 1,
	zoomStateNext : null,
	
	/**
	 * starting coordinates
	 * 
	 * @type Object
	 */
	start : null,
	
	/**
	 * no frog data
	 * 
	 * @type Object
	 */
	noFrog : {},
	
	/**
	 * fx instances
	 * 
	 * @type Object
	 */
	fx : {
		zoomIn : null,
		zoomOut : null
	},
	
	/**
	 * system id mapping
	 * 
	 * @type	Object
	 */
	idMapping : {},
	
	/**
	 * prepare the object
	 * 
	 * @param	{Imperion.Map.Config}		config
	 * @param	{Imperion.Map.Generator}	generator
	 * @param	{Object}					start
	 * @param	{Object}					noFrog
	 * 
	 * @return void
	 */
	initialize : function(config, generator, start, noFrog) {
		this.config		= config;
		this.generator	= generator;
		this.start		= start;
		this.noFrog		= noFrog;
		//preset attributes
		this.zoomState = 1;
		this.zoomStateNext = null;
		this.fx = {
			zoomIn : null,
			zoomOut : null
		};
		this.idMapping = {};
		//
		this.parent(this.config.options.galaxy.movement);
		//
		this.loadElements();
		//set galaxy
		var width = this.config.getPercentWidth(this.config.galaxy().item.width);
		var height = this.config.getPercentHeight(this.config.galaxy().item.height);
		var limitsX = this.config.getRealQuadrantLimitsX();
		var limitsY = this.config.getRealQuadrantLimitsY();
		for(var y = limitsY.down ; y < limitsY.up ; y++) {
			this.moveElements[y] = new Object();
			for(var x = limitsX.down ; x < limitsX.up ; x++) {
				this.moveElements[y][x] = Imperion.Map.Modules.Factory.galaxyElement(this);
				this.moveElements[y][x].setQuadrant(x, y);
				this.moveElements[y][x].setPosition(
					x * this.config.quadrant().width,
					y * this.config.quadrant().height
				);
				this.moveElements[y][x].setDimensions(width, height);
				this.elements.container.appendChild(this.moveElements[y][x].elements.container);
			}
		}
	},
	
	/**
	 * get centered element
	 * 
	 * @param	{Number}	systemId
	 * 
	 * @returns	{Imperion.Map.Modules.GalaxyElement}
	 */
	getElementBySystemId : function(systemId) {
		if(this.idMapping[systemId]) {			
			return this.idMapping[systemId];
		}
		return null;
	},
	
	/**
	 * get all  registered system ids
	 * 
	 * @returns	{Hash}
	 */
	getSystems : function() {
		var systems = new Hash();
		var limitsX = this.config.getRealQuadrantLimitsX();
		var limitsY = this.config.getRealQuadrantLimitsY();
		for(var y = limitsY.down ; y < limitsY.up ; y++) {
			for(var x = limitsX.down ; x < limitsX.up ; x++) {
				if(this.moveElements[y][x].enabled) {
					systems.set(this.moveElements[y][x].systemId, this.moveElements[y][x]);
				}
			}
		}
		return systems;
	},
	
	/**
	 * method to call handle
	 * 
	 * @param Imperion.Map.GalaxyElement galaxyElement
	 * 
	 * @return void
	 */
	galaxyElementStarClicked : function(galaxyElement) {
		var data = {
			element : galaxyElement	
		};
		this.notify(data, 'galaxyElementStarClicked');
	},
	
	/**
	 * delegate for other galaxy element events
	 * 
	 * @param Imperion.Map.GalaxyElement galaxyElement
	 * @param Event event
	 * @param Object click Position where Mouse cursor is
	 * 
	 * @return void
	 */
	galaxyElementEvent : function(galaxyElement, event, click) {
		var data = {};
		data.element = galaxyElement;
		data.elementType = galaxyElement.elementType;
		data.id = galaxyElement.getSystemId();
		data.event = event;
		data.click = click;
		this.notify(data, event.type + 'OnGalaxyElement');
	},
	
	/**
	 * set new starting point
	 * 
	 * @param int newX
	 * @param int newY
	 * 
	 * @return void
	 */
	setStart : function(newX, newY) {
		this.start.x = newX;
		this.start.y = newY;
		this.update();
	},
	
	/**
	 * update the galaxy
	 * 
	 * 
	 */
	update : function() {
		var limitsX = this.config.getRealQuadrantLimitsX();
		var limitsY = this.config.getRealQuadrantLimitsY();
		for(var y = limitsY.down ; y < limitsY.up ; y++) {
			for(var x = limitsX.down ; x < limitsX.up ; x++) {
				this.moveElements[y][x].setQuadrant(x, y);
				this.moveElements[y][x].setPosition(
					x * this.config.quadrant().width,
					y * this.config.quadrant().height
				);
			}
		}
		this.setPosition(0, 0);
	},
	
	/**
	 * check if layer can move
	 * 
	 * @return bool
	 */
	canMove : function() {
		return true;
	},

	/**
	 * zoom to default view
	 * 
	 * @return void
	 */
	zoomToDefault : function() {
		if(!this.config.registry.fxRunningGalaxy && this.zoomStateNext === null) {
			var morphParams = {
				width : this.config.options.viewport.width,
				height : this.config.options.viewport.height,
				left : this.position.x,
				top : this.position.y,
				opacity : 1
			};
			this.config.registry.fxRunningGalaxy = true;
			this.fx.zoomIn.start(morphParams);
			this.zoomStateNext = 1;
		}
	},
	
	/**
	 * zoom to center
	 * 
	 * @param int fromX
	 * @param int fromY
	 * 
	 * @return void
	 */
	zoomToCenterFromXY : function(fromX, fromY) {
		if(!this.config.registry.fxRunningGalaxy && this.zoomStateNext === null) {
			var zoomFactor = this.config.options.galaxy.zoomFactorIn;
			var morphParams = {
				width	: this.config.options.viewport.width * zoomFactor,
				height	: this.config.options.viewport.height * zoomFactor,
				left	: zoomFactor * (this.position.x - fromX),
				top		: zoomFactor * (this.position.y - fromY)
			};
			this.config.registry.fxRunningGalaxy = true;
			this.fx.zoomIn.start(morphParams);
			this.zoomStateNext = 2;
		}
	},
	
	/**
	 * zoom out
	 * 
	 * @return void
	 */
	zoomOut : function() {
		if(!this.config.registry.fxRunningGalaxy && this.zoomStateNext === null) {
			var morphParams = {
				height : 0,
				width  : 0,
				left : this.config.options.viewport.halfWidth,
				top : this.config.options.viewport.halfHeight
			};
			this.config.registry.fxRunningGalaxy = true;
			this.fx.zoomOut.start(morphParams);
			this.zoomStateNext = 0;
		}
	},
	
	/**
	 * zoom in
	 * 
	 * @return void
	 */
	zoomIn : function() {
		if(!this.config.registry.fxRunningGalaxy && this.zoomStateNext === null) {
			var morphParams = {
				height : this.config.options.viewport.height,
				width  : this.config.options.viewport.width,
				left : this.position.x,
				top : this.position.y
			};
			this.config.registry.fxRunningGalaxy = true;
			this.fx.zoomOut.start(morphParams);
			this.zoomStateNext = 1;
		}
	},
	
	/**
	 * callback for complete animations
	 * 
	 * @param Element fxElement
	 * 
	 * @return void
	 */
	fxComplete : function(fxElement) {
		this.config.registry.fxRunningGalaxy = false;
		this.zoomState = this.zoomStateNext;
		this.zoomStateNext = null;
		switch(this.zoomState) {
			case 2:
				
			break;
			case 1:
				this.notify({}, 'galaxyZoomOutComplete');
				break;
			case 0:
				this.notify({}, 'galaxyZoomInComplete');
				break;
		}
	},

	/**
	 * main event handler
	 *
	 * all registered events will processed here
	 *
	 * @param Element.Event eventObject
	 * @param Hash params
	 *
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'mousewheel':
				if (eventObject.wheel < 0) {
					this.notify(data, 'galaxyZoomOutToMinimap');
				}
				new Event(eventObject).stop();
				break;
		}
	},

	/**
	 * load galaxy elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('MapGalaxy');

		this.addEvent('mousewheel', this.elements.container, $H({ action:'mousewheel' }));

		var zoomOutFx = this.config.galaxy().zoomOutFx;
		zoomOutFx.onComplete = this.fxComplete.bindNew(this);
		var zoomInFx = this.config.galaxy().zoomInFx;
		zoomInFx.onComplete = this.fxComplete.bindNew(this);
		
		this.fx.zoomIn = new Fx.Morph(this.elements.container, zoomInFx);
		this.fx.zoomOut = new Fx.Morph(this.elements.container, zoomOutFx);
		
	}
});

Imperion.Map.Modules.GalaxyElement = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event],

	/**
	 * current position
	 * 
	 * @var object
	 */
	position: {
		x : 0,
		y : 0
	},
	
	/**
	 * quadrant position
	 * 
	 * @var Object
	 */
	quadrant : {
		x : 0,
		y : 0
	},
	
	/**
	 * galaxy object
	 * 
	 * @var Imperion.Map.Galaxy
	 */
	galaxy : null,
	
	/**
	 * type of element
	 * 
	 * @var int
	 */
	elementType : null,
	
	/**
	 * frog on / off flag
	 * 
	 * @type Boolean
	 */
	frog : false,
	
	/**
	 * current system id (only for performance)
	 * 
	 * @type {Number}
	 */
	systemId : 0,
	
	/**
	 * enabled flag
	 * 
	 * @type Boolean
	 */
	enabled : false,
	
	/**
	 * prepare the layer
	 * 
	 * @return void
	 */
	initialize : function(galaxy) {
		this.galaxy = galaxy;
		this.elementType = GALAXY_TYPE_STAR;
		this.loadElements();
		this.position = {
			x : 0,
			y : 0
		};
		this.quadrant = {
			x : 0,
			y : 0
		};
		this.enabled = false;
	},
	
	/**
	 * set the icon of the element
	 * 
	 * @param string icon
	 * 
	 * @return void
	 */
	setIcon : function(icon) {
		this.elements.image.setProperty('src', this.galaxy.config.options.general.path + this.galaxy.config.options.galaxy.item.icons[icon]);
	},
	
	/**
	 * set the current quadrant of element
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return void
	 */
	setQuadrant : function(x, y) {
		//get system id before
		var beforeSID = this.getSystemId();
		//checking mapping exist to delete
		if(this.galaxy.idMapping[beforeSID]) {
			this.galaxy.idMapping[beforeSID] = null;
		}
		//check if element has to be displayed
		var ingameCoords = this.getInGameCoords(this.galaxy.config.getRealX(x), this.galaxy.config.getRealY(y));
		this.quadrant.x = x;
		this.quadrant.y = y;
		if(this.galaxy.generator.systemExistAtXY(ingameCoords.x, ingameCoords.y)) {
			//
			this.systemId = this.getSystemId();
			//PERFORMANCE
			Imperion.Util.PseudoRandom.setNewSeed(this.getSystemId());
			this.show();
			//check frog
			if(this.hasFrog()) {
				this.setIcon('star_' + Imperion.Util.PseudoRandom.rand(1,5) + '_frog');
			}
			else {
				this.setIcon('star_' + Imperion.Util.PseudoRandom.rand(1,5));
			}
			this.enabled = true;
			//add mapping
			this.galaxy.idMapping[this.systemId] = this;
		}
		else {
			this.enabled = false;
			this.hide();
		}
	},
	
	/**
	 * set the position of the star
	 * 
	 * @param int newX
	 * @param int newY
	 * 
	 * @return void
	 */
	setPosition : function(newX, newY) {
		var offset = this.getOffset();
		this.elements.container.setStyles({
			top : this.galaxy.config.getPercentHeight(newY + offset.y) + '%',
			left : this.galaxy.config.getPercentWidth(newX + offset.x) + '%'
		});
		this.position.x = newX;
		this.position.y = newY;
	},
	
	/**
	 * set the dimensions of the star
	 * 
	 * @param int width
	 * @param int height
	 * 
	 * @return void
	 */
	setDimensions : function(width, height) {
		this.elements.container.setStyles({
			width : width + '%',
			height : height + '%'
		});
	},
	
	/**
	 * switch x position
	 * 
	 * @param direction
	 * 
	 * @return void
	 */
	switchX : function(direction) {
		this.setQuadrant(this.quadrant.x + direction * this.galaxy.config.options.quadrant.offsetX, this.quadrant.y);
		this.setPosition(this.position.x + direction * this.galaxy.config.options.viewport.changeX, this.position.y);
		this.setStatus({});
	},
	
	/**
	 * switch y position
	 * 
	 * @param direction
	 * 
	 * @return void
	 */
	switchY : function(direction) {
		this.setQuadrant(this.quadrant.x, this.quadrant.y + direction * this.galaxy.config.options.quadrant.offsetY);
		this.setPosition(this.position.x, this.position.y + direction * this.galaxy.config.options.viewport.changeY);
		this.setStatus({});
	},
	
	/**
	 * calculate ingame coords 
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return Object
	 */
	getInGameCoords : function(x, y) {
		return {
			x : this.galaxy.start.x + x,
			y : this.galaxy.start.y + y
		};
	},
	
	getInGameCoords2 : function() {
		return this.getInGameCoords(
			this.galaxy.config.getRealX(this.quadrant.x), 
			this.galaxy.config.getRealY(this.quadrant.y)
		);
	},
	
	/**
	 * get offset for positioning
	 * 
	 * @return Object
	 */
	getOffset : function() {
		var returnOffset = {
			x : 0,
			y : 0
		};
		if(this.galaxy.config.options.galaxy.item.deformation) {
			Imperion.Util.PseudoRandom.setNewSeed(this.getSystemId());
			returnOffset.x = Imperion.Util.PseudoRandom.rand(10, this.galaxy.config.options.quadrant.width - this.galaxy.config.options.galaxy.item.width - 10);
			returnOffset.y = Imperion.Util.PseudoRandom.rand(10, this.galaxy.config.options.quadrant.height - this.galaxy.config.options.galaxy.item.height - 10);
		}
		return returnOffset;
	},
	
	/**
	 * get system id
	 * 
	 * @return int
	 */
	getSystemId : function() {
		var iC = this.getInGameCoords(
			this.galaxy.config.getRealX(this.quadrant.x), 
			this.galaxy.config.getRealY(this.quadrant.y)
		);
		return this.galaxy.generator.getSystemId(iC.x, iC.y);
	},
	
	/**
	 * get the coordinates from center relativ to the viewport
	 * 
	 * @return Object
	 */
	getCenterCoordinates : function() {
		var offset = this.getOffset();
		var itemConfig =  this.galaxy.config.options.galaxy.item;
		return {
			x : this.position.x + offset.x + this.galaxy.position.x + Math.round(itemConfig.width / 2),
			y : this.position.y + offset.y + this.galaxy.position.y + Math.round(itemConfig.height / 2)
		};
	},
	
	/**
	 * check if system is in frog
	 * 
	 * @returns {Boolean}
	 */
	hasFrog : function() {
		if(this.galaxy.noFrog[this.systemId] !== undefined) {
			return false;
		}
		return true;
	},
		
	/**
	 * set the status icons from element
	 * 
	 * @param Object status
	 * 
	 * @return void
	 */
	setStatus : function(status) {
		if(status.ownage && status.fleets) {
			this.elements.status.ownage.setProperty('class', 'ownage open ' + status.ownage);
		}
		else if(status.ownage) {
			this.elements.status.ownage.setProperty('class', 'ownage ' + status.ownage);
		}
		else {
			this.elements.status.ownage.setProperty('class', '');
		}
		if(status.movements) {
			this.elements.status.movements.setProperty('class', 'movements ' + status.movements);
		}
		else {
			this.elements.status.movements.setProperty('class', '');
		}
		if(status.fleets) {
			this.elements.status.fleets.setProperty('class', 'fleets ' + status.fleets);
		}
		else {
			this.elements.status.fleets.setProperty('class', '');
		}
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click':
				switch(this.elementType) {
					case GALAXY_TYPE_STAR:
						this.galaxy.galaxyElementStarClicked(this);
						break;
				}
				break;
			case 'disable_select':
				eventObject.preventDefault();
				new Event(eventObject).stop();
				break;
			case 'event_delegation':
				//get click position
				var mousePos = this.galaxy.config.getMouseCoordsFromEvent(eventObject);
				this.galaxy.galaxyElementEvent(this, eventObject, this.getCenterCoordinates());
				eventObject.stop();
				break;
			case 'mousewheel':
				if (eventObject.wheel > 0) {
					this.galaxy.galaxyElementStarClicked(this);
					eventObject.stop();
				}
				break;
		}
	},

	/**
	 * load element
	 *
	 * @return void
	 */
	loadElements:function () {
		this.elements.container = this.getClonedTemplate('MapGalaxyElement', true);
		this.addEvent('click', this.elements.container, $H({ action:'click' }));

		this.addEvent('mousewheel', this.elements.container, $H({ action:'mousewheel' }));

		this.addEvent('mousedown', this.elements.container, $H({ action : 'disable_select' }));
		this.addEvent('selectstart', this.elements.container, $H({ action : 'disable_select' }));
		
		this.elements.image		= this.elements.container.getElement('IMG');
		
		this.elements.status = {};
		this.elements.status.container = this.elements.container.getElement('UL');
		var elements = this.elements.status.container.getElements('LI');
		
		this.elements.status.ownage		= elements[0];
		this.elements.status.movements	= elements[1];
		this.elements.status.fleets		= elements[2];
		
		var events = this.galaxy.config.options.galaxy.item.listenerEvents;
		for(var i = 0 ; i < events.length ; i++) {
			this.addEvent(events[i], this.elements.container, $H({ action : 'event_delegation' }));
		}
	}
});
Imperion.Map.Modules.Minimap = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Observable],
	
	/**
	 * config object
	 * 
	 * @var Imperion.Map.Config
	 */
	config : null,
	
	/**
	 * zoom state
	 * 
	 * @var float
	 */
	zoomState : 1,
	zoomStateNext : null,
	
	/**
	 * fx instance
	 * 
	 * @var Fx.Morph
	 */
	zoomFx : null,
	
	/**
	 * zoom dimensions
	 * 
	 * @var Object
	 */
	zoomDimensions : {
		width  : 0,
		height : 0
	},
	
	/**
	 * zoom position
	 * 
	 * @var Object
	 */
	zoomPosition : {
		x : 0,
		y : 0
	},
	
	/**
	 * tooltop handle
	 * 
	 * @var Imperion.Interface.Gui.Tooltip
	 */
	tooltipHandle : null,
	
	/**
	 * symbols
	 * 
	 * @var Array
	 */
	symbols : null,
	
	/**
	 * prepare the minimap
	 * 
	 * @param Imperion.Map.Config.Root config
	 * @param Array symbolData
	 * @param Imperion.Interface.Gui.Tooltip tooltipHandle
	 * 
	 * @return void
	 */
	initialize : function(config, symbolData, tooltipHandle) {
		this.config = config;
		this.tooltipHandle = tooltipHandle;
		this.zoomState = 1;
		this.zoomStateNext = null;
		this.zoomFx = null;
		//load elements
		this.loadElements();
		//set start size
		var minimap = this.config.options.minimap;
		var viewport = this.config.options.viewport;
		//calculate zoom dimensions
		this.zoomDimensions = {
			width  : viewport.width * minimap.zoomFactor,
			height : viewport.height * minimap.zoomFactor
		};
		this.setDimensions(this.zoomDimensions.width, this.zoomDimensions.height);
		//calculate zoom position
		this.zoomPosition = {
			x : 0 - (this.zoomDimensions.width - viewport.width) / 2,
			y : 0 - (this.zoomDimensions.height - viewport.height) / 2
		};
		this.setPosition(this.zoomPosition.x, this.zoomPosition.y);
		this.scaleImage(minimap.scaleProcent);
		//add symbols
		this.symbols = new Array();
		$splat(symbolData).each(function(symbol, key) {
			this.symbols[key] = Imperion.Map.Modules.Factory.minimapSymbol(this, symbol);
			this.symbols[key].elements.container.inject(this.elements.container);
			this.symbols[key].show();
		}, this);
	},
	
	/**
	 * zoom out
	 * 
	 * @return void
	 */
	zoomOut : function() {
		if(!this.config.registry.fxRunningMinimap && this.zoomStateNext === null) {
			var morphParams = {
				height : this.zoomDimensions.height,
				width  : this.zoomDimensions.width,
				left : this.zoomPosition.x,
				top : this.zoomPosition.y
			};
			this.config.registry.fxRunningMinimap = true;
			this.zoomFx.start(morphParams);
			this.zoomStateNext = 2;
		}
	},
	
	/**
	 * zoom in
	 * 
	 * @return void
	 */
	zoomIn : function() {
		if(!this.config.registry.fxRunningMinimap && this.zoomStateNext === null) {
			var morphParams = {
				height : this.config.options.viewport.height,
				width  : this.config.options.viewport.width,
				left : 0,
				top : 0
			};
			this.config.registry.fxRunningMinimap = true;
			this.zoomFx.start(morphParams);
			this.zoomStateNext = 1;
		}
	},
	
	/**
	 * show the minimap
	 * 
	 * @return void
	 */
	show : function() {
		if(this.elements.container.hasClass('hideContainer')) {
			this.elements.container.removeClass('hideContainer');
			this.elements.background.removeClass('hideContainer');
		}
	},
	
	/**
	 * hide the minimap
	 * 
	 * @return void
	 */
	hide : function() {
		if(!this.elements.container.hasClass('hideContainer')) {
			this.elements.container.addClass('hideContainer');
			this.elements.background.addClass('hideContainer');
		}
	},

	/**
	 * set the dimensions of minimap
	 * 
	 * @param int newWidth
	 * @param int newHeight
	 * 
	 * @return void
	 */
	setDimensions : function(newWidth, newHeight) {
		this.elements.container.setStyles({
			width : newWidth,
			height : newHeight
		});
	},
	
	/**
	 * set position of minimap
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return void
	 */
	setPosition : function(x, y) {
		this.elements.container.setStyles({
			top : y,
			left : x
		});
	},
	
	/**
	 * callback for complete animations
	 * 
	 * @param Element fxElement
	 * 
	 * @return void
	 */
	fxComplete : function(fxElement) {
		this.config.registry.fxRunningMinimap = false;
		switch(this.zoomStateNext) {
			case 1:
				this.zoomState = 0;
				this.zoomStateNext = null;
				this.notify({}, 'zoomFromGalaxyToMinimapComplete');
				break;
			case 2:
				this.zoomState = 0;
				this.zoomStateNext = null;
				this.notify({}, 'zoomFromMinimapToGalaxyComplete');
				break;
		}
	},

	/**
	 * get ingame coords by x y
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return Object
	 */
	getIngameCoordsByXY : function(x, y) {
		var icX = this.config.options.viewport.halfWidth * -1 + x;
		var icY = (y - this.config.options.viewport.halfHeight) * -1;
		icX = Math.round(100 * icX / this.config.options.minimap.scaleProcent);
		icY = Math.round(100 * icY / this.config.options.minimap.scaleProcent);
		
		var xooR = this.xOutOfRange(icX);
		var yooR = this.yOutOfRange(icY);
		try {
			if(xooR && yooR) {
				//throw new Imperion.Map.ExceptionCritical('X and Y Coordinate out of range', IMPERION_MAP_EXCEPTION_X_Y_OUT_OF_RANGE);
				return null;
			}
			else if(xooR) {
				//throw new Imperion.Map.ExceptionCritical('X Coordinate out of range', IMPERION_MAP_EXCEPTION_X_OUT_OF_RANGE);
				return null;
			}
			else if(yooR) {
				//throw new Imperion.Map.ExceptionCritical('Y Coordinate out of range', IMPERION_MAP_EXCEPTION_Y_OUT_OF_RANGE);
				return null;
			}
		} catch(e) {
			throw e;
		}
		
		return {
			x : icX,
			y : icY
		};
	},
	
	/**
	 * check if in game coord x is out of range
	 * 
	 * @param int x
	 * 
	 * @return boolean
	 */
	xOutOfRange : function(x) {
		if(x <= this.config.options.galaxy.halfWidth && x >= (this.config.options.galaxy.halfWidth * -1)) {
			return false;
		}
		return true;
	},
	
	/**
	 * check if in game coord y is out of range
	 * 
	 * @param int y
	 * 
	 * @return boolean
	 */
	yOutOfRange : function(y) {
		if(y <= this.config.options.galaxy.halfHeight && y >= (this.config.options.galaxy.halfHeight * -1)) {
			return false;
		}
		return true;
	},

	/**
	 * called by eventHandler case 'mousewheel'
	 *
	 * @param mousePosition
	 *
	 * @return void
	 */
	zoomToGalaxy : function(mousePos){
		var iC = this.getIngameCoordsByXY(mousePos.x, mousePos.y);
		if(iC !== null) {
			this.notify({
				click : mousePos,
				coord : iC
			}, 'clickOnMinimap');
		}
	},

	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'mouse_move':
				var mousePos = this.config.getMouseCoordsFromEvent(eventObject);
				var coords = this.getIngameCoordsByXY(mousePos.x, mousePos.y);
				if(coords !== null) {
					this.tooltipHandle.setText('X: ' + coords.x + ' Y: ' + coords.y);
					this.tooltipHandle.show();
				}
				else {
					this.tooltipHandle.hide();
				}
				break;
			case 'mouse_enter':
				this.tooltipHandle.show();
				break;
			case 'mouse_leave':
				this.tooltipHandle.hide();
				break;
			case 'click':
				this.zoomToGalaxy(this.config.getMouseCoordsFromEvent(eventObject));
				break;
			case 'mousewheel':
				if(eventObject.wheel > 0){
					this.zoomToGalaxy(this.config.getMouseCoordsFromEvent(eventObject));
				}
				eventObject.preventDefault();
				new Event(eventObject).stop();
				break;
		}
	},

	/**
	 * scale image
	 * 
	 * @param 	{Number}	procent
	 * 
	 * @return void
	 */
	scaleImage : function(procent) {
		var dem = 200 * procent / 100;
		var half = 50 - (dem / 2);
		this.elements.image.setStyles({
			width 	: dem + '%',
			height 	: dem + '%',
			left	: half + '%',
			top		: half + '%'
		});
	},
	
	/**
	 * load minimap elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('MapMiniMap');
		this.elements.background = this.getTemplate('MapMiniMapBackground');
		this.elements.image = this.elements.container.getElement('IMG');
		
		this.elements.plane = this.elements.container.getElement('.position');
		this.addEvent('mousemove', this.elements.plane, $H({ action : 'mouse_move' }));
		this.addEvent('mouseenter', this.elements.plane, $H({ action : 'mouse_enter' }));
		this.addEvent('mouseleave', this.elements.plane, $H({ action : 'mouse_leave' }));
		this.addEvent('click', this.elements.plane, $H({ action : 'click' }));
		this.addEvent('mousewheel', this.elements.plane, $H({ action : 'mousewheel' }));
		
		
		var fxOptions = this.config.options.minimap.zoomOutFx;
		fxOptions.onComplete = this.fxComplete.bindNew(this);
		
		this.zoomFx = new Fx.Morph(this.elements.container, fxOptions);
	}
});

Imperion.Map.Modules.MinimapSymbol = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template],
	
	/**
	 * options
	 * 
	 * @var Object
	 */
	options : {
		x : 0,
		y : 0,
		icon : ''
	},
	
	/**
	 * parent minimap
	 * 
	 * @var Imperion.Map.Minimap
	 */
	parentHandle : null,
	
	/**
	 * prepare the symbol
	 * 
	 * @param Imperion.Map.Minimap parentHandle
	 * @param Object options
	 * 
	 * @return void
	 */
	initialize : function(parentHandle, options) {
		this.parentHandle = parentHandle;
		this.setOptions(options);
		
		//
		this.loadElements();
		//
		this.setPosition(this.options.x, this.options.y);
		//
		this.setIcon(this.options.icon);
	},
	
	/**
	 * set the position of the symbol
	 * 
	 * @param int ingameX
	 * @param int ingameY
	 * 
	 * @return void
	 */
	setPosition : function(ingameX, ingameY) {
		var procent = this.parentHandle.config.options.minimap.scaleProcent;
		var posx = ((ingameX * procent) / 100) + this.parentHandle.config.options.viewport.halfWidth;
		var posy = -1 * ((ingameY * procent) / 100) + this.parentHandle.config.options.viewport.halfHeight; 

		var posx = posx - 19;
		var posy = posy - 19;
		
		this.elements.container.setStyles({
			left : this.parentHandle.config.getPercentWidth(posx) + '%',
			top  : this.parentHandle.config.getPercentHeight(posy) + '%'
		});
	},
	
	/**
	 * this set icon
	 * 
	 * @param String newIcon
	 * 
	 * @return void
	 */
	setIcon : function(newIcon) {
		if(this.options.icon !== '') {
			this.elements.container.removeClass(this.options.icon);
		}
		this.elements.container.addClass(newIcon);
		this.options.icon = newIcon;
	},
	
	/**
	 * load symbol elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('MapMinimapSymbol');
	}
});

Imperion.Map.Modules.StarLayerHandle = new Class({	
	/**
	 * array with registered starlayers
	 * 
	 * @var Array
	 */
	layer : null,
	
	/**
	 * prepare
	 */
	initialize : function() {
		this.layer = new Array();
	},
	
	/**
	 * register a new Star layer
	 * 
	 * @param Imperion.Map.StarLayer newStarLayer
	 * 
	 * @return void
	 */
	add : function(newStarLayer) {
		var starLayerFactor = this.layer.length + 1;
		newStarLayer.setFactor(starLayerFactor / 2);
		newStarLayer.factory = this;
		this.layer.push(newStarLayer);
	},
	
	/**
	 * move layers
	 * 
	 * @param Object direction
	 * 
	 * @return void
	 */
	move : function(direction) {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].move(direction);
			this.layer[i].change();
		}
	},
	
	/**
	 * rotate stars
	 * 
	 * @return void
	 */
	change : function() {
		for(var i = 0 ; i < this.layer.length ; i++) {
			//this.layer[i].change();
		}
	},
	
	/**
	 * zoom 
	 * 
	 * @param int direction
	 * 
	 * @return void
	 */
	zoom : function(direction) {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].zoom(direction);
		}
	},
	
	/**
	 * zoom out layers
	 * 
	 * @return void
	 */
	
	zoomOut : function() {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].zoomOut();
		}
	},
	
	/**
	 * zoom out layers
	 * 
	 * @return void
	 */
	
	zoomIn : function() {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].zoomIn();
		}
	},
	
	/**
	 * zoom to system
	 * 
	 * @param int fromX
	 * @param int fromY
	 * 
	 * @return void
	 */
	zoomToSystem : function(fromX, fromY) {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].zoomToSystem(fromX, fromY);
		}
	},
	
	/**
	 * show instant
	 * 
	 * @returns	{Void}
	 */
	showInstant : function() {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].showInstant();
		}
	},
	
	/**
	 * zoom to orb
	 * 
	 * @param int fromX
	 * @param int fromY
	 * 
	 * @return void
	 */
	zoomToOrb : function() {
		for(var i = 0 ; i < this.layer.length ; i++) {
			this.layer[i].zoomToOrb();
		}
	}
	
});

Imperion.Map.Modules.StarLayer = new Class({
	Extends : Imperion.Map.Moveable,
	Implements : [Options, Imperion.Util.Class, Imperion.Template],
	/**
	 * config object
	 * 
	 * @var Imperion.Map.Config
	 */
	config : null,
	
	/**
	 * scale factor
	 * 
	 * @var int
	 */
	scaleFactor : 0,
	
	/**
	 * position before zooming
	 * 
	 * @var Object
	 */
	zoomPos : {
		x : null,
		y : null
	},
	
	/**
	 * current zoom factor
	 * 
	 * @var Object
	 */
	zoomFactor : {
		x : 1,
		y : 1
	},
	
	/**
	 * zoom state
	 * 
	 * @var float
	 */
	zoomState : 1,
	
	/**
	 * dimensions of the layer
	 * 
	 * @var Object
	 */
	dimension : {
		w : 0,
		h : 0
	},
	
	/**
	 * fx instances
	 * 
	 * @var Object
	 */
	fx : {
		zoomIn : null,
		zoomOut : null
	},
	
	/**
	 * reference to parent
	 * 
	 * @var Imperion.Map.StarLayerFactory
	 */
	factory : null,
	
	/**
	 * prepare the object
	 * 
	 * @return void
	 */
	initialize : function(config) {
		this.config = config;
		//
		this.scaleFactor = this.config.options.stars.factor;
		this.movement  = this.scaleFactor * this.config.options.stars.speedFactor;
		this.zoomState = 1;
		//
		this.dimension = {
			w : this.config.options.viewport.width,
			h : this.config.options.viewport.height
		};
		this.zoomPos = {
			x : null,
			y : null
		};
		this.zoomFactor = {
			x : 1,
			y : 1
		};
		this.fx = {
			zoomIn : null,
			zoomOut : null
		};
		//call moveable constructor
		this.parent();
		//
		this.loadElements();
	},
		
	/**
	 * add the stars
	 * 
	 * @return void
	 */
	addStars : function() {
		//
		var limitsX = this.config.getRealQuadrantLimitsX();
		var limitsY = this.config.getRealQuadrantLimitsY();
		var width = this.config.getPercentWidth(this.config.options.stars.star.width) * this.scaleFactor;
		var height = this.config.getPercentHeight(this.config.options.stars.star.height) * this.scaleFactor;
		//
		for(var y = limitsY.down ; y < limitsY.up ; y++) {
			this.moveElements[y] = new Array();
			for(var x = limitsX.down ; x < limitsX.up ; x++) {
				this.moveElements[y][x] = null;
				var randVal = Imperion.Util.PseudoRandom.rand(1,100);
				if(randVal < this.config.options.stars.quadrantChance) {
					var oX = this.config.options.quadrant.width * x + Imperion.Util.PseudoRandom.rand(0, this.config.options.quadrant.width - this.config.options.stars.star.width * this.scaleFactor);
					var oY = this.config.options.quadrant.height * y + Imperion.Util.PseudoRandom.rand(0, this.config.options.quadrant.height - this.config.options.stars.star.height * this.scaleFactor);
					var starInst = Imperion.Map.Modules.Factory.starLayerStar(oX, oY, width, height, this);
					this.elements.container.appendChild(starInst.elements.container);
					this.moveElements[y][x] = starInst;
				}
			}
		}
	},
	
	/**
	 * zoom the layer
	 * 
	 * @param int direction
	 * 
	 * @return void
	 */
	zoom : function(direction) {
		//save start zooming position
		if(this.zoomPos.x === null && this.zoomPos.y === null) {
			this.zoomPos.x = this.position.x;
			this.zoomPos.y = this.position.y;
		}
		//increase zoom factor
		this.zoomFactor.x += this.config.options.stars.zoom * direction.w;
		this.zoomFactor.y += this.config.options.stars.zoom * direction.h;
		//check if zoom is finished
		if(this.zoomFactor.x < 1 && this.zoomFactor.y < 1) {
			this.zoomPos.x = null;
			this.zoomPos.y = null;
			this.zoomFactor.x = 1;
			this.zoomFactor.y = 1;
		}
		//zooming
		else {
			//calculate new dimensions
			// new width = width of what u see * new factor (for example 1.5 for new with 150%)
			var newWidth = this.config.options.viewport.width * this.zoomFactor.x;
			var newHeight = this.config.options.viewport.height * this.zoomFactor.y;
			//calculate offset for positioning 
			var offsetX  = (newWidth - this.config.options.viewport.width) / 2;
			var offsetY  = (newHeight - this.config.options.viewport.height) / 2;
			//set new values
			this.setDimension(newWidth, newHeight);
			this.setPosition(this.zoomPos.x * this.zoomFactor.x - offsetX, this.zoomPos.y * this.zoomFactor.y - offsetY);
		}
	},
	
	/**
	 * zoom from system to orb
	 * 
	 * @return void
	 */
	zoomToOrb : function() {
		var newWidth = this.config.viewport().width * this.config.stars().zoomFactorToOrb;
		var newHeight = this.config.viewport().height * this.config.stars().zoomFactorToOrb;
		
		var moveOffset = {
			x : (this.config.registry.starLayerZoomPos.x - this.config.viewport().halfWidth) * this.config.stars().zoomFactorToOrb,
			y : (this.config.registry.starLayerZoomPos.y - this.config.viewport().halfHeight) * this.config.stars().zoomFactorToOrb
		};
		
		var morphParams = {
			width  : newWidth,
			height : newHeight,
			left : this.position.x * this.config.stars().zoomFactorToOrb - moveOffset.x - ((newWidth - this.config.viewport().width) / 2),
			top : this.position.y * this.config.stars().zoomFactorToOrb - moveOffset.y - ((newHeight - this.config.viewport().height) / 2)
		};
		
		this.fx.zoomIn.start(morphParams);
		this.zoomState = 2;
	},
	
	/**
	 * zoom to system view center
	 * 
	 * @param int fromX
	 * @param int fromY
	 * 
	 * @return void
	 */
	zoomToSystem : function(fromX, fromY) {
		if(!fromX || !fromY) {
			fromX = this.config.registry.starLayerZoomPos.x;
			fromY = this.config.registry.starLayerZoomPos.y;
		}
		var newWidth = this.config.viewport().width * this.config.stars().zoomFactorToSystem;
		var newHeight = this.config.viewport().height * this.config.stars().zoomFactorToSystem;
		
		var moveOffset = {
			x : (fromX - this.config.viewport().halfWidth) * this.config.stars().zoomFactorToSystem,
			y : (fromY - this.config.viewport().halfHeight) * this.config.stars().zoomFactorToSystem
		};
		
		var morphParams = {
			width  : newWidth,
			height : newHeight,
			left : this.position.x * this.config.stars().zoomFactorToSystem - moveOffset.x - ((newWidth - this.config.viewport().width) / 2),
			top : this.position.y * this.config.stars().zoomFactorToSystem - moveOffset.y - ((newHeight - this.config.viewport().height) / 2)
		};
		
		this.config.registry.starLayerZoomPos.x = fromX;
		this.config.registry.starLayerZoomPos.y = fromY;
		
		this.fx.zoomIn.start(morphParams);
		this.zoomState = 2;
	},
	
	/**
	 * zoom layer instant to system
	 * 
	 * @returns	{Void}
	 */
	showInstant : function() {
		var fromX = this.config.registry.starLayerZoomPos.x;
		var fromY = this.config.registry.starLayerZoomPos.y;
		var newWidth = this.config.viewport().width * this.config.stars().zoomFactorToSystem;
		var newHeight = this.config.viewport().height * this.config.stars().zoomFactorToSystem;
		
		var moveOffset = {
			x : (fromX - this.config.viewport().halfWidth) * this.config.stars().zoomFactorToSystem,
			y : (fromY - this.config.viewport().halfHeight) * this.config.stars().zoomFactorToSystem
		};
		
		this.elements.container.setStyles({
			width  : newWidth,
			height : newHeight,
			left : this.position.x * this.config.stars().zoomFactorToSystem - moveOffset.x - ((newWidth - this.config.viewport().width) / 2),
			top : this.position.y * this.config.stars().zoomFactorToSystem - moveOffset.y - ((newHeight - this.config.viewport().height) / 2)
		});
		
		this.config.registry.starLayerZoomPos.x = fromX;
		this.config.registry.starLayerZoomPos.y = fromY;
		
		
		this.zoomState = 2;
	},
	
	/**
	 * zoom out the layer
	 * 
	 * @return void
	 */
	zoomOut : function() {
		var morphParams = {
			height : 0,
			width  : 0,
			left : this.config.viewport().halfWidth,
			top : this.config.viewport().halfHeight
		};
		this.fx.zoomOut.start(morphParams);
		this.zoomState = 0;
	},
	
	/**
	 * zoom in the layer
	 * 
	 * @return void
	 */
	zoomIn : function() {
		var morphParams = {
			height : this.config.viewport().height,
			width  : this.config.viewport().width,
			left : this.position.x,
			top : this.position.y
		};
		this.fx.zoomOut.start(morphParams);
		this.zoomState = 1;
	},
	
	/**
	 * set dimensions of layer
	 * 
	 * @param int newWidth
	 * @param int newHeight
	 * 
	 * @return void
	 */
	setDimension : function(newWidth, newHeight) {
		this.elements.container.setStyles({
			width : newWidth,
			height: newHeight
		});
		this.dimension.w = newWidth;
		this.dimension.h = newHeight;
	},
	
	
	/**
	 * check if layer can move
	 * 
	 * @return bool
	 */
	canMove : function() {
		if(this.zoomPos.x === null && this.zoomPos.y === null) {
			return true;
		}
		return false;
	},
	
	/**
	 * set the factor for sizing stars
	 * 
	 * @param int newFactor
	 * 
	 * @return void
	 */
	setFactor : function(newFactor) {
		this.scaleFactor = newFactor;
		this.movement  = this.scaleFactor * this.config.options.stars.speedFactor;
		this.addStars();
	},
	
	/**
	 * callback for complete animations
	 * 
	 * @param Element fxElement
	 * 
	 * @return void
	 */
	fxComplete : function(fxElement) {
	},
	
	/**
	 * load star layer elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('MapStarLayer');
		this.elements.container.removeClass('hideContainer');
		
		var zoomOutFx = this.config.stars().zoomOutFx;
		zoomOutFx.onComplete = this.fxComplete.bindNew(this);
		var zoomInFx = this.config.stars().zoomInFx;
		zoomInFx.onComplete = this.fxComplete.bindNew(this);
		
		this.fx.zoomIn = new Fx.Morph(this.elements.container, zoomInFx);
		this.fx.zoomOut = new Fx.Morph(this.elements.container, zoomOutFx);
	}
});

Imperion.Map.Modules.StarLayerStar = new Class({
	Implements : [Imperion.Template, Imperion.Util.Class, Options],
	
	/**
	 * position
	 * 
	 * @var Object
	 */
	position : {
		x : 0,
		y : 0
	},
	
	/**
	 * parent layer
	 * 
	 * @var Imperion.Map.StarLayer
	 */
	layer : null,
	
	/**
	 * prepare the star
	 * 
	 * @return void
	 */
	initialize : function(options, parentLayer) {
		//
		this.layer = parentLayer;
		//
		this.loadElements();
		this.setPosition(options.offsetX, options.offsetY);
		this.setDimensions(options.width, options.height);
	},
	
	/**
	 * set the position of the star
	 * 
	 * @param int newX
	 * @param int newY
	 * 
	 * @return void
	 */
	setPosition : function(newX, newY) {
		this.elements.container.setStyles({
			top : this.layer.config.getPercentHeight(newY) + '%',
			left : this.layer.config.getPercentWidth(newX) + '%'
		});
		this.position.x = newX;
		this.position.y = newY;
	},
	
	/**
	 * set the dimensions of the star
	 * 
	 * @param int width
	 * @param int height
	 * 
	 * @return void
	 */
	setDimensions : function(width, height) {
		this.elements.container.setStyles({
			width : width + '%',
			height : height + '%'
		});
	},
	
	/**
	 * switch x position
	 * 
	 * @param direction
	 * 
	 * @return void
	 */
	switchX : function(direction) {
		this.setPosition(this.position.x + direction * this.layer.config.options.viewport.changeX, this.position.y);
	},
	
	/**
	 * switch y position
	 * 
	 * @param direction
	 * 
	 * @return void
	 */
	switchY : function(direction) {
		this.setPosition(this.position.x, this.position.y + direction * this.layer.config.options.viewport.changeY);
	},
	
	/**
	 * load elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('MapStarLayerStar');
		this.elements.container.removeClass('hideContainer');
	}
});
Imperion.Map.Modules.System = new Class({
	Implements : [Imperion.Util.Class, Imperion.Event, Imperion.Template, Imperion.Observable],
	/**
	 * Config Object
	 * 
	 * @var Imperion.Map.Config
	 */
	config : null,
	
	/**
	 * currently bounded data
	 * 
	 * @var Object
	 */
	data : null,
	
	/**
	 * Generator Object
	 * 
	 * @var Imperion.Map.Generator
	 */
	generator : null,
	
	/**
	 * planets, comets, debris
	 * 
	 * @var Array
	 */
	planets : null,
	comets : null,
	debris : {
		free : null,
		used : null
	},
	
	orbs : {},
	
	/**
	 * zoom state
	 * 
	 * @var int
	 */
	zoomState : 0,
	zoomStateNext : null,
	
	/**
	 * zoom from
	 * 
	 * @var Object
	 */
	position : {
		x : 0,
		y : 0
	},
	
	/**
	 * fx instances
	 * 
	 * @var Object
	 */
	fx : {
		zoomIn : null,
		zoomOut : null
	},
	
	/**
	 * current zoomed element
	 * 
	 * @var Imperion.Map.SystemElement
	 */
	activeElement : null,
	
	/**
	 * reserver positions (Planets on Rings, Comets)
	 * 
	 * @type	Object
	 */
	reservedPosition : {},
	
	/**
	 * prepare the object
	 * 
	 * @param Imperion.Map.Galaxy galaxy
	 * @param Imperion.Map.Generator generator
	 * 
	 * @return void
	 */
	initialize : function(config, generator) {
		this.config = config;
		this.generator = generator;
		this.fx = {
			zoomIn : null,
			zoomOut : null
		};
		this.position = {
			x : 0,
			y : 0
		};
		this.reservedPosition = {};
		this.zoomState = 0;
		this.zoomStateNext = null;
		this.data = null;
		//
		this.loadElements();
		this.planets		= new Array();
		this.comets			= new Array();
		this.debris.free	= new Array();
		this.debris.used	= new Array();
		
		this.orbs[SYSTEM_ORB_TYPE_DEBRIS]	= { free : new Array(), used : new Array() };
		this.orbs[SYSTEM_ORB_TYPE_COMET]	= { free : new Array(), used : new Array() };
		
		//load planets
		for(var i = 1 ; i <= 8 ; i++) {
			this.planets[i] = Imperion.Map.Modules.Factory.orbByType(SYSTEM_ORB_TYPE_PLANET, this);
			this.planets[i].setOptionPosition(i);
			this.elements.container.appendChild(this.planets[i].elements.container);
		}
	},
	
	/**
	 * update the system (planets, comets, debris...)
	 * 
	 * @param int systemId
	 * @param Object systemData
	 * 
	 * @return void
	 */
	update : function(systemId, systemData) {
		try {
			if(!systemData || !systemData.planets || !systemData.debris || !systemData.comets) { 
				throw new Imperion.Map.ExceptionCritical(
					'System Data wrong Format', IMPERION_MAP_EXCEPTION_WRONG_DATA_FORMAT
				);
			}
			//Imperion.Util.PseudoRandom.setNewSeed(systemId);
			//this.setSystemType(Imperion.Util.PseudoRandom.rand(1,5));
			this.freeOrbs();
			this._updatePlanets(systemId, systemData.planets);
			this._updateComets(systemId, systemData.comets);
		} 
		catch(e) {
			throw e;
			// ERROR HANDLING
			// Imperion.Util.Log.Factory.handle().logException(e);
		}
	},
	
	/**
	 * update planets from system
	 * 
	 * @param	{Number}	systemId
	 * @param	{Object}	planetData Array with additional planet data
	 * 
	 * @returns	{Void}
	 */
	_updatePlanets : function(systemId, planetData) {
		var planetIdGround = systemId * 100;
		for(var i = 1 ; i <= 8 ; i++) {
			var planetId = planetIdGround + i;
			if(planetData[planetId]) {
				this.planets[i].update(planetId, planetData[planetId]);
				this.planets[i].options.enabled = true;
				//check if debris exist
				if(planetData[planetId].debris) {
					this.addDebris(this.planets[i], planetData[planetId].debris);
				}
			}
			else {
				this.planets[i].options.enabled = false;
			}
		}
	},
	
	/**
	 * add a debtis to orb
	 * 
	 * @param	{Imperion.Map.SystemElement}	parentOrb
	 * @param	{Object}						debrisData
	 * 
	 * @returns {Void}
	 */
	addDebris : function(parentOrb, debrisData) {
		var debris = this.getOrbObject(SYSTEM_ORB_TYPE_DEBRIS);
		debris.update(parentOrb.id, debrisData, parentOrb);
	},
	
	/**
	 * free all debris
	 * 
	 * @param	{String}	orbType
	 * 
	 * @returns {Imperion.Map.Module.SystemElement}
	 */
	getOrbObject : function(orbType) {
		var orb;
		//check if already created orb instances exist which are free
		if(this.orbs[orbType].free.length > 0) {
			//get last free orb
			orb = this.orbs[orbType].free.pop();
		}
		else {
			//no free orb instances exist -> create new
			orb = Imperion.Map.Modules.Factory.orbByType(orbType, this);
			this.elements.container.appendChild(orb.elements.container);
		}
		//save orb as used
		this.orbs[orbType].used.push(orb);
		orb.options.enabled = true;
		//return debris
		return orb;
	},
	
	/**
	 * free all debris
	 * 
	 * @returns {Void}
	 */
	freeOrbs : function() { 
		var orb;
		while(this.orbs[SYSTEM_ORB_TYPE_DEBRIS].used.length) {
			orb = this.orbs[SYSTEM_ORB_TYPE_DEBRIS].used.pop();
			orb.hide();
			orb.options.enabled = false;
			this.orbs[SYSTEM_ORB_TYPE_DEBRIS].free.push(orb);
		}
		while(this.orbs[SYSTEM_ORB_TYPE_COMET].used.length) {
			orb = this.orbs[SYSTEM_ORB_TYPE_COMET].used.pop();
			orb.hide();
			orb.options.enabled = false;
			this.orbs[SYSTEM_ORB_TYPE_COMET].free.push(orb);
		}
	},
	
	/**
	 * update / insert comets in a system
	 * 
	 * @param	{Number}	systemId
	 * @param	{Object}	cometData
	 * 
	 * @returns	{Void}
	 */
	_updateComets : function(systemId, cometData) {
		$H(cometData).each(function(cometData, cometId) {
			var comet = this.getOrbObject(SYSTEM_ORB_TYPE_COMET);
			comet.update(cometId, cometData);
		}, this);
	},
		
	/**
	 * find planet orb
	 * 
	 * @param int planetId
	 * 
	 * @return Imperion.Map.OrbPlanet
	 */
	findPlanetOrb : function(planetId) {
		var index = planetId % 100;
		if(this.planets[index]) {
			return this.planets[index];
		}
		return null;
	},
	
	/**
	 * find comet orb
	 * 
	 * @param	{Number}	cometId
	 * 
	 * @returns	{Imperion.Map.Modules.OrbComet}
	 */
	findCometOrb : function(cometId) {
		var comet = null;
		//find comet
		for(var i = this.orbs[SYSTEM_ORB_TYPE_COMET].used.length - 1 ; i >= 0 ; i--) {
			if(this.orbs[SYSTEM_ORB_TYPE_COMET].used[i].id == cometId) {
				comet = this.orbs[SYSTEM_ORB_TYPE_COMET].used[i]; 
			}
		}
		return comet;
	},
	
	/**
	 * system element was clicked
	 * 
	 * @param Imperion.Map.SystemElement systemElement
	 * 
	 * @return void
	 */
	systemElementClicked : function(systemElement) {
		var data = {};
		data.element = systemElement;
		data.type = systemElement.elementType;
		this.notify(data, 'clickOnSystemElement');
	},
	
	/**
	 * delegate for other system element events
	 * 
	 * @param Imperion.Map.SystemElement systemElement
	 * @param Event event
	 * @param Object click Position where Mouse cursor is
	 * 
	 * @return void
	 */
	systemElementEvent : function(systemElement, event, click) {
		var data = {};
		data.element = systemElement;
		data.elementType = systemElement.elementType; 
		data.event = event;
		data.click = click;
		this.notify(data, event.type + 'OnSystemElement');
	},
	
	/**
	 * show system instant
	 * 
	 * @returns void
	 */
	showInstant : function() {
		this.setPosition(0, 0);
		this.elements.container.setStyles({
			width	: this.config.options.viewport.width,
			height	: this.config.options.viewport.height,
			opacity	: 1
		});
		this.elements.background.setStyle('opacity', 1);
		this.showAll();
	},
	
	/**
	 * zoom invisible
	 * 
	 * @return void
	 */
	zoomToInvisible : function() {
		this.elements.background.morph({
			opacity : 0
		});
		if(!this.config.registry.fxRunningSystem && this.zoomStateNext === null) { 
			var morphParams = {
				width : 0,
				height : 0,
				left : this.position.x,
				top : this.position.y,
				opacity : 0
			};
			this.zoomStateNext = 0;
			this.config.registry.fxRunningSystem = true;
			this.fx.zoomIn.start(morphParams);
		}
	},
	
	/**
	 * zoom to default
	 * 
	 * @param int fromX
	 * @param int fromY
	 * @param bool fromGalaxy flag where zoom comes from (galaxy or orb)
	 * 
	 * @return void
	 */
	zoomToDefault : function(fromX, fromY, fromGalaxy) {
		if(!this.config.registry.fxRunningSystem && this.zoomStateNext === null) {
			if(fromX && fromY) {
				this.setPosition(fromX, fromY);
			}
			else {
				
			}
			var morphParams = {
				width : this.config.options.viewport.width,
				height : this.config.options.viewport.height,
				left : 0,
				top : 0,
				opacity : 1
			};
			if(fromGalaxy) {
				this.zoomStateNext = 1;
			}
			else {
				this.zoomStateNext = 3;
			}
			
			this.config.registry.fxRunningSystem = true;
			this.fx.zoomIn.start(morphParams);
		}
	},
	
	/**
	 * zoom to a orb
	 * 
	 * @param int fromX
	 * @param int fromY
	 * @param Imperion.Map.SystemElement orb
	 * 
	 * @return void
	 */
	zoomToOrb : function(fromX, fromY, orb) {
		if(!this.config.registry.fxRunningSystem && this.zoomStateNext === null) {
			this.notify({
				orb : orb
			}, 'zoomSystemToOrbStart');
			
			this.elements.background.morph({
				opacity : 0
			});
			
			var typeConfig = this.config.orbType(orb.elementType);
			var zoom = typeConfig.zoomSize / orb.getSize();
			
			var morphParams = {
				width  : this.config.options.viewport.width * zoom,
				height : this.config.options.viewport.height * zoom,
				left : fromX * zoom * -1 + typeConfig.zoomPos.x,
				top : fromY * zoom * -1 + typeConfig.zoomPos.y
			};
		
			this.zoomStateNext = 2;
			this.config.registry.fxRunningSystem = true;
			this.fx.zoomOut.start(morphParams);
		}
	},
	
	/**
	 * callback for complete animations
	 * 
	 * @param Element fxElement
	 * 
	 * @return void
	 */
	fxComplete : function(fxElement) {
		this.config.registry.fxRunningSystem = false;
		switch(this.zoomStateNext) {
			case 3:
				this.elements.background.morph({
					opacity : 1
				});
				break;
			case 2:
				this.zoomState = this.zoomStateNext;
				this.zoomStateNext = null;
				this.notify({
					element : this
				}, 'zoomSystemToOrbComplete');
				break;
			case 1:
				this.zoomState = this.zoomStateNext;
				this.zoomStateNext = null;
				this.elements.background.morph({
					opacity : 1
				});
				if(this.activeElement) {
					this.activeElement.showStatus();
					this.activeElement = null;
				}
				this.notify({
					orb : this
				}, 'zoomGalaxyToSystemComplete');
				break;
			case 0:
				this.zoomState = this.zoomStateNext;
				this.zoomStateNext = null;
				this.notify({}, 'zoomSystemToInvisbleComplete');
				break;
		}
	},
	
	/**
	 * callback after morph complete
	 * 
	 * @params Element fxElement
	 * 
	 * @return void
	 */
	morphComplete : function(fxElement) {
		switch(this.zoomStateNext) {
			case 3:
				this.zoomState = this.zoomStateNext;
				this.zoomStateNext = null;
				if(this.activeElement) {
					this.activeElement.showStatus();
					this.activeElement = null;
				}
				this.notify({
					orb : this
				}, 'zoomOrbToSystemComplete');
				break;
		}
	},
	
	/**
	 * set position of element
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return void
	 */
	setPosition : function(x, y) {
		this.elements.container.setStyles({
			top : y,
			left : x
		});
		this.position.x = x;
		this.position.y = y;
	},
	
	/**
	 * set the system type
	 * 
	 * @param int systemType
	 * 
	 * @return void
	 */
	setSystemType : function(systemType) {
		this.elements.background.setProperty('src', '/images/map/systems/' + systemType + '.png');
	},
	
	/**
	 * hide all system elements
	 * 
	 * @return void
	 */
	hideAll : function() {
		//hide all planets
		for(var i = 1 ; i < this.planets.length ; i++) {
			this.planets[i].hide();
		}
		//hide all comets
		for(var i = 0 ; i < this.orbs[SYSTEM_ORB_TYPE_COMET].used.length ; i++) {
			this.orbs[SYSTEM_ORB_TYPE_COMET].used[i].hide();
		}
		//hide all debris
		for(var i = 0 ; i < this.orbs[SYSTEM_ORB_TYPE_DEBRIS].used.length ; i++) {
			this.orbs[SYSTEM_ORB_TYPE_DEBRIS].used[i].hide();
		}
	},
	
	/**
	 * show all system elements
	 * 
	 * @return void
	 */
	showAll : function() {
		//show all planets
		for(var i = 1 ; i < this.planets.length ; i++) {
			this.planets[i].show();
		}
		//show all comets
		for(var i = 0 ; i < this.orbs[SYSTEM_ORB_TYPE_COMET].used.length ; i++) {
			this.orbs[SYSTEM_ORB_TYPE_COMET].used[i].show();
		}
		//show all debris
		for(var i = 0 ; i < this.orbs[SYSTEM_ORB_TYPE_DEBRIS].used.length ; i++) {
			this.orbs[SYSTEM_ORB_TYPE_DEBRIS].used[i].show();
		}
	},
	
	/**
	 * load system elements
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getTemplate('MapSystem');
		
		this.elements.background = this.elements.container.getElement('IMG');
		this.elements.background.set('morph', {
			duration: 150,
			onComplete : this.morphComplete.bindNew(this)
		});
		this.elements.background.setStyle('opacity', 0);
		
		
		
		this.elements.container.setStyle('opacity', 0);
		
		var zoomOutFx = this.config.options.galaxy.zoomOutFx;
			zoomOutFx.onComplete = this.fxComplete.bindNew(this);
		var zoomInFx = this.config.options.galaxy.zoomInFx;
			zoomInFx.onComplete = this.fxComplete.bindNew(this);
		
		this.fx.zoomIn = new Fx.Morph(this.elements.container, zoomInFx);
		this.fx.zoomOut = new Fx.Morph(this.elements.container, zoomOutFx);
	}
});

Imperion.Map.Modules.SystemElement = new Class({
	Implements : [Imperion.Util.Class, Imperion.Template, Imperion.Event, Imperion.Util.Checkpoint],
	
	/**
	 * options for element
	 * 
	 * @var Object
	 */
	options : {
		visible 	: false,
		enabled 	: false,
		dimension 	: 0
	},
	
	/**
	 * bounded data to element
	 * 
	 * @var Object
	 */
	data : null,
	
	/**
	 * bounded location object
	 * 
	 * @var Imperion.Data.Location
	 */
	location : null,
	
	/**
	 * element id
	 * 
	 * @var int
	 */
	id : null,
	
	/**
	 * parent system
	 * 
	 * @var Imperion.Map.System
	 */
	system : null,
	
	/**
	 * current position
	 * 
	 * @var object
	 */
	position: {
		x : 0,
		y : 0
	},
	
	/**
	 * flag if element is visible
	 * 
	 * @var boolean
	 */
	visible : true,
	
	/**
	 * system element type
	 * 
	 * @var int
	 */
	elementType : null,
	
	/**
	 * prepare the object
	 * 
	 * @param Imperion.Map.System system
	 * @param int systemElementType
	 * 
	 * @return void
	 */
	initialize : function(system, systemElementType) {
		this.system = system;
		//set default options
		this.setOptions({
			visible : false,
			enabled : false
		});
		if(!systemElementType) {
			systemElementType = SYSTEM_ORB_TYPE_UNDEFINED;
		}
		this.elementType = systemElementType;
		this.position = {
			x : 0,
			y : 0
		};
		this.data = {};
		this.id = null;
		this.location = null;
		//load elements
		this.loadElements();
	},
	
	/**
	 * check if checkpoint is resolved
	 * 
	 * @param	{String}			questIdent
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	isCheckpointResolved : function(ident, params, questObj) {
		switch(ident) {
			case 'CometDetailView':
				return false;
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist' + ident;
				break;
		}
	},
	
	/**
	 * activate checkpoint
	 * 
	 * @param	{String}			ident
	 * @param	{Object}			params
	 * @param	{Imperion.Quest}	questObj
	 * 
	 * @returns	{Boolean}
	 */
	activateCheckpoint : function(ident, params, questObj) {
		switch(ident) {
			case 'CometDetailView':
				var highlight = this.getCheckpointHighlight(ident, {
					posOffset	: {
						y : -30
					},
					rotation	: 'arrowBottom'
				});
				highlight.appendOver(this.elements.container);
				highlight.start();
				this.setCheckpointActive(ident, questObj);
				break;
			default:
				throw 'Imperion.Interface.Sidebar.Create.Building ident not exist';
				break;
		}
	},
	
	/**
	 * remove checkpoint
	 * 
	 * @param	{String}			ident
	 * 
	 * @returns	{Boolean}
	 */
	removeCheckpoint : function(ident, refreshQuests) {
		refreshQuests = refreshQuests === undefined ? true : refreshQuests;
		switch(ident) {
			case 'CometDetailView':
				var questObj = this.getCheckpointActive(ident);
				if(questObj !== null) {
					this.unsetCheckpointActive(ident);
					this.removeCheckpointHighlight(ident);
				}
				break;
			default:
				throw 'Imperion.Layout ident not exist';
				break;
		}
	},
	
	/**
	 * update the element
	 * 
	 * @param int id
	 * @param Object data
	 * 
	 * @return void
	 */
	update : function(id, data) {
		this.setId(id);
		this.setData(data);
		
		if(data.map_info && data.map_info.status) {
			this.setStatus(data.map_info.status);
		}
		else {
			this.setStatus({});
		}
	},
	
	/**
	 * set the status icons from element
	 * 
	 * @param Object status
	 * 
	 * @return void
	 */
	setStatus : function(status) {
		if(status.ownage && status.fleets) {
			this.elements.status.ownage.setProperty('class', 'ownage open ' + status.ownage);
		}
		else if(status.ownage) {
			this.elements.status.ownage.setProperty('class', 'ownage ' + status.ownage);
		}
		else {
			this.elements.status.ownage.setProperty('class', '');
		}
		if(status.movements) {
			this.elements.status.movements.setProperty('class', 'movements ' + status.movements);
		}
		else {
			this.elements.status.movements.setProperty('class', '');
		}
		if(status.fleets) {
			this.elements.status.fleets.setProperty('class', 'fleets ' + status.fleets);
		}
		else {
			this.elements.status.fleets.setProperty('class', '');
		}
	},
	
	/**
	 * set the new data of element
	 * 
	 * @param Object newData 
	 * 
	 * @return void
	 */
	setData : function(newData) {
		if(newData === null) {
			throw '//ERROR HANDLING DATA NOT SET';
		}
		this.data = newData;
	},
	
	/**
	 * set the id of element
	 * 
	 * @param int newId
	 * 
	 * @return void
	 */
	setId : function(newId) {
		if(newId === null) {
			throw '//ERROR HANDLING ID NOT SET';
		}
		this.id = newId;
	},
	
	/**
	 * set the location
	 * 
	 * @param Imperion.Data.Location location
	 * 
	 * @return void
	 */
	setLocation : function(location) {
		if(location === null) {
			throw '//ERROR HANDLING LOCATION NOT SET';
		}
		this.location = location;
	},
	
	/**
	 * get the location
	 * 
	 * @return Imperion.Data.Location
	 */
	getLocation : function() {
		if(this.location === null) {
			throw '//ERROR HANDLING LOCATION HAS TO BE SET';
		}
		return this.location;
	},
	
	/**
	 * set image of planet
	 * 
	 * @param String imagePath
	 * 
	 * @return void
	 */
	setImage : function(imagePath) {
		this.elements.image.setProperty('src', this.system.config.options.general.path + imagePath);
	},
	
	/**
	 * set position of element
	 * 
	 * @param int x
	 * @param int y
	 * 
	 * @return void
	 */
	setPosition : function(x, y) {
		this.elements.container.setStyles({
			top : this.system.config.getPercentHeight(y) + '%',
			left : this.system.config.getPercentWidth(x) + '%'
		});
		this.position.x = x;
		this.position.y = y;
	},

	/**
	 * set the dimension of planet
	 * 
	 * @param int side - because all elements are quadratic 1 side is enough
	 * 
	 * @return void
	 */
	setDimension : function(side) {
		this.elements.container.setStyles({
			height : this.system.config.getPercentHeight(side) + '%',
			width : this.system.config.getPercentWidth(side) + '%'
		});
		this.elements.status.container.setProperty('class', 'size' + side);
		this.options.dimension = side;
	},
	
	/**
	 * show the element
	 * 
	 * @return void
	 */
	show : function() {
		if(this.options.enabled && !this.options.visible) {
			if(this.elements.container.hasClass('hideContainer')) {
				this.elements.container.removeClass('hideContainer');
				this.options.visible = true;
			}
		}
	},
	
	/**
	 * show the element
	 * 
	 * @return void
	 */
	hide : function() {
		if(this.options.enabled && this.options.visible) {
			if(!this.elements.container.hasClass('hideContainer')) {
				this.elements.container.addClass('hideContainer');
				this.options.visible = false;
			}
		}
	},
	
	/**
	 * show status
	 * 
	 * @return void
	 */
	showStatus : function() {
		this.elements.status.container.removeClass('hideContainer');
	},
	
	/**
	 * hide status
	 * 
	 * @return void
	 */
	hideStatus : function() {
		this.elements.status.container.addClass('hideContainer');
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'event_delegation':
				//get click position
				var mousePos = this.system.config.getMouseCoordsFromEvent(eventObject);
				var click = {
					x : this.position.x + mousePos.x,
					y : this.position.y + mousePos.y
				};
				this.system.systemElementEvent(this, eventObject, click);
				eventObject.stop();
				break;
		}
	},
	
	/**
	 * load element
	 * 
	 * @return void
	 */
	loadElements : function() {
		this.elements.container = this.getClonedTemplate('MapSystemElement');
		this.addEvent('click', this.elements.container, $H({ action : 'click' }));

		this.addEvent('mousewheel', this.elements.container, $H({ action : 'mousewheel' }));

		this.elements.image = this.elements.container.getElement('IMG');
		this.elements.status = {};
		this.elements.status.container = this.elements.container.getElement('UL');
		this.elements.status.ownage = this.elements.status.container.getElement('.ownage');
		this.elements.status.movements = this.elements.status.container.getElement('.movements');
		this.elements.status.fleets = this.elements.status.container.getElement('.fleets');
		
		
		var events = this.system.config.orbType(this.elementType).listenerEvents;
		for(var i = 0 ; i < events.length ; i++) {
			this.addEvent(events[i], this.elements.container, $H({ action : 'event_delegation' }));
		}
	}
});

/**
 * sytem element planet
 */
Imperion.Map.Modules.OrbPlanet = new Class({
	Extends : Imperion.Map.Modules.SystemElement,
	
	/**
	 * options of planet
	 * 
	 * @var Object
	 */
	options : {
		position : 0,
		type : PLANET_TYPE_UNDEFINED
	},
	
	/**
	 * add constructor functionality and call parent constructor
	 * 
	 * @param Imperion.Map.System system
	 * 
	 * @return void
	 */
	initialize : function(system) {
		this.parent(system, SYSTEM_ORB_TYPE_PLANET);
	},

	/**
	 * update the planet
	 * 
	 * @param int id
	 * @param Object data
	 * 
	 * 
	 * @return void
	 */
	update : function(id, data) {
		this.parent(id, data);
		this.setLocation(Imperion.Data.Factory.locationPlanet({
			id : id,
			planetType : data.map_info.info.planet_type,
			name : data.name
		}));
		this.setOptionType(data.map_info.info.planet_type);
		var planetSize = this.getSize();
		
		this.setDimension(this.getSize());
		this.setPosition(this.options.position);
	},
	
	/**
	 * get the size of the planet
	 * 
	 * @return int
	 */
	getSize : function() {
		Imperion.Util.PseudoRandom.setNewSeed(this.id);
		var size = this.system.config.options.system.planet.size;
		var variation = this.system.config.options.system.planet.variation[this.options.position];
		
		return this.system.config.options.system.planet.size[Imperion.Util.PseudoRandom.rand(variation[0], variation[1]) - 1];
	},
	
	/**
	 * set planet type
	 * 
	 * @param int newPlanetType
	 * 
	 * @return void
	 */
	setOptionType : function(newPlanetType) {
		this.options.type = newPlanetType;
		this.setImage(this.system.config.options.orb.planet.images[newPlanetType]);
	},
	
	/**
	 * set the orbit position
	 * 
	 * @param int newPosition
	 * 
	 * @return void
	 */
	setOptionPosition : function(newPosition) {
		this.options.position = newPosition;
	},
	
	/**
	 * position of the planet
	 * 
	 * @param int orbitPosition
	 * 
	 * @return void
	 */
	setPosition : function(orbitPosition) {
		
		Imperion.Util.PseudoRandom.setNewSeed(this.id);
		
		var pos = this.system.config.options.system.rings[orbitPosition];
		
		var randIndex = Imperion.Util.PseudoRandom.rand(1, pos.length) - 1;
		
		this.system.reservedPosition[orbitPosition] = {};
		this.system.reservedPosition[orbitPosition][randIndex] = true;
		
		var posX = pos[randIndex].x - this.options.dimension / 2;
		var posY = pos[randIndex].y - this.options.dimension / 2;
		
		this.parent(posX, posY);
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//call parent
		this.parent(eventObject, params);
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click':
				//call parent method for event delegation
				this.system.systemElementClicked(this);
				break;
			case 'mousewheel':
				if(eventObject.wheel > 0){
					this.system.systemElementClicked(this);
					eventObject.stop();
				}
				break;
		}
	}
});

Imperion.Map.Modules.OrbComet = new Class({
	Extends : Imperion.Map.Modules.SystemElement,
	
	/**
	 * options of planet
	 * 
	 * @var Object
	 */
	options : {
		
	},
	
	/**
	 * add constructor functionality and call parent constructor
	 * 
	 * @param Imperion.Map.System system
	 * 
	 * @return void
	 */
	initialize : function(system) {
		this.parent(system, SYSTEM_ORB_TYPE_COMET);
		this.setImage(this.system.config.options.orb.comet.images[0]);
		this.setDimension(50);
	},
	
	/**
	 * update the comet
	 * 
	 * @param	{Number}						id
	 * @param	{Object}						data
	 * 
	 * @returns {Void}
	 */
	update : function(id, data) {
		this.parent(id, data);
		this.setLocation(Imperion.Data.Factory.locationComet({
			id	: id
		}));
		this.setPosition();
	},
	
	/**
	 * returns free orbit pos
	 * 
	 * @returns	{Number}
	 */
	getCometPosition : function() {
		Imperion.Util.PseudoRandom.setNewSeed(this.id);
		
		var position = null;
		while(position === null) {
			var orbit = Imperion.Util.PseudoRandom.rand(1, 8);
			var pos = this.system.config.options.system.rings[orbit];
			var randIndex = Imperion.Util.PseudoRandom.rand(1, pos.length) - 1;
			if(this.system.reservedPosition[orbit]) {
				if(this.system.reservedPosition[orbit][randIndex]) {
					continue;
				}
			}
			else {
				this.system.reservedPosition[orbit] = {};
			}
			position = this.system.config.options.system.rings[orbit][randIndex];
			this.system.reservedPosition[orbit][randIndex] = true;
		}
		return position;
	},
	
	/**
	 * position of the planet
	 * 
	 * @return void
	 */
	setPosition : function() {
		var cometPosition	= this.getCometPosition();
		
		var posX = cometPosition.x - this.options.dimension / 2;
		var posY = cometPosition.y - this.options.dimension / 2;
		
		this.parent(posX, posY);
	},
	
	/**
	 * get debris size
	 * 
	 * @returns	{Number}
	 */
	getSize : function() {
		return 50;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//call parent
		this.parent(eventObject, params);
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click':
				//call parent method for event delegation
				this.system.systemElementClicked(this);
				break;
			case 'mousewheel':
				if(eventObject.wheel > 0){
					this.system.systemElementClicked(this);
				}
				new Event(eventObject).stop();
				break;
		}
	}
});

Imperion.Map.Modules.OrbDebris = new Class({
	Extends : Imperion.Map.Modules.SystemElement,
	
	/**
	 * options of planet
	 * 
	 * @var Object
	 */
	options : {
		
	},
	
	/**
	 * parent orb instance
	 * 
	 * @type	Imperion.Map.SystemElement
	 */
	parentOrb : null,
	
	/**
	 * add constructor functionality and call parent constructor
	 * 
	 * @param Imperion.Map.System system
	 * 
	 * @return void
	 */
	initialize : function(system) {
		this.parent(system, SYSTEM_ORB_TYPE_DEBRIS);
		this.setImage(this.system.config.options.orb.debris.images[0]);
		this.setDimension(this.system.config.options.system.debris.side);
	},
	
	/**
	 * update the planet
	 * 
	 * @param	{Number}						id
	 * @param	{Object}						data
	 * @param	{Imperion.Map.SystemElement}	parentOrb
	 * 
	 * @returns {Void}
	 */
	update : function(id, data, parentOrb) {
		this.parent(id, data);
		this.parentOrb = parentOrb;
		this.setLocation(Imperion.Data.Factory.locationDebris({
			id			: id,
			parentType	: parentOrb.elementType
		}));
		var offset = (parentOrb.getSize() / 1.5) - this.system.config.options.system.debris.halfSide;
		this.setPosition(parentOrb.position.x - 5, parentOrb.position.y + offset);
	},
	
	/**
	 * get debris size
	 * 
	 * @returns	{Number}
	 */
	getSize : function() {
		return this.system.config.options.system.debris.side;
	},
	
	/**
	 * main event handler
	 * 
	 * all registered events will processed here
	 * 
	 * @param Element.Event eventObject
	 * @param Hash params
	 * 
	 * return boolean
	 */
	eventHandler : function(eventObject, params) {
		//call parent
		this.parent(eventObject, params);
		//get action
		var action = params.get('action');
		//
		if(!action) {
			// ERROR HANDLING
		}
		//
		switch(action) {
			case 'click':
				this.system.systemElementClicked(this);
				break;
			case 'mousewheel':
				if(eventObject.wheel > 0){
					this.system.systemElementClicked(this);
				}
				new Event(eventObject).stop();
				break;
		}
	}
});